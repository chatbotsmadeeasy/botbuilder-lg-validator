(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const LG = require('botbuilder-lg')

const templateName = "TemplateToTest"

window.validateLG = function(fnTemplate, fnObject) {
    const lgResource = new LG.LGResource(null, null, `# ${templateName} \r\n ${fnTemplate}`)

    const generatedTemplates = LG.Templates.parseResource(lgResource)

    return generatedTemplates.evaluate(templateName, fnObject)
}
},{"botbuilder-lg":173}],2:[function(require,module,exports){
(function (global){(function (){
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).AEL=t()}}((function(){return function t(e,r,n){function i(s,a){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=r[s]={exports:{}};e[s][0].call(c.exports,(function(t){return i(e[s][1][t]||t)}),c,c.exports,t,e,r,n)}return r[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(181)),n(t(167)),n(t(179)),n(t(180)),n(t(192)),n(t(193)),n(t(214)),n(t(199)),n(t(166)),n(t(204)),n(t(209)),n(t(201)),n(t(212)),n(t(178)),n(t(194)),n(t(172)),n(t(186));var i=t(68);r.NumberTransformEvaluator=i.NumberTransformEvaluator,r.NumericEvaluator=i.NumericEvaluator,r.StringTransformEvaluator=i.StringTransformEvaluator,r.ComparisonEvaluator=i.ComparisonEvaluator,r.MultivariateNumericEvaluator=i.MultivariateNumericEvaluator,r.TimeTransformEvaluator=i.TimeTransformEvaluator,n(t(196)),n(t(213)),n(t(200)),n(t(216))},{166:166,167:167,172:172,178:178,179:179,180:180,181:181,186:186,192:192,193:193,194:194,196:196,199:199,200:200,201:201,204:204,209:209,212:212,213:213,214:214,216:216,68:68}],192:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{}n.Add="+",n.Subtract="-",n.Multiply="*",n.Divide="/",n.Min="min",n.Max="max",n.Power="^",n.Mod="%",n.Average="average",n.Sum="sum",n.Count="count",n.Range="range",n.Floor="floor",n.Ceiling="ceiling",n.Round="round",n.Abs="abs",n.Sqrt="sqrt",n.LessThan="<",n.LessThanOrEqual="<=",n.Equal="==",n.NotEqual="!=",n.GreaterThan=">",n.GreaterThanOrEqual=">=",n.Exists="exists",n.Contains="contains",n.Empty="empty",n.And="&&",n.Or="||",n.Not="!",n.Concat="concat",n.Length="length",n.Replace="replace",n.ReplaceIgnoreCase="replaceIgnoreCase",n.Split="split",n.Substring="substring",n.ToLower="toLower",n.ToUpper="toUpper",n.Trim="trim",n.Join="join",n.EndsWith="endsWith",n.StartsWith="startsWith",n.CountWord="countWord",n.AddOrdinal="addOrdinal",n.NewGuid="newGuid",n.IndexOf="indexOf",n.LastIndexOf="lastIndexOf",n.EOL="EOL",n.SentenceCase="sentenceCase",n.TitleCase="titleCase",n.AddDays="addDays",n.AddHours="addHours",n.AddMinutes="addMinutes",n.AddSeconds="addSeconds",n.DayOfMonth="dayOfMonth",n.DayOfWeek="dayOfWeek",n.DayOfYear="dayOfYear",n.Month="month",n.Date="date",n.Year="year",n.UtcNow="utcNow",n.FormatDateTime="formatDateTime",n.FormatEpoch="formatEpoch",n.FormatTicks="formatTicks",n.SubtractFromTime="subtractFromTime",n.DateReadBack="dateReadBack",n.GetTimeOfDay="getTimeOfDay",n.GetFutureTime="getFutureTime",n.GetPastTime="getPastTime",n.ConvertFromUTC="convertFromUTC",n.ConvertToUTC="convertToUTC",n.AddToTime="addToTime",n.StartOfDay="startOfDay",n.StartOfHour="startOfHour",n.StartOfMonth="startOfMonth",n.Ticks="ticks",n.TicksToDays="ticksToDays",n.TicksToHours="ticksToHours",n.TicksToMinutes="ticksToMinutes",n.DateTimeDiff="dateTimeDiff",n.IsDefinite="isDefinite",n.IsTime="isTime",n.IsDuration="isDuration",n.IsDate="isDate",n.IsTimeRange="isTimeRange",n.IsDateRange="isDateRange",n.IsPresent="isPresent",n.GetNextViableDate="getNextViableDate",n.GetPreviousViableDate="getPreviousViableDate",n.GetNextViableTime="getNextViableTime",n.GetPreviousViableTime="getPreviousViableTime",n.TimexResolve="resolve",n.Float="float",n.Int="int",n.String="string",n.Bool="bool",n.Binary="binary",n.Base64="base64",n.Base64ToBinary="base64ToBinary",n.Base64ToString="base64ToString",n.DataUri="dataUri",n.DataUriToBinary="dataUriToBinary",n.DataUriToString="dataUriToString",n.UriComponent="uriComponent",n.UriComponentToString="uriComponentToString",n.FormatNumber="formatNumber",n.JsonStringify="jsonStringify",n.Accessor="Accessor",n.Element="Element",n.CreateArray="createArray",n.First="first",n.Last="last",n.Foreach="foreach",n.Select="select",n.Where="where",n.Union="union",n.Intersection="intersection",n.Skip="skip",n.Take="take",n.FilterNotEqual="filterNotEqual",n.SubArray="subArray",n.SortBy="sortBy",n.SortByDescending="sortByDescending",n.IndicesAndValues="indicesAndValues",n.Flatten="flatten",n.Unique="unique",n.Reverse="reverse",n.Any="any",n.All="all",n.Constant="Constant",n.Lambda="Lambda",n.If="if",n.Rand="rand",n.Json="json",n.AddProperty="addProperty",n.RemoveProperty="removeProperty",n.SetProperty="setProperty",n.GetProperty="getProperty",n.Coalesce="coalesce",n.JPath="jPath",n.SetPathToValue="setPathToValue",n.Merge="merge",n.XML="xml",n.XPath="xPath",n.UriHost="uriHost",n.UriPath="uriPath",n.UriPathAndQuery="uriPathAndQuery",n.UriPort="uriPort",n.UriQuery="uriQuery",n.UriScheme="uriScheme",n.IsMatch="isMatch",n.IsString="isString",n.IsInteger="isInteger",n.IsArray="isArray",n.IsObject="isObject",n.IsFloat="isFloat",n.IsDateTime="isDateTime",n.IsBoolean="isBoolean",n.StringOrValue="stringOrValue",n.Ignore="ignore",n.Optional="optional",r.ExpressionType=n},{}],193:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Extensions=class{static isMemoryInterface(t){return void 0!==t&&"object"==typeof t&&"getValue"in t&&"setValue"in t&&"version"in t&&"function"==typeof t.getValue&&"function"==typeof t.setValue&&"function"==typeof t.version}static randomNext(t,e,r){const n=t.getValue("Conversation.TestOptions.randomValue");return void 0!==n?e+n%(r-e):Math.floor(e+Math.random()*(r-e))}}},{}],214:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{static ianaToWindows(t){return this.loadData(),this.ianaToWindowsMap.has(t)?this.ianaToWindowsMap.get(t):t}static windowsToIana(t){return this.loadData(),this.windowsToIanaMap.has("001|"+t)?this.windowsToIanaMap.get("001|"+t):t}static verifyTimeZoneStr(t){return this.loadData(),this.validTimezonStr.includes(t)}static loadData(){const t=this.mappingString.split(this.seperator);for(const e of t){const t=e.split(","),r=t[0],n=t[1],i=t[2].split(" ");for(const e of i)this.ianaToWindowsMap.has(e)||this.ianaToWindowsMap.set(e,r),this.validTimezonStr.includes(e)||this.validTimezonStr.push(e);this.windowsToIanaMap.has(`${n}|${r}`)||this.windowsToIanaMap.set(`${n}|${r}`,i[0]),this.validTimezonStr.includes(r)||this.validTimezonStr.push(r)}}}n.ianaToWindowsMap=new Map,n.windowsToIanaMap=new Map,n.validTimezonStr=[],n.seperator="    ",n.mappingString="AUS Central Standard Time,001,Australia/Darwin    AUS Central Standard Time,AU,Australia/Darwin    AUS Eastern Standard Time,001,Australia/Sydney    AUS Eastern Standard Time,AU,Australia/Sydney Australia/Melbourne    Afghanistan Standard Time,001,Asia/Kabul    Afghanistan Standard Time,AF,Asia/Kabul    Alaskan Standard Time,001,America/Anchorage    Alaskan Standard Time,US,America/Anchorage America/Juneau America/Metlakatla America/Nome America/Sitka America/Yakutat    Aleutian Standard Time,001,America/Adak    Aleutian Standard Time,US,America/Adak    Altai Standard Time,001,Asia/Barnaul    Altai Standard Time,RU,Asia/Barnaul    Arab Standard Time,001,Asia/Riyadh    Arab Standard Time,BH,Asia/Qatar    Arab Standard Time,KW,Asia/Riyadh    Arab Standard Time,QA,Asia/Qatar    Arab Standard Time,SA,Asia/Riyadh    Arab Standard Time,YE,Asia/Riyadh    Arabian Standard Time,001,Asia/Dubai    Arabian Standard Time,AE,Asia/Dubai    Arabian Standard Time,OM,Asia/Dubai    Arabian Standard Time,ZZ,Etc/GMT-4    Arabic Standard Time,001,Asia/Baghdad    Arabic Standard Time,IQ,Asia/Baghdad    Argentina Standard Time,001,America/Argentina/Buenos_Aires    Argentina Standard Time,AR,America/Argentina/Buenos_Aires America/Argentina/La_Rioja America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/Mendoza    Astrakhan Standard Time,001,Europe/Astrakhan    Astrakhan Standard Time,RU,Europe/Astrakhan Europe/Ulyanovsk    Atlantic Standard Time,001,America/Halifax    Atlantic Standard Time,BM,Atlantic/Bermuda    Atlantic Standard Time,CA,America/Halifax America/Glace_Bay America/Goose_Bay America/Moncton    Atlantic Standard Time,GL,America/Thule    Aus Central W. Standard Time,001,Australia/Eucla    Aus Central W. Standard Time,AU,Australia/Eucla    Azerbaijan Standard Time,001,Asia/Baku    Azerbaijan Standard Time,AZ,Asia/Baku    Azores Standard Time,001,Atlantic/Azores    Azores Standard Time,GL,America/Scoresbysund    Azores Standard Time,PT,Atlantic/Azores    Bahia Standard Time,001,America/Bahia    Bahia Standard Time,BR,America/Bahia    Bangladesh Standard Time,001,Asia/Dhaka    Bangladesh Standard Time,BD,Asia/Dhaka    Bangladesh Standard Time,BT,Asia/Thimphu    Belarus Standard Time,001,Europe/Minsk    Belarus Standard Time,BY,Europe/Minsk    Bougainville Standard Time,001,Pacific/Bougainville    Bougainville Standard Time,PG,Pacific/Bougainville    Canada Central Standard Time,001,America/Regina    Canada Central Standard Time,CA,America/Regina America/Swift_Current    Cape Verde Standard Time,001,Atlantic/Cape_Verde    Cape Verde Standard Time,CV,Atlantic/Cape_Verde    Cape Verde Standard Time,ZZ,Etc/GMT+1    Caucasus Standard Time,001,Asia/Yerevan    Caucasus Standard Time,AM,Asia/Yerevan    Cen. Australia Standard Time,001,Australia/Adelaide    Cen. Australia Standard Time,AU,Australia/Adelaide Australia/Broken_Hill    Central America Standard Time,001,America/Guatemala    Central America Standard Time,BZ,America/Belize    Central America Standard Time,CR,America/Costa_Rica    Central America Standard Time,EC,Pacific/Galapagos    Central America Standard Time,GT,America/Guatemala    Central America Standard Time,HN,America/Tegucigalpa    Central America Standard Time,NI,America/Managua    Central America Standard Time,SV,America/El_Salvador    Central America Standard Time,ZZ,Etc/GMT+6    Central Asia Standard Time,001,Asia/Almaty    Central Asia Standard Time,AQ,Antarctica/Vostok    Central Asia Standard Time,CN,Asia/Urumqi    Central Asia Standard Time,DG,Indian/Chagos    Central Asia Standard Time,IO,Indian/Chagos    Central Asia Standard Time,KG,Asia/Bishkek    Central Asia Standard Time,KZ,Asia/Almaty Asia/Qyzylorda    Central Asia Standard Time,ZZ,Etc/GMT-6    Central Brazilian Standard Time,001,America/Cuiaba    Central Brazilian Standard Time,BR,America/Cuiaba America/Campo_Grande    Central Europe Standard Time,001,Europe/Budapest    Central Europe Standard Time,AL,Europe/Tirane    Central Europe Standard Time,CZ,Europe/Prague    Central Europe Standard Time,HU,Europe/Budapest    Central Europe Standard Time,ME,Europe/Belgrade    Central Europe Standard Time,RS,Europe/Belgrade    Central Europe Standard Time,SI,Europe/Belgrade    Central Europe Standard Time,SK,Europe/Prague    Central Europe Standard Time,XK,Europe/Belgrade    Central European Standard Time,001,Europe/Warsaw    Central European Standard Time,BA,Europe/Belgrade    Central European Standard Time,HR,Europe/Belgrade    Central European Standard Time,MK,Europe/Belgrade    Central European Standard Time,PL,Europe/Warsaw    Central Pacific Standard Time,001,Pacific/Guadalcanal    Central Pacific Standard Time,AU,Antarctica/Macquarie    Central Pacific Standard Time,FM,Pacific/Pohnpei Pacific/Kosrae    Central Pacific Standard Time,NC,Pacific/Noumea    Central Pacific Standard Time,SB,Pacific/Guadalcanal    Central Pacific Standard Time,VU,Pacific/Efate    Central Pacific Standard Time,ZZ,Etc/GMT-11    Central Standard Time (Mexico),001,America/Mexico_City    Central Standard Time (Mexico),MX,America/Mexico_City America/Bahia_Banderas America/Merida America/Monterrey    Central Standard Time,001,America/Chicago    Central Standard Time,CA,America/Winnipeg America/Rainy_River America/Rankin_Inlet America/Resolute    Central Standard Time,MX,America/Matamoros    Central Standard Time,US,America/Chicago America/Indiana/Knox America/Indiana/Tell_City America/Menominee America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem    Central Standard Time,ZZ,CST6CDT    Chatham Islands Standard Time,001,Pacific/Chatham    Chatham Islands Standard Time,NZ,Pacific/Chatham    China Standard Time,001,Asia/Shanghai    China Standard Time,CN,Asia/Shanghai    China Standard Time,HK,Asia/Hong_Kong    China Standard Time,MO,Asia/Macau    Cuba Standard Time,001,America/Havana    Cuba Standard Time,CU,America/Havana    Dateline Standard Time,001,Etc/GMT+12    Dateline Standard Time,ZZ,Etc/GMT+12    E. Africa Standard Time,001,Africa/Nairobi    E. Africa Standard Time,AQ,Antarctica/Syowa    E. Africa Standard Time,DJ,Africa/Nairobi    E. Africa Standard Time,ER,Africa/Nairobi    E. Africa Standard Time,ET,Africa/Nairobi    E. Africa Standard Time,KE,Africa/Nairobi    E. Africa Standard Time,KM,Africa/Nairobi    E. Africa Standard Time,MG,Africa/Nairobi    E. Africa Standard Time,SO,Africa/Nairobi    E. Africa Standard Time,SS,Africa/Juba    E. Africa Standard Time,TZ,Africa/Nairobi    E. Africa Standard Time,UG,Africa/Nairobi    E. Africa Standard Time,YT,Africa/Nairobi    E. Africa Standard Time,ZZ,Etc/GMT-3    E. Australia Standard Time,001,Australia/Brisbane    E. Australia Standard Time,AU,Australia/Brisbane Australia/Lindeman    E. Europe Standard Time,001,Europe/Chisinau    E. Europe Standard Time,MD,Europe/Chisinau    E. South America Standard Time,001,America/Sao_Paulo    E. South America Standard Time,BR,America/Sao_Paulo    Easter Island Standard Time,001,Pacific/Easter    Easter Island Standard Time,CL,Pacific/Easter    Eastern Standard Time (Mexico),001,America/Cancun    Eastern Standard Time (Mexico),MX,America/Cancun    Eastern Standard Time,001,America/New_York    Eastern Standard Time,BS,America/Nassau    Eastern Standard Time,CA,America/Toronto America/Iqaluit America/Nipigon America/Pangnirtung America/Thunder_Bay    Eastern Standard Time,US,America/New_York America/Detroit America/Indiana/Petersburg America/Indiana/Vincennes America/Indiana/Winamac America/Kentucky/Monticello America/Kentucky/Louisville    Eastern Standard Time,ZZ,EST5EDT    Egypt Standard Time,001,Africa/Cairo    Egypt Standard Time,EG,Africa/Cairo    Ekaterinburg Standard Time,001,Asia/Yekaterinburg    Ekaterinburg Standard Time,RU,Asia/Yekaterinburg    FLE Standard Time,001,Europe/Kiev    FLE Standard Time,AX,Europe/Helsinki    FLE Standard Time,BG,Europe/Sofia    FLE Standard Time,EE,Europe/Tallinn    FLE Standard Time,FI,Europe/Helsinki    FLE Standard Time,LT,Europe/Vilnius    FLE Standard Time,LV,Europe/Riga    FLE Standard Time,UA,Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye    Fiji Standard Time,001,Pacific/Fiji    Fiji Standard Time,FJ,Pacific/Fiji    GMT Standard Time,001,Europe/London    GMT Standard Time,ES,Atlantic/Canary    GMT Standard Time,FO,Atlantic/Faroe    GMT Standard Time,GB,Europe/London    GMT Standard Time,GG,Europe/London    GMT Standard Time,IC,Atlantic/Canary    GMT Standard Time,IE,Europe/Dublin    GMT Standard Time,IM,Europe/London    GMT Standard Time,JE,Europe/London    GMT Standard Time,PT,Europe/Lisbon Atlantic/Madeira    GTB Standard Time,001,Europe/Bucharest    GTB Standard Time,CY,Asia/Nicosia Asia/Famagusta    GTB Standard Time,GR,Europe/Athens    GTB Standard Time,RO,Europe/Bucharest    Georgian Standard Time,001,Asia/Tbilisi    Georgian Standard Time,GE,Asia/Tbilisi    Greenland Standard Time,001,America/Godthab    Greenland Standard Time,GL,America/Godthab    Greenwich Standard Time,001,Atlantic/Reykjavik    Greenwich Standard Time,AC,Atlantic/St_Helena    Greenwich Standard Time,BF,Africa/Abidjan    Greenwich Standard Time,CI,Africa/Abidjan    Greenwich Standard Time,GH,Africa/Accra    Greenwich Standard Time,GM,Africa/Abidjan    Greenwich Standard Time,GN,Africa/Abidjan    Greenwich Standard Time,GW,Africa/Bissau    Greenwich Standard Time,IS,Atlantic/Reykjavik    Greenwich Standard Time,LR,Africa/Monrovia    Greenwich Standard Time,ML,Africa/Abidjan    Greenwich Standard Time,MR,Africa/Abidjan    Greenwich Standard Time,SH,Africa/Abidjan    Greenwich Standard Time,SL,Africa/Abidjan    Greenwich Standard Time,SN,Africa/Abidjan    Greenwich Standard Time,TA,Atlantic/St_Helena    Greenwich Standard Time,TG,Africa/Abidjan    Haiti Standard Time,001,America/Port-au-Prince    Haiti Standard Time,HT,America/Port-au-Prince    Hawaiian Standard Time,001,Pacific/Honolulu    Hawaiian Standard Time,CK,Pacific/Rarotonga    Hawaiian Standard Time,PF,Pacific/Tahiti    Hawaiian Standard Time,UM,Pacific/Honolulu    Hawaiian Standard Time,US,Pacific/Honolulu    Hawaiian Standard Time,ZZ,Etc/GMT+10    India Standard Time,001,Asia/Kolkata    India Standard Time,IN,Asia/Kolkata    Iran Standard Time,001,Asia/Tehran    Iran Standard Time,IR,Asia/Tehran    Israel Standard Time,001,Asia/Jerusalem    Israel Standard Time,IL,Asia/Jerusalem    Jordan Standard Time,001,Asia/Amman    Jordan Standard Time,JO,Asia/Amman    Kaliningrad Standard Time,001,Europe/Kaliningrad    Kaliningrad Standard Time,RU,Europe/Kaliningrad    Kamchatka Standard Time,001,Asia/Kamchatka    Korea Standard Time,001,Asia/Seoul    Korea Standard Time,KR,Asia/Seoul    Libya Standard Time,001,Africa/Tripoli    Libya Standard Time,LY,Africa/Tripoli    Line Islands Standard Time,001,Pacific/Kiritimati    Line Islands Standard Time,KI,Pacific/Kiritimati    Line Islands Standard Time,ZZ,Etc/GMT-14    Lord Howe Standard Time,001,Australia/Lord_Howe    Lord Howe Standard Time,AU,Australia/Lord_Howe    Magadan Standard Time,001,Asia/Magadan    Magadan Standard Time,RU,Asia/Magadan    Magallanes Standard Time,001,America/Punta_Arenas    Magallanes Standard Time,AQ,Antarctica/Palmer    Magallanes Standard Time,CL,America/Punta_Arenas    Marquesas Standard Time,001,Pacific/Marquesas    Marquesas Standard Time,PF,Pacific/Marquesas    Mauritius Standard Time,001,Indian/Mauritius    Mauritius Standard Time,MU,Indian/Mauritius    Mauritius Standard Time,RE,Indian/Reunion    Mauritius Standard Time,SC,Indian/Mahe    Mid-Atlantic Standard Time,001,Etc/GMT+2    Middle East Standard Time,001,Asia/Beirut    Middle East Standard Time,LB,Asia/Beirut    Montevideo Standard Time,001,America/Montevideo    Montevideo Standard Time,UY,America/Montevideo    Morocco Standard Time,001,Africa/Casablanca    Morocco Standard Time,EH,Africa/El_Aaiun    Morocco Standard Time,MA,Africa/Casablanca    Mountain Standard Time (Mexico),001,America/Chihuahua    Mountain Standard Time (Mexico),MX,America/Chihuahua America/Mazatlan    Mountain Standard Time,001,America/Denver    Mountain Standard Time,CA,America/Edmonton America/Cambridge_Bay America/Inuvik America/Yellowknife    Mountain Standard Time,MX,America/Ojinaga    Mountain Standard Time,US,America/Denver America/Boise    Mountain Standard Time,ZZ,MST7MDT    Myanmar Standard Time,001,Asia/Yangon    Myanmar Standard Time,CC,Indian/Cocos    Myanmar Standard Time,MM,Asia/Yangon    N. Central Asia Standard Time,001,Asia/Novosibirsk    N. Central Asia Standard Time,RU,Asia/Novosibirsk    Namibia Standard Time,001,Africa/Windhoek    Namibia Standard Time,NA,Africa/Windhoek    Nepal Standard Time,001,Asia/Kathmandu    Nepal Standard Time,NP,Asia/Kathmandu    New Zealand Standard Time,001,Pacific/Auckland    New Zealand Standard Time,AQ,Pacific/Auckland    New Zealand Standard Time,NZ,Pacific/Auckland    Newfoundland Standard Time,001,America/St_Johns    Newfoundland Standard Time,CA,America/St_Johns    Norfolk Standard Time,001,Pacific/Norfolk    Norfolk Standard Time,NF,Pacific/Norfolk    North Asia East Standard Time,001,Asia/Irkutsk    North Asia East Standard Time,RU,Asia/Irkutsk    North Asia Standard Time,001,Asia/Krasnoyarsk    North Asia Standard Time,RU,Asia/Krasnoyarsk Asia/Novokuznetsk    North Korea Standard Time,001,Asia/Pyongyang    North Korea Standard Time,KP,Asia/Pyongyang    Omsk Standard Time,001,Asia/Omsk    Omsk Standard Time,RU,Asia/Omsk    Pacific SA Standard Time,001,America/Santiago    Pacific SA Standard Time,CL,America/Santiago    Pacific Standard Time (Mexico),001,America/Tijuana    Pacific Standard Time (Mexico),MX,America/Tijuana    Pacific Standard Time,001,America/Los_Angeles    Pacific Standard Time,CA,America/Vancouver America/Dawson America/Whitehorse    Pacific Standard Time,US,America/Los_Angeles    Pacific Standard Time,ZZ,PST8PDT    Pakistan Standard Time,001,Asia/Karachi    Pakistan Standard Time,PK,Asia/Karachi    Paraguay Standard Time,001,America/Asuncion    Paraguay Standard Time,PY,America/Asuncion    Romance Standard Time,001,Europe/Paris    Romance Standard Time,BE,Europe/Brussels    Romance Standard Time,DK,Europe/Copenhagen    Romance Standard Time,EA,Africa/Ceuta    Romance Standard Time,ES,Europe/Madrid Africa/Ceuta    Romance Standard Time,FR,Europe/Paris    Russia Time Zone 10,001,Asia/Srednekolymsk    Russia Time Zone 10,RU,Asia/Srednekolymsk    Russia Time Zone 11,001,Asia/Kamchatka    Russia Time Zone 11,RU,Asia/Kamchatka Asia/Anadyr    Russia Time Zone 3,001,Europe/Samara    Russia Time Zone 3,RU,Europe/Samara    Russian Standard Time,001,Europe/Moscow    Russian Standard Time,RU,Europe/Moscow Europe/Kirov Europe/Volgograd    Russian Standard Time,UA,Europe/Simferopol    SA Eastern Standard Time,001,America/Cayenne    SA Eastern Standard Time,AQ,Antarctica/Rothera    SA Eastern Standard Time,BR,America/Fortaleza America/Belem America/Maceio America/Recife America/Santarem    SA Eastern Standard Time,FK,Atlantic/Stanley    SA Eastern Standard Time,GF,America/Cayenne    SA Eastern Standard Time,SR,America/Paramaribo    SA Eastern Standard Time,ZZ,Etc/GMT+3    SA Pacific Standard Time,001,America/Bogota    SA Pacific Standard Time,BR,America/Rio_Branco America/Eirunepe    SA Pacific Standard Time,CA,America/Atikokan    SA Pacific Standard Time,CO,America/Bogota    SA Pacific Standard Time,EC,America/Guayaquil    SA Pacific Standard Time,JM,America/Jamaica    SA Pacific Standard Time,KY,America/Panama    SA Pacific Standard Time,PA,America/Panama    SA Pacific Standard Time,PE,America/Lima    SA Pacific Standard Time,ZZ,Etc/GMT+5    SA Western Standard Time,001,America/La_Paz    SA Western Standard Time,AG,America/Port_of_Spain    SA Western Standard Time,AI,America/Port_of_Spain    SA Western Standard Time,AW,America/Curacao    SA Western Standard Time,BB,America/Barbados    SA Western Standard Time,BL,America/Port_of_Spain    SA Western Standard Time,BO,America/La_Paz    SA Western Standard Time,BQ,America/Curacao    SA Western Standard Time,BR,America/Manaus America/Boa_Vista America/Porto_Velho    SA Western Standard Time,CA,America/Blanc-Sablon    SA Western Standard Time,CW,America/Curacao    SA Western Standard Time,DM,America/Port_of_Spain    SA Western Standard Time,DO,America/Santo_Domingo    SA Western Standard Time,GD,America/Port_of_Spain    SA Western Standard Time,GP,America/Port_of_Spain    SA Western Standard Time,GY,America/Guyana    SA Western Standard Time,KN,America/Port_of_Spain    SA Western Standard Time,LC,America/Port_of_Spain    SA Western Standard Time,MF,America/Port_of_Spain    SA Western Standard Time,MQ,America/Martinique    SA Western Standard Time,MS,America/Port_of_Spain    SA Western Standard Time,PR,America/Puerto_Rico    SA Western Standard Time,SX,America/Curacao    SA Western Standard Time,TT,America/Port_of_Spain    SA Western Standard Time,VC,America/Port_of_Spain    SA Western Standard Time,VG,America/Port_of_Spain    SA Western Standard Time,VI,America/Port_of_Spain    SA Western Standard Time,ZZ,Etc/GMT+4    SE Asia Standard Time,001,Asia/Bangkok    SE Asia Standard Time,AQ,Antarctica/Davis    SE Asia Standard Time,CX,Indian/Christmas    SE Asia Standard Time,ID,Asia/Jakarta Asia/Pontianak    SE Asia Standard Time,KH,Asia/Bangkok    SE Asia Standard Time,LA,Asia/Bangkok    SE Asia Standard Time,TH,Asia/Bangkok    SE Asia Standard Time,VN,Asia/Ho_Chi_Minh    SE Asia Standard Time,ZZ,Etc/GMT-7    Saint Pierre Standard Time,001,America/Miquelon    Saint Pierre Standard Time,PM,America/Miquelon    Sakhalin Standard Time,001,Asia/Sakhalin    Sakhalin Standard Time,RU,Asia/Sakhalin    Samoa Standard Time,001,Pacific/Apia    Samoa Standard Time,WS,Pacific/Apia    Sao Tome Standard Time,001,Africa/Sao_Tome    Sao Tome Standard Time,ST,Africa/Sao_Tome    Saratov Standard Time,001,Europe/Saratov    Saratov Standard Time,RU,Europe/Saratov    Singapore Standard Time,001,Asia/Singapore    Singapore Standard Time,BN,Asia/Brunei    Singapore Standard Time,ID,Asia/Makassar    Singapore Standard Time,MY,Asia/Kuala_Lumpur Asia/Kuching    Singapore Standard Time,PH,Asia/Manila    Singapore Standard Time,SG,Asia/Singapore    Singapore Standard Time,ZZ,Etc/GMT-8    South Africa Standard Time,001,Africa/Johannesburg    South Africa Standard Time,BI,Africa/Maputo    South Africa Standard Time,BW,Africa/Maputo    South Africa Standard Time,CD,Africa/Maputo    South Africa Standard Time,LS,Africa/Johannesburg    South Africa Standard Time,MW,Africa/Maputo    South Africa Standard Time,MZ,Africa/Maputo    South Africa Standard Time,RW,Africa/Maputo    South Africa Standard Time,SZ,Africa/Johannesburg    South Africa Standard Time,ZA,Africa/Johannesburg    South Africa Standard Time,ZM,Africa/Maputo    South Africa Standard Time,ZW,Africa/Maputo    South Africa Standard Time,ZZ,Etc/GMT-2    Sri Lanka Standard Time,001,Asia/Colombo    Sri Lanka Standard Time,LK,Asia/Colombo    Sudan Standard Time,001,Africa/Khartoum    Sudan Standard Time,SD,Africa/Khartoum    Syria Standard Time,001,Asia/Damascus    Syria Standard Time,SY,Asia/Damascus    Taipei Standard Time,001,Asia/Taipei    Taipei Standard Time,TW,Asia/Taipei    Tasmania Standard Time,001,Australia/Hobart    Tasmania Standard Time,AU,Australia/Hobart Australia/Currie    Tocantins Standard Time,001,America/Araguaina    Tocantins Standard Time,BR,America/Araguaina    Tokyo Standard Time,001,Asia/Tokyo    Tokyo Standard Time,ID,Asia/Jayapura    Tokyo Standard Time,JP,Asia/Tokyo    Tokyo Standard Time,PW,Pacific/Palau    Tokyo Standard Time,TL,Asia/Dili    Tokyo Standard Time,ZZ,Etc/GMT-9    Tomsk Standard Time,001,Asia/Tomsk    Tomsk Standard Time,RU,Asia/Tomsk    Tonga Standard Time,001,Pacific/Tongatapu    Tonga Standard Time,TO,Pacific/Tongatapu    Transbaikal Standard Time,001,Asia/Chita    Transbaikal Standard Time,RU,Asia/Chita    Turkey Standard Time,001,Europe/Istanbul    Turkey Standard Time,TR,Europe/Istanbul    Turks And Caicos Standard Time,001,America/Grand_Turk    Turks And Caicos Standard Time,TC,America/Grand_Turk    US Eastern Standard Time,001,America/Indiana/Indianapolis    US Eastern Standard Time,US,America/Indiana/Indianapolis America/Indiana/Marengo America/Indiana/Vevay    US Mountain Standard Time,001,America/Phoenix    US Mountain Standard Time,CA,America/Dawson_Creek America/Creston America/Fort_Nelson    US Mountain Standard Time,MX,America/Hermosillo    US Mountain Standard Time,US,America/Phoenix    US Mountain Standard Time,ZZ,Etc/GMT+7    UTC+12,001,Etc/GMT-12    UTC+12,KI,Pacific/Tarawa    UTC+12,MH,Pacific/Majuro Pacific/Kwajalein    UTC+12,NR,Pacific/Nauru    UTC+12,TV,Pacific/Funafuti    UTC+12,UM,Pacific/Wake    UTC+12,WF,Pacific/Wallis    UTC+12,ZZ,Etc/GMT-12    UTC+13,001,Etc/GMT-13    UTC+13,KI,Pacific/Enderbury    UTC+13,TK,Pacific/Fakaofo    UTC+13,ZZ,Etc/GMT-13    UTC,001,Etc/UTC    UTC,GL,America/Danmarkshavn    UTC,ZZ,Etc/UTC    UTC-02,001,Etc/GMT+2    UTC-02,BR,America/Noronha    UTC-02,GS,Atlantic/South_Georgia    UTC-02,ZZ,Etc/GMT+2    UTC-08,001,Etc/GMT+8    UTC-08,PN,Pacific/Pitcairn    UTC-08,ZZ,Etc/GMT+8    UTC-09,001,Etc/GMT+9    UTC-09,PF,Pacific/Gambier    UTC-09,ZZ,Etc/GMT+9    UTC-11,001,Etc/GMT+11    UTC-11,AS,Pacific/Pago_Pago    UTC-11,NU,Pacific/Niue    UTC-11,UM,Pacific/Pago_Pago    UTC-11,ZZ,Etc/GMT+11    Ulaanbaatar Standard Time,001,Asia/Ulaanbaatar    Ulaanbaatar Standard Time,MN,Asia/Ulaanbaatar Asia/Choibalsan    Venezuela Standard Time,001,America/Caracas    Venezuela Standard Time,VE,America/Caracas    Vladivostok Standard Time,001,Asia/Vladivostok    Vladivostok Standard Time,RU,Asia/Vladivostok Asia/Ust-Nera    W. Australia Standard Time,001,Australia/Perth    W. Australia Standard Time,AQ,Antarctica/Casey    W. Australia Standard Time,AU,Australia/Perth    W. Central Africa Standard Time,001,Africa/Lagos    W. Central Africa Standard Time,AO,Africa/Lagos    W. Central Africa Standard Time,BJ,Africa/Lagos    W. Central Africa Standard Time,CD,Africa/Lagos    W. Central Africa Standard Time,CF,Africa/Lagos    W. Central Africa Standard Time,CG,Africa/Lagos    W. Central Africa Standard Time,CM,Africa/Lagos    W. Central Africa Standard Time,DZ,Africa/Algiers    W. Central Africa Standard Time,GA,Africa/Lagos    W. Central Africa Standard Time,GQ,Africa/Lagos    W. Central Africa Standard Time,NE,Africa/Lagos    W. Central Africa Standard Time,NG,Africa/Lagos    W. Central Africa Standard Time,TD,Africa/Ndjamena    W. Central Africa Standard Time,TN,Africa/Tunis    W. Central Africa Standard Time,ZZ,Etc/GMT-1    W. Europe Standard Time,001,Europe/Berlin    W. Europe Standard Time,AD,Europe/Andorra    W. Europe Standard Time,AT,Europe/Vienna    W. Europe Standard Time,CH,Europe/Zurich    W. Europe Standard Time,DE,Europe/Berlin Europe/Zurich    W. Europe Standard Time,GI,Europe/Gibraltar    W. Europe Standard Time,IT,Europe/Rome    W. Europe Standard Time,LI,Europe/Zurich    W. Europe Standard Time,LU,Europe/Luxembourg    W. Europe Standard Time,MC,Europe/Monaco    W. Europe Standard Time,MT,Europe/Malta    W. Europe Standard Time,NL,Europe/Amsterdam    W. Europe Standard Time,NO,Europe/Oslo    W. Europe Standard Time,SE,Europe/Stockholm    W. Europe Standard Time,SJ,Europe/Oslo    W. Europe Standard Time,SM,Europe/Rome    W. Europe Standard Time,VA,Europe/Rome    W. Mongolia Standard Time,001,Asia/Hovd    W. Mongolia Standard Time,MN,Asia/Hovd    West Asia Standard Time,001,Asia/Tashkent    West Asia Standard Time,AQ,Antarctica/Mawson    West Asia Standard Time,KZ,Asia/Oral Asia/Aqtau Asia/Aqtobe Asia/Atyrau    West Asia Standard Time,MV,Indian/Maldives    West Asia Standard Time,TF,Indian/Kerguelen    West Asia Standard Time,TJ,Asia/Dushanbe    West Asia Standard Time,TM,Asia/Ashgabat    West Asia Standard Time,UZ,Asia/Tashkent Asia/Samarkand    West Asia Standard Time,ZZ,Etc/GMT-5    West Bank Standard Time,001,Asia/Hebron    West Bank Standard Time,PS,Asia/Hebron Asia/Gaza    West Pacific Standard Time,001,Pacific/Port_Moresby    West Pacific Standard Time,AQ,Antarctica/DumontDUrville    West Pacific Standard Time,FM,Pacific/Chuuk    West Pacific Standard Time,GU,Pacific/Guam    West Pacific Standard Time,MP,Pacific/Guam    West Pacific Standard Time,PG,Pacific/Port_Moresby    West Pacific Standard Time,ZZ,Etc/GMT-10    Yakutsk Standard Time,001,Asia/Yakutsk    Yakutsk Standard Time,RU,Asia/Yakutsk Asia/Khandyga",r.TimeZoneConverter=n},{}],204:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Options=class{constructor(t){this.nullSubstitution=t?t.nullSubstitution:void 0,this.locale=t?t.locale:void 0}}},{}],212:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){throw Error("Regular expression is invalid.")}}n.Instance=new n,r.RegexErrorListener=n},{}],178:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),function(t){t[t.None=0]="None",t[t.LowerD1=1]="LowerD1",t[t.LowerD2=2]="LowerD2",t[t.LowerD3=3]="LowerD3",t[t.LowerD4=4]="LowerD4",t[t.LowerF1=5]="LowerF1",t[t.LowerF2=6]="LowerF2",t[t.LowerF3=7]="LowerF3",t[t.CapitalF1=8]="CapitalF1",t[t.CapitalF2=9]="CapitalF2",t[t.CapitalF3=10]="CapitalF3",t[t.LowerG=11]="LowerG",t[t.LowerH1=12]="LowerH1",t[t.LowerH2=13]="LowerH2",t[t.CapitalH1=14]="CapitalH1",t[t.CapitalH2=15]="CapitalH2",t[t.CapitalK=16]="CapitalK",t[t.LowerM1=17]="LowerM1",t[t.LowerM2=18]="LowerM2",t[t.CapitalM1=19]="CapitalM1",t[t.CapitalM2=20]="CapitalM2",t[t.CapitalM3=21]="CapitalM3",t[t.CapitalM4=22]="CapitalM4",t[t.LowerS1=23]="LowerS1",t[t.LowerS2=24]="LowerS2",t[t.LowerT1=25]="LowerT1",t[t.LowerT2=26]="LowerT2",t[t.LowerY1=27]="LowerY1",t[t.LowerY2=28]="LowerY2",t[t.LowerY3=29]="LowerY3",t[t.LowerY4=30]="LowerY4",t[t.LowerZ1=31]="LowerZ1",t[t.LowerZ2=32]="LowerZ2",t[t.LowerZ3=33]="LowerZ3",t[t.InSingleQuoteLiteral=34]="InSingleQuoteLiteral",t[t.InDoubleQuoteLiteral=35]="InDoubleQuoteLiteral",t[t.EscapeSequence=36]="EscapeSequence"}(n||(n={})),r.convertCSharpDateTimeToDayjs=function(t){let e="",r=n.None,i="";if(0===t.length)return e;if(1===t.length)switch(t){case"R":case"r":throw Error("RFC 1123 not supported  in Day.js");case"O":case"o":t="YYYY-MM-DDTHH:mm:ss.SSS0000Z";break;case"U":throw new Error("Universal Fulll Format not supported in Day.js");case"u":throw new Error("Universal Sortable Format not supported in Day.js")}const o=t=>{switch(r){case n.LowerD1:e+="D";break;case n.LowerD2:e+="DD";break;case n.LowerD3:e+="ddd";break;case n.LowerD4:e+="dddd";break;case n.LowerF1:case n.CapitalF1:throw Error("S not supported in Day.js");case n.LowerF2:case n.CapitalF2:throw Error("SS not supported in Day.js");case n.LowerF3:case n.CapitalF3:e+="SSS";break;case n.LowerG:throw Error("Era not supported in Day.js");case n.LowerH1:e+="h";break;case n.LowerH2:e+="hh";break;case n.CapitalH1:e+="H";break;case n.CapitalH2:e+="HH";break;case n.LowerM1:e+="m";break;case n.LowerM2:e+="mm";break;case n.CapitalM1:e+="M";break;case n.CapitalM2:e+="MM";break;case n.CapitalM3:e+="MMM";break;case n.CapitalM4:e+="MMMM";break;case n.LowerS1:e+="s";break;case n.LowerS2:e+="ss";break;case n.LowerT1:case n.LowerT2:e+="A";break;case n.LowerY1:case n.LowerY2:e+="YY";break;case n.LowerY3:case n.LowerY4:e+="YYYY";break;case n.LowerZ1:case n.LowerZ2:e+="ZZ";break;case n.LowerZ3:e+="Z";break;case n.InSingleQuoteLiteral:case n.InDoubleQuoteLiteral:case n.EscapeSequence:for(const t of i)e+=t}i="",r=t};for(const s of t)if(r===n.EscapeSequence)i+=s,o(n.None);else if(r===n.InDoubleQuoteLiteral)"`"===s?o(n.None):i+=s;else if(r===n.InSingleQuoteLiteral)"'"===s?o(n.None):i+=s;else switch(s){case"d":switch(r){case n.LowerD1:r=n.LowerD2;break;case n.LowerD2:r=n.LowerD3;break;case n.LowerD3:r=n.LowerD4;break;case n.LowerD4:break;default:o(n.LowerD1)}break;case"f":switch(r){case n.LowerF1:r=n.LowerF2;break;case n.LowerF2:r=n.LowerF3;break;case n.LowerF3:break;default:o(n.LowerF1)}break;case"F":switch(r){case n.CapitalF1:r=n.CapitalF2;break;case n.CapitalF2:r=n.CapitalF3;break;case n.CapitalF3:break;default:o(n.CapitalF1)}break;case"g":switch(r){case n.LowerG:break;default:o(n.LowerG)}break;case"h":switch(r){case n.LowerH1:r=n.LowerH2;break;case n.LowerH2:break;default:o(n.LowerH1)}break;case"H":switch(r){case n.CapitalH1:r=n.CapitalH2;break;case n.CapitalH2:break;default:o(n.CapitalH1)}break;case"K":o(n.None),e+="Z";break;case"m":switch(r){case n.LowerM1:r=n.LowerM2;break;case n.LowerM2:break;default:o(n.LowerM1)}break;case"M":switch(r){case n.CapitalM1:r=n.CapitalM2;break;case n.CapitalM2:r=n.CapitalM3;break;case n.CapitalM3:r=n.CapitalM4;break;case n.CapitalM4:break;default:o(n.CapitalM1)}break;case"s":switch(r){case n.LowerS1:r=n.LowerS2;break;case n.LowerS2:break;default:o(n.LowerS1)}break;case"t":switch(r){case n.LowerT1:r=n.LowerT2;break;case n.LowerT2:break;default:o(n.LowerT1)}break;case"y":switch(r){case n.LowerY1:r=n.LowerY2;break;case n.LowerY2:r=n.LowerY3;break;case n.LowerY3:r=n.LowerY4;break;case n.LowerY4:break;default:o(n.LowerY1)}break;case"z":switch(r){case n.LowerZ1:r=n.LowerZ2;break;case n.LowerZ2:r=n.LowerZ3;break;case n.LowerZ3:break;default:o(n.LowerZ1)}break;case":":o(n.None),e+=":";break;case"/":o(n.None),e+="/";break;case"`":o(n.InDoubleQuoteLiteral);break;case"'":o(n.InSingleQuoteLiteral);break;case"%":o(n.None);break;case"\\":o(n.EscapeSequence);break;default:o(n.None),e+=s}if(r===n.EscapeSequence||r===n.InDoubleQuoteLiteral||r===n.InSingleQuoteLiteral)throw Error("Invalid Format String");return o(n.None),e}},{}],213:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.ReturnType||(r.ReturnType={}))[n.Boolean=1]="Boolean",n[n.Number=2]="Number",n[n.Object=4]="Object",n[n.String=8]="String",n[n.Array=16]="Array"},{}],200:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.localeInfo={"ar-MA":{currency:["\u062f.\u0645. ",""],decimal:",",thousands:".",grouping:[3]},"en-IN":{currency:["\u20b9",""],decimal:".",thousands:",",grouping:[3,2,2,2,2,2,2,2,2,2]},"ar-BH":{currency:[""," \u062f.\u0628."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-PS":{currency:["\u20aa ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"en-IE":{currency:["\u20ac",""],decimal:".",thousands:",",grouping:[3]},"it-IT":{currency:["\u20ac",""],decimal:",",thousands:".",grouping:[3]},"ar-EG":{currency:[""," \u062c.\u0645."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-IQ":{currency:[""," \u062f.\u0639."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-EH":{currency:["\u062f.\u0645. ",""],decimal:".",thousands:",",grouping:[3]},"ar-AE":{currency:[""," \u062f.\u0625."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-MR":{currency:[""," \u0623.\u0645."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"uk-UA":{currency:["","\xa0\u20b4."],decimal:",",thousands:"\xa0",grouping:[3]},"ca-ES":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"sv-SE":{currency:[""," kr"],decimal:",",thousands:"\xa0",grouping:[3]},"ja-JP":{currency:["","\u5186"],decimal:".",thousands:",",grouping:[3]},"es-ES":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"fi-FI":{currency:["","\xa0\u20ac"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-DZ":{currency:["\u062f.\u062c. ",""],decimal:",",thousands:".",grouping:[3]},"en-GB":{currency:["\xa3",""],decimal:".",thousands:",",grouping:[3]},"cs-CZ":{currency:["","\xa0K\u010d"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-TD":{currency:["\u200fFCFA ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"de-CH":{currency:["","\xa0CHF"],decimal:",",thousands:"'",grouping:[3]},"nl-NL":{currency:["\u20ac\xa0",""],decimal:",",thousands:".",grouping:[3]},"es-BO":{currency:["Bs\xa0",""],decimal:",",percent:"\u202f%",thousands:".",grouping:[3]},"ar-SY":{currency:[""," \u0644.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-JO":{currency:[""," \u062f.\u0623."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"en-CA":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-ER":{currency:["Nfk ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-LB":{currency:[""," \u0644.\u0644."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"fr-CA":{currency:["","$"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-TN":{currency:["\u062f.\u062a. ",""],decimal:",",thousands:".",grouping:[3]},"ar-YE":{currency:[""," \u0631.\u0649."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ru-RU":{currency:["","\xa0\u0440\u0443\u0431."],decimal:",",thousands:"\xa0",grouping:[3]},"en-US":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-SS":{currency:["\xa3 ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-SO":{currency:["\u200fS ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"hu-HU":{currency:["","\xa0Ft"],decimal:",",thousands:"\xa0",grouping:[3]},"pt-BR":{currency:["R$",""],decimal:",",thousands:".",grouping:[3]},"ar-DJ":{currency:["\u200fFdj ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-SD":{currency:[""," \u062c.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-001":{currency:["",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-LY":{currency:["\u062f.\u0644. ",""],decimal:",",thousands:".",grouping:[3]},"ar-SA":{currency:[""," \u0631.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-KW":{currency:[""," \u062f.\u0643."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"pl-PL":{currency:["","z\u0142"],decimal:",",thousands:".",grouping:[3]},"ar-QA":{currency:[""," \u0631.\u0642."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"mk-MK":{currency:["","\xa0\u0434\u0435\u043d."],decimal:",",thousands:".",grouping:[3]},"ko-KR":{currency:["\u20a9",""],decimal:".",thousands:",",grouping:[3]},"es-MX":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-IL":{currency:["\u20aa ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"zh-CN":{currency:["\xa5",""],decimal:".",thousands:",",grouping:[3]},"de-DE":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"ar-OM":{currency:[""," \u0631.\u0639."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"fr-FR":{currency:["","\xa0\u20ac"],decimal:",",percent:"\u202f%",thousands:"\xa0",grouping:[3]},"ar-KM":{currency:[""," \u0641.\u062c.\u0642."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"he-IL":{currency:["\u20aa",""],decimal:".",thousands:",",grouping:[3]}}},{}],167:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(213),o=t(180),s=t(192),a=t(196);r.Constant=class extends n.Expression{constructor(t){super(s.ExpressionType.Constant,new o.ExpressionEvaluator(s.ExpressionType.Constant,t=>({value:t.value,error:void 0}))),this.singleQuotRegex=new RegExp(/'(?!\\)/g),this.value=t}get value(){return this._value}set value(t){this.evaluator.returnType="string"==typeof t?i.ReturnType.String:"boolean"==typeof t?i.ReturnType.Boolean:a.FunctionUtils.isNumber(t)?i.ReturnType.Number:Array.isArray(t)?i.ReturnType.Array:i.ReturnType.Object,this._value=t}deepEquals(t){let e;if(t&&t.type===this.type){const r=t.value;e=this.value===r}else e=!1;return e}toString(){if(void 0===this.value)return"undefined";if(null===this.value)return"null";if("string"==typeof this.value){let t=this.value;return t=t.replace(/\\/g,"\\\\"),`'${t=this.reverseString(this.reverseString(t).replace(this.singleQuotRegex,()=>"'\\"))}'`}return a.FunctionUtils.isNumber(this.value)?this.value.toString():"object"==typeof this.value?JSON.stringify(this.value):this.value.toString()}reverseString(t){return t?t.split("").reverse().join(""):t}}},{179:179,180:180,192:192,196:196,213:213}],180:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(213);r.ExpressionEvaluator=class{constructor(t,e,r=n.ReturnType.Object,i){this.tryEvaluate=(t,e,r)=>this._evaluator(t,e,r),this.validateExpression=t=>this._validator(t),this.type=t,this._evaluator=e,this.returnType=r,this._validator=i||(t=>{})}get negation(){return this._negation}set negation(t){t._negation=this,this._negation=t}}},{213:213}],194:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(181),o=t(196);r.FunctionTable=class{constructor(){this.customFunctions=new Map}keys(){return Array.from(i.ExpressionFunctions.standardFunctions.keys()).concat(Array.from(this.customFunctions.keys()))[Symbol.iterator]()}values(){return Array.from(i.ExpressionFunctions.standardFunctions.values()).concat(Array.from(this.customFunctions.values()))[Symbol.iterator]()}get size(){return i.ExpressionFunctions.standardFunctions.size+this.customFunctions.size}get isReadOnly(){return!1}get(t){return i.ExpressionFunctions.standardFunctions.get(t)?i.ExpressionFunctions.standardFunctions.get(t):this.customFunctions.get(t)?this.customFunctions.get(t):void 0}set(t,e){if(i.ExpressionFunctions.standardFunctions.get(t))throw Error("You can't overwrite a built in function.");return this.customFunctions.set(t,e),this}add(t,e){1===arguments.length?t instanceof Object&&this.set(t.key,t.value):"string"==typeof t&&(e instanceof n.ExpressionEvaluator?this.set(t,e):this.set(t,new n.ExpressionEvaluator(t,o.FunctionUtils.apply(e))))}clear(){this.customFunctions.clear()}has(t){return i.ExpressionFunctions.standardFunctions.has(t)||this.customFunctions.has(t)}delete(t){return this.customFunctions.delete(t)}forEach(t,e){throw Error("forEach function not implemented")}entries(){throw Error("entries function not implemented")}get[Symbol.iterator](){throw Error("Symbol.iterator function not implemented")}get[Symbol.toStringTag](){throw Error("Symbol.toStringTag function not implemented")}}},{180:180,181:181,196:196}],181:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(68)),o=t(192);class s{static getStandardFunctions(){const t=[new i.Abs,new i.Accessor,new i.Add,new i.AddDays,new i.AddHours,new i.AddMinutes,new i.AddOrdinal,new i.AddProperty,new i.AddSeconds,new i.AddToTime,new i.All,new i.And,new i.Any,new i.Average,new i.Base64,new i.Base64ToBinary,new i.Base64ToString,new i.Binary,new i.Bool,new i.Ceiling,new i.Coalesce,new i.Concat,new i.Contains,new i.ConvertFromUTC,new i.ConvertToUTC,new i.Count,new i.CountWord,new i.CreateArray,new i.DataUri,new i.DataUriToBinary,new i.DataUriToString,new i.DateFunc,new i.DateReadBack,new i.DateTimeDiff,new i.DayOfMonth,new i.DayOfWeek,new i.DayOfYear,new i.Divide,new i.Element,new i.Empty,new i.EndsWith,new i.EOL,new i.Equal,new i.Exists,new i.Flatten,new i.First,new i.Float,new i.Floor,new i.Foreach,new i.FormatDateTime,new i.FormatEpoch,new i.FormatNumber,new i.FormatTicks,new i.GetFutureTime,new i.GetNextViableDate,new i.GetNextViableTime,new i.GetPastTime,new i.GetPreviousViableDate,new i.GetPreviousViableTime,new i.GetPastTime,new i.GetProperty,new i.GetTimeOfDay,new i.GreaterThan,new i.GreaterThanOrEqual,new i.If,new i.Ignore,new i.IndexOf,new i.IndicesAndValues,new i.Int,new i.Intersection,new i.IsArray,new i.IsBoolean,new i.IsDate,new i.IsDateRange,new i.IsDateTime,new i.IsDefinite,new i.IsDuration,new i.IsFloat,new i.IsInteger,new i.IsMatch,new i.IsObject,new i.IsPresent,new i.IsString,new i.IsTime,new i.IsTimeRange,new i.Join,new i.JPath,new i.Json,new i.JsonStringify,new i.Last,new i.LastIndexOf,new i.Length,new i.LessThan,new i.LessThanOrEqual,new i.Max,new i.Merge,new i.Min,new i.Mod,new i.Month,new i.Multiply,new i.NewGuid,new i.Not,new i.NotEqual,new i.Optional,new i.Or,new i.Power,new i.Rand,new i.Range,new i.RemoveProperty,new i.Replace,new i.ReplaceIgnoreCase,new i.Reverse,new i.Round,new i.Select,new i.SentenceCase,new i.SetPathToValue,new i.SetProperty,new i.Skip,new i.SortBy,new i.SortByDescending,new i.Split,new i.Sqrt,new i.StartOfDay,new i.StartOfHour,new i.StartOfMonth,new i.StartsWith,new i.String,new i.StringOrValue,new i.SubArray,new i.Substring,new i.Subtract,new i.SubtractFromTime,new i.Sum,new i.Take,new i.Ticks,new i.TicksToDays,new i.TicksToHours,new i.TicksToMinutes,new i.TimexResolve,new i.TitleCase,new i.ToLower,new i.ToUpper,new i.Trim,new i.Union,new i.Unique,new i.UriComponent,new i.UriComponentToString,new i.UriHost,new i.UriPath,new i.UriPathAndQuery,new i.UriPort,new i.UriQuery,new i.UriScheme,new i.UtcNow,new i.Where,new i.XML,new i.XPath,new i.Year],e=new Map;return t.forEach(t=>{e.set(t.type,t)}),e.get(o.ExpressionType.LessThan).negation=e.get(o.ExpressionType.GreaterThanOrEqual),e.get(o.ExpressionType.LessThanOrEqual).negation=e.get(o.ExpressionType.GreaterThan),e.get(o.ExpressionType.Equal).negation=e.get(o.ExpressionType.NotEqual),e.set("add",e.get(o.ExpressionType.Add)),e.set("mul",e.get(o.ExpressionType.Multiply)),e.set("div",e.get(o.ExpressionType.Divide)),e.set("sub",e.get(o.ExpressionType.Subtract)),e.set("exp",e.get(o.ExpressionType.Power)),e.set("mod",e.get(o.ExpressionType.Mod)),e.set("and",e.get(o.ExpressionType.And)),e.set("equals",e.get(o.ExpressionType.Equal)),e.set("greater",e.get(o.ExpressionType.GreaterThan)),e.set("greaterOrEquals",e.get(o.ExpressionType.GreaterThanOrEqual)),e.set("less",e.get(o.ExpressionType.LessThan)),e.set("lessOrEquals",e.get(o.ExpressionType.LessThanOrEqual)),e.set("not",e.get(o.ExpressionType.Not)),e.set("or",e.get(o.ExpressionType.Or)),e.set("&",e.get(o.ExpressionType.Concat)),e.set("??",e.get(o.ExpressionType.Coalesce)),e}}s.standardFunctions=s.getStandardFunctions(),r.ExpressionFunctions=s},{192:192,68:68}],179:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(167),i=t(180),o=t(192),s=t(193),a=t(194),u=t(201),l=t(204),c=t(209),h=t(213);class p{constructor(t,e,...r){if(this.validate=()=>this.evaluator.validateExpression(this),e)this.evaluator=e,this.children=r;else if(void 0!==t){if(!p.functions.get(t))throw Error(t+" does not have an evaluator, it's not a built-in function or a custom function.");this.evaluator=p.functions.get(t),this.children=r}}get returnType(){return this.evaluator.returnType}get type(){return this.evaluator.type}deepEquals(t){let e=!1;if(t&&(e=this.type===t.type))if(e=this.children.length===t.children.length,this.type===o.ExpressionType.And||this.type===o.ExpressionType.Or)for(let r=0;e&&r<this.children.length;r++){const r=this.children[0];let n=!1;for(let e=0;e<this.children.length;e++)if(r.deepEquals(t.children[e])){n=!0;break}e=n}else for(let r=0;e&&r<this.children.length;r++)e=this.children[r].deepEquals(t.children[r]);return e}references(){const{path:t,refs:e}=this.referenceWalk(this);return void 0!==t&&e.add(t),Array.from(e)}referenceWalk(t,e){let r,i=new Set;if(void 0===e||!e(t)){const s=t.children;if(t.type===o.ExpressionType.Accessor){const t=s[0].value;1===s.length&&(r=t),2===s.length&&(({path:r,refs:i}=this.referenceWalk(s[1],e)),void 0!==r&&(r=r.concat(".",t)))}else if(t.type===o.ExpressionType.Element){if(({path:r,refs:i}=this.referenceWalk(s[0],e)),void 0!==r)if(s[1]instanceof n.Constant){const t=s[1];t.returnType===h.ReturnType.String?r+="."+t.value:r+=`[${t.value}]`}else i.add(r);const t=this.referenceWalk(s[1],e),o=t.path,a=t.refs;i=new Set([...i,...a]),void 0!==o&&i.add(o)}else if(t.type===o.ExpressionType.Foreach||t.type===o.ExpressionType.Where||t.type===o.ExpressionType.Select){let t=this.referenceWalk(s[0],e);const r=t.path,n=t.refs;void 0!==r&&n.add(r);const o=(t=this.referenceWalk(s[2],e)).path,a=t.refs;void 0!==o&&a.add(o);const u=s[1].children[0].value,l=Array.from(a).filter(t=>!(t===u||t.startsWith(u+".")||t.startsWith(u+"[")));i=new Set([...i,...n,...l])}else for(const r of t.children){const t=this.referenceWalk(r,e),n=t.path,o=t.refs;i=new Set([...i,...o]),void 0!==n&&i.add(n)}}return{path:r,refs:i}}static parse(t,e){return new c.ExpressionParser(e||p.lookup).parse(t.replace(/^=/,""))}static lookup(t){const e=p.functions.get(t);if(e)return e}static makeExpression(t,e,...r){const n=new p(t,e,...r);return n.validate(),n}static lambaExpression(t){return new p(o.ExpressionType.Lambda,new i.ExpressionEvaluator(o.ExpressionType.Lambda,t))}static lambda(t){return new p(o.ExpressionType.Lambda,new i.ExpressionEvaluator(o.ExpressionType.Lambda,(e,r,n)=>{let i,o;try{i=t(r)}catch(s){o=s}return{value:i,error:o}}))}static setPathToValue(t,e){return e instanceof p?p.makeExpression(o.ExpressionType.SetPathToValue,void 0,t,e):p.makeExpression(o.ExpressionType.SetPathToValue,void 0,t,new n.Constant(e))}static equalsExpression(...t){return p.makeExpression(o.ExpressionType.Equal,void 0,...t)}static andExpression(...t){return t.length>1?p.makeExpression(o.ExpressionType.And,void 0,...t):t[0]}static orExpression(...t){return t.length>1?p.makeExpression(o.ExpressionType.Or,void 0,...t):t[0]}static notExpression(t){return p.makeExpression(o.ExpressionType.Not,void 0,t)}validateTree(){this.validate();for(const t of this.children)t.validateTree()}tryEvaluate(t,e){return s.Extensions.isMemoryInterface(t)||(t=u.SimpleObjectMemory.wrap(t)),e=e||new l.Options,this.evaluator.tryEvaluate(this,t,e)}toString(){let t="",e=!1;if(this.type===o.ExpressionType.Accessor&&this.children.length>=1){if(this.children[0]instanceof n.Constant){const r=this.children[0].value;"string"==typeof r&&(1===this.children.length?(e=!0,t=t.concat(r)):2===this.children.length&&(e=!0,t=t.concat(this.children[1].toString(),".",r)))}}else this.type===o.ExpressionType.Element&&2===this.children.length&&(e=!0,t=t.concat(this.children[0].toString(),"[",this.children[1].toString(),"]"));if(!e){const e=this.type.length>0&&!new RegExp(/[a-z]/i).test(this.type[0])&&this.children.length>=2;e||(t=t.concat(this.type)),t=t.concat("(");let r=!0;for(const n of this.children)r?r=!1:t=e?t.concat(" ",this.type," "):t.concat(", "),t=t.concat(n.toString());t=t.concat(")")}return t}}p.functions=new a.FunctionTable,r.Expression=p},{167:167,180:180,192:192,193:193,194:194,201:201,204:204,209:209,213:213}],196:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(178),o=t(192),s=t(213),a=n(t(423));class u{static validateArityAndAnyType(t,e,r,n=s.ReturnType.Object){if(t.children.length<e)throw new Error(`${t} should have at least ${e} children.`);if(t.children.length>r)throw new Error(`${t} can't have more than ${r} children.`);if(0==(n&s.ReturnType.Object))for(const i of t.children)if(0==(i.returnType&s.ReturnType.Object)&&0==(n&i.returnType))throw new Error(u.buildTypeValidatorError(n,i,t))}static validateOrder(t,e,...r){if(void 0===e&&(e=[]),t.children.length<r.length||t.children.length>r.length+e.length)throw new Error(0===e.length?`${t} should have ${r.length} children.`:`${t} should have between ${r.length} and ${r.length+e.length} children.`);for(let n=0;n<r.length;n++){const e=t.children[n],i=r[n];if(0==(i&s.ReturnType.Object)&&0==(e.returnType&s.ReturnType.Object)&&0==(i&e.returnType))throw new Error(u.buildTypeValidatorError(i,e,t))}for(let n=0;n<e.length;n++){const i=n+r.length;if(i>=t.children.length)break;const o=t.children[i],a=e[n];if(0==(a&s.ReturnType.Object)&&0==(o.returnType&s.ReturnType.Object)&&0==(a&o.returnType))throw new Error(u.buildTypeValidatorError(a,o,t))}}static validateAtLeastOne(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER)}static validateNumber(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Number)}static validateString(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.String)}static validateBinary(t){u.validateArityAndAnyType(t,2,2)}static validateBinaryNumber(t){u.validateArityAndAnyType(t,2,2,s.ReturnType.Number)}static validateUnaryOrBinaryNumber(t){u.validateArityAndAnyType(t,1,2,s.ReturnType.Number)}static validateTwoOrMoreThanTwoNumbers(t){u.validateArityAndAnyType(t,2,Number.MAX_VALUE,s.ReturnType.Number)}static validateBinaryNumberOrString(t){u.validateArityAndAnyType(t,2,2,s.ReturnType.Number|s.ReturnType.String)}static validateUnary(t){u.validateArityAndAnyType(t,1,1)}static validateUnaryNumber(t){u.validateArityAndAnyType(t,1,1,s.ReturnType.Number)}static validateUnaryString(t){u.validateArityAndAnyType(t,1,1,s.ReturnType.String)}static validateUnaryOrBinaryString(t){u.validateArityAndAnyType(t,1,2,s.ReturnType.String)}static validateUnaryBoolean(t){u.validateOrder(t,void 0,s.ReturnType.Boolean)}static verifyNumber(t,e,r){let n;return u.isNumber(t)||(n=e+" is not a number."),n}static verifyNumberOrNumericList(t,e,r){let n;if(u.isNumber(t))return n;if(Array.isArray(t)){for(const i of t)if(!u.isNumber(i)){n=`${i} is not a number in ${e}.`;break}}else n=e+" is neither a list nor a number.";return n}static verifyNumericList(t,e,r){let n;if(Array.isArray(t)){for(const i of t)if(!u.isNumber(i)){n=`${i} is not a number in ${e}.`;break}}else n=e+" is not a list.";return n}static verifyContainer(t,e,r){let n;return"string"==typeof t||Array.isArray(t)||t instanceof Map||"object"==typeof t||(n=e+" must be a string, list, map or object."),n}static verifyContainerOrNull(t,e,r){let n;return null==t||"string"==typeof t||Array.isArray(t)||t instanceof Map||"object"==typeof t||(n=e+" must be a string, list, map or object."),n}static verifyNotNull(t,e,r){let n;return null==t&&(n=e+" is null."),n}static verifyInteger(t,e,r){let n;return Number.isInteger(t)||(n=e+" is not a integer."),n}static verifyList(t,e){let r;return Array.isArray(t)||(r=e+" is not a list or array."),r}static verifyString(t,e,r){let n;return"string"!=typeof t&&(n=e+" is not a string."),n}static verifyStringOrNull(t,e,r){let n;return"string"!=typeof t&&void 0!==t&&(n=e+" is neither a string nor a null object."),n}static verifyNumberOrStringOrNull(t,e,r){let n;return"string"==typeof t||void 0===t||u.isNumber(t)||(n=e+" is neither a number nor string"),n}static verifyNumberOrString(t,e,r){let n;return(void 0===t||!u.isNumber(t)&&"string"!=typeof t)&&(n=e+" is not string or number."),n}static verifyBoolean(t,e,r){let n;return"boolean"!=typeof t&&(n=e+" is not a boolean."),n}static evaluateChildren(t,e,r,n){const i=[];let o,s,a=0;for(const u of t.children){if(({value:o,error:s}=u.tryEvaluate(e,r)),s)break;if(void 0!==n&&(s=n(o,u,a)),s)break;i.push(o),++a}return{args:i,error:s}}static apply(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{o=t(s)}catch(c){l=c.message}return{value:o,error:l}}}static applyWithError(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{({value:o,error:l}=t(s))}catch(c){l=c.message}return{value:o,error:l}}}static applyWithOptionsAndError(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{({value:o,error:l}=t(s,i))}catch(c){l=c.message}return{value:o,error:l}}}static applyWithOptions(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{o=t(s,i)}catch(c){l=c.message}return{value:o,error:l}}}static applySequence(t,e){return u.apply(e=>{const r=[void 0,void 0];let n=e[0];for(let i=1;i<e.length;i++)r[0]=n,r[1]=e[i],n=t(r);return n},e)}static applySequenceWithError(t,e){return u.applyWithError(e=>{const r=[void 0,void 0];let n,i,o=e[0];for(let s=1;s<e.length;s++){if(r[0]=o,r[1]=e[s],({value:n,error:i}=t(r)),i)return{value:n,error:i};o=n}return{value:o,error:void 0}},e)}static determineLocale(t,e,r="en-us"){if(t.length===e){const n=t[e-1];"string"==typeof n&&(r=n)}return r}static determineFormatAndLocale(t,e,r,n="en-us"){if(e>=2)if(t.length===e){const i=t[e-1],o=t[e-2];"string"==typeof i&&"string"==typeof o&&(r=""!==o?u.timestampFormatter(o):u.DefaultDateTimeFormat,n=i.substr(0,2))}else if(t.length===e-1){const n=t[e-2];"string"==typeof n&&(r=u.timestampFormatter(n))}return{format:r,locale:n}}static timestampFormatter(t){if(!t)return u.DefaultDateTimeFormat;let e=t;try{e=i.convertCSharpDateTimeToDayjs(t)}catch(r){}return e}static tryAccumulatePath(t,e,r){let n="",i=t;for(;void 0!==i;)if(i.type===o.ExpressionType.Accessor)n=i.children[0].value+"."+n,i=2===i.children.length?i.children[1]:void 0;else{if(i.type!==o.ExpressionType.Element)break;{const{value:t,error:o}=i.children[1].tryEvaluate(e,r);if(void 0!==o)return{path:void 0,left:void 0,error:o};if(u.isNumber(parseInt(t)))n=`[${t}].${n}`;else{if("string"!=typeof t)return{path:void 0,left:void 0,error:i.children[1].toString()+" doesn't return an int or string"};n=`['${t}'].${n}`}i=i.children[0]}}return""===(n=n.replace(/(\.*$)/g,"").replace(/(\.\[)/g,"["))&&(n=void 0),{path:n,left:i,error:void 0}}static isNumber(t){return null!=t&&"number"==typeof t&&!Number.isNaN(t)}static commonEquals(t,e){if(null==t||null==e)return null==t&&null==e;if(Array.isArray(t)&&Array.isArray(e))return t.length===e.length&&t.every((t,r)=>u.commonEquals(t,e[r]));const r=u.getPropertyCount(t),n=u.getPropertyCount(e);if(r>=0&&n>=0){if(r!==n)return!1;const i=u.convertToObj(t),o=u.convertToObj(e);return a.default(i,o)}if(u.isNumber(t)&&u.isNumber(e)&&Math.abs(t-e)<Number.EPSILON)return!0;try{return t===e}catch(i){return!1}}static buildTypeValidatorError(t,e,r){const n=Object.keys(s.ReturnType).filter(t=>!(parseInt(t)>=0)),i=[];for(const o of n)0!=(t&s.ReturnType[o])&&i.push(o);return 1===i.length?`${e} is not a ${i[0]} expression in ${r}.`:`${e} in ${r} is not any of [${i.join(", ")}].`}static getPropertyCount(t){let e=-1;return null==t||Array.isArray(t)||(t instanceof Map?e=t.size:"object"!=typeof t||t instanceof Date||(e=Object.keys(t).length)),e}static convertToObj(t){return u.getPropertyCount(t)>=0?(t instanceof Map?Array.from(t.entries()):Object.entries(t)).reduce((t,[e,r])=>Object.assign({},t,{[e]:u.convertToObj(r)}),{}):Array.isArray(t)?t.map(t=>u.convertToObj(t)):t}}u.DefaultDateTimeFormat="YYYY-MM-DDTHH:mm:ss.SSS[Z]",r.FunctionUtils=u},{178:178,192:192,213:213,423:423}],186:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(182)),n(t(183)),n(t(184)),n(t(185)),n(t(187)),n(t(188)),n(t(189)),n(t(190)),n(t(191))},{182:182,183:183,184:184,185:185,187:187,188:188,189:189,190:190,191:191}],216:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(215)),n(t(217)),n(t(218)),n(t(219)),n(t(220)),n(t(221))},{215:215,217:217,218:218,219:219,220:220,221:221}],172:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(168)),n(t(169)),n(t(170)),n(t(171)),n(t(173)),n(t(174)),n(t(175)),n(t(176)),n(t(177))},{168:168,169:169,170:170,171:171,173:173,174:174,175:175,176:176,177:177}],209:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(210)),n(t(205)),n(t(211)),n(t(208))},{205:205,208:208,210:210,211:211}],199:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(197)),n(t(198))},{197:197,198:198}],166:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(348),o=n(t(424)),s=t(199),a=t(212);class u{static CreateRegex(t){let e;if(t&&this.regexCache.has(t))e=this.regexCache.get(t);else{if(!t||!this.isCommonRegex(t))throw new Error(`'${t}' is not a valid regex.`);e=this.getRegExpFromString(t),this.regexCache.set(t,e)}return e}static getRegExpFromString(t){let e="";return["(?i)","(?m)","(?s)"].forEach(r=>{t.includes(r)&&(e+=r.substr(2,1),t=t.replace(r,""))}),e?new RegExp(""+t,e):new RegExp(""+t)}static isCommonRegex(t){try{this.antlrParse(t)}catch(e){return!1}return!0}static antlrParse(t){const e=new i.ANTLRInputStream(t),r=new s.CommonRegexLexer(e);r.removeErrorListeners();const n=new i.CommonTokenStream(r),o=new s.CommonRegexParser(n);return o.removeErrorListeners(),o.addErrorListener(a.RegexErrorListener.Instance),o.buildParseTree=!0,o.parse()}}u.regexCache=new o.default(15),r.CommonRegex=u},{199:199,212:212,348:348,424:424}],201:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(202)),n(t(203))},{202:202,203:203}],68:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(2)),n(t(3)),n(t(4)),n(t(5)),n(t(6)),n(t(7)),n(t(8)),n(t(9)),n(t(10)),n(t(11)),n(t(12)),n(t(13)),n(t(14)),n(t(15)),n(t(16)),n(t(17)),n(t(18)),n(t(19)),n(t(20)),n(t(21)),n(t(22)),n(t(23)),n(t(24)),n(t(25)),n(t(26)),n(t(27)),n(t(28)),n(t(29)),n(t(30)),n(t(31)),n(t(32)),n(t(33)),n(t(34)),n(t(35)),n(t(36)),n(t(37)),n(t(38)),n(t(39)),n(t(40)),n(t(41)),n(t(42)),n(t(43)),n(t(44)),n(t(45)),n(t(46)),n(t(48)),n(t(47)),n(t(49)),n(t(50)),n(t(51)),n(t(52)),n(t(53)),n(t(54)),n(t(55)),n(t(56)),n(t(57)),n(t(58)),n(t(59)),n(t(60)),n(t(61)),n(t(59)),n(t(62)),n(t(63)),n(t(64)),n(t(65)),n(t(66)),n(t(67)),n(t(69)),n(t(70)),n(t(71)),n(t(72)),n(t(73)),n(t(74)),n(t(75)),n(t(76)),n(t(77)),n(t(78)),n(t(79)),n(t(80)),n(t(81)),n(t(82)),n(t(83)),n(t(84)),n(t(85)),n(t(86)),n(t(87)),n(t(89)),n(t(88)),n(t(90)),n(t(91)),n(t(92)),n(t(93)),n(t(94)),n(t(95)),n(t(96)),n(t(97)),n(t(98)),n(t(99)),n(t(100)),n(t(101)),n(t(102)),n(t(103)),n(t(104)),n(t(105)),n(t(106)),n(t(107)),n(t(108)),n(t(109)),n(t(110)),n(t(111)),n(t(112)),n(t(113)),n(t(114)),n(t(115)),n(t(116)),n(t(117)),n(t(118)),n(t(119)),n(t(120)),n(t(121)),n(t(122)),n(t(123)),n(t(124)),n(t(125)),n(t(126)),n(t(127)),n(t(128)),n(t(129)),n(t(130)),n(t(131)),n(t(132)),n(t(133)),n(t(134)),n(t(135)),n(t(136)),n(t(137)),n(t(138)),n(t(139)),n(t(140)),n(t(141)),n(t(142)),n(t(143)),n(t(144)),n(t(145)),n(t(146)),n(t(147)),n(t(148)),n(t(149)),n(t(150)),n(t(151)),n(t(152)),n(t(153)),n(t(154)),n(t(155)),n(t(156)),n(t(157)),n(t(158)),n(t(159)),n(t(160)),n(t(161)),n(t(162)),n(t(163)),n(t(164)),n(t(165))},{10:10,100:100,101:101,102:102,103:103,104:104,105:105,106:106,107:107,108:108,109:109,11:11,110:110,111:111,112:112,113:113,114:114,115:115,116:116,117:117,118:118,119:119,12:12,120:120,121:121,122:122,123:123,124:124,125:125,126:126,127:127,128:128,129:129,13:13,130:130,131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,14:14,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,15:15,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,16:16,160:160,161:161,162:162,163:163,164:164,165:165,17:17,18:18,19:19,2:2,20:20,21:21,22:22,23:23,24:24,25:25,26:26,27:27,28:28,29:29,3:3,30:30,31:31,32:32,33:33,34:34,35:35,36:36,37:37,38:38,39:39,4:4,40:40,41:41,42:42,43:43,44:44,45:45,46:46,47:47,48:48,49:49,5:5,50:50,51:51,52:52,53:53,54:54,55:55,56:56,57:57,58:58,59:59,6:6,60:60,61:61,62:62,63:63,64:64,65:65,66:66,67:67,69:69,7:7,70:70,71:71,72:72,73:73,74:74,75:75,76:76,77:77,78:78,79:79,8:8,80:80,81:81,82:82,83:83,84:84,85:85,86:86,87:87,88:88,89:89,9:9,90:90,91:91,92:92,93:93,94:94,95:95,96:96,97:97,98:98,99:99}],2:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Abs,o.func)}static func(t){return Math.abs(t[0])}}r.Abs=o},{107:107,192:192}],107:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e){super(t,s.evaluator(e),o.ReturnType.Number,i.FunctionUtils.validateUnaryNumber)}static evaluator(t){return i.FunctionUtils.apply(t,i.FunctionUtils.verifyNumber)}}r.NumberTransformEvaluator=s},{180:180,196:196,213:213}],3:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(202),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Accessor,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){const{path:n,left:i,error:u}=o.FunctionUtils.tryAccumulatePath(t,e,r);if(u)return{value:void 0,error:u};if(null==i)return{value:s.InternalFunctionUtils.wrapGetValue(e,n,r),error:void 0};{const{value:t,error:o}=i.tryEvaluate(e,r);return o?{value:void 0,error:o}:{value:s.InternalFunctionUtils.wrapGetValue(new a.SimpleObjectMemory(t),n,r),error:void 0}}}static validator(t){const e=t.children;if(0===e.length||e[0].type!==i.ExpressionType.Constant||e[0].returnType!==u.ReturnType.String)throw new Error(t+" must have a string as first argument.");if(e.length>2)throw new Error(t+" has more than 2 children.");if(2===e.length&&0==(e[1].returnType&u.ReturnType.Object))throw new Error(t+" must have an object as its second argument.")}}r.Accessor=l},{180:180,192:192,195:195,196:196,202:202,213:213}],195:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(167),o=n(t(402)),s=n(t(405));o.default.extend(s.default);const a=t(192),u=t(201),l=t(222),c=t(396);class h{static parseTimexProperty(t){let e;if(t instanceof l.TimexProperty)e=t;else if("string"==typeof t)e=new l.TimexProperty(t);else if(void 0===(e=new l.TimexProperty(t))||0===Object.keys(e).length)return{timexProperty:e,error:t+" requires a TimexProperty or a string as a argument"};return{timexProperty:e,error:void 0}}static sortBy(t){return(e,r,n)=>{let i;const{value:o,error:s}=e.children[0].tryEvaluate(r,n);let a=s;if(!a)if(Array.isArray(o)){const s=o.slice(0);if(1===e.children.length)i=t?s.sort().reverse():s.sort();else{let o;({value:o,error:a}=e.children[1].tryEvaluate(r,n)),a||(o=o||""),i=t?s.sort(h.sortByKey(o)).reverse():s.sort(h.sortByKey(o))}}else a=e.children[0]+" is not an array";return{value:i,error:a}}}static accessIndex(t,e){if(null==t)return{value:void 0,error:void 0};let r,n;return Array.isArray(t)?e>=0&&e<t.length?r=t[e]:n=`${e} is out of range for ${t}`:n=t+" is not a collection.",{value:r,error:n}}static verifyTimestamp(t){let e;try{const r=new Date(t);Number.isNaN(r.getTime())&&(e=t+" is not a valid datetime string.")}catch(r){e=t+" is not a valid datetime string."}return e}static verifyISOTimestamp(t){let e;try{const r=new Date(t);Number.isNaN(r.getTime())?e=t+" is not a valid datetime string.":r.toISOString()!==t&&(e=t+" is not a ISO format datetime string.")}catch(r){e=t+" is not a valid datetime string."}return e}static ticks(t){let e;const r=this.verifyISOTimestamp(t);if(!r){const r=o.default(t).utc().valueOf();e=this.UnixMilliSecondToTicksConstant.add(c(r).times(this.MillisecondToTickConstant))}return{value:e,error:r}}static accessProperty(t,e){if(!t)return{value:void 0,error:void 0};let r;if(t instanceof Map&&void 0!==t){const n=t;if(void 0===(r=n.get(e))){const t=Array.from(n.keys()).find(t=>t.toLowerCase()===e.toLowerCase());void 0!==t&&(r=n.get(t))}}else{const n=Object.keys(t).find(t=>t.toLowerCase()===e.toLowerCase());void 0!==n&&(r=t[n])}return{value:r,error:void 0}}static wrapGetValue(t,e,r){const n=t.getValue(e);return void 0!==n?n:void 0!==r.nullSubstitution?r.nullSubstitution(e):void 0}static parseStringOrUndefined(t){return"string"==typeof t?t:""}static isLogicTrue(t){let e=!0;return"boolean"==typeof t?e=t:null==t&&(e=!1),e}static foreach(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(i||(s=`'${t.children[0]}' evaluated to null.`),!s){const o=h.convertToList(i);o?(n=[],h.lambdaEvaluator(t,e,r,o,(t,e,r)=>r?(s=r,!0):(n.push(e),!1))):s=t.children[0]+" is not a collection or structure object to run Foreach"}return{value:n,error:s}}static lambdaEvaluator(t,e,r,n,o){const s=t.children[1].children[0];if(!(s instanceof i.Constant)||"string"!=typeof s.value)return;const a=s.value,l=u.StackedMemory.wrap(e);for(const i of n){const e=i,n=new Map([[a,i]]);l.push(u.SimpleObjectMemory.wrap(n));const{value:s,error:c}=t.children[2].tryEvaluate(l,r);if(l.pop(),o(e,s,c))break}}static convertToList(t){let e;return Array.isArray(t)?e=t:"object"==typeof t&&(e=[],Object.keys(t).forEach(r=>e.push({key:r,value:t[r]}))),e}static ValidateLambdaExpression(t){if(3!==t.children.length)throw new Error("Lambda expression expect 3 parameters, found "+t.children.length);const e=t.children[1];if(e.type!==a.ExpressionType.Accessor||1!==e.children.length)throw new Error("Second parameter is not an identifier : "+e)}static parseUri(t){let e,r;try{e=new URL(t)}catch(n){r="Invalid URI: "+t}return{value:e,error:r}}static timeUnitTransformer(t,e){switch(e){case"Day":return{duration:t,tsStr:"day"};case"Week":return{duration:7*t,tsStr:"day"};case"Second":return{duration:t,tsStr:"second"};case"Minute":return{duration:t,tsStr:"minute"};case"Hour":return{duration:t,tsStr:"hour"};case"Month":return{duration:t,tsStr:"month"};case"Year":return{duration:t,tsStr:"year"};default:return{duration:t,tsStr:void 0}}}static getTextEncoder(){return"undefined"!=typeof window||"undefined"!=typeof self?new TextEncoder:new(t(451).TextEncoder)}static getTextDecoder(e="utf-8"){return"undefined"!=typeof window||"undefined"!=typeof self?new TextDecoder(e):new(t(451).TextDecoder)(e)}static commonStringify(t){return null==t?"":"object"==typeof t?JSON.stringify(t).replace(/(^['"]*)/g,"").replace(/(['"]*$)/g,""):t.toString()}static sortByKey(t){return(e,r)=>e[t]>r[t]?1:r[t]>e[t]?-1:0}}h.UnixMilliSecondToTicksConstant=c("621355968000000000"),h.MillisecondToTickConstant=c("10000"),r.InternalFunctionUtils=h},{167:167,192:192,201:201,222:222,396:396,402:402,405:405,451:451}],202:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(193),i=t(195);class o{constructor(t){this.memory=void 0,this.memory=t}static wrap(t){return n.Extensions.isMemoryInterface(t)?t:new o(t)}getValue(t){if(void 0===this.memory||0===t.length)return;const e=t.split(/[.\[\]]+/).filter(t=>void 0!==t&&""!==t).map(t=>t.startsWith('"')&&t.endsWith('"')||t.startsWith("'")&&t.endsWith("'")?t.substr(1,t.length-2):t);let r,n=this.memory;for(const o of e){let t;const e=parseInt(o);if(!isNaN(e)&&Array.isArray(n)?({value:r,error:t}=i.InternalFunctionUtils.accessIndex(n,e)):({value:r,error:t}=i.InternalFunctionUtils.accessProperty(n,o)),t)return;n=r}return r}setValue(t,e){if(void 0===this.memory)return;const r=t.split(/[.[\]]+/).filter(t=>void 0!==t&&""!==t).map(t=>t.startsWith('"')&&t.endsWith('"')||t.startsWith("'")&&t.endsWith("'")?t.substr(1,t.length-2):t);let n=this.memory,o="",s=void 0;for(let u=0;u<r.length-1;u++){const t=parseInt(r[u]);if(!isNaN(t)&&Array.isArray(n)?(o=`[${r[u]}]`,({value:n,error:s}=i.InternalFunctionUtils.accessIndex(n,t))):(o="."+r[u],({value:n,error:s}=i.InternalFunctionUtils.accessProperty(n,r[u]))),s)return;if(void 0===n)return void(o=o.replace(/(^\.*)/g,""))}const a=parseInt(r[r.length-1]);if(isNaN(a)){if(s=this.setProperty(n,r[r.length-1],e).error)return}else if(Array.isArray(n)?a>n.length?s=a+" index out of range":a===n.length?n.push(e):n[a]=e:s="set value for an index to a non-list object",s)return}version(){return this.toString()}toString(){return JSON.stringify(this.memory,this.getCircularReplacer())}getCircularReplacer(){const t=new WeakSet;return(e,r)=>{if("object"==typeof r&&r){if(t.has(r))return;t.add(r)}return r}}setProperty(t,e,r){const n=r;return t instanceof Map?t.set(e,r):t[e]=r,{value:n,error:void 0}}}r.SimpleObjectMemory=o},{193:193,195:195}],4:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Add,a.evaluator(),s.ReturnType.String|s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.applySequenceWithError(t=>{let e,r;const n=!o.FunctionUtils.isNumber(t[0])||!o.FunctionUtils.isNumber(t[1]);return null==t[0]&&o.FunctionUtils.isNumber(t[1])||null==t[1]&&o.FunctionUtils.isNumber(t[0])?r="Operator '+' or add cannot be applied to operands of type 'number' and null object.":e=n?null==t[0]&&null==t[1]?"":null==t[0]?t[1].toString():null==t[1]?t[0].toString():t[0].toString()+t[1].toString():t[0]+t[1],{value:e,error:r}},o.FunctionUtils.verifyNumberOrStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,Number.MAX_SAFE_INTEGER,s.ReturnType.String|s.ReturnType.Number)}}r.Add=a},{180:180,192:192,196:196,213:213}],5:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddDays=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddDays,(t,e)=>{const r=new Date(t);return r.setDate(t.getDate()+e),r})}}},{145:145,192:192}],145:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(196),u=t(195),l=t(213);class c extends s.ExpressionEvaluator{constructor(t,e){super(t,c.evaluator(e),l.ReturnType.String,c.validator)}static evaluator(t){return(e,r,n)=>{let o,s=n.locale?n.locale:Intl.DateTimeFormat().resolvedOptions().locale,l=a.FunctionUtils.DefaultDateTimeFormat;const{args:c,error:h}=a.FunctionUtils.evaluateChildren(e,r,n);let p=h;return p||(({format:l,locale:s}=a.FunctionUtils.determineFormatAndLocale(c,4,l,s)),"string"==typeof c[0]&&a.FunctionUtils.isNumber(c[1])?(p=u.InternalFunctionUtils.verifyISOTimestamp(c[0]))||(o=i.default(t(new Date(c[0]),c[1])).locale(s).utc().format(l)):p=e+" should contain an ISO format timestamp and a time interval integer."),{value:o,error:p}}}static validator(t){a.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String],l.ReturnType.String,l.ReturnType.Number)}}r.TimeTransformEvaluator=c},{180:180,195:195,196:196,213:213,402:402,405:405}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddHours=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddHours,(t,e)=>{const r=new Date(t);return r.setHours(t.getHours()+e),r})}}},{145:145,192:192}],7:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddMinutes=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddMinutes,(t,e)=>{const r=new Date(t);return r.setMinutes(t.getMinutes()+e),r})}}},{145:145,192:192}],8:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.AddOrdinal,a.evaluator(),s.ReturnType.String,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>a.evalAddOrdinal(t[0]),o.FunctionUtils.verifyInteger)}static evalAddOrdinal(t){let e=!1,r=t.toString();if(t>0){switch(t%100){case 11:case 12:case 13:r+="th",e=!0}if(!e)switch(t%10){case 1:r+="st";break;case 2:r+="nd";break;case 3:r+="rd";break;default:r+="th"}}return r}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,1,s.ReturnType.Number)}}r.AddOrdinal=a},{180:180,192:192,196:196,213:213}],9:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.AddProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e;const r=t[0],n=String(t[1]);return n in r?e=n+" already exists":r[String(t[1])]=t[2],{value:r,error:e}})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String,s.ReturnType.Object)}}r.AddProperty=a},{180:180,192:192,196:196,213:213}],10:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddSeconds=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddSeconds,(t,e)=>{const r=new Date(t);return r.setSeconds(t.getSeconds()+e),r})}}},{145:145,192:192}],11:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.AddToTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,5,o,i)),"string"==typeof s[0]&&Number.isInteger(s[1])&&"string"==typeof s[2]?({value:n,error:l}=h.evalAddToTime(s[0],s[1],s[2],o,i)):l=t+" should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string."),{value:n,error:l}}static evalAddToTime(t,e,r,n,o){let s;const a=l.InternalFunctionUtils.verifyISOTimestamp(t);if(!a){const{duration:a,tsStr:u}=l.InternalFunctionUtils.timeUnitTransformer(e,r);s=i.default(t).locale(o).utc().add(a,u).format(n)}return{value:s,error:a}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.Number,c.ReturnType.String)}}r.AddToTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],405:[function(t,e,r){var n;n=function(){"use strict";return function(t,e,r){var n=e.prototype;r.utc=function(t){return new e({date:t,utc:!0,args:arguments})},n.utc=function(t){var e=r(this.toDate(),{locale:this.$L,utc:!0});return t?e.add(this.utcOffset(),"minute"):e},n.local=function(){return r(this.toDate(),{locale:this.$L,utc:!1})};var i=n.parse;n.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),i.call(this,t)};var o=n.init;n.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else o.call(this)};var s=n.utcOffset;n.utcOffset=function(t,e){var r=this.$utils().u;if(r(t))return this.$u?0:r(this.$offset)?s.call(this):this.$offset;var n=Math.abs(t)<=16?60*t:t,i=this;if(e)return i.$offset=n,i.$u=0===t,i;if(0!==t){var o=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(i=this.local().add(n+o,"minute")).$offset=n,i.$x.$localOffset=o}else i=this.utc();return i};var a=n.format;n.format=function(t){var e=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return a.call(this,e)},n.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||(new Date).getTimezoneOffset());return this.$d.valueOf()-6e4*t},n.isUTC=function(){return!!this.$u},n.toISOString=function(){return this.toDate().toISOString()},n.toString=function(){return this.toDate().toUTCString()};var u=n.toDate;n.toDate=function(t){return"s"===t&&this.$offset?r(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():u.call(this)};var l=n.diff;n.diff=function(t,e,n){if(t&&this.$u===t.$u)return l.call(this,t,e,n);var i=this.local(),o=r(t).local();return l.call(i,o,e,n)}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_utc=n()},{}],402:[function(t,e,r){var n;n=function(){"use strict";var t="millisecond",e="second",r="minute",n="hour",i="day",o="week",s="month",a="quarter",u="year",l="date",c=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,p={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},d=function(t,e,r){var n=String(t);return!n||n.length>=e?t:""+Array(e+1-n.length).join(r)+t},f={s:d,z:function(t){var e=-t.utcOffset(),r=Math.abs(e),n=Math.floor(r/60),i=r%60;return(e<=0?"+":"-")+d(n,2,"0")+":"+d(i,2,"0")},m:function t(e,r){if(e.date()<r.date())return-t(r,e);var n=12*(r.year()-e.year())+(r.month()-e.month()),i=e.clone().add(n,s),o=r-i<0,a=e.clone().add(n+(o?-1:1),s);return+(-(n+(r-i)/(o?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(c){return{M:s,y:u,w:o,d:i,D:l,h:n,m:r,s:e,ms:t,Q:a}[c]||String(c||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",m={};m[y]=p;var g=function(t){return t instanceof E},v=function(t,e,r){var n;if(!t)return y;if("string"==typeof t)m[t]&&(n=t),e&&(m[t]=e,n=t);else{var i=t.name;m[i]=t,n=i}return!r&&n&&(y=n),n||!r&&y},T=function(t,e){if(g(t))return t.clone();var r="object"==typeof e?e:{};return r.date=t,r.args=arguments,new E(r)},_=f;_.l=v,_.i=g,_.w=function(t,e){return T(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var E=function(){function p(t){this.$L=v(t.locale,null,!0),this.parse(t)}var d=p.prototype;return d.parse=function(t){this.$d=function(t){var e=t.date,r=t.utc;if(null===e)return new Date(NaN);if(_.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var n=e.match(c);if(n){var i=n[2]-1||0,o=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,o)):new Date(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,o)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},d.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},d.$utils=function(){return _},d.isValid=function(){return!("Invalid Date"===this.$d.toString())},d.isSame=function(t,e){var r=T(t);return this.startOf(e)<=r&&r<=this.endOf(e)},d.isAfter=function(t,e){return T(t)<this.startOf(e)},d.isBefore=function(t,e){return this.endOf(e)<T(t)},d.$g=function(t,e,r){return _.u(t)?this[e]:this.set(r,t)},d.unix=function(){return Math.floor(this.valueOf()/1e3)},d.valueOf=function(){return this.$d.getTime()},d.startOf=function(t,a){var c=this,h=!!_.u(a)||a,p=_.p(t),d=function(t,e){var r=_.w(c.$u?Date.UTC(c.$y,e,t):new Date(c.$y,e,t),c);return h?r:r.endOf(i)},f=function(t,e){return _.w(c.toDate()[t].apply(c.toDate("s"),(h?[0,0,0,0]:[23,59,59,999]).slice(e)),c)},y=this.$W,m=this.$M,g=this.$D,v="set"+(this.$u?"UTC":"");switch(p){case u:return h?d(1,0):d(31,11);case s:return h?d(1,m):d(0,m+1);case o:var T=this.$locale().weekStart||0,E=(y<T?y+7:y)-T;return d(h?g-E:g+(6-E),m);case i:case l:return f(v+"Hours",0);case n:return f(v+"Minutes",1);case r:return f(v+"Seconds",2);case e:return f(v+"Milliseconds",3);default:return this.clone()}},d.endOf=function(t){return this.startOf(t,!1)},d.$set=function(o,a){var c,h=_.p(o),p="set"+(this.$u?"UTC":""),d=(c={},c[i]=p+"Date",c[l]=p+"Date",c[s]=p+"Month",c[u]=p+"FullYear",c[n]=p+"Hours",c[r]=p+"Minutes",c[e]=p+"Seconds",c[t]=p+"Milliseconds",c)[h],f=h===i?this.$D+(a-this.$W):a;if(h===s||h===u){var y=this.clone().set(l,1);y.$d[d](f),y.init(),this.$d=y.set(l,Math.min(this.$D,y.daysInMonth())).$d}else d&&this.$d[d](f);return this.init(),this},d.set=function(t,e){return this.clone().$set(t,e)},d.get=function(t){return this[_.p(t)]()},d.add=function(t,a){var l,c=this;t=Number(t);var h=_.p(a),p=function(e){var r=T(c);return _.w(r.date(r.date()+Math.round(e*t)),c)};if(h===s)return this.set(s,this.$M+t);if(h===u)return this.set(u,this.$y+t);if(h===i)return p(1);if(h===o)return p(7);var d=(l={},l[r]=6e4,l[n]=36e5,l[e]=1e3,l)[h]||1,f=this.$d.getTime()+t*d;return _.w(f,this)},d.subtract=function(t,e){return this.add(-1*t,e)},d.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var r=t||"YYYY-MM-DDTHH:mm:ssZ",n=_.z(this),i=this.$locale(),o=this.$H,s=this.$m,a=this.$M,u=i.weekdays,l=i.months,c=function(t,n,i,o){return t&&(t[n]||t(e,r))||i[n].substr(0,o)},p=function(t){return _.s(o%12||12,t,"0")},d=i.meridiem||function(t,e,r){var n=t<12?"AM":"PM";return r?n.toLowerCase():n},f={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:_.s(a+1,2,"0"),MMM:c(i.monthsShort,a,l,3),MMMM:c(l,a),D:this.$D,DD:_.s(this.$D,2,"0"),d:String(this.$W),dd:c(i.weekdaysMin,this.$W,u,2),ddd:c(i.weekdaysShort,this.$W,u,3),dddd:u[this.$W],H:String(o),HH:_.s(o,2,"0"),h:p(1),hh:p(2),a:d(o,s,!0),A:d(o,s,!1),m:String(s),mm:_.s(s,2,"0"),s:String(this.$s),ss:_.s(this.$s,2,"0"),SSS:_.s(this.$ms,3,"0"),Z:n};return r.replace(h,(function(t,e){return e||f[t]||n.replace(":","")}))},d.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},d.diff=function(t,l,c){var h,p=_.p(l),d=T(t),f=6e4*(d.utcOffset()-this.utcOffset()),y=this-d,m=_.m(this,d);return m=(h={},h[u]=m/12,h[s]=m,h[a]=m/3,h[o]=(y-f)/6048e5,h[i]=(y-f)/864e5,h[n]=y/36e5,h[r]=y/6e4,h[e]=y/1e3,h)[p]||y,c?m:_.a(m)},d.daysInMonth=function(){return this.endOf(s).$D},d.$locale=function(){return m[this.$L]},d.locale=function(t,e){if(!t)return this.$L;var r=this.clone(),n=v(t,e,!0);return n&&(r.$L=n),r},d.clone=function(){return _.w(this.$d,this)},d.toDate=function(){return new Date(this.valueOf())},d.toJSON=function(){return this.isValid()?this.toISOString():null},d.toISOString=function(){return this.$d.toISOString()},d.toString=function(){return this.$d.toUTCString()},p}(),b=E.prototype;return T.prototype=b,[["$ms",t],["$s",e],["$m",r],["$H",n],["$W",i],["$M",s],["$y",u],["$D",l]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),T.extend=function(t,e){return t.$i||(t(e,E,T),t.$i=!0),T},T.locale=v,T.isDayjs=g,T.unix=function(t){return T(1e3*t)},T.en=m[y],T.Ls=m,T.p={},T},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs=n()},{}],12:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.All,a.evaluator,s.ReturnType.Boolean,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n=!0;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);s?o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>!(!r&&o.InternalFunctionUtils.isLogicTrue(e)||(n=!1,0))):a=t.children[0]+" is not a collection or structure object to run Any"}return{value:n,error:a}}}r.All=a},{180:180,192:192,195:195,213:213}],13:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.And,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateAtLeastOne)}static evaluator(t,e,r){let n,i=!0;for(const o of t.children){const t=new a.Options(r);if(t.nullSubstitution=void 0,({value:i,error:n}=o.tryEvaluate(e,t)),n){i=!1,n=void 0;break}if(!s.InternalFunctionUtils.isLogicTrue(i)){i=!1;break}i=!0}return{value:i,error:n}}}r.And=l},{180:180,192:192,195:195,196:196,204:204,213:213}],14:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Any,a.evaluator,s.ReturnType.Boolean,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n=!1;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);s?o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>!(r||!o.InternalFunctionUtils.isLogicTrue(e)||(n=!0,0))):a=t.children[0]+" is not a collection or structure object to run Any"}return{value:n,error:a}}}r.Any=a},{180:180,192:192,195:195,213:213}],15:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Average,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>t[0].reduce((t,e)=>t+e)/t[0].length,o.FunctionUtils.verifyNumericList)}}r.Average=a},{180:180,192:192,196:196,213:213}],16:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(399)),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64,c.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>{let e;const r=t[0];if("string"==typeof r&&(e=u.default(r)),r instanceof Uint8Array){const t=l.InternalFunctionUtils.getTextDecoder().decode(r);e=u.default(t)}return e})}}r.Base64=c},{180:180,192:192,195:195,196:196,213:213,399:399}],399:[function(t,e,r){e.exports=function(t){return btoa(t)}},{}],17:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(195),u=t(213),l=n(t(393));class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64ToBinary,c.evaluator(),u.ReturnType.Object,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>{const e=l.default(t[0].toString());return a.InternalFunctionUtils.getTextEncoder().encode(e)},s.FunctionUtils.verifyString)}}r.Base64ToBinary=c},{180:180,192:192,195:195,196:196,213:213,393:393}],393:[function(t,e,r){e.exports=function(t){return atob(t)}},{}],18:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(393));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64ToString,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>u.default(t[0]),s.FunctionUtils.verifyString)}}r.Base64ToString=l},{180:180,192:192,196:196,213:213,393:393}],19:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Binary,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.getTextEncoder().encode(t[0]),o.FunctionUtils.verifyString)}}r.Binary=u},{180:180,192:192,195:195,196:196,213:213}],20:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(23);class a extends s.ComparisonEvaluator{constructor(){super(n.ExpressionType.Bool,a.func,i.FunctionUtils.validateUnary)}static func(t){return i.FunctionUtils.isNumber(t[0])?0!==t[0]:o.InternalFunctionUtils.isLogicTrue(t[0])}}r.Bool=a},{192:192,195:195,196:196,23:23}],23:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(1),i=t(180),o=t(196),s=t(213);class a extends i.ExpressionEvaluator{constructor(t,e,r,n){super(t,a.evaluator(e,n),s.ReturnType.Boolean,r)}static evaluator(t,e){return(r,i,s)=>{let a=!1;const u=new n.Options(s);u.nullSubstitution=void 0;const{args:l,error:c}=o.FunctionUtils.evaluateChildren(r,i,u,e);let h=c;if(h)h=void 0;else try{a=t(l)}catch(p){h=p.message}return{value:a,error:h}}}}r.ComparisonEvaluator=a},{1:1,180:180,196:196,213:213}],21:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Ceiling,o.func)}static func(t){return Math.ceil(t[0])}}r.Ceiling=o},{107:107,192:192}],22:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Coalesce,a.evaluator(),s.ReturnType.Object,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>a.evalCoalesce(t))}static evalCoalesce(t){for(const e of t)if(null!=e)return e}}r.Coalesce=a},{180:180,192:192,196:196,213:213}],24:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213),a=t(195);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Concat,u.evaluator(),s.ReturnType.String|s.ReturnType.Array,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.applySequence(t=>{const e=t[0],r=t[1],n=Array.isArray(e),i=Array.isArray(r);return null==e&&null==r?void 0:null==e&&i?r:null==r&&n?e:n&&i?e.concat(r):a.InternalFunctionUtils.commonStringify(e)+a.InternalFunctionUtils.commonStringify(r)})}}r.Concat=u},{180:180,192:192,195:195,196:196,213:213}],25:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Contains,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){let n=!1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;if(!u)if("string"==typeof i[0]&&"string"==typeof i[1])n=i[0].includes(i[1]);else if(Array.isArray(i[0])){for(const s of i[0])if(o.FunctionUtils.commonEquals(s,i[1])){n=!0;break}}else if("string"==typeof i[1]){let t;({value:t,error:u}=s.InternalFunctionUtils.accessProperty(i[0],i[1])),n=!u&&void 0!==t}return{value:n,error:void 0}}}r.Contains=u},{180:180,192:192,195:195,196:196,213:213}],26:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(404));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213),h=t(214);class p extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.ConvertFromUTC,p.evaluator,c.ReturnType.String,p.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=p.NoneUtcDefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,4,o,i)),"string"==typeof s[0]&&"string"==typeof s[1]?({value:n,error:l}=p.evalConvertFromUTC(s[0],s[1],o,i)):l=t+" should contain an ISO format timestamp, an origin time zone string and an optional output format string."),{value:n,error:l}}static evalConvertFromUTC(t,e,r,n){let o,s;s=l.InternalFunctionUtils.verifyISOTimestamp(t);const a=h.TimeZoneConverter.windowsToIana(e);if(h.TimeZoneConverter.verifyTimeZoneStr(a)||(s=e+" is not a valid timezone"),!s)try{o=i.default(t).locale(n).tz(a).format(r)}catch(u){s=r+" is not a valid timestamp format"}return{value:o,error:s}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.String)}}p.NoneUtcDefaultDateTimeFormat="YYYY-MM-DDTHH:mm:ss.SSS0000",r.ConvertFromUTC=p},{180:180,192:192,195:195,196:196,213:213,214:214,402:402,404:404}],404:[function(t,e,r){var n;n=function(){"use strict";var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(r,n,i){var o,s=i().utcOffset(),a=function(t,r,n){void 0===n&&(n={});var i=new Date(t);return function(t,r){void 0===r&&(r={});var n=r.timeZoneName||"short",i=t+"|"+n,o=e[i];return o||(o=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:n}),e[i]=o),o}(r,n).formatToParts(i)},u=function(e,r){for(var n=a(e,r),o=[],s=0;s<n.length;s+=1){var u=n[s],l=u.type,c=u.value,h=t[l];h>=0&&(o[h]=parseInt(c,10))}var p=o[3],d=24===p?0:p,f=o[0]+"-"+o[1]+"-"+o[2]+" "+d+":"+o[4]+":"+o[5]+":000",y=+e;return(i.utc(f).valueOf()-(y-=y%1e3))/6e4},l=n.prototype;l.tz=function(t,e){void 0===t&&(t=o);var r=this.utcOffset(),n=this.toDate().toLocaleString("en-US",{timeZone:t}),a=Math.round((this.toDate()-new Date(n))/1e3/60),u=i(n).$set("millisecond",this.$ms).utcOffset(s-a,!0);if(e){var l=u.utcOffset();u=u.add(r-l,"minute")}return u.$x.$timezone=t,u},l.offsetName=function(t){var e=this.$x.$timezone||i.tz.guess(),r=a(this.valueOf(),e,{timeZoneName:t}).find((function(t){return"timezonename"===t.type.toLowerCase()}));return r&&r.value};var c=l.startOf;l.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return c.call(this,t,e);var r=i(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return c.call(r,t,e).tz(this.$x.$timezone,!0)},i.tz=function(t,e,r){var n=r&&e,s=r||e||o,a=u(+i(),s);if("string"!=typeof t)return i(t).tz(s);var l=function(t,e,r){var n=t-60*e*1e3,i=u(n,r);if(e===i)return[n,e];var o=u(n-=60*(i-e)*1e3,r);return i===o?[n,i]:[t-60*Math.min(i,o)*1e3,Math.max(i,o)]}(i.utc(t,n).valueOf(),a,s),c=l[0],h=l[1],p=i(c).utcOffset(h);return p.$x.$timezone=s,p},i.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},i.tz.setDefault=function(t){o=t}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_timezone=n()},{}],27:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(404));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(213),c=t(214);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.ConvertToUTC,h.evaluator,l.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,4,o,i)),"string"==typeof s[0]&&"string"==typeof s[1]?({value:n,error:l}=h.evalConvertToUTC(s[0],s[1],o,i)):l=t+" should contain an ISO format timestamp, a destination time zone string and an optional output format string."),{value:n,error:l}}static verifyTimeStamp(t){if("Invalid Date"===i.default(t).toString())return t+" is a invalid datetime"}static evalConvertToUTC(t,e,r,n){let o,s,a;const u=c.TimeZoneConverter.windowsToIana(e);if(c.TimeZoneConverter.verifyTimeZoneStr(u)||(s=e+" is not a valid timezone"),!s&&!(s=this.verifyTimeStamp(t))){try{a=i.default.tz(t,u).format()}catch(l){s=`${t} with ${u} is not a valid timestamp with specified timeZone:`}if(!s)try{o=i.default(a).locale(n).tz("Etc/UTC").format(r)}catch(l){s=r+" is not a valid timestamp format"}}return{value:o,error:s}}static validator(t){u.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String],l.ReturnType.String,l.ReturnType.String)}}r.ConvertToUTC=h},{180:180,192:192,196:196,213:213,214:214,402:402,404:404}],28:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Count,a.evaluator(),s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]||Array.isArray(t[0])?e=t[0].length:t[0]instanceof Map?e=t[0].size:"object"==typeof t[0]&&(e=Object.keys(t[0]).length),e},o.FunctionUtils.verifyContainer)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.String|s.ReturnType.Array)}}r.Count=a},{180:180,192:192,196:196,213:213}],29:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.CountWord,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).trim().split(/\s+/).length,o.FunctionUtils.verifyStringOrNull)}}r.CountWord=u},{180:180,192:192,195:195,196:196,213:213}],30:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.CreateArray,a.evaluator(),s.ReturnType.Array)}static evaluator(){return o.FunctionUtils.apply(t=>Array.from(t))}}r.CreateArray=a},{180:180,192:192,196:196,213:213}],31:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(399));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DataUri,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>"data:text/plain;charset=utf-8;base64,".concat(u.default(t[0])),s.FunctionUtils.verifyString)}}r.DataUri=l},{180:180,192:192,196:196,213:213,399:399}],32:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DataUriToBinary,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.getTextEncoder().encode(t[0]),o.FunctionUtils.verifyString)}}r.DataUriToBinary=u},{180:180,192:192,195:195,196:196,213:213}],33:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(393));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DataUriToString,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>u.default(t[0].slice(t[0].indexOf(",")+1)),s.FunctionUtils.verifyString)}}r.DataUriToString=l},{180:180,192:192,196:196,213:213,393:393}],34:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.Date,h.evaluator(),c.ReturnType.String,u.FunctionUtils.validateUnaryString)}static evaluator(){return u.FunctionUtils.applyWithError(t=>{const e=l.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:i.default(t[0]).utc().format("M/DD/YYYY"),error:e}},u.FunctionUtils.verifyString)}}r.DateFunc=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],35:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(222),o=n(t(402)),s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.DateReadBack,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithError(t=>{let e=l.InternalFunctionUtils.verifyISOTimestamp(t[0]);if(!e){const r=o.default(t[0]).toDate();if(!(e=l.InternalFunctionUtils.verifyISOTimestamp(t[1]))){const n=o.default(t[1]).format("YYYY-MM-DD");return{value:new i.TimexProperty(n).toNaturalLanguage(r),error:e}}}return{value:void 0,error:e}},u.FunctionUtils.verifyString)}static validator(t){u.FunctionUtils.validateOrder(t,void 0,c.ReturnType.String,c.ReturnType.String)}}r.DateReadBack=h},{180:180,192:192,195:195,196:196,213:213,222:222,402:402}],222:[function(t,e,r){!function(t){"use strict";var e=class{constructor(t,e,r){1===arguments.length?(this.hour=Math.floor(t/36e5),this.minute=Math.floor((t-36e5*this.hour)/6e4),this.second=(t-36e5*this.hour-6e4*this.minute)/1e3):(this.hour=t,this.minute=e,this.second=r)}getTime(){return 1e3*this.second+6e4*this.minute+36e5*this.hour}};const r=function(t){return t},n=function(){return 0},i={date:[{regex:/^(\d\d\d\d)-(\d\d)-(\d\d)$/,props:{year:Number,month:Number,dayOfMonth:Number}},{regex:/^XXXX-WXX-(\d)$/,props:{dayOfWeek:Number}},{regex:/^XXXX-(\d\d)-(\d\d)$/,props:{month:Number,dayOfMonth:Number}},{regex:/^(\d\d\d\d)$/,props:{year:Number}},{regex:/^(\d\d\d\d)-(\d\d)$/,props:{year:Number,month:Number}},{regex:/^(SP|SU|FA|WI)$/,props:{season:r}},{regex:/^(\d\d\d\d)-(SP|SU|FA|WI)$/,props:{year:Number,season:r}},{regex:/^(\d\d\d\d)-W(\d\d)$/,props:{year:Number,weekOfYear:Number}},{regex:/^(\d\d\d\d)-W(\d\d)-WE$/,props:{year:Number,weekOfYear:Number,weekend:function(){return!0}}},{regex:/^XXXX-(\d\d)$/,props:{month:Number}},{regex:/^XXXX-(\d\d)-W(\d\d)$/,props:{month:Number,weekOfMonth:Number}},{regex:/^XXXX-(\d\d)-WXX-(\d)-(\d)$/,props:{month:Number,weekOfMonth:Number,dayOfWeek:Number}}],time:[{regex:/^T(\d\d)$/,props:{hour:Number,minute:n,second:n}},{regex:/^T(\d\d):(\d\d)$/,props:{hour:Number,minute:Number,second:n}},{regex:/^T(\d\d):(\d\d):(\d\d)$/,props:{hour:Number,minute:Number,second:Number}},{regex:/^T(DT|NI|MO|AF|EV)$/,props:{partOfDay:r}}],period:[{regex:/^P(\d*\.?\d+)(Y|M|W|D)$/,props:{amount:Number,dateUnit:r}},{regex:/^PT(\d*\.?\d+)(H|M|S)$/,props:{amount:Number,timeUnit:r}}]},o=function(t,e,r){const n=e.match(t.regex);if(!n)return!1;let i=1;for(const o in t.props){const e=n[i++];r[o]=t.props[o](e)}return!0};var s=function(t,e,r){for(const n of i[t])if(o(n,e,r))return!0;return!1};const a=function(t,e){const r={};s("period",t,r),r.dateUnit?e[{Y:"years",M:"months",W:"weeks",D:"days"}[r.dateUnit]]=r.amount:r.timeUnit&&(e[{H:"hours",M:"minutes",S:"seconds"}[r.timeUnit]]=r.amount)},u=function(t,e){const r=t.indexOf("T");-1===r?s("date",t,e):(s("date",t.substr(0,r),e),s("time",t.substr(r),e))};var l=function(t,e){"PRESENT_REF"===t?e.now=!0:t.startsWith("P")?a(t,e):t.startsWith("(")&&t.endsWith(")")?function(t,e){const r=t.substring(1,t.length-1).split(",");3===r.length&&(u(r[0],e),a(r[2],e))}(t,e):u(t,e)},c=function(t,e){Object.assign(e,t),"hour"in e&&("minute"in e||(e.minute=0),"second"in e||(e.second=0))},h=function(t){const e=new Set;return function(t){return!0===t.now}(t)&&e.add("present"),function(t){return"year"in t&&"month"in t&&"dayOfMonth"in t}(t)&&e.add("definite"),function(t){return"month"in t&&"dayOfMonth"in t||"dayOfWeek"in t}(t)&&e.add("date"),function(t){return"year"in t&&!("dayOfMonth"in t)||"year"in t&&"month"in t&&!("dayOfMonth"in t)||"month"in t&&!("dayOfMonth"in t)||"season"in t||"weekOfYear"in t||"weekOfMonth"in t}(t)&&e.add("daterange"),function(t){return"years"in t||"months"in t||"weeks"in t||"days"in t||"hours"in t||"minutes"in t||"seconds"in t}(t)&&e.add("duration"),function(t){return"hour"in t&&"minute"in t&&"second"in t}(t)&&e.add("time"),function(t){return"partOfDay"in t}(t)&&e.add("timerange"),e.has("present")&&(e.add("date"),e.add("time")),e.has("time")&&e.has("duration")&&e.add("timerange"),e.has("date")&&e.has("time")&&e.add("datetime"),e.has("date")&&e.has("duration")&&e.add("daterange"),e.has("datetime")&&e.has("duration")&&e.add("datetimerange"),e.has("date")&&e.has("timerange")&&e.add("datetimerange"),e};const p=function(t){const e=new Date;return e.setTime(t.getTime()),e},d=function(t){const e=p(t);return e.setDate(e.getDate()+1),e},f=function(t,e){return t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate()},y=function(t,e){let r=p(e);for(let n=0;n<7;n++){if(f(t,r))return!0;r=d(r)}return!1};var m=d,g=function(t){const e=p(t);return e.setDate(e.getDate()-1),e},v=f,T=function(t,e){const r=p(e);return r.setDate(r.getDate()+(7-r.getDay())),y(t,r)},_=function(t,e){const r=p(e);return r.setDate(r.getDate()-(7+r.getDay())),y(t,r)},E=function(t,e){const r=t.toString();let n="";const i=e-r.length;for(let o=0;o<i;o++)n+="0";return`${n}${r}`},b=function(t,e){const r=p(e);for(r.setDate(r.getDate()-1);r.getDay()!==t;)r.setDate(r.getDate()-1);return r},S=function(t,e){const r=p(e);do{r.setDate(r.getDate()+1)}while(r.getDay()!==t);return r};const x=e,C=function(t){const e=Object.assign({},t);return delete e.year,delete e.month,delete e.dayOfMonth,delete e.dayOfWeek,delete e.weekOfYear,delete e.weekOfMonth,delete e.season,delete e.hour,delete e.minute,delete e.second,delete e.weekend,delete e.partOfDay,e},A=function(t,e){if("hours"in e){const r=Object.assign({},t);if(r.hour+=e.hours,r.hour>23){const t=Math.floor(r.hour/24),e=r.hour%24;if(r.hour=e,"year"in r&&"month"in r&&"dayOfMonth"in r){const e=new Date(r.year,r.month-1,r.dayOfMonth,0,0,0);for(let r=0;r<t;r++)e.setDate(e.getDate()+1);return r.year=e.getFullYear(),r.month=e.getMonth()+1,r.dayOfMonth=e.getDate(),r}if("dayOfWeek"in r)return r.dayOfWeek+=t,r}return r}if("minutes"in e){const r=Object.assign({},t);return r.minute+=e.minutes,r.minute>59&&(r.hour++,r.minute=0),r}return t},N=function(t,e){return A(function(t,e){if("dayOfWeek"in t){const r=Object.assign({},t);return"days"in e&&(r.dayOfWeek+=e.days),r}if("month"in t&&"dayOfMonth"in t){var r=e.days;if(void 0===r&&void 0!==e.weeks&&(r=7*e.weeks),void 0!==r){if("year"in t){const e=new Date(t.year,t.month-1,t.dayOfMonth,0,0,0);for(let t=0;t<r;t++)e.setDate(e.getDate()+1);return{year:e.getFullYear(),month:e.getMonth()+1,dayOfMonth:e.getDate()}}{const e=new Date(2001,t.month-1,t.dayOfMonth,0,0,0);for(let t=0;t<r;t++)e.setDate(e.getDate()+1);return{month:e.getMonth()+1,dayOfMonth:e.getDate()}}}if("years"in e&&"year"in t)return{year:t.year+e.years,month:t.month,dayOfMonth:t.dayOfMonth};if("months"in e&&"month"in t)return{year:t.year,month:t.month+e.months,dayOfMonth:t.dayOfMonth}}return t}(t,e),e)},O=function(t){if(("types"in t?t.types:h(t)).has("duration")){const e=function(t){const e=Object.assign({},t);return delete e.years,delete e.months,delete e.weeks,delete e.days,delete e.hours,delete e.minutes,delete e.seconds,e}(t),r=C(t);return{start:e,end:N(e,r),duration:r}}if("year"in t){const e={start:{year:t.year},end:{}};return"month"in t?(e.start.month=t.month,e.start.dayOfMonth=1,e.end.year=t.year,e.end.month=t.month+1,e.end.dayOfMonth=1):(e.start.month=1,e.start.dayOfMonth=1,e.end.year=t.year+1,e.end.month=1,e.end.dayOfMonth=1),e}return{start:{},end:{}}},w=function(t,e){const r=e.hours||0,n=e.minutes||0,i=e.seconds||0;return{hour:t.hour+r,minute:t.minute+n,second:t.second+i}},R=function(t){if(!t.types.has("timerange"))throw new exception("argument must be a timerange");if(void 0!==t.partOfDay)switch(t.partOfDay){case"DT":t={hour:8,minute:0,second:0,hours:10,minutes:0,seconds:0};break;case"MO":t={hour:8,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"AF":t={hour:12,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"EV":t={hour:16,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"NI":t={hour:20,minute:0,second:0,hours:4,minutes:0,seconds:0};break;default:throw new exception("unrecognized part of day timerange")}const e={hour:t.hour,minute:t.minute,second:t.second},r=C(t);return{start:e,end:w(e,r),duration:r}},L=function(t){const e="year"in t?t.year:2001,r="month"in t?t.month-1:0,n="dayOfMonth"in t?t.dayOfMonth:1,i="hour"in t?t.hour:0,o="minute"in t?t.minute:0,s="second"in t?t.second:0;return new Date(e,r,n,i,o,s)},P=function(t){const e=t.hour||0,r=t.minute||0,n=t.second||0;return new x(e,r,n)};var I=O,D=R,U=L,M=P,k=function(t){const e=R(t);return{start:P(e.start),end:P(e.end)}},F=A,j=N;const B=E,H=function(t){return 0===t.minute&&0===t.second?"T"+B(t.hour,2):0===t.second?`T${B(t.hour,2)}:${B(t.minute,2)}`:`T${B(t.hour,2)}:${B(t.minute,2)}:${B(t.second,2)}`},G=function(t){return"year"in t&&"month"in t&&"dayOfMonth"in t?`${B(t.year,4)}-${B(t.month,2)}-${B(t.dayOfMonth,2)}`:"month"in t&&"dayOfMonth"in t?`XXXX-${B(t.month,2)}-${B(t.dayOfMonth,2)}`:"dayOfWeek"in t?"XXXX-WXX-"+t.dayOfWeek:""},z=function(t){return"partOfDay"in t?"T"+t.partOfDay:""},W=function(t){const e="types"in t?t.types:h(t);if(e.has("present"))return"PRESENT_REF";if((e.has("datetimerange")||e.has("daterange")||e.has("timerange"))&&e.has("duration")){const e=I(t);return`(${W(e.start)},${W(e.end)},${W(e.duration)})`}return e.has("datetimerange")?`${G(t)}${z(t)}`:e.has("daterange")?""+function(t){return"year"in t&&"weekOfYear"in t&&"weekend"in t?`${B(t.year,4)}-W${B(t.weekOfYear,2)}-WE`:"year"in t&&"weekOfYear"in t?`${B(t.year,4)}-W${B(t.weekOfYear,2)}`:"year"in t&&"season"in t?`${B(t.year,4)}-${t.season}`:"season"in t?""+t.season:"year"in t&&"month"in t?`${B(t.year,4)}-${B(t.month,2)}`:"year"in t?""+B(t.year,4):"month"in t&&"weekOfMonth"in t&&"dayOfWeek"in t?`XXXX-${B(t.month,2)}-WXX-${t.weekOfMonth}-${t.dayOfWeek}`:"month"in t&&"weekOfMonth"in t?`XXXX-${B(t.month,2)}-WXX-${t.weekOfMonth}`:"month"in t?"XXXX-"+B(t.month,2):""}(t):e.has("timerange")?""+z(t):e.has("datetime")?`${G(t)}${H(t)}`:e.has("duration")?""+function(t){return"years"in t?`P${t.years}Y`:"months"in t?`P${t.months}M`:"weeks"in t?`P${t.weeks}W`:"days"in t?`P${t.days}D`:"hours"in t?`PT${t.hours}H`:"minutes"in t?`PT${t.minutes}M`:"seconds"in t?`PT${t.seconds}S`:""}(t):e.has("date")?""+G(t):e.has("time")?""+H(t):""};var V={format:W},$={days:["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],months:["January","Februrary","March","April","May","June","July","August","September","October","November","December"],dateAbbreviation:{0:"th",1:"st",2:"nd",3:"rd",4:"th",5:"th",6:"th",7:"th",8:"th",9:"th"},hours:["midnight","1AM","2AM","3AM","4AM","5AM","6AM","7AM","8AM","9AM","10AM","11AM","midday","1PM","2PM","3PM","4PM","5PM","6PM","7PM","8PM","9PM","10PM","11PM"],seasons:{SP:"spring",SU:"summer",FA:"fall",WI:"winter"},weeks:["first","second","third","forth"],dayParts:{DT:"daytime",NI:"night",MO:"morning",AF:"afternoon",EV:"evening"}};const q=function(t){if("dayOfWeek"in t)return $.days[t.dayOfWeek-1];const e=$.months[t.month-1],r=t.dayOfMonth.toString(),n=$.dateAbbreviation[r.slice(-1)];return"year"in t?`${r}${n} ${e} ${t.year}`.trim():`${r}${n} ${e}`},Y=function(t){if(0===t.hour&&0===t.minute&&0===t.second)return"midnight";if(12===t.hour&&0===t.minute&&0===t.second)return"midday";const e=function(t){return 1===t.length?"0"+t:t};return`${0===t.hour?"12":t.hour>12?(t.hour-12).toString():t.hour.toString()}${0===t.minute&&0===t.second?"":":"+e(t.minute.toString())}${0===t.second?"":":"+e(t.second.toString())}${t.hour<12?"AM":"PM"}`},K=function(t,e,r){const n=t[e+"s"];return void 0!==n&&(1===n?r?"1 "+e:e:`${n} ${e}s`)},X=function(t,e){return K(t,"year",e)||K(t,"month",e)||K(t,"week",e)||K(t,"day",e)||K(t,"hour",e)||K(t,"minute",e)||K(t,"second",e)},Q=function(t){return $.dayParts[t.partOfDay]},Z=function(t){const e="types"in t?t.types:h(t);return e.has("present")?"now":e.has("datetimerange")?function(t){return t.types.has("timerange")?`${q(t)} ${Q(t)}`:""}(t):e.has("daterange")?function(t){const e="season"in t?$.seasons[t.season]:"",r="year"in t?t.year.toString():"";if("weekOfYear"in t)return t.weekend,"";if("month"in t){const e=""+$.months[t.month-1];return"weekOfMonth"in t?`${$.weeks[t.weekOfMonth-1]} week of ${e}`:`${e} ${r}`.trim()}return`${e} ${r}`.trim()}(t):e.has("duration")?function(t){return X(t,!0)}(t):e.has("timerange")?Q(t):e.has("datetime")?function(t){return`${Y(t)} ${q(t)}`}(t):e.has("date")?q(t):e.has("time")?Y(t):""};var J={convertDate:q,convertTime:Y,convertTimexToString:Z,convertTimexSetToString:function(t){const e=t.timex;return e.types.has("duration")?"every "+X(e,!1):"every "+Z(e)}},tt={convertTimexToString:J.convertTimexToString,convertTimexSetToString:J.convertTimexSetToString};const et=function(t){return $.days[0===t?6:t-1]},rt=function(t,e){if("year"in t&&"month"in t&&"dayOfMonth"in t){const r=new Date(t.year,t.month-1,t.dayOfMonth);if(v(r,e))return"today";const n=m(e);if(v(r,n))return"tomorrow";const i=g(e);if(v(r,i))return"yesterday";if(function(t,e){const r=p(e);return r.setDate(r.getDate()-r.getDay()),y(t,r)}(r,e))return"this "+et(r.getDay());if(T(r,e))return"next "+et(r.getDay());if(_(r,e))return"last "+et(r.getDay())}return J.convertDate(t)};var nt={convertTimexToStringRelative:function(t,e){const r="types"in t?t.types:h(t);return r.has("datetimerange")?function(t,e){if("year"in t&&"month"in t&&"dayOfMonth"in t){const r=new Date(t.year,t.month-1,t.dayOfMonth);if("partOfDay"in t){if(v(r,e))return"NI"===t.partOfDay?"tonight":"this "+$.dayParts[t.partOfDay];const n=m(e);if(v(r,n))return"tomorrow "+$.dayParts[t.partOfDay];const i=g(e);if(v(r,i))return"yesterday "+$.dayParts[t.partOfDay];if(T(r,e))return`next ${et(r.getDay())} ${$.dayParts[t.partOfDay]}`;if(_(r,e))return`last ${et(r.getDay())} ${$.dayParts[t.partOfDay]}`}}return""}(t,e):r.has("daterange")?function(t,e){if("year"in t){const r=e.getFullYear();if(t.year===r){if("weekOfYear"in t){const r=function(t){const e=new Date(t.getFullYear(),0),r=new Date(t.getFullYear(),t.getMonth(),t.getDate());let n=1;for(;e.getTime()<r.getTime();){const t=e.getDay();7===(0==t?7:t)&&n++,e.setDate(e.getDate()+1)}return n}(e);if(r===t.weekOfYear)return t.weekend?"this weekend":"this week";if(r===t.weekOfYear+1)return t.weekend?"last weekend":"last week";if(r===t.weekOfYear-1)return t.weekend?"next weekend":"next week"}if("month"in t){const r=e.getMonth()+1;if(t.month===r)return"this month";if(t.month===r+1)return"next month";if(t.month===r-1)return"last month"}return"season"in t?"this "+$.seasons[t.season]:"this year"}if(t.year===r+1)return"season"in t?"next "+$.seasons[t.season]:"next year";if(t.year===r-1)return"season"in t?"last "+$.seasons[t.season]:"last year"}return""}(t,e):r.has("datetime")?function(t,e){return`${rt(t,e)} ${J.convertTime(t)}`}(t,e):r.has("date")?rt(t,e):J.convertTimexToString(t)}};class it{constructor(t){"string"==typeof t?l(t,this):c(t,this)}get timex(){return V.format(this)}get types(){return h(this)}toString(){return tt.convertTimexToString(this)}toNaturalLanguage(t){return nt.convertTimexToStringRelative(this,t)}static fromDate(t){return new it({year:t.getFullYear(),month:t.getMonth()+1,dayOfMonth:t.getDate()})}static fromDateTime(t){return new it({year:t.getFullYear(),month:t.getMonth()+1,dayOfMonth:t.getDate(),hour:t.getHours(),minute:t.getMinutes(),second:t.getSeconds()})}static fromTime(t){return new it(t)}}var ot={TimexProperty:it};const st=ot.TimexProperty,at=ot.TimexProperty;var ut={today:function(t){return at.fromDate(t||new Date).timex},tomorrow:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()+1),at.fromDate(e).timex},yesterday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()-1),at.fromDate(e).timex},weekFromToday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return new at(Object.assign(at.fromDate(e),{days:7})).timex},weekBackFromToday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()-7),new at(Object.assign(at.fromDate(e),{days:7})).timex},thisWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime());e.setDate(e.getDate()-7);const r=S(1,e);return new at(Object.assign(at.fromDate(r),{days:7})).timex},nextWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime()),r=S(1,e);return new at(Object.assign(at.fromDate(r),{days:7})).timex},lastWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime()),r=b(1,e);return r.setDate(r.getDate()-7),new at(Object.assign(at.fromDate(r),{days:7})).timex},nextWeeksFromToday:function(t,e){const r=void 0===e?new Date:new Date(e.getTime());return new at(Object.assign(at.fromDate(r),{days:7*t})).timex},monday:"XXXX-WXX-1",tuesday:"XXXX-WXX-2",wednesday:"XXXX-WXX-3",thursday:"XXXX-WXX-4",friday:"XXXX-WXX-5",saturday:"XXXX-WXX-6",sunday:"XXXX-WXX-7",morning:"(T08,T12,PT4H)",afternoon:"(T12,T16,PT4H)",evening:"(T16,T20,PT4H)",daytime:"(T08,T18,PT10H)"};const lt=function(t,e){return t.end.getTime()>e.start.getTime()&&t.start.getTime()<=e.start.getTime()||t.start.getTime()<e.end.getTime()&&t.start.getTime()>=e.start.getTime()},ct=function(t,e,r){return{start:new r(Math.max(t.start.getTime(),e.start.getTime())),end:new r(Math.min(t.end.getTime(),e.end.getTime()))}},ht=function(t,e){if(1===t.length)return!1;for(let r=0;r<t.length;r++){const n=t[r];for(let i=r+1;i<t.length;i++){const o=t[i];if(lt(n,o))return t.splice(r,1),t.splice(i-1,1),t.push(ct(n,o,e)),!0}}return!1};var pt=function(t,e){const r=t.slice(0);for(;ht(r,e););return r.sort((t,e)=>t.start.getTime()-e.start.getTime()),r},dt=lt;const ft=e,yt=ot.TimexProperty,mt=function(t,e){const r=U(t);return r.getTime()>=e.start.getTime()&&r.getTime()<e.end.getTime()?[t.timex]:[]},gt=function(t,e){if("month"in t&&"dayOfMonth"in t){const r=[];for(let n=e.start.getFullYear();n<=e.end.getFullYear();n++){const i=mt(new yt(Object.assign({},t,{year:n})),e);i.length>0&&r.push(i[0])}return r}if("dayOfWeek"in t){const r=function(t,e,r){const n=[],i=p(e);for(;!f(i,r);)i.getDay()===t&&n.push(p(i)),i.setDate(i.getDate()+1);return n}(7===t.dayOfWeek?0:t.dayOfWeek,e.start,e.end),n=[];for(const e of r){const r=Object.assign({},t);delete r.dayOfWeek;const i=new yt(Object.assign({},r,{year:e.getFullYear(),month:e.getMonth()+1,dayOfMonth:e.getDate()}));n.push(i.timex)}return n}return[]},vt=function(t,e){const r=[];for(const n of e)Array.prototype.push.apply(r,gt(t,n));return r},Tt=function(t,e){const r=new ft(t.hour,t.minute,t.second);return r.getTime()>=e.start.getTime()&&r.getTime()<e.end.getTime()?[t.timex]:[]},_t=function(t,e){const r=[];for(const n of e)Array.prototype.push.apply(r,Tt(t,n));return r},Et=function(t){var e=new Set;return t.filter(t=>!e.has(t)&&e.add(t))},bt=function(t,e){const r=k(t),n=[];for(const i of e)if(dt(r,i)){const e=Math.max(r.start.getTime(),i.start.getTime()),o=new ft(e),s=new yt(t.timex);delete s.partOfDay,delete s.seconds,delete s.minutes,delete s.hours,s.second=o.second,s.minute=o.minute,s.hour=o.hour,n.push(s.timex)}return n},St=function(t,e){const r=[];for(const n of e)n.types.has("datetime")?r.push(new yt(j(n,t))):n.types.has("time")&&r.push(new yt(F(n,t)));return r},xt=E;var Ct=function(t){return void 0!==t.year&&void 0!==t.month&&void 0!==t.dayOfMonth?`${xt(t.year,4)}-${xt(t.month,2)}-${xt(t.dayOfMonth,2)}`:""},At=function(t){return void 0!==t.hour&&void 0!==t.minute&&void 0!==t.second?`${xt(t.hour,2)}:${xt(t.minute,2)}:${xt(t.second,2)}`:""};const Nt=ot.TimexProperty,Ot=b,wt=S,Rt=function(t,e){if(void 0!==t.month&&void 0!==t.dayOfMonth)return Ct({year:e.getFullYear()-1,month:t.month,dayOfMonth:t.dayOfMonth});if(void 0!==t.dayOfWeek){const r=7===t.dayOfWeek?0:t.dayOfWeek,n=Ot(r,e);return Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()})}},Lt=function(t,e){if(void 0!==t.month&&void 0!==t.dayOfMonth)return Ct({year:e.getFullYear(),month:t.month,dayOfMonth:t.dayOfMonth});if(void 0!==t.dayOfWeek){const r=7===t.dayOfWeek?0:t.dayOfWeek,n=wt(r,e);return Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()})}},Pt=function(t,e){return[{timex:t.timex,type:"date",value:Rt(t,e)},{timex:t.timex,type:"date",value:Lt(t,e)}]},It=function(t,e){return{start:Ct({year:t,month:e,dayOfMonth:1}),end:Ct({year:t,month:e+1,dayOfMonth:1})}},Dt=function(t){switch(t.partOfDay){case"MO":return{start:"08:00:00",end:"12:00:00"};case"AF":return{start:"12:00:00",end:"16:00:00"};case"EV":return{start:"16:00:00",end:"20:00:00"};case"NI":return{start:"20:00:00",end:"24:00:00"}}return{start:"not resolved",end:"not resolved"}},Ut=function(t,e){const r="types"in t?t.types:h(t);return r.has("datetimerange")?function(t){if("partOfDay"in t){const e=Ct(t),r=Dt(t);return[{timex:t.timex,type:"datetimerange",start:`${e} ${r.start}`,end:`${e} ${r.end}`}]}{const e=I(t);return[{timex:t.timex,type:"datetimerange",start:`${Ct(e.start)} ${At(e.start)}`,end:`${Ct(e.end)} ${At(e.end)}`}]}}(t):r.has("definite")&&r.has("time")?function(t,e){return[{timex:t.timex,type:"datetime",value:`${Ct(t)} ${At(t)}`}]}(t):r.has("definite")&&r.has("daterange")?function(t){var e=I(t);return[{timex:t.timex,type:"daterange",start:""+Ct(e.start),end:""+Ct(e.end)}]}(t):r.has("definite")?function(t,e){return[{timex:t.timex,type:"date",value:Ct(t)}]}(t):r.has("daterange")?function(t,e){if("season"in t)return[{timex:t.timex,type:"daterange",value:"not resolved"}];if(void 0!==t.year&&void 0!==t.month){const e=It(t.year,t.month);return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}if(void 0!==t.year&&void 0!==t.weekOfYear){const e=function(t,e){var r=new Date(t,0,1);r.setDate(r.getDate()+7*(e-1));var n=Ot(1,r);r.setDate(r.getDate()+7);var i=Ot(1,r);return{start:Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()}),end:Ct({year:i.getFullYear(),month:i.getMonth()+1,dayOfMonth:i.getDate()})}}(t.year,t.weekOfYear);return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}if(void 0!==t.month){const r=e.getFullYear(),n=It(r-1,t.month),i=It(r,t.month);return[{timex:t.timex,type:"daterange",start:n.start,end:n.end},{timex:t.timex,type:"daterange",start:i.start,end:i.end}]}if(void 0!==t.year){const e=(r=t.year,{start:Ct({year:r,month:1,dayOfMonth:1}),end:Ct({year:r+1,month:1,dayOfMonth:1})});return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}return[];var r}(t,e):r.has("timerange")?function(t,e){if("partOfDay"in t){const e=Dt(t);return[{timex:t.timex,type:"timerange",start:e.start,end:e.end}]}{const e=D(t);return[{timex:t.timex,type:"timerange",start:At(e.start),end:At(e.end)}]}}(t):r.has("datetime")?function(t,e){const r=Pt(t,e);for(const n of r)n.type="datetime",n.value=`${n.value} ${At(t)}`;return r}(t,e):r.has("duration")?function(t){return[{timex:t.timex,type:"duration",value:(e=t,void 0!==e.years?(31536e3*e.years).toString():void 0!==e.months?(2592e3*e.months).toString():void 0!==e.weeks?(604800*e.weeks).toString():void 0!==e.days?(86400*e.days).toString():void 0!==e.hours?(3600*e.hours).toString():void 0!==e.minutes?(60*e.minutes).toString():void 0!==e.seconds?e.seconds.toString():"")}];var e}(t):r.has("date")?Pt(t,e):r.has("time")?function(t){return[{timex:t.timex,type:"time",value:At(t)}]}(t):[]};var Mt={Time:e,TimexProperty:ot.TimexProperty,TimexSet:class{constructor(t){this.timex=new st(t)}},creator:ut,resolver:{evaluate:function(t,e){const r=e.map(t=>new yt(t));return function(t,e){const r=e.filter(t=>t.types.has("timerange")).map(t=>k(t)),n=pt(r,ft);if(0===n.length)return t;const i=[];for(const o of t){const t=new yt(o);if(t.types.has("timerange")){const e=bt(t,n);Array.prototype.push.apply(i,e)}else if(t.types.has("time")){const e=_t(t,n);Array.prototype.push.apply(i,e)}}return Et(i)}(function(t,e){const r=e.filter(t=>t.types.has("time")).map(t=>M(t));if(0===r.length)return t;const n=[];for(const i of t.map(t=>new yt(t)))if(i.types.has("date")&&!i.types.has("time"))for(const t of r)i.hour=t.hour,i.minute=t.minute,i.second=t.second,n.push(i.timex);else n.push(i.timex);return Et(n)}(function(t,e){const r=e.filter(t=>t.types.has("daterange")).map(t=>function(t){const e=O(t);return{start:L(e.start),end:L(e.end)}}(t)),n=pt(r,Date);if(0===n.length)return t;const i=[];for(const o of t){const t=vt(new yt(o),n);Array.prototype.push.apply(i,t)}return Et(i)}(function(t,e){const r=[];for(const n of t){const t=new yt(n);if(t.types.has("duration")){const n=St(t,e);for(const t of n)r.push(t.timex)}else r.push(n)}return r}(t,r),r),r),r).map(t=>new yt(t))}},valueResolver:{resolve:function(t,e){const r={values:[]};for(const n of t){const t=new Nt(n),i=Ut(t,e);Array.prototype.push.apply(r.values,i)}return r}}},kt=Mt.Time,Ft=Mt.TimexProperty,jt=Mt.valueResolver;t.Time=kt,t.TimexProperty=Ft,t.valueResolver=jt}({})},{}],36:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=n(t(402)),u=t(213),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DateTimeDiff,c.evaluator,u.ReturnType.Number,c.validator)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let u=o;return u||(u=l.InternalFunctionUtils.verifyISOTimestamp(i[0]))||(u=l.InternalFunctionUtils.verifyISOTimestamp(i[1]))||(n=1e4*a.default(i[0]).diff(a.default(i[1]),"milliseconds")),{value:n,error:u}}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,2,2,u.ReturnType.String)}}r.DateTimeDiff=c},{180:180,192:192,195:195,196:196,213:213,402:402}],37:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DayOfMonth,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCDate(),error:e}},o.FunctionUtils.verifyString)}}r.DayOfMonth=u},{180:180,192:192,195:195,196:196,213:213}],38:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DayOfWeek,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCDay(),error:e}},o.FunctionUtils.verifyString)}}r.DayOfWeek=u},{180:180,192:192,195:195,196:196,213:213}],39:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(403));i.default.extend(o.default);const s=n(t(405));i.default.extend(s.default);const a=t(180),u=t(192),l=t(196),c=t(195),h=t(213);class p extends a.ExpressionEvaluator{constructor(){super(u.ExpressionType.DayOfYear,p.evaluator(),h.ReturnType.Number,l.FunctionUtils.validateUnaryString)}static evaluator(){return l.FunctionUtils.applyWithError(t=>{const e=c.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:i.default(t[0]).utc().dayOfYear(),error:e}},l.FunctionUtils.verifyString)}}r.DayOfYear=p},{180:180,192:192,195:195,196:196,213:213,402:402,403:403,405:405}],403:[function(t,e,r){var n;n=function(){"use strict";return function(t,e){e.prototype.dayOfYear=function(t){var e=Math.round((this.startOf("day")-this.startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"day")}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_dayOfYear=n()},{}],40:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(103);class s extends o.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Divide,s.func,s.verify)}static func(t){const e=Number(t[0])/Number(t[1]);return Number.isInteger(t[0])&&Number.isInteger(t[1])?Math.floor(e):e}static verify(t,e,r){let n=i.FunctionUtils.verifyNumber(t,e,r);return!n&&r>0&&0===Number(t)&&(n="Cannot divide by 0 from "+e),n}}r.Divide=s},{103:103,192:192,196:196}],103:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e,r){super(t,s.evaluator(e,r),o.ReturnType.Number,i.FunctionUtils.validateTwoOrMoreThanTwoNumbers)}static evaluator(t,e){return i.FunctionUtils.applySequence(t,e||i.FunctionUtils.verifyNumber)}}r.MultivariateNumericEvaluator=s},{180:180,196:196,213:213}],41:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Element,l.evaluator,u.ReturnType.Object,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){let n;const i=t.children[0],o=t.children[1],{value:u,error:l}=i.tryEvaluate(e,r);let c=l;if(!c){let t;const i=new a.Options(r);if(i.nullSubstitution=void 0,({value:t,error:c}=o.tryEvaluate(e,i)),!c)return Number.isInteger(t)?({value:n,error:c}=s.InternalFunctionUtils.accessIndex(u,Number(t))):"string"==typeof t?({value:n,error:c}=s.InternalFunctionUtils.accessProperty(u,t.toString())):c=`Could not coerce ${o} to an int or string.`,{value:n,error:c}}}}r.Element=l},{180:180,192:192,195:195,196:196,204:204,213:213}],42:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Empty,s.func,i.FunctionUtils.validateUnary,i.FunctionUtils.verifyContainerOrNull)}static func(t){return s.isEmpty(t[0])}static isEmpty(t){return null==t||("string"==typeof t?""===t:Array.isArray(t)?0===t.length:t instanceof Map?0===t.size:0===Object.keys(t).length)}}r.Empty=s},{192:192,196:196,23:23}],43:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.EndsWith,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).endsWith(s.InternalFunctionUtils.parseStringOrUndefined(t[1])),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String)}}r.EndsWith=u},{180:180,192:192,195:195,196:196,213:213}],44:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.EOL,a.evaluator(),s.ReturnType.String,a.validator)}static evaluator(){return o.FunctionUtils.apply(()=>a.platformSpecificEOL())}static platformSpecificEOL(){return"undefined"!=typeof window?window.navigator.platform.includes("Win")?"\r\n":"\n":"undefined"!=typeof self?self.navigator.platform.includes("Win")?"\r\n":"\n":t(427).EOL}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,0,0)}}r.EOL=a},{180:180,192:192,196:196,213:213,427:427}],427:[function(t,e,r){r.EOL="\n"},{}],45:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);r.Equal=class extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Equal,t=>i.FunctionUtils.commonEquals(t[0],t[1]),i.FunctionUtils.validateBinary)}}},{192:192,196:196,23:23}],46:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Exists,s.func,i.FunctionUtils.validateUnary,i.FunctionUtils.verifyNotNull)}static func(t){return null!=t[0]}}r.Exists=s},{192:192,196:196,23:23}],47:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.First,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]&&t[0].length>0&&(e=t[0][0]),Array.isArray(t[0])&&t[0].length>0&&(e=s.InternalFunctionUtils.accessIndex(t[0],0).value),e})}}r.First=u},{180:180,192:192,195:195,196:196,213:213}],48:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Flatten,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0],r=t.length>1?t[1]:100;return a.evalFlatten(e,r)})}static evalFlatten(t,e){(!o.FunctionUtils.isNumber(e)||e<1)&&(e=1);let r=JSON.parse(JSON.stringify(t));for(let n=0;n<e&&r.some(t=>Array.isArray(t));n++)r=r.reduce((t,e)=>t.concat(e),[]);return r}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.Array)}}r.Flatten=a},{180:180,192:192,196:196,213:213}],49:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Float,l.evaluator(),a.ReturnType.Number,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.applyWithError(t=>{const e=t[0];let r,n;return u.default.isInstance(e)?{value:e.toJSNumber(),error:r}:("string"==typeof e?(n=parseFloat(e),s.FunctionUtils.isNumber(n)||(r=`parameter ${t[0]} is not a valid number string.`)):s.FunctionUtils.isNumber(e)&&(n=e),{value:n,error:r})})}}r.Float=l},{180:180,192:192,196:196,213:213,396:396}],396:[function(t,e,r){var n=function(t){"use strict";var e=1e7,r=9007199254740992,i=h(r),o="function"==typeof BigInt;function s(t,e,r,n){return void 0===t?s[0]:void 0===e||10==+e&&!r?V(t):B(t,e,r,n)}function a(t,e){this.value=t,this.sign=e,this.isSmall=!1}function u(t){this.value=t,this.sign=t<0,this.isSmall=!0}function l(t){this.value=t}function c(t){return-r<t&&t<r}function h(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function p(t){d(t);var r=t.length;if(r<4&&O(t,i)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function d(t){for(var e=t.length;0===t[--e];);t.length=e+1}function f(t){for(var e=new Array(t),r=-1;++r<t;)e[r]=0;return e}function y(t){return t>0?Math.floor(t):Math.ceil(t)}function m(t,r){var n,i,o=t.length,s=r.length,a=new Array(o),u=0,l=e;for(i=0;i<s;i++)u=(n=t[i]+r[i]+u)>=l?1:0,a[i]=n-u*l;for(;i<o;)u=(n=t[i]+u)===l?1:0,a[i++]=n-u*l;return u>0&&a.push(u),a}function g(t,e){return t.length>=e.length?m(t,e):m(e,t)}function v(t,r){var n,i,o=t.length,s=new Array(o),a=e;for(i=0;i<o;i++)n=t[i]-a+r,r=Math.floor(n/a),s[i]=n-r*a,r+=1;for(;r>0;)s[i++]=r%a,r=Math.floor(r/a);return s}function T(t,e){var r,n,i=t.length,o=e.length,s=new Array(i),a=0;for(r=0;r<o;r++)(n=t[r]-a-e[r])<0?(n+=1e7,a=1):a=0,s[r]=n;for(r=o;r<i;r++){if(!((n=t[r]-a)<0)){s[r++]=n;break}n+=1e7,s[r]=n}for(;r<i;r++)s[r]=t[r];return d(s),s}function _(t,e,r){var n,i,o=t.length,s=new Array(o),l=-e;for(n=0;n<o;n++)i=t[n]+l,l=Math.floor(i/1e7),i%=1e7,s[n]=i<0?i+1e7:i;return"number"==typeof(s=p(s))?(r&&(s=-s),new u(s)):new a(s,r)}function E(t,e){var r,n,i,o,s=t.length,a=e.length,u=f(s+a);for(i=0;i<s;++i){o=t[i];for(var l=0;l<a;++l)r=o*e[l]+u[i+l],n=Math.floor(r/1e7),u[i+l]=r-1e7*n,u[i+l+1]+=n}return d(u),u}function b(t,r){var n,i,o=t.length,s=new Array(o),a=e,u=0;for(i=0;i<o;i++)n=t[i]*r+u,u=Math.floor(n/a),s[i]=n-u*a;for(;u>0;)s[i++]=u%a,u=Math.floor(u/a);return s}function S(t,e){for(var r=[];e-- >0;)r.push(0);return r.concat(t)}function x(t,r,n){return new a(t<e?b(r,t):E(r,h(t)),n)}function C(t){var e,r,n,i,o=t.length,s=f(o+o);for(n=0;n<o;n++){r=0-(i=t[n])*i;for(var a=n;a<o;a++)e=i*t[a]*2+s[n+a]+r,r=Math.floor(e/1e7),s[n+a]=e-1e7*r;s[n+o]=r}return d(s),s}function A(t,e){var r,n,i,o,s=t.length,a=f(s);for(i=0,r=s-1;r>=0;--r)i=(o=1e7*i+t[r])-(n=y(o/e))*e,a[r]=0|n;return[a,0|i]}function N(t,r){var n,i=V(r);if(o)return[new l(t.value/i.value),new l(t.value%i.value)];var c,m=t.value,g=i.value;if(0===g)throw new Error("Cannot divide by zero");if(t.isSmall)return i.isSmall?[new u(y(m/g)),new u(m%g)]:[s[0],t];if(i.isSmall){if(1===g)return[t,s[0]];if(-1==g)return[t.negate(),s[0]];var v=Math.abs(g);if(v<e){c=p((n=A(m,v))[0]);var _=n[1];return t.sign&&(_=-_),"number"==typeof c?(t.sign!==i.sign&&(c=-c),[new u(c),new u(_)]):[new a(c,t.sign!==i.sign),new u(_)]}g=h(v)}var E=O(m,g);if(-1===E)return[s[0],t];if(0===E)return[s[t.sign===i.sign?1:-1],s[0]];c=(n=m.length+g.length<=200?function(t,r){var n,i,o,s,a,u,l,c=t.length,h=r.length,d=e,y=f(r.length),m=r[h-1],g=Math.ceil(d/(2*m)),v=b(t,g),T=b(r,g);for(v.length<=c&&v.push(0),T.push(0),m=T[h-1],i=c-h;i>=0;i--){for(n=d-1,v[i+h]!==m&&(n=Math.floor((v[i+h]*d+v[i+h-1])/m)),o=0,s=0,u=T.length,a=0;a<u;a++)o+=n*T[a],l=Math.floor(o/d),s+=v[i+a]-(o-l*d),o=l,s<0?(v[i+a]=s+d,s=-1):(v[i+a]=s,s=0);for(;0!==s;){for(n-=1,o=0,a=0;a<u;a++)(o+=v[i+a]-d+T[a])<0?(v[i+a]=o+d,o=0):(v[i+a]=o,o=1);s+=o}y[i]=n}return v=A(v,g)[0],[p(y),p(v)]}(m,g):function(t,e){for(var r,n,i,o,s,a=t.length,u=e.length,l=[],c=[];a;)if(c.unshift(t[--a]),d(c),O(c,e)<0)l.push(0);else{i=1e7*c[(n=c.length)-1]+c[n-2],o=1e7*e[u-1]+e[u-2],n>u&&(i=1e7*(i+1)),r=Math.ceil(i/o);do{if(O(s=b(e,r),c)<=0)break;r--}while(r);l.push(r),c=T(c,s)}return l.reverse(),[p(l),p(c)]}(m,g))[0];var S=t.sign!==i.sign,x=n[1],C=t.sign;return"number"==typeof c?(S&&(c=-c),c=new u(c)):c=new a(c,S),"number"==typeof x?(C&&(x=-x),x=new u(x)):x=new a(x,C),[c,x]}function O(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==e[r])return t[r]>e[r]?1:-1;return 0}function w(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function R(t,e){for(var r,i,o,s=t.prev(),a=s,u=0;a.isEven();)a=a.divide(2),u++;t:for(i=0;i<e.length;i++)if(!t.lesser(e[i])&&!(o=n(e[i]).modPow(a,t)).isUnit()&&!o.equals(s)){for(r=u-1;0!=r;r--){if((o=o.square().mod(t)).isUnit())return!1;if(o.equals(s))continue t}return!1}return!0}a.prototype=Object.create(s.prototype),u.prototype=Object.create(s.prototype),l.prototype=Object.create(s.prototype),a.prototype.add=function(t){var e=V(t);if(this.sign!==e.sign)return this.subtract(e.negate());var r=this.value,n=e.value;return e.isSmall?new a(v(r,Math.abs(n)),this.sign):new a(g(r,n),this.sign)},a.prototype.plus=a.prototype.add,u.prototype.add=function(t){var e=V(t),r=this.value;if(r<0!==e.sign)return this.subtract(e.negate());var n=e.value;if(e.isSmall){if(c(r+n))return new u(r+n);n=h(Math.abs(n))}return new a(v(n,Math.abs(r)),r<0)},u.prototype.plus=u.prototype.add,l.prototype.add=function(t){return new l(this.value+V(t).value)},l.prototype.plus=l.prototype.add,a.prototype.subtract=function(t){var e=V(t);if(this.sign!==e.sign)return this.add(e.negate());var r=this.value,n=e.value;return e.isSmall?_(r,Math.abs(n),this.sign):function(t,e,r){var n;return O(t,e)>=0?n=T(t,e):(n=T(e,t),r=!r),"number"==typeof(n=p(n))?(r&&(n=-n),new u(n)):new a(n,r)}(r,n,this.sign)},a.prototype.minus=a.prototype.subtract,u.prototype.subtract=function(t){var e=V(t),r=this.value;if(r<0!==e.sign)return this.add(e.negate());var n=e.value;return e.isSmall?new u(r-n):_(n,Math.abs(r),r>=0)},u.prototype.minus=u.prototype.subtract,l.prototype.subtract=function(t){return new l(this.value-V(t).value)},l.prototype.minus=l.prototype.subtract,a.prototype.negate=function(){return new a(this.value,!this.sign)},u.prototype.negate=function(){var t=this.sign,e=new u(-this.value);return e.sign=!t,e},l.prototype.negate=function(){return new l(-this.value)},a.prototype.abs=function(){return new a(this.value,!1)},u.prototype.abs=function(){return new u(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},a.prototype.multiply=function(t){var r,n,i,o=V(t),u=this.value,l=o.value,c=this.sign!==o.sign;if(o.isSmall){if(0===l)return s[0];if(1===l)return this;if(-1===l)return this.negate();if((r=Math.abs(l))<e)return new a(b(u,r),c);l=h(r)}return new a(-.012*(n=u.length)-.012*(i=l.length)+15e-6*n*i>0?function t(e,r){var n=Math.max(e.length,r.length);if(n<=30)return E(e,r);n=Math.ceil(n/2);var i=e.slice(n),o=e.slice(0,n),s=r.slice(n),a=r.slice(0,n),u=t(o,a),l=t(i,s),c=t(g(o,i),g(a,s)),h=g(g(u,S(T(T(c,u),l),n)),S(l,2*n));return d(h),h}(u,l):E(u,l),c)},a.prototype.times=a.prototype.multiply,u.prototype._multiplyBySmall=function(t){return c(t.value*this.value)?new u(t.value*this.value):x(Math.abs(t.value),h(Math.abs(this.value)),this.sign!==t.sign)},a.prototype._multiplyBySmall=function(t){return 0===t.value?s[0]:1===t.value?this:-1===t.value?this.negate():x(Math.abs(t.value),this.value,this.sign!==t.sign)},u.prototype.multiply=function(t){return V(t)._multiplyBySmall(this)},u.prototype.times=u.prototype.multiply,l.prototype.multiply=function(t){return new l(this.value*V(t).value)},l.prototype.times=l.prototype.multiply,a.prototype.square=function(){return new a(C(this.value),!1)},u.prototype.square=function(){var t=this.value*this.value;return c(t)?new u(t):new a(C(h(Math.abs(this.value))),!1)},l.prototype.square=function(t){return new l(this.value*this.value)},a.prototype.divmod=function(t){var e=N(this,t);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=u.prototype.divmod=a.prototype.divmod,a.prototype.divide=function(t){return N(this,t)[0]},l.prototype.over=l.prototype.divide=function(t){return new l(this.value/V(t).value)},u.prototype.over=u.prototype.divide=a.prototype.over=a.prototype.divide,a.prototype.mod=function(t){return N(this,t)[1]},l.prototype.mod=l.prototype.remainder=function(t){return new l(this.value%V(t).value)},u.prototype.remainder=u.prototype.mod=a.prototype.remainder=a.prototype.mod,a.prototype.pow=function(t){var e,r,n,i=V(t),o=this.value,a=i.value;if(0===a)return s[1];if(0===o)return s[0];if(1===o)return s[1];if(-1===o)return i.isEven()?s[1]:s[-1];if(i.sign)return s[0];if(!i.isSmall)throw new Error("The exponent "+i.toString()+" is too large.");if(this.isSmall&&c(e=Math.pow(o,a)))return new u(y(e));for(r=this,n=s[1];!0&a&&(n=n.times(r),--a),0!==a;)a/=2,r=r.square();return n},u.prototype.pow=a.prototype.pow,l.prototype.pow=function(t){var e=V(t),r=this.value,n=e.value,i=BigInt(0),o=BigInt(1),a=BigInt(2);if(n===i)return s[1];if(r===i)return s[0];if(r===o)return s[1];if(r===BigInt(-1))return e.isEven()?s[1]:s[-1];if(e.isNegative())return new l(i);for(var u=this,c=s[1];(n&o)===o&&(c=c.times(u),--n),n!==i;)n/=a,u=u.square();return c},a.prototype.modPow=function(t,e){if(t=V(t),(e=V(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=s[1],n=this.mod(e);for(t.isNegative()&&(t=t.multiply(s[-1]),n=n.modInv(e));t.isPositive();){if(n.isZero())return s[0];t.isOdd()&&(r=r.multiply(n).mod(e)),t=t.divide(2),n=n.square().mod(e)}return r},l.prototype.modPow=u.prototype.modPow=a.prototype.modPow,a.prototype.compareAbs=function(t){var e=V(t),r=this.value,n=e.value;return e.isSmall?1:O(r,n)},u.prototype.compareAbs=function(t){var e=V(t),r=Math.abs(this.value),n=e.value;return e.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},l.prototype.compareAbs=function(t){var e=this.value,r=V(t).value;return(e=e>=0?e:-e)===(r=r>=0?r:-r)?0:e>r?1:-1},a.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=V(t),r=this.value,n=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:O(r,n)*(this.sign?-1:1)},a.prototype.compareTo=a.prototype.compare,u.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=V(t),r=this.value,n=e.value;return e.isSmall?r==n?0:r>n?1:-1:r<0!==e.sign?r<0?-1:1:r<0?1:-1},u.prototype.compareTo=u.prototype.compare,l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,r=V(t).value;return e===r?0:e>r?1:-1},l.prototype.compareTo=l.prototype.compare,a.prototype.equals=function(t){return 0===this.compare(t)},l.prototype.eq=l.prototype.equals=u.prototype.eq=u.prototype.equals=a.prototype.eq=a.prototype.equals,a.prototype.notEquals=function(t){return 0!==this.compare(t)},l.prototype.neq=l.prototype.notEquals=u.prototype.neq=u.prototype.notEquals=a.prototype.neq=a.prototype.notEquals,a.prototype.greater=function(t){return this.compare(t)>0},l.prototype.gt=l.prototype.greater=u.prototype.gt=u.prototype.greater=a.prototype.gt=a.prototype.greater,a.prototype.lesser=function(t){return this.compare(t)<0},l.prototype.lt=l.prototype.lesser=u.prototype.lt=u.prototype.lesser=a.prototype.lt=a.prototype.lesser,a.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},l.prototype.geq=l.prototype.greaterOrEquals=u.prototype.geq=u.prototype.greaterOrEquals=a.prototype.geq=a.prototype.greaterOrEquals,a.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},l.prototype.leq=l.prototype.lesserOrEquals=u.prototype.leq=u.prototype.lesserOrEquals=a.prototype.leq=a.prototype.lesserOrEquals,a.prototype.isEven=function(){return 0==(1&this.value[0])},u.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},a.prototype.isOdd=function(){return 1==(1&this.value[0])},u.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},a.prototype.isPositive=function(){return!this.sign},u.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=u.prototype.isPositive,a.prototype.isNegative=function(){return this.sign},u.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=u.prototype.isNegative,a.prototype.isUnit=function(){return!1},u.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},a.prototype.isZero=function(){return!1},u.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},a.prototype.isDivisibleBy=function(t){var e=V(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=u.prototype.isDivisibleBy=a.prototype.isDivisibleBy,a.prototype.isPrime=function(t){var e=w(this);if(void 0!==e)return e;var r=this.abs(),i=r.bitLength();if(i<=64)return R(r,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var o=Math.log(2)*i.toJSNumber(),s=Math.ceil(!0===t?2*Math.pow(o,2):o),a=[],u=0;u<s;u++)a.push(n(u+2));return R(r,a)},l.prototype.isPrime=u.prototype.isPrime=a.prototype.isPrime,a.prototype.isProbablePrime=function(t,e){var r=w(this);if(void 0!==r)return r;for(var i=this.abs(),o=void 0===t?5:t,s=[],a=0;a<o;a++)s.push(n.randBetween(2,i.minus(2),e));return R(i,s)},l.prototype.isProbablePrime=u.prototype.isProbablePrime=a.prototype.isProbablePrime,a.prototype.modInv=function(t){for(var e,r,i,o=n.zero,s=n.one,a=V(t),u=this.abs();!u.isZero();)e=a.divide(u),r=o,i=a,o=s,a=u,s=r.subtract(e.multiply(s)),u=i.subtract(e.multiply(u));if(!a.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===o.compare(0)&&(o=o.add(t)),this.isNegative()?o.negate():o},l.prototype.modInv=u.prototype.modInv=a.prototype.modInv,a.prototype.next=function(){var t=this.value;return this.sign?_(t,1,this.sign):new a(v(t,1),this.sign)},u.prototype.next=function(){var t=this.value;return t+1<r?new u(t+1):new a(i,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},a.prototype.prev=function(){var t=this.value;return this.sign?new a(v(t,1),!0):_(t,1,this.sign)},u.prototype.prev=function(){var t=this.value;return t-1>-r?new u(t-1):new a(i,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var L=[1];2*L[L.length-1]<=e;)L.push(2*L[L.length-1]);var P=L.length,I=L[P-1];function D(t){return Math.abs(t)<=e}function U(t,e,r){e=V(e);for(var i=t.isNegative(),o=e.isNegative(),s=i?t.not():t,a=o?e.not():e,u=0,l=0,c=null,h=null,p=[];!s.isZero()||!a.isZero();)u=(c=N(s,I))[1].toJSNumber(),i&&(u=I-1-u),l=(h=N(a,I))[1].toJSNumber(),o&&(l=I-1-l),s=c[0],a=h[0],p.push(r(u,l));for(var d=0!==r(i?1:0,o?1:0)?n(-1):n(0),f=p.length-1;f>=0;f-=1)d=d.multiply(I).add(n(p[f]));return d}a.prototype.shiftLeft=function(t){var e=V(t).toJSNumber();if(!D(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var r=this;if(r.isZero())return r;for(;e>=P;)r=r.multiply(I),e-=P-1;return r.multiply(L[e])},l.prototype.shiftLeft=u.prototype.shiftLeft=a.prototype.shiftLeft,a.prototype.shiftRight=function(t){var e,r=V(t).toJSNumber();if(!D(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=P;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(e=N(n,I))[1].isNegative()?e[0].prev():e[0],r-=P-1}return(e=N(n,L[r]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=u.prototype.shiftRight=a.prototype.shiftRight,a.prototype.not=function(){return this.negate().prev()},l.prototype.not=u.prototype.not=a.prototype.not,a.prototype.and=function(t){return U(this,t,(function(t,e){return t&e}))},l.prototype.and=u.prototype.and=a.prototype.and,a.prototype.or=function(t){return U(this,t,(function(t,e){return t|e}))},l.prototype.or=u.prototype.or=a.prototype.or,a.prototype.xor=function(t){return U(this,t,(function(t,e){return t^e}))},l.prototype.xor=u.prototype.xor=a.prototype.xor;function M(t){var r=t.value,n="number"==typeof r?r|1<<30:"bigint"==typeof r?r|BigInt(1<<30):r[0]+r[1]*e|1073758208;return n&-n}function k(t,e){return t=V(t),e=V(e),t.greater(e)?t:e}function F(t,e){return t=V(t),e=V(e),t.lesser(e)?t:e}function j(t,e){if(t=V(t).abs(),e=V(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var r,n,i=s[1];t.isEven()&&e.isEven();)r=F(M(t),M(e)),t=t.divide(r),e=e.divide(r),i=i.multiply(r);for(;t.isEven();)t=t.divide(M(t));do{for(;e.isEven();)e=e.divide(M(e));t.greater(e)&&(n=e,e=t,t=n),e=e.subtract(t)}while(!e.isZero());return i.isUnit()?t:t.multiply(i)}a.prototype.bitLength=function(){var t=this;return t.compareTo(n(0))<0&&(t=t.negate().subtract(n(1))),0===t.compareTo(n(0))?n(0):n(function t(e,r){if(r.compareTo(e)<=0){var i=t(e,r.square(r)),o=i.p,s=i.e,a=o.multiply(r);return a.compareTo(e)<=0?{p:a,e:2*s+1}:{p:o,e:2*s}}return{p:n(1),e:0}}(t,n(2)).e).add(n(1))},l.prototype.bitLength=u.prototype.bitLength=a.prototype.bitLength;var B=function(t,e,r,n){r=r||"0123456789abcdefghijklmnopqrstuvwxyz",t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var i,o=t.length,s=Math.abs(e),a={};for(i=0;i<r.length;i++)a[r[i]]=i;for(i=0;i<o;i++)if("-"!==(c=t[i])&&c in a&&a[c]>=s){if("1"===c&&1===s)continue;throw new Error(c+" is not a valid digit in base "+e+".")}e=V(e);var u=[],l="-"===t[0];for(i=l?1:0;i<t.length;i++){var c;if((c=t[i])in a)u.push(V(a[c]));else{if("<"!==c)throw new Error(c+" is not a valid character");var h=i;do{i++}while(">"!==t[i]&&i<t.length);u.push(V(t.slice(h+1,i)))}}return H(u,e,l)};function H(t,e,r){var n,i=s[0],o=s[1];for(n=t.length-1;n>=0;n--)i=i.add(t[n].times(o)),o=o.times(e);return r?i.negate():i}function G(t,e){if((e=n(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var i=!1;if(t.isNegative()&&e.isPositive()&&(i=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:i};for(var o,s=[],a=t;a.isNegative()||a.compareAbs(e)>=0;){o=a.divmod(e),a=o.quotient;var u=o.remainder;u.isNegative()&&(u=e.minus(u).abs(),a=a.next()),s.push(u.toJSNumber())}return s.push(a.toJSNumber()),{value:s.reverse(),isNegative:i}}function z(t,e,r){var n=G(t,e);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,e){return t<(e=e||"0123456789abcdefghijklmnopqrstuvwxyz").length?e[t]:"<"+t+">"}(t,r)})).join("")}function W(t){if(c(+t)){var e=+t;if(e===y(e))return o?new l(BigInt(e)):new u(e);throw new Error("Invalid integer: "+t)}var r="-"===t[0];r&&(t=t.slice(1));var n=t.split(/e/i);if(n.length>2)throw new Error("Invalid integer: "+n.join("e"));if(2===n.length){var i=n[1];if("+"===i[0]&&(i=i.slice(1)),(i=+i)!==y(i)||!c(i))throw new Error("Invalid integer: "+i+" is not a valid exponent.");var s=n[0],h=s.indexOf(".");if(h>=0&&(i-=s.length-h-1,s=s.slice(0,h)+s.slice(h+1)),i<0)throw new Error("Cannot include negative exponent part for integers");t=s+=new Array(i+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(o)return new l(BigInt(r?"-"+t:t));for(var p=[],f=t.length,m=f-7;f>0;)p.push(+t.slice(m,f)),(m-=7)<0&&(m=0),f-=7;return d(p),new a(p,r)}function V(t){return"number"==typeof t?function(t){if(o)return new l(BigInt(t));if(c(t)){if(t!==y(t))throw new Error(t+" is not an integer.");return new u(t)}return W(t.toString())}(t):"string"==typeof t?W(t):"bigint"==typeof t?new l(t):t}a.prototype.toArray=function(t){return G(this,t)},u.prototype.toArray=function(t){return G(this,t)},l.prototype.toArray=function(t){return G(this,t)},a.prototype.toString=function(t,e){if(void 0===t&&(t=10),10!==t)return z(this,t,e);for(var r,n=this.value,i=n.length,o=String(n[--i]);--i>=0;)r=String(n[i]),o+="0000000".slice(r.length)+r;return(this.sign?"-":"")+o},u.prototype.toString=function(t,e){return void 0===t&&(t=10),10!=t?z(this,t,e):String(this.value)},l.prototype.toString=u.prototype.toString,l.prototype.toJSON=a.prototype.toJSON=u.prototype.toJSON=function(){return this.toString()},a.prototype.valueOf=function(){return parseInt(this.toString(),10)},a.prototype.toJSNumber=a.prototype.valueOf,u.prototype.valueOf=function(){return this.value},u.prototype.toJSNumber=u.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var $=0;$<1e3;$++)s[$]=V($),$>0&&(s[-$]=V(-$));return s.one=s[1],s.zero=s[0],s.minusOne=s[-1],s.max=k,s.min=F,s.gcd=j,s.lcm=function(t,e){return t=V(t).abs(),e=V(e).abs(),t.divide(j(t,e)).multiply(e)},s.isInstance=function(t){return t instanceof a||t instanceof u||t instanceof l},s.randBetween=function(t,r,n){t=V(t),r=V(r);var i=n||Math.random,o=F(t,r),a=k(t,r).subtract(o).add(1);if(a.isSmall)return o.add(Math.floor(i()*a));for(var u=G(a,e).value,l=[],c=!0,h=0;h<u.length;h++){var p=c?u[h]:e,d=y(i()*p);l.push(d),d<p&&(c=!1)}return o.add(s.fromArray(l,e,!1))},s.fromArray=function(t,e,r){return H(t.map(V),V(e||10),r)},s}();void 0!==e&&e.hasOwnProperty("exports")&&(e.exports=n)},{}],50:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Floor,o.func)}static func(t){return Math.floor(t[0])}}r.Floor=o},{107:107,192:192}],51:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);r.Foreach=class extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Foreach,o.InternalFunctionUtils.foreach,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}}},{180:180,192:192,195:195,213:213}],52:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.FormatDateTime,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,o=t[0],s=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,a=u.FunctionUtils.DefaultDateTimeFormat;if("string"==typeof o?r=l.InternalFunctionUtils.verifyTimestamp(o.toString()):o=o.toISOString(),!r){let e;if(({format:a,locale:s}=u.FunctionUtils.determineFormatAndLocale(t,3,a,s)),o.endsWith("Z"))e=new Date(o).toISOString();else try{e=new Date(o+"Z").toISOString()}catch(c){e=new Date(o).toISOString()}n=i.default(e).locale(s).utc().format(a)}return{value:n,error:r}})}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.FormatDateTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],53:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.FormatEpoch,l.evaluator(),u.ReturnType.String,l.validator)}static evaluator(){return a.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,o=t[0],s=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,u=a.FunctionUtils.DefaultDateTimeFormat;if(a.FunctionUtils.isNumber(o)?o*=1e3:r=`formatEpoch first argument ${o} must be a number`,!r){({format:u,locale:s}=a.FunctionUtils.determineFormatAndLocale(t,3,u,s));const e=new Date(o).toISOString();n=i.default(e).locale(s).utc().format(u)}return{value:n,error:r}})}static validator(t){a.FunctionUtils.validateOrder(t,[u.ReturnType.String,u.ReturnType.String],u.ReturnType.Number)}}r.FormatEpoch=l},{180:180,192:192,196:196,213:213,402:402}],54:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(401),i=t(180),o=t(192),s=t(196),a=t(213),u=t(200);class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.FormatNumber,l.evaluator(),a.ReturnType.String,l.validator)}static evaluator(){return s.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,i=null;const o=t[0],a=t[1];let l=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;if(l=s.FunctionUtils.determineLocale(t,3,l),s.FunctionUtils.isNumber(o))if(s.FunctionUtils.isNumber(a))if(l&&"string"!=typeof l)r=`formatNubmer third argument ${l} is not a valid locale`;else{const t=`,.${a}f`,e=this.roundToPrecision(o,a),r=u.localeInfo[l];i=void 0!==r?n.formatLocale(r).format(t)(e):n.format(t)(e)}else r=`formatNumber second argument ${a} must be a number`;else r=`formatNumber first argument ${o} must be a number`;return{value:i,error:r}})}static validator(t){s.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Number,a.ReturnType.Number)}}l.roundToPrecision=(t,e)=>Math.round(t*Math.pow(10,e))/Math.pow(10,e),r.FormatNumber=l},{180:180,192:192,196:196,200:200,213:213,401:401}],401:[function(t,e,r){var n;n=this,function(t){"use strict";function e(t,e){if((r=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var r,n=t.slice(0,r);return[n.length>1?n[0]+n.slice(2):n,+t.slice(r+1)]}function r(t){return(t=e(Math.abs(t)))?t[1]:NaN}var n,i=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(t){if(!(e=i.exec(t)))throw new Error("invalid format: "+t);var e;return new s({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function s(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function a(t,r){var n=e(t,r);if(!n)return t+"";var i=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+i:i.length>o+1?i.slice(0,o+1)+"."+i.slice(o+1):i+new Array(o-i.length+2).join("0")}o.prototype=s.prototype,s.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var u={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return a(100*t,e)},r:a,s:function(t,r){var i=e(t,r);if(!i)return t+"";var o=i[0],s=i[1],a=s-(n=3*Math.max(-8,Math.min(8,Math.floor(s/3))))+1,u=o.length;return a===u?o:a>u?o+new Array(a-u+1).join("0"):a>0?o.slice(0,a)+"."+o.slice(a):"0."+new Array(1-a).join("0")+e(t,Math.max(0,r+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function l(t){return t}var c,h=Array.prototype.map,p=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"];function d(t){var e,i,s=void 0===t.grouping||void 0===t.thousands?l:(e=h.call(t.grouping,Number),i=t.thousands+"",function(t,r){for(var n=t.length,o=[],s=0,a=e[0],u=0;n>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),o.push(t.substring(n-=a,n+a)),!((u+=a+1)>r));)a=e[s=(s+1)%e.length];return o.reverse().join(i)}),a=void 0===t.currency?"":t.currency[0]+"",c=void 0===t.currency?"":t.currency[1]+"",d=void 0===t.decimal?".":t.decimal+"",f=void 0===t.numerals?l:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(h.call(t.numerals,String)),y=void 0===t.percent?"%":t.percent+"",m=void 0===t.minus?"-":t.minus+"",g=void 0===t.nan?"NaN":t.nan+"";function v(t){var e=(t=o(t)).fill,r=t.align,i=t.sign,l=t.symbol,h=t.zero,v=t.width,T=t.comma,_=t.precision,E=t.trim,b=t.type;"n"===b?(T=!0,b="g"):u[b]||(void 0===_&&(_=12),E=!0,b="g"),(h||"0"===e&&"="===r)&&(h=!0,e="0",r="=");var S="$"===l?a:"#"===l&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",x="$"===l?c:/[%p]/.test(b)?y:"",C=u[b],A=/[defgprs%]/.test(b);function N(t){var o,a,u,l=S,c=x;if("c"===b)c=C(t)+c,t="";else{var y=(t=+t)<0||1/t<0;if(t=isNaN(t)?g:C(Math.abs(t),_),E&&(t=function(t){t:for(var e,r=t.length,n=1,i=-1;n<r;++n)switch(t[n]){case".":i=e=n;break;case"0":0===i&&(i=n),e=n;break;default:if(!+t[n])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),y&&0==+t&&"+"!==i&&(y=!1),l=(y?"("===i?i:m:"-"===i||"("===i?"":i)+l,c=("s"===b?p[8+n/3]:"")+c+(y&&"("===i?")":""),A)for(o=-1,a=t.length;++o<a;)if(48>(u=t.charCodeAt(o))||u>57){c=(46===u?d+t.slice(o+1):t.slice(o))+c,t=t.slice(0,o);break}}T&&!h&&(t=s(t,1/0));var N=l.length+t.length+c.length,O=N<v?new Array(v-N+1).join(e):"";switch(T&&h&&(t=s(O+t,O.length?v-c.length:1/0),O=""),r){case"<":t=l+t+c+O;break;case"=":t=l+O+t+c;break;case"^":t=O.slice(0,N=O.length>>1)+l+t+c+O.slice(N);break;default:t=O+l+t+c}return f(t)}return _=void 0===_?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,_)):Math.max(0,Math.min(20,_)),N.toString=function(){return t+""},N}return{format:v,formatPrefix:function(t,e){var n=v(((t=o(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(r(e)/3))),s=Math.pow(10,-i),a=p[8+i/3];return function(t){return n(s*t)+a}}}}function f(e){return c=d(e),t.format=c.format,c.formatPrefix,c}f({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),t.formatLocale=d,Object.defineProperty(t,"__esModule",{value:!0})}("object"==typeof r&&void 0!==e?r:(n="undefined"!=typeof globalThis?globalThis:n||self).d3=n.d3||{})},{}],55:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(396)),o=n(t(402)),s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.FormatTicks,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,s=t[0],a=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,c=u.FunctionUtils.DefaultDateTimeFormat;if(u.FunctionUtils.isNumber(s)&&(s=i.default(s)),"string"==typeof s&&(s=i.default(s)),i.default.isInstance(s)?s=s.subtract(l.InternalFunctionUtils.UnixMilliSecondToTicksConstant).divide(l.InternalFunctionUtils.MillisecondToTickConstant).toJSNumber():r=`formatTicks first argument ${s} is not a number, numeric string or bigInt`,!r&&(({format:c,locale:a}=u.FunctionUtils.determineFormatAndLocale(t,3,c,a)),u.FunctionUtils.isNumber(s))){const t=new Date(s).toISOString();n=o.default(t).locale(a).utc().format(c)}return{value:n,error:r}})}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number)}}r.FormatTicks=h},{180:180,192:192,195:195,196:196,213:213,396:396,402:402}],56:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.GetFutureTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if(Number.isInteger(a[0])&&"string"==typeof a[1]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,4,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[0],a[1]);void 0===e?h=a[2]+" is not a valid time unit.":n=i.default().locale(o).utc().add(t,e).format(s)}else h=t+" should contain a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number,c.ReturnType.String)}}r.GetFutureTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],57:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(405));c.default.extend(h.default);const p=n(t(404));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetNextViableDate,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:y,error:m}=a.FunctionUtils.evaluateChildren(t,e,r);let g=m;if(g||({timexProperty:n,error:g}=u.InternalFunctionUtils.parseTimexProperty(y[0])),n&&!g&&(!n.year&&n.month&&n.dayOfMonth||(g=y[0]+" must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.")),!g)if(2===y.length&&"string"==typeof y[1]){const t=l.TimeZoneConverter.windowsToIana(y[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(g=y[1]+" is not a valid timezone"),g||(o=i.utc().tz(t))}else o=i.utc();if(!g){const t=o.year(),e=o.month()+1,r=o.date();if(s=n.month>e||n.month===e&&n.dayOfMonth>=r?t:t+1,h=n.month,p=n.dayOfMonth,2===h&&29===p)for(;!f.leapYear(s);)s+=1}return{value:d.TimexProperty.fromDate(new Date(s,h-1,p)).timex,error:g}}static leapYear(t){return t%4==0&&t%100!=0||t%400==0}}r.GetNextViableDate=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],58:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(405));c.default.extend(h.default);const p=n(t(404));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetNextViableTime,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:f,error:y}=a.FunctionUtils.evaluateChildren(t,e,r);let m=y;if(m||/TXX:[0-5][0-9]:[0-5][0-9]/g.test(f[0])||(m=f[0]+"  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'"),!m)if(2===f.length&&"string"==typeof f[1]){const t=l.TimeZoneConverter.windowsToIana(f[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(m=f[1]+" is not a valid timezone"),m||(o=i.utc().tz(t))}else o=i.utc();if(m||({timexProperty:n,error:m}=u.InternalFunctionUtils.parseTimexProperty(f[0].replace("XX","00"))),!m){const t=o.hour(),e=o.minute(),r=o.second();(s=n.minute>e||n.minute===e&&n.second>=r?t:t+1)>=24&&(s-=24),h=n.minute,p=n.second}return{value:d.TimexProperty.fromTime(new d.Time(s,h,p)).timex,error:m}}}r.GetNextViableTime=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],59:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.GetPastTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if(Number.isInteger(a[0])&&"string"==typeof a[1]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,4,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[0],a[1]);void 0===e?h=a[2]+" is not a valid time unit.":n=i.default().locale(o).utc().subtract(t,e).format(s)}else h=t+" should contain a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number,c.ReturnType.String)}}r.GetPastTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],60:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(404));c.default.extend(h.default);const p=n(t(405));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetPreviousViableDate,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:y,error:m}=a.FunctionUtils.evaluateChildren(t,e,r);let g=m;if(g||({timexProperty:n,error:g}=u.InternalFunctionUtils.parseTimexProperty(y[0])),n&&!g&&(!n.year&&n.month&&n.dayOfMonth||(g=y[0]+" must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.")),!g)if(2===y.length&&"string"==typeof y[1]){const t=l.TimeZoneConverter.windowsToIana(y[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(g=y[1]+" is not a valid timezone"),g||(o=i.utc().tz(t))}else o=i.utc();if(!g){const t=o.year(),e=o.month()+1,r=o.date();if(s=n.month<e||n.month===e&&n.dayOfMonth<r?t:t-1,h=n.month,p=n.dayOfMonth,2===h&&29===p)for(;!f.leapYear(s);)s-=1}return{value:d.TimexProperty.fromDate(new Date(s,h-1,p)).timex,error:g}}static leapYear(t){return t%4==0&&t%100!=0||t%400==0}}r.GetPreviousViableDate=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],61:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(404));c.default.extend(h.default);const p=t(222);class d extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetPreviousViableTime,d.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,d=0;const{args:f,error:y}=a.FunctionUtils.evaluateChildren(t,e,r);let m=y;if(m||/TXX:[0-5][0-9]:[0-5][0-9]/g.test(f[0])||(m=f[0]+"  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'"),!m)if(2===f.length&&"string"==typeof f[1]){const t=l.TimeZoneConverter.windowsToIana(f[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(m=f[1]+" is not a valid timezone"),m||(o=i.utc().tz(t))}else o=i.utc();if(m||({timexProperty:n,error:m}=u.InternalFunctionUtils.parseTimexProperty(f[0].replace("XX","00"))),!m){const t=o.hour(),e=o.minute(),r=o.second();(s=n.minute<e||n.minute===e&&n.second<r?t:t-1)<0&&(s+=24),h=n.minute,d=n.second}return{value:p.TimexProperty.fromTime(new p.Time(s,h,d)).timex,error:m}}}r.GetPreviousViableTime=d},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404}],62:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(202),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.GetProperty,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){let n,i;const o=t.children,{value:u,error:l}=o[0].tryEvaluate(e,r);let c=l;return c||(1===o.length?"string"==typeof u?n=s.InternalFunctionUtils.wrapGetValue(e,u,r):c=`"Single parameter ${o[0]} is not a string."`:(({value:i,error:c}=o[1].tryEvaluate(e,r)),c||(n=s.InternalFunctionUtils.wrapGetValue(new a.SimpleObjectMemory(u),i.toString(),r)))),{value:n,error:c}}static validator(t){o.FunctionUtils.validateOrder(t,[u.ReturnType.String],u.ReturnType.Object)}}r.GetProperty=l},{180:180,192:192,195:195,196:196,202:202,213:213}],63:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=t(180),s=t(192),a=t(196),u=t(195),l=t(213),c=t(26);class h extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetTimeOfDay,h.evaluator(),l.ReturnType.String,a.FunctionUtils.validateUnaryString)}static evaluator(){return a.FunctionUtils.applyWithError(t=>{let e,r,n=u.InternalFunctionUtils.verifyISOTimestamp(t[0]);if(n){if(n=u.InternalFunctionUtils.verifyTimestamp(t[0]))return{value:e,error:n};if(i.default(t[0]).format(c.ConvertFromUTC.NoneUtcDefaultDateTimeFormat)!==t[0])return{value:e,error:n};r=100*new Date(t[0]).getHours()+new Date(t[0]).getMinutes(),n=void 0}else r=100*new Date(t[0]).getUTCHours()+new Date(t[0]).getUTCMinutes();return 0===r?e="midnight":r>0&&r<1200?e="morning":1200===r?e="noon":r>1200&&r<1800?e="afternoon":r>=1800&&r<=2200?e="evening":r>2200&&r<=2359&&(e="night"),{value:e,error:n}},a.FunctionUtils.verifyString)}}r.GetTimeOfDay=h},{180:180,192:192,195:195,196:196,213:213,26:26,402:402}],64:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.GreaterThan,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]>t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.GreaterThan=s},{192:192,196:196,23:23}],65:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.GreaterThanOrEqual,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]>=t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.GreaterThanOrEqual=s},{192:192,196:196,23:23}],66:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.If,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){let n,i;const o=new a.Options(r);return o.nullSubstitution=void 0,({value:n,error:i}=t.children[0].tryEvaluate(e,o)),!i&&s.InternalFunctionUtils.isLogicTrue(n)?({value:n,error:i}=t.children[1].tryEvaluate(e,r)):({value:n,error:i}=t.children[2].tryEvaluate(e,r)),{value:n,error:i}}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3)}}r.If=l},{180:180,192:192,195:195,196:196,204:204,213:213}],67:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Ignore,a.evaluator,s.ReturnType.Boolean,o.FunctionUtils.validateUnaryBoolean),this.negation=this}static evaluator(t,e,r){return t.children[0].tryEvaluate(e,r)}}r.Ignore=a},{180:180,192:192,196:196,213:213}],69:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IndexOf,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n=-1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;return u||(null==i[0]||"string"==typeof i[0]?void 0===i[1]||"string"==typeof i[1]?n=s.InternalFunctionUtils.parseStringOrUndefined(i[0]).indexOf(s.InternalFunctionUtils.parseStringOrUndefined(i[1])):u="Can only look for indexof string in "+t:Array.isArray(i[0])?n=i[0].indexOf(i[1]):u=t+" works only on string or list."),{value:n,error:u}}static validator(t){o.FunctionUtils.validateOrder(t,[],a.ReturnType.String|a.ReturnType.Array,a.ReturnType.Object)}}r.IndexOf=u},{180:180,192:192,195:195,196:196,213:213}],70:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IndicesAndValues,a.evaluator,s.ReturnType.Array,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n=void 0,i=void 0,o=void 0;if(({value:o,error:i}=t.children[0].tryEvaluate(e,r)),void 0===i)if(Array.isArray(o)){const t=[];for(let e=0;e<o.length;e++)t.push({index:e,value:o[e]});n=t}else if("object"==typeof o){const t=[];for(const[e,r]of Object.entries(o))t.push({index:e,value:r});n=t}else i=t.children[0]+" is not array or object.";return{value:n,error:i}}}r.IndicesAndValues=a},{180:180,192:192,196:196,213:213}],72:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Intersection,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=t[0];for(const r of t)e=e.filter(t=>r.indexOf(t)>-1);return Array.from(new Set(e))},o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Array)}}r.Intersection=a},{180:180,192:192,196:196,213:213}],73:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsArray,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>Array.isArray(t[0]))}}r.IsArray=a},{180:180,192:192,196:196,213:213}],74:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsBoolean,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"boolean"==typeof t[0])}}r.IsBoolean=a},{180:180,192:192,196:196,213:213}],75:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDate,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.month&&void 0!==n.dayOfMonth||void 0!==n.dayOfWeek),{value:i,error:l}}}r.IsDate=u},{180:180,192:192,195:195,196:196,213:213}],76:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDateRange,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.year&&void 0===n.dayOfMonth||void 0!==n.year&&void 0!==n.month&&void 0===n.dayOfMonth||void 0!==n.month&&void 0===n.dayOfMonth||void 0!==n.season||void 0!==n.weekOfYear||void 0!==n.weekOfMonth),{value:i,error:l}}}r.IsDateRange=u},{180:180,192:192,195:195,196:196,213:213}],77:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDateTime,u.evaluator(),a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"string"==typeof t[0]&&void 0===s.InternalFunctionUtils.verifyISOTimestamp(t[0]))}}r.IsDateTime=u},{180:180,192:192,195:195,196:196,213:213}],81:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsInteger,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>o.FunctionUtils.isNumber(t[0])&&Number.isInteger(t[0]))}}r.IsInteger=a},{180:180,192:192,196:196,213:213}],82:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(166),i=t(180),o=t(192),s=t(196),a=t(213);class u extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.IsMatch,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return s.FunctionUtils.applyWithError(t=>{let e,r=!1;return void 0===t[0]||""===t[0]?(r=!1,e="regular expression is empty."):r=n.CommonRegex.CreateRegex(t[1].toString()).test(t[0].toString()),{value:r,error:e}},s.FunctionUtils.verifyStringOrNull)}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String);const e=t.children[1];e.returnType===a.ReturnType.String&&e.type===o.ExpressionType.Constant&&n.CommonRegex.CreateRegex(e.value.toString())}}r.IsMatch=u},{166:166,180:180,192:192,196:196,213:213}],84:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsPresent,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.now),{value:i,error:l}}}r.IsPresent=u},{180:180,192:192,195:195,196:196,213:213}],83:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsObject,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"object"==typeof t[0])}}r.IsObject=a},{180:180,192:192,196:196,213:213}],85:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsString,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"string"==typeof t[0])}}r.IsString=a},{180:180,192:192,196:196,213:213}],86:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsTime,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.hour&&void 0!==n.minute&&void 0!==n.second),{value:i,error:l}}}r.IsTime=u},{180:180,192:192,195:195,196:196,213:213}],87:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsTimeRange,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.partOfDay),{value:i,error:l}}}r.IsTimeRange=u},{180:180,192:192,195:195,196:196,213:213}],89:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Join,a.evaluator,s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||(Array.isArray(i[0])?n=2===i.length?i[0].join(i[1]):i[0].length<3?i[0].join(i[2]):i[0].slice(0,i[0].length-1).join(i[1]).concat(i[2],i[0][i[0].length-1]):a=`${t.children[0]} evaluates to ${i[0]} which is not a list.`),{value:n,error:a}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.String],s.ReturnType.Array,s.ReturnType.String)}}r.Join=a},{180:180,192:192,196:196,213:213}],90:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Json,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>JSON.parse(t[0].trim()))}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.String)}}r.Json=a},{180:180,192:192,196:196,213:213}],91:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.JsonStringify,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>JSON.stringify(t[0]))}}r.JsonStringify=a},{180:180,192:192,196:196,213:213}],92:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Last,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]&&t[0].length>0&&(e=t[0][t[0].length-1]),Array.isArray(t[0])&&t[0].length>0&&(e=s.InternalFunctionUtils.accessIndex(t[0],t[0].length-1).value),e})}}r.Last=u},{180:180,192:192,195:195,196:196,213:213}],93:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.LastIndexOf,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n=-1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;if(!u)if(null==i[0]||"string"==typeof i[0])if(void 0===i[1]||"string"==typeof i[1]){const t=s.InternalFunctionUtils.parseStringOrUndefined(i[0]),e=s.InternalFunctionUtils.parseStringOrUndefined(i[1]);n=t.lastIndexOf(e,t.length-1)}else u="Can only look for indexof string in "+t;else Array.isArray(i[0])?n=i[0].lastIndexOf(i[1]):u=t+" works only on string or list.";return{value:n,error:u}}static validator(t){o.FunctionUtils.validateOrder(t,[],a.ReturnType.String|a.ReturnType.Array,a.ReturnType.Object)}}r.LastIndexOf=u},{180:180,192:192,195:195,196:196,213:213}],94:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Length,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).length,o.FunctionUtils.verifyStringOrNull)}}r.Length=u},{180:180,192:192,195:195,196:196,213:213}],97:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Max,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=Number.NEGATIVE_INFINITY;if(1===t.length)if(Array.isArray(t[0]))for(const r of t[0])e=Math.max(e,r);else e=Math.max(e,t[0]);else for(const r of t)if(Array.isArray(r))for(const t of r)e=Math.max(e,t);else e=Math.max(e,r);return e},o.FunctionUtils.verifyNumberOrNumericList)}}r.Max=a},{180:180,192:192,196:196,213:213}],98:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Merge,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applySequenceWithError(t=>{let e,r;return"object"!=typeof t[0]||Array.isArray(t[0])||"object"!=typeof t[1]||Array.isArray(t[1])?r=`The argumets ${t[0]} and ${t[1]} must be JSON objects.`:(Object.assign(t[0],t[1]),e=t[0]),{value:e,error:r}})}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,Number.MAX_SAFE_INTEGER)}}r.Merge=a},{180:180,192:192,196:196,213:213}],99:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Min,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=Number.POSITIVE_INFINITY;if(1===t.length)if(Array.isArray(t[0]))for(const r of t[0])e=Math.min(e,r);else e=Math.min(e,t[0]);else for(const r of t)if(Array.isArray(r))for(const t of r)e=Math.min(e,t);else e=Math.min(e,r);return e},o.FunctionUtils.verifyNumberOrNumericList)}}r.Min=a},{180:180,192:192,196:196,213:213}],100:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Mod,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;return 0===Number(t[1])?e="Cannot mod by 0.":r=t[0]%t[1],{value:r,error:e}},o.FunctionUtils.verifyInteger)}}r.Mod=a},{180:180,192:192,196:196,213:213}],101:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Month,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCMonth()+1,error:e}},o.FunctionUtils.verifyString)}}r.Month=u},{180:180,192:192,195:195,196:196,213:213}],105:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Not,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const o=new a.Options(r);return o.nullSubstitution=void 0,({value:i,error:n}=t.children[0].tryEvaluate(e,o)),n?(n=void 0,i=!0):i=!s.InternalFunctionUtils.isLogicTrue(i),{value:i,error:n}}}r.Not=l},{180:180,192:192,195:195,196:196,204:204,213:213}],108:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e){super(t,s.evaluator(e),o.ReturnType.Number,i.FunctionUtils.validateNumber)}static evaluator(t){return i.FunctionUtils.applySequence(t,i.FunctionUtils.verifyNumber)}}r.NumericEvaluator=s},{180:180,196:196,213:213}],109:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Optional,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnaryBoolean),this.negation=this}static evaluator(){}}r.Optional=a},{180:180,192:192,196:196,213:213}],110:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Or,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateAtLeastOne)}static evaluator(t,e,r){let n,i=!1;for(const o of t.children){const t=new a.Options(r);if(t.nullSubstitution=void 0,({value:i,error:n}=o.tryEvaluate(e,t)),n)n=void 0;else if(s.InternalFunctionUtils.isLogicTrue(i)){i=!0;break}}return{value:i,error:n}}}r.Or=l},{180:180,192:192,195:195,196:196,204:204,213:213}],112:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213),a=t(193);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Rand,u.evaluator,s.ReturnType.Number,o.FunctionUtils.validateBinaryNumber)}static evaluator(t,e,r){let n,i,o,s;const[u,l]=t.children;return({value:i,error:s}=u.tryEvaluate(e,r)),s?{value:void 0,error:s}:Number.isInteger(i)?(({value:o,error:s}=l.tryEvaluate(e,r)),s?{value:void 0,error:s}:Number.isInteger(o)?(i>o?s=`Min value ${i} cannot be greater than max value ${o}.`:n=a.Extensions.randomNext(e,i,o),{value:n,error:s}):{value:void 0,error:o+" is not an integer."}):{value:void 0,error:i+" is not an integer."}}}r.Rand=u},{180:180,192:192,193:193,196:196,213:213}],113:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Range,a.evaluator(),s.ReturnType.Array,o.FunctionUtils.validateBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e;return t[1]<=0&&(e="Second paramter must be more than zero"),{value:[...Array(t[1]).keys()].map(e=>e+Number(t[0])),error:e}},o.FunctionUtils.verifyInteger)}}r.Range=a},{180:180,192:192,196:196,213:213}],114:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.RemoveProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0];return delete e[String(t[1])],e})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String)}}r.RemoveProperty=a},{180:180,192:192,196:196,213:213}],115:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Replace,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return 0===s.InternalFunctionUtils.parseStringOrUndefined(t[1]).length&&(e=t[1]+" should be a string with length at least 1"),e||(r=s.InternalFunctionUtils.parseStringOrUndefined(t[0]).split(s.InternalFunctionUtils.parseStringOrUndefined(t[1])).join(s.InternalFunctionUtils.parseStringOrUndefined(t[2]))),{value:r,error:e}},o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3,a.ReturnType.String)}}r.Replace=u},{180:180,192:192,195:195,196:196,213:213}],116:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.ReplaceIgnoreCase,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return 0===s.InternalFunctionUtils.parseStringOrUndefined(t[1]).length&&(e=t[1]+" should be a string with length at least 1"),e||(r=s.InternalFunctionUtils.parseStringOrUndefined(t[0]).replace(new RegExp(s.InternalFunctionUtils.parseStringOrUndefined(t[1]),"gi"),s.InternalFunctionUtils.parseStringOrUndefined(t[2]))),{value:r,error:e}},o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3,a.ReturnType.String)}}r.ReplaceIgnoreCase=u},{180:180,192:192,195:195,196:196,213:213}],117:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Reverse,a.evaluator(),s.ReturnType.String|s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return"string"==typeof t[0]?e=t[0].split("").reverse().join(""):Array.isArray(t[0])?e=t[0].reverse():r=t[0]+" is not a string or list.",{value:e,error:r}},o.FunctionUtils.verifyContainer)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.String|s.ReturnType.Array)}}r.Reverse=a},{180:180,192:192,196:196,213:213}],118:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Round,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnaryOrBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;if(2!==t.length||Number.isInteger(t[1])||(r=`The second parameter ${t[1]} must be an integer.`),!r){const n=2===t.length?t[1]:0;n<0||n>15?r=`The second parameter ${t[1]} must be an integer between 0 and 15;`:e=a.roundToPrecision(t[0],n)}return{value:e,error:r}},o.FunctionUtils.verifyNumber)}}a.roundToPrecision=(t,e)=>Math.round(t*Math.pow(10,e))/Math.pow(10,e),r.Round=a},{180:180,192:192,196:196,213:213}],119:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);r.Select=class extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Select,o.InternalFunctionUtils.foreach,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}}},{180:180,192:192,195:195,213:213}],122:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SetProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0];return e[String(t[1])]=t[2],e})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String,s.ReturnType.Object)}}r.SetProperty=a},{180:180,192:192,196:196,213:213}],121:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SetPathToValue,a.evaluator,s.ReturnType.Object,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){const{path:n,left:i,error:s}=o.FunctionUtils.tryAccumulatePath(t.children[0],e,r);if(void 0!==s)return{value:void 0,error:s};if(i)return{value:void 0,error:t.children[0].toString()+" is not a valid path to set value"};const{value:a,error:u}=t.children[1].tryEvaluate(e,r);return u?{value:void 0,error:u}:(e.setValue(n,a),{value:a,error:void 0})}}r.SetPathToValue=a},{180:180,192:192,196:196,213:213}],123:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Skip,a.evaluator,s.ReturnType.Array,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)){let o;const a=t.children[1];({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)||(s=a+" is not an integer."),s||(o=Math.max(o,0),n=i.slice(o))}else s=t.children[0]+" is not array.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array,s.ReturnType.Number)}}r.Skip=a},{180:180,192:192,196:196,213:213}],125:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SortByDescending,s.InternalFunctionUtils.sortBy(!0),a.ReturnType.Array,u.validator)}static validator(t){o.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Array)}}r.SortByDescending=u},{180:180,192:192,195:195,196:196,213:213}],124:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SortBy,s.InternalFunctionUtils.sortBy(!1),a.ReturnType.Array,u.validator)}static validator(t){o.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Array)}}r.SortBy=u},{180:180,192:192,195:195,196:196,213:213}],126:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Split,u.evaluator(),a.ReturnType.Array,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).split(s.InternalFunctionUtils.parseStringOrUndefined(t[1]||"")),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,2,a.ReturnType.String)}}r.Split=u},{180:180,192:192,195:195,196:196,213:213}],127:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Sqrt,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;const n=Number(t[0]);return n<0?e="Do not support square root extraction of negative numbers.":r=Math.sqrt(n),{value:r,error:e}},o.FunctionUtils.verifyNumber)}}r.Sqrt=a},{180:180,192:192,196:196,213:213}],131:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.StartsWith,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).startsWith(s.InternalFunctionUtils.parseStringOrUndefined(t[1])),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String)}}r.StartsWith=u},{180:180,192:192,195:195,196:196,213:213}],133:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(167),i=t(179),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.StringOrValue,l.evaluator,u.ReturnType.Object,a.FunctionUtils.validateUnaryString)}static evaluator(t,e,r){const{value:o,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if("string"!=typeof o&&(a="Parameter should be a string."),!a){const t=i.Expression.parse("`"+o+"`");if(2===t.children.length){const i=t.children[0],o=t.children[1];if(i instanceof n.Constant&&""===i.value.toString()&&!(o instanceof n.Constant))return o.tryEvaluate(e,r)}return t.tryEvaluate(e,r)}return{value:void 0,error:a}}}r.StringOrValue=l},{167:167,179:179,180:180,192:192,196:196,213:213}],134:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);r.StringTransformEvaluator=class extends n.ExpressionEvaluator{constructor(t,e,r){super(t,i.FunctionUtils.applyWithOptions(e,i.FunctionUtils.verifyStringOrNull),o.ReturnType.String,r||i.FunctionUtils.validateUnaryString)}}},{180:180,196:196,213:213}],135:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SubArray,a.evaluator,s.ReturnType.Array,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)){let o;const a=t.children[1];if(({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)?(o<0||o>i.length)&&(s=`${a}=${o} which is out of range for ${i}`):s=a+" is not an integer.",!s){let a;if(2===t.children.length)a=i.length;else{const n=t.children[2];({value:a,error:s}=n.tryEvaluate(e,r)),s||Number.isInteger(a)?(a<0||a>i.length)&&(s=`${n}=${a} which is out of range for ${i}`):s=n+" is not an integer"}s||(n=i.slice(o,a))}}else s=t.children[0]+" is not array.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.Array,s.ReturnType.Number)}}r.SubArray=a},{180:180,192:192,196:196,213:213}],136:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Substring,a.evaluator,s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if("string"==typeof i){let o;const a=t.children[1];if(({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)?(o<0||o>i.length)&&(s=`${a}=${o} which is out of range for ${i}`):s=a+" is not an integer.",!s){let a;if(2===t.children.length)a=i.length-o;else{const n=t.children[2];({value:a,error:s}=n.tryEvaluate(e,r)),s||Number.isInteger(a)?(a<0||Number(o)+Number(a)>i.length)&&(s=`${n}=${a} which is out of range for ${i}`):s=n+" is not an integer"}s||(n=i.substr(o,a))}}else void 0===i?n="":s=t.children[0]+" is neither a string nor a null object.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.String,s.ReturnType.Number)}}r.Substring=a},{180:180,192:192,196:196,213:213}],139:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Sum,a.evaluator(),s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>t[0].reduce((t,e)=>t+e),o.FunctionUtils.verifyNumericList)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array)}}r.Sum=a},{180:180,192:192,196:196,213:213}],140:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Take,a.evaluator,s.ReturnType.Array|s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)||"string"==typeof i){let o;const a=t.children[1];({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)||(s=a+" is not an integer."),s||(o=Math.max(o,0),n=i.slice(0,o))}else s=t.children[0]+" is not array or string.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array|s.ReturnType.String,s.ReturnType.Number)}}r.Take=a},{180:180,192:192,196:196,213:213}],141:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Ticks,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;return u||("string"==typeof i[0]?({value:n,error:u}=s.InternalFunctionUtils.ticks(i[0])):u=t+" should contain an ISO format timestamp."),{value:n,error:u}}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,1,a.ReturnType.String)}}r.Ticks=u},{180:180,192:192,195:195,196:196,213:213}],151:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Union,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=[];for(const r of t)e=e.concat(r);return Array.from(new Set(e))},o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Array)}}r.Union=a},{180:180,192:192,196:196,213:213}],152:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Unique,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>[...new Set(t[0])],o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array)}}r.Unique=a},{180:180,192:192,196:196,213:213}],153:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriComponent,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>encodeURIComponent(t[0]),o.FunctionUtils.verifyString)}}r.UriComponent=a},{180:180,192:192,196:196,213:213}],154:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriComponentToString,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>decodeURIComponent(t[0]),o.FunctionUtils.verifyString)}}r.UriComponentToString=a},{180:180,192:192,196:196,213:213}],155:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriHost,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriHost(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriHost(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.hostname}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriHost=u},{180:180,192:192,195:195,196:196,213:213}],156:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPath,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPath(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPath(t){let e,r=s.InternalFunctionUtils.parseUri(t).error;if(!r)try{e=new URL(t).pathname}catch(n){r="invalid operation, input uri should be an absolute URI"}return{value:e,error:r}}}r.UriPath=u},{180:180,192:192,195:195,196:196,213:213}],157:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPathAndQuery,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPathAndQuery(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPathAndQuery(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.pathname+r.search}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriPathAndQuery=u},{180:180,192:192,195:195,196:196,213:213}],158:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPort,u.evaluator,a.ReturnType.Number,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPort(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPort(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=parseInt(r.port)}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriPort=u},{180:180,192:192,195:195,196:196,213:213}],159:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriQuery,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriQuery(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriQuery(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.search}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriQuery=u},{180:180,192:192,195:195,196:196,213:213}],160:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriScheme,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriScheme(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriScheme(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.protocol.replace(":","")}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriScheme=u},{180:180,192:192,195:195,196:196,213:213}],162:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Where,a.evaluator,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);if(s){if(n=[],o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>(o.InternalFunctionUtils.isLogicTrue(e)&&!r&&n.push(t),!1)),!Array.isArray(i)){const t={};for(const e of n)t[e.key]=e.value;n=t}}else a=t.children[0]+" is not a collection or structure object to run Where"}return{value:n,error:a}}}r.Where=a},{180:180,192:192,195:195,213:213}],165:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Year,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCFullYear(),error:e}},o.FunctionUtils.verifyString)}}r.Year=u},{180:180,192:192,195:195,196:196,213:213}],80:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsFloat,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>o.FunctionUtils.isNumber(t[0])&&!Number.isInteger(t[0]))}}r.IsFloat=a},{180:180,192:192,196:196,213:213}],79:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDuration,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.years||void 0!==n.months||void 0!==n.weeks||void 0!==n.days||void 0!==n.hours||void 0!==n.minutes||void 0!==n.seconds),{value:i,error:l}}}r.IsDuration=u},{180:180,192:192,195:195,196:196,213:213}],78:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDefinite,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),l||(i=null!=n&&void 0!==n.year&&void 0!==n.month&&void 0!==n.dayOfMonth),{value:i,error:l}}}r.IsDefinite=u},{180:180,192:192,195:195,196:196,213:213}],95:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.LessThan,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]<t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.LessThan=s},{192:192,196:196,23:23}],102:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(103);class o extends i.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Multiply,o.func)}static func(t){return Number(t[0])*Number(t[1])}}r.Multiply=o},{103:103,192:192}],106:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);r.NotEqual=class extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.NotEqual,t=>!i.FunctionUtils.commonEquals(t[0],t[1]),i.FunctionUtils.validateBinary)}}},{192:192,196:196,23:23}],111:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(103);class s extends o.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Power,s.func,i.FunctionUtils.verifyNumberOrNumericList)}static func(t){return Math.pow(t[0],t[1])}}r.Power=s},{103:103,192:192,196:196}],120:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.SentenceCase,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n){const t=o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleLowerCase(r);return""===t?t:t.charAt(0).toUpperCase()+t.substr(1).toLocaleLowerCase(r)}}}r.SentenceCase=a},{134:134,192:192,195:195,196:196}],137:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(103);class o extends i.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Subtract,o.func)}static func(t){return Number(t[0])-Number(t[1])}}r.Subtract=o},{103:103,192:192}],96:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.LessThanOrEqual,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]<=t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.LessThanOrEqual=s},{192:192,196:196,23:23}],147:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(196),i=t(192),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(i.ExpressionType.TitleCase,a.evaluator,n.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=n.FunctionUtils.determineLocale(t,2,r);const i=t[0];if("string"==typeof i||void 0===i){const t=o.InternalFunctionUtils.parseStringOrUndefined(i).toLocaleLowerCase(r);return""===t?t:t.replace(/\w\S*/g,t=>t.charAt(0).toUpperCase()+t.substr(1).toLocaleLowerCase(r))}}}r.TitleCase=a},{134:134,192:192,195:195,196:196}],148:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.ToLower,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n)return o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleLowerCase(r)}}r.ToLower=a},{134:134,192:192,195:195,196:196}],149:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.ToUpper,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n)return o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleUpperCase(r)}}r.ToUpper=a},{134:134,192:192,195:195,196:196}],150:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(195),o=t(134);class s extends o.StringTransformEvaluator{constructor(){super(n.ExpressionType.Trim,s.evaluator)}static evaluator(t){const e=t[0];if("string"==typeof e||void 0===e)return String(i.InternalFunctionUtils.parseStringOrUndefined(e)).trim()}}r.Trim=s},{134:134,192:192,195:195}],146:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(222),i=t(180),o=t(192),s=t(196),a=t(195),u=t(213);class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TimexResolve,l.evaluator,u.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(t,e,r){let i,o=!1;const{args:u,error:l}=s.FunctionUtils.evaluateChildren(t,e,r);let c=l;if(c||({timexProperty:i,error:c}=a.InternalFunctionUtils.parseTimexProperty(u[0])),c||0!==i.types.size||(c=`The parsed TimexProperty of ${u[0]} in ${t} has no types. It can't be resolved to a string value.`),!c){const e=i.timex;try{o=n.valueResolver.resolve([e]).values[0].value}catch(h){c=`${u[0]} in ${t} is not a valid argument. ${h.Message}`}}return{value:o,error:c}}}r.TimexResolve=l},{180:180,192:192,195:195,196:196,213:213,222:222}],128:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfDay,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfDay(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfDay(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("day").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfDay=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],129:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfHour,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfHour(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfHour(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("hour").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfHour=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],130:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfMonth,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfMonth(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfMonth(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("month").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfMonth=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],138:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.SubtractFromTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if("string"==typeof a[0]&&Number.isInteger(a[1])&&"string"==typeof a[2]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,5,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[1],a[2]);if(void 0===e)h=a[2]+" is not a valid time unit.";else{const r=t;(h=l.InternalFunctionUtils.verifyISOTimestamp(a[0]))||(n=i.default(a[0]).locale(o).utc().subtract(r,e).format(s))}}else h=t+" should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.Number,c.ReturnType.String)}}r.SubtractFromTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],161:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(213);class c extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.UtcNow,c.evaluator(),l.ReturnType.String,c.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,n=u.FunctionUtils.DefaultDateTimeFormat;return({format:n,locale:r}=u.FunctionUtils.determineFormatAndLocale(t,2,n,r)),{value:i.default(new Date).locale(r).utc().format(n),error:void 0}})}static validator(t){u.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String])}}r.UtcNow=c},{180:180,192:192,196:196,213:213,402:402,405:405}],71:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(396)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.Int,l.evaluator(),u.ReturnType.Number,a.FunctionUtils.validateUnary)}static evaluator(){return a.FunctionUtils.applyWithError(t=>{let e,r;const n=t[0];return i.default.isInstance(n)?{value:n.toJSNumber(),error:e}:("string"==typeof n?(r=parseInt(n,10),a.FunctionUtils.isNumber(r)||(e=`parameter ${t[0]} is not a valid number string.`)):a.FunctionUtils.isNumber(n)&&(r=parseInt(n.toString(),10)),{value:r,error:e})})}}r.Int=l},{180:180,192:192,196:196,213:213,396:396}],132:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(401),i=t(180),o=t(192),s=t(196),a=t(213),u=t(200),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.String,c.evaluator(),a.ReturnType.String,c.validator)}static evaluator(){return s.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,i=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;if(i=s.FunctionUtils.determineLocale(t,2,i),"string"==typeof t[0])r=t[0];else if(s.FunctionUtils.isNumber(t[0])){const e=u.localeInfo[i],o=t[0].toString();let s=0;o.includes(".")&&(s=o.split(".")[1].length);const a=`,.${s}f`;r=void 0!==e?n.formatLocale(e).format(a)(t[0]):n.format(a)(t[0])}else r=t[0]instanceof Date?t[0].toLocaleDateString(i):t[0]instanceof Uint8Array?l.InternalFunctionUtils.getTextDecoder().decode(t[0]):l.InternalFunctionUtils.commonStringify(t[0]);return{value:r,error:void 0}})}static validator(t){s.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Object)}}r.String=c},{180:180,192:192,195:195,196:196,200:200,213:213,401:401}],142:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToDays,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerDay:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerDay:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerDay=864e9,r.TicksToDays=l},{180:180,192:192,196:196,213:213,396:396}],143:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToHours,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerHour:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerHour:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerHour=36e9,r.TicksToHours=l},{180:180,192:192,196:196,213:213,396:396}],144:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToMinutes,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerMinute:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerMinute:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerMinute=6e8,r.TicksToMinutes=l},{180:180,192:192,196:196,213:213,396:396}],164:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.XPath,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>a.platformSpecificXPath(t))}static platformSpecificXPath(e){if("undefined"==typeof window&&"undefined"==typeof self){let n,i;const o=t(496),{DOMParser:s}=t(238);let a;try{a=(new s).parseFromString(e[0],"text/xml")}catch(r){n=e[0]+" is not valid xml input"}if(!n){const t=o.select(e[1],a);Array.isArray(t)?0===t.length?n=`There is no matched nodes for the expression ${e[1]} in the xml: ${e[0]}`:i=t.map(t=>t.toString()):i=t}return{value:i,error:n}}{let t,n,i;try{i=(new DOMParser).parseFromString(e[0],"text/xml")}catch(r){t=t=e[0]+" is not valid xml input"}if(!t){const r=i.evaluate(e[1],i,null,XPathResult.ANY_TYPE,null);let o=r.iterateNext();const s=[];for(;o;)s.push(o.childNodes[0].nodeValue),o=r.iterateNext();return 0===s.length?t=`There is no matched nodes for the expression ${e[1]} in the xml: ${e[0]}`:n=1===s.length?s[0]:s,{value:n,error:t}}}}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String)}}r.XPath=a},{180:180,192:192,196:196,213:213,238:238,496:496}],88:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(421)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.JPath,l.evaluator(),u.ReturnType.Object,l.validator)}static evaluator(){return a.FunctionUtils.applyWithError(t=>l.evalJPath(t[0],t[1].toString()))}static evalJPath(t,e){let r,n,o;if("string"==typeof t)try{o=JSON.parse(t)}catch(s){r=t+" is not a valid json string"}else"object"==typeof t?o=t:r="the first parameter should be either an object or a string";if(!r)try{n=i.apply(e,o)}catch(s){r=`${e} is not a valid path + ${s}`}return{value:n,error:r}}static validator(t){a.FunctionUtils.validateOrder(t,void 0,u.ReturnType.Object,u.ReturnType.String)}}r.JPath=l},{180:180,192:192,196:196,213:213,421:421}],104:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(223),i=t(180),o=t(192),s=t(196),a=t(213);class u extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.NewGuid,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return s.FunctionUtils.apply(()=>u.evalNewGuid())}static evalNewGuid(){return n.v4()}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,0,0)}}r.NewGuid=u},{180:180,192:192,196:196,213:213,223:223}],163:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.XML,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.applyWithError(t=>a.platformSpecificXML(t))}static platformSpecificXML(e){if("undefined"!=typeof window||"undefined"!=typeof self){const n=t(456);let i,o,s;try{"string"==typeof e[0]?s=JSON.parse(e[0]):"object"==typeof e[0]&&(s=e[0]),i=new n.json2xml_str(s)}catch(r){o=e[0]+" is not a valid json"}return{value:i,error:o}}{let n,i;const o=t(462);let s;try{"string"==typeof e[0]?s=JSON.parse(e[0]):"object"==typeof e[0]&&(s=e[0]),n=(new o.Builder).buildObject(s)}catch(r){i=e[0]+" is not a valid json"}return{value:n,error:i}}}}r.XML=a},{180:180,192:192,196:196,213:213,456:456,462:462}],421:[function(t,e,r){e.exports=t(422)},{422:422}],223:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"v1",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(r,"v3",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(r,"v4",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(r,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(r,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(r,"version",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(r,"validate",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(r,"stringify",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(r,"parse",{enumerable:!0,get:function(){return h.default}});var n=p(t(231)),i=p(t(232)),o=p(t(234)),s=p(t(235)),a=p(t(225)),u=p(t(237)),l=p(t(236)),c=p(t(230)),h=p(t(226));function p(t){return t&&t.__esModule?t:{default:t}}},{225:225,226:226,230:230,231:231,232:232,234:234,235:235,236:236,237:237}],456:[function(t,e,r){!function(r,n){"use strict";"object"==typeof e&&e.exports?e.exports=n(t(453).DOMParser):r.X2JS=n()}(this,(function(t){"use strict";return function(e){(e=e||{}).arrayAccessForm=e.arrayAccessForm||"none",e.emptyNodeForm=e.emptyNodeForm||"text",e.jsAttributeFilter=e.jsAttributeFilter,e.jsAttributeConverter=e.jsAttributeConverter,e.attributeConverters=e.attributeConverters||[],e.datetimeAccessFormPaths=e.datetimeAccessFormPaths||[],e.arrayAccessFormPaths=e.arrayAccessFormPaths||[],e.xmldomOptions=e.xmldomOptions||{},void 0===e.enableToStringFunc&&(e.enableToStringFunc=!0),void 0===e.skipEmptyTextNodesForObj&&(e.skipEmptyTextNodesForObj=!0),void 0===e.stripWhitespaces&&(e.stripWhitespaces=!0),void 0===e.useDoubleQuotes&&(e.useDoubleQuotes=!0),void 0===e.ignoreRoot&&(e.ignoreRoot=!1),void 0===e.escapeMode&&(e.escapeMode=!0),void 0===e.attributePrefix&&(e.attributePrefix="_"),void 0===e.selfClosingElements&&(e.selfClosingElements=!0),void 0===e.keepCData&&(e.keepCData=!1),void 0===e.keepText&&(e.keepText=!1),void 0===e.jsDateUTC&&(e.jsDateUTC=!1),function(){function t(t){var e=String(t);return 1===e.length&&(e="0"+e),e}"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|^\n+|(\s|\n)+$/g,"")}),"function"!=typeof Date.prototype.toISOString&&(Date.prototype.toISOString=function(){return this.getUTCFullYear()+"-"+t(this.getUTCMonth()+1)+"-"+t(this.getUTCDate())+"T"+t(this.getUTCHours())+":"+t(this.getUTCMinutes())+":"+t(this.getUTCSeconds())+"."+String((this.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"})}();var r=1,n=3,i=4,o=8,s=9;function a(t){var e=t.localName;return null==e&&(e=t.baseName),null!=e&&""!==e||(e=t.nodeName),e}function u(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;"):t}function l(t,r,n){switch(e.arrayAccessForm){case"property":t[r]instanceof Array?t[r+"_asArray"]=t[r]:t[r+"_asArray"]=[t[r]]}if(!(t[r]instanceof Array)&&e.arrayAccessFormPaths.length>0){for(var i=!1,o=0;o<e.arrayAccessFormPaths.length;o++){var s=e.arrayAccessFormPaths[o];if("string"==typeof s){if(s===n){i=!0;break}}else if(s instanceof RegExp){if(s.test(n)){i=!0;break}}else if("function"==typeof s&&s(r,n)){i=!0;break}}i&&(t[r]=[t[r]])}}function c(t){var e=t.split(/[-T:+Z]/g),r=new Date(e[0],e[1]-1,e[2]),n=e[5].split(".");if(r.setHours(e[3],e[4],n[0]),n.length>1&&r.setMilliseconds(n[1]),e[6]&&e[7]){var i=60*e[6]+Number(e[7]);i=0+("-"==(/\d\d-\d\d:\d\d$/.test(t)?"-":"+")?-1*i:i),r.setMinutes(r.getMinutes()-i-r.getTimezoneOffset())}else-1!==t.indexOf("Z",t.length-1)&&(r=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds())));return r}function h(t,u){return t.nodeType===s?function(t){for(var n={},i=t.childNodes,o=0;o<i.length;o++){var s=i.item(o);if(s.nodeType===r){var u=a(s);e.ignoreRoot?n=h(s,u):n[u]=h(s,u)}}return n}(t):t.nodeType===r?function(t,r){for(var n={__cnt:0},i=t.childNodes,s=0;s<i.length;s++){var u=i.item(s),p=a(u);u.nodeType!==o&&(n.__cnt++,null==n[p]?(n[p]=h(u,r+"."+p),l(n,p,r+"."+p)):(n[p]instanceof Array||(n[p]=[n[p]],l(n,p,r+"."+p)),n[p][n[p].length]=h(u,r+"."+p)))}for(var d=0;d<t.attributes.length;d++){var f=t.attributes.item(d);n.__cnt++;for(var y=f.value,m=0;m<e.attributeConverters.length;m++){var g=e.attributeConverters[m];g.test.call(null,f.name,f.value)&&(y=g.convert.call(null,f.name,f.value))}n[e.attributePrefix+f.name]=y}var v=t.prefix;return v&&(n.__cnt++,n.__prefix=v),n["#text"]&&(n.__text=n["#text"],n.__text instanceof Array&&(n.__text=n.__text.join("\n")),e.escapeMode&&(n.__text=n.__text.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#x27;/g,"'").replace(/&amp;/g,"&")),e.stripWhitespaces&&(n.__text=n.__text.trim()),delete n["#text"],"property"===e.arrayAccessForm&&delete n["#text_asArray"],n.__text=function(t,r,n){if(e.datetimeAccessFormPaths.length>0)for(var i=n.split(".#")[0],o=0;o<e.datetimeAccessFormPaths.length;o++){var s=e.datetimeAccessFormPaths[o];if("string"==typeof s){if(s===i)return c(t)}else if(s instanceof RegExp){if(s.test(i))return c(t)}else if("function"==typeof s&&s(i))return c(t)}return t}(n.__text,0,r+".#text")),n.hasOwnProperty("#cdata-section")&&(n.__cdata=n["#cdata-section"],delete n["#cdata-section"],"property"===e.arrayAccessForm&&delete n["#cdata-section_asArray"]),1===n.__cnt&&n.__text&&!e.keepText?n=n.__text:0===n.__cnt&&"text"===e.emptyNodeForm?n="":n.__cnt>1&&void 0!==n.__text&&e.skipEmptyTextNodesForObj&&(e.stripWhitespaces&&""===n.__text||""===n.__text.trim())&&delete n.__text,delete n.__cnt,e.keepCData||n.hasOwnProperty("__text")||!n.hasOwnProperty("__cdata")||1!==Object.keys(n).length?(e.enableToStringFunc&&(n.__text||n.__cdata)&&(n.toString=function(){return(this.__text?this.__text:"")+(this.__cdata?this.__cdata:"")}),n):n.__cdata?n.__cdata:""}(t,u):t.nodeType===n||t.nodeType===i?t.nodeValue:null}function p(t,r,n,i){var o="<"+(t&&t.__prefix?t.__prefix+":":"")+r;if(n)for(var s=0;s<n.length;s++){var a=n[s],l=t[a];e.escapeMode&&(l=u(l)),o+=" "+a.substr(e.attributePrefix.length)+"=",e.useDoubleQuotes?o+='"'+l+'"':o+="'"+l+"'"}return o+(i?" />":">")}function d(t,e){return"</"+(t&&t.__prefix?t.__prefix+":":"")+e+">"}function f(t,r){return"property"===e.arrayAccessForm&&("_asArray",-1!==(n=r.toString()).indexOf("_asArray",n.length-"_asArray".length))||0===r.toString().indexOf(e.attributePrefix)||0===r.toString().indexOf("__")||t[r]instanceof Function;var n}function y(t){var e=0;if(t instanceof Object)for(var r in t)f(t,r)||e++;return e}function m(t){var r=[];if(t instanceof Object)for(var n in t)-1===n.toString().indexOf("__")&&0===n.toString().indexOf(e.attributePrefix)&&r.push(n);return r}function g(t){var r="";return t instanceof Object?r+=function(t){var r="";return t.__cdata&&(r+="<![CDATA["+t.__cdata+"]]>"),(t.__text||"number"==typeof t.__text||"boolean"==typeof t.__text)&&(e.escapeMode?r+=u(t.__text):r+=t.__text),r}(t):null!==t&&(e.escapeMode?r+=u(t):r+=t),r}function v(t,r,n){var i="";return e.jsAttributeFilter&&e.jsAttributeFilter.call(null,r,t)||(e.jsAttributeConverter&&(t=e.jsAttributeConverter.call(null,r,t)),null!=t&&""!==t||!e.selfClosingElements?"object"==typeof t?"[object Array]"===Object.prototype.toString.call(t)?i+=function(t,e,r){var n="";if(0===t.length)n+=p(t,e,r,!0);else for(var i=0;i<t.length;i++)n+=v(t[i],e,m(t[i]));return n}(t,r,n):t instanceof Date?(i+=p(t,r,n,!1),i+=e.jsDateUTC?t.toUTCString():t.toISOString(),i+=d(t,r)):y(t)>0||"number"==typeof t.__text||"boolean"==typeof t.__text||t.__text||t.__cdata?(i+=p(t,r,n,!1),i+=T(t),i+=d(t,r)):e.selfClosingElements?i+=p(t,r,n,!0):(i+=p(t,r,n,!1),i+=d(t,r)):(i+=p(t,r,n,!1),i+=g(t),i+=d(t,r)):i+=p(t,r,n,!0)),i}function T(t){var e="";if(y(t)>0)for(var r in t)if(!f(t,r)){var n=t[r];e+=v(n,r,m(n))}return e+g(t)}function _(r){if(void 0===r)return null;if("string"!=typeof r)return null;var n=null,i=null;if(t)i=(n=new t(e.xmldomOptions)).parseFromString(r,"text/xml");else if(window&&window.DOMParser){n=new window.DOMParser;var o=null;if(!window.ActiveXObject&&!("ActiveXObject"in window)&&document.all&&!document.addEventListener)try{o=n.parseFromString("INVALID","text/xml").childNodes[0].namespaceURI}catch(s){o=null}try{i=n.parseFromString(r,"text/xml"),null!==o&&i.getElementsByTagNameNS(o,"parsererror").length>0&&(i=null)}catch(s){i=null}}else 0===r.indexOf("<?")&&(r=r.substr(r.indexOf("?>")+2)),(i=new ActiveXObject("Microsoft.XMLDOM")).async="false",i.loadXML(r);return i}this.asArray=function(t){return null==t?[]:t instanceof Array?t:[t]},this.toXmlDateTime=function(t){return t instanceof Date?t.toISOString():"number"==typeof t?new Date(t).toISOString():null},this.asDateTime=function(t){return"string"==typeof t?c(t):t},this.xml2dom=function(t){return _(t)},this.dom2js=function(t){return h(t,null)},this.js2dom=function(t){return _(this.js2xml(t))},this.xml2js=function(t){var e=_(t);return null!=e?this.dom2js(e):null},this.js2xml=function(t){return T(t)},this.getVersion=function(){return"3.4.0"}}}))},{453:453}],462:[function(t,e,r){(function(){"use strict";var e,n,i,o={}.hasOwnProperty;n=t(459),e=t(458),i=t(460),t(461),n.defaults,function(t){function e(t){this.message=t}(function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype})(e,Error)}(),r.Builder=e.Builder,i.Parser,i.parseString,i.parseStringPromise}).call(this)},{458:458,459:459,460:460,461:461}],496:[function(t,e,r){!function(t){"use strict";var e=function(t,e){for(var r=0;r<e.length;r+=1)t(e[r],r,e)},r=function(t,r,n){var i=r;return e((function(e,r){i=t(i,e,r)}),n),i},n=function(t,r){var n=new Array(r.length);return e((function(e,r){n[r]=t(e)}),r),n};function i(t){return t.toString()}var o=function(t,e){return e.join(t)},s=function(t,e,r){return t+r+e},a=Array.prototype.concat;function u(t,e){for(var r=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(r[o]=i[o])}return r}function l(){this.init()}function c(t){this.expression=t}function h(t,e,r){e in t||(t[e]=r)}function p(){}function d(t){arguments.length>0&&this.init(t)}function f(t){arguments.length>0&&this.init(t)}function y(t,e){arguments.length>0&&this.init(t,e)}function m(t,e){arguments.length>0&&this.init(t,e)}function g(t,e){arguments.length>0&&this.init(t,e)}function v(t,e){arguments.length>0&&this.init(t,e)}function T(t,e){arguments.length>0&&this.init(t,e)}function _(t,e){arguments.length>0&&this.init(t,e)}function E(t,e){arguments.length>0&&this.init(t,e)}function b(t,e){arguments.length>0&&this.init(t,e)}function S(t,e){arguments.length>0&&this.init(t,e)}function x(t,e){arguments.length>0&&this.init(t,e)}function C(t,e){arguments.length>0&&this.init(t,e)}function A(t,e){arguments.length>0&&this.init(t,e)}function N(t,e){arguments.length>0&&this.init(t,e)}function O(t,e){arguments.length>0&&this.init(t,e)}function w(t,e){arguments.length>0&&this.init(t,e)}function R(t,e,r){arguments.length>0&&this.init(t,e,r)}function L(t){for(;t&&t.parentNode;)t=t.parentNode;return t}function P(t,e,r){return function(t){for(var e=[],r=0;r<t.length;r+=32767){var n=t.slice(r,r+32767);e=a.apply(e,n)}return e}(n(function(t,e,r){return R.applyPredicates(t.predicates,e,R.applyStep(t,e,r))}.bind(null,r,t),e))}function I(t,e){arguments.length>0&&this.init(t,e)}function D(t,e,r){arguments.length>0&&this.init(t,e,r)}function U(t,e){arguments.length>0&&this.init(t,e)}function M(t){arguments.length>0&&this.init(t)}function k(t,e){arguments.length>0&&this.init(t,e)}l.prototype=new Object,l.prototype.constructor=l,l.superclass=Object.prototype,l.prototype.init=function(){this.reduceActions=[],this.reduceActions[3]=function(t){return new m(t[0],t[2])},this.reduceActions[5]=function(t){return new g(t[0],t[2])},this.reduceActions[7]=function(t){return new v(t[0],t[2])},this.reduceActions[8]=function(t){return new T(t[0],t[2])},this.reduceActions[10]=function(t){return new _(t[0],t[2])},this.reduceActions[11]=function(t){return new E(t[0],t[2])},this.reduceActions[12]=function(t){return new b(t[0],t[2])},this.reduceActions[13]=function(t){return new S(t[0],t[2])},this.reduceActions[15]=function(t){return new x(t[0],t[2])},this.reduceActions[16]=function(t){return new C(t[0],t[2])},this.reduceActions[18]=function(t){return new A(t[0],t[2])},this.reduceActions[19]=function(t){return new N(t[0],t[2])},this.reduceActions[20]=function(t){return new O(t[0],t[2])},this.reduceActions[22]=function(t){return new f(t[1])},this.reduceActions[24]=function(t){return new w(t[0],t[2])},this.reduceActions[25]=function(t){return new R(void 0,void 0,t[0])},this.reduceActions[27]=function(t){return t[0].locationPath=t[2],t[0]},this.reduceActions[28]=function(t){return t[0].locationPath=t[2],t[0].locationPath.steps.unshift(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[0]},this.reduceActions[29]=function(t){return new R(t[0],[],void 0)},this.reduceActions[30]=function(t){return X.instance_of(t[0],R)?(null==t[0].filterPredicates&&(t[0].filterPredicates=[]),t[0].filterPredicates.push(t[1]),t[0]):new R(t[0],[t[1]],void 0)},this.reduceActions[32]=function(t){return t[1]},this.reduceActions[33]=function(t){return new j(t[0])},this.reduceActions[34]=function(t){return new B(t[0])},this.reduceActions[36]=function(t){return new k(t[0],[])},this.reduceActions[37]=function(t){return new k(t[0],t[2])},this.reduceActions[38]=function(t){return[t[0]]},this.reduceActions[39]=function(t){return t[2].unshift(t[0]),t[2]},this.reduceActions[43]=function(t){return new I(!0,[])},this.reduceActions[44]=function(t){return t[1].absolute=!0,t[1]},this.reduceActions[46]=function(t){return new I(!1,[t[0]])},this.reduceActions[47]=function(t){return t[0].steps.push(t[2]),t[0]},this.reduceActions[49]=function(t){return new D(t[0],t[1],[])},this.reduceActions[50]=function(t){return new D(D.CHILD,t[0],[])},this.reduceActions[51]=function(t){return new D(t[0],t[1],t[2])},this.reduceActions[52]=function(t){return new D(D.CHILD,t[0],t[1])},this.reduceActions[54]=function(t){return[t[0]]},this.reduceActions[55]=function(t){return t[1].unshift(t[0]),t[1]},this.reduceActions[56]=function(t){return"ancestor"==t[0]?D.ANCESTOR:"ancestor-or-self"==t[0]?D.ANCESTORORSELF:"attribute"==t[0]?D.ATTRIBUTE:"child"==t[0]?D.CHILD:"descendant"==t[0]?D.DESCENDANT:"descendant-or-self"==t[0]?D.DESCENDANTORSELF:"following"==t[0]?D.FOLLOWING:"following-sibling"==t[0]?D.FOLLOWINGSIBLING:"namespace"==t[0]?D.NAMESPACE:"parent"==t[0]?D.PARENT:"preceding"==t[0]?D.PRECEDING:"preceding-sibling"==t[0]?D.PRECEDINGSIBLING:"self"==t[0]?D.SELF:-1},this.reduceActions[57]=function(t){return D.ATTRIBUTE},this.reduceActions[59]=function(t){return"comment"==t[0]?U.commentTest:"text"==t[0]?U.textTest:"processing-instruction"==t[0]?U.anyPiTest:"node"==t[0]?U.nodeTest:new U(-1,void 0)},this.reduceActions[60]=function(t){return new U.PITest(t[2])},this.reduceActions[61]=function(t){return t[1]},this.reduceActions[63]=function(t){return t[1].absolute=!0,t[1].steps.unshift(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[1]},this.reduceActions[64]=function(t){return t[0].steps.push(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[0].steps.push(t[2]),t[0]},this.reduceActions[65]=function(t){return new D(D.SELF,U.nodeTest,[])},this.reduceActions[66]=function(t){return new D(D.PARENT,U.nodeTest,[])},this.reduceActions[67]=function(t){return new M(t[1])},this.reduceActions[68]=function(t){return U.nameTestAny},this.reduceActions[69]=function(t){return new U.NameTestPrefixAny(t[0].split(":")[0])},this.reduceActions[70]=function(t){return new U.NameTestQName(t[0])}},l.actionTable=[" s s        sssssssss    s ss  s  ss","                 s                  ","r  rrrrrrrrr         rrrrrrr rr  r  ","                rrrrr               "," s s        sssssssss    s ss  s  ss","rs  rrrrrrrr s  sssssrrrrrr  rrs rs "," s s        sssssssss    s ss  s  ss","                            s       ","                            s       ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","  s                                 ","                            s       "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr  r  ","a                                   ","r       s                    rr  r  ","r      sr                    rr  r  ","r   s  rr            s       rr  r  ","r   rssrr            rss     rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrrs  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r  srrrrrrrr         rrrrrrs rr sr  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r   rrrrrrrr         rrrrrr  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","                sssss               ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             s      ","r  srrrrrrrr         rrrrrrs rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","              s                     ","                             s      ","                rrrrr               "," s s        sssssssss    s sss s  ss","r  srrrrrrrr         rrrrrrs rr  r  "," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss      ss  s  ss"," s s        sssssssss    s ss  s  ss"," s           s  sssss          s  s "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr rr  "," s           s  sssss          s  s "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             s      ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             rr     ","                             s      ","                             rs     ","r      sr                    rr  r  ","r   s  rr            s       rr  r  ","r   rssrr            rss     rr  r  ","r   rssrr            rss     rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","                                 r  ","                                 s  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  "," s s        sssssssss    s ss  s  ss","r  rrrrrrrrr         rrrrrrr rr rr  ","                             r      "],l.actionTableNumber=[" 1 0        /.-,+*)('    & %$  #  \"!","                 J                  ","a  aaaaaaaaa         aaaaaaa aa  a  ","                YYYYY               "," 1 0        /.-,+*)('    & %$  #  \"!","K1  KKKKKKKK .  +*)('KKKKKK  KK# K\" "," 1 0        /.-,+*)('    & %$  #  \"!","                            N       ","                            O       ","e  eeeeeeeee         eeeeeee ee ee  ","f  fffffffff         fffffff ff ff  ","d  ddddddddd         ddddddd dd dd  ","B  BBBBBBBBB         BBBBBBB BB BB  ","A  AAAAAAAAA         AAAAAAA AA AA  ","  P                                 ","                            Q       "," 1           .  +*)('          #  \" ","b  bbbbbbbbb         bbbbbbb bb  b  ","                                    ","!       S                    !!  !  ",'"      T"                    ""  "  ',"$   V  $$            U       $$  $  ","&   &ZY&&            &XW     &&  &  ",")   )))))            )))\\[   ))  )  ",".   ....._^]         .....   ..  .  ","1   11111111         11111   11  1  ","5   55555555         55555`  55  5  ","7   77777777         777777  77  7  ","9   99999999         999999  99  9  ",":  c::::::::         ::::::b :: a:  ","I  fIIIIIIII         IIIIIIe II  I  ","=  =========         ======= == ==  ","?  ?????????         ??????? ?? ??  ","C  CCCCCCCCC         CCCCCCC CC CC  ","J   JJJJJJJJ         JJJJJJ  JJ  J  ","M   MMMMMMMM         MMMMMM  MM  M  ","N  NNNNNNNNN         NNNNNNN NN  N  ","P  PPPPPPPPP         PPPPPPP PP  P  ","                +*)('               ","R  RRRRRRRRR         RRRRRRR RR aR  ","U  UUUUUUUUU         UUUUUUU UU  U  ","Z  ZZZZZZZZZ         ZZZZZZZ ZZ ZZ  ","c  ccccccccc         ccccccc cc cc  ","                             j      ","L  fLLLLLLLL         LLLLLLe LL  L  ","6   66666666         66666   66  6  ","              k                     ","                             l      ","                XXXXX               "," 1 0        /.-,+*)('    & %$m #  \"!","_  f________         ______eaQ  ","V  VVVVVVVVV         VVVVVVV VV aV  ","T  TTTTTTTTT         TTTTTTT TT  T  ","@  @@@@@@@@@         @@@@@@@ @@ @@  ","                             \x87      ","[  [[[[[[[[[         [[[[[[[ [[ [[  ","D  DDDDDDDDD         DDDDDDD DD DD  ","                             HH     ","                             \x88      ","                             F\x89     ","#      T#                    ##  #  ","%   V  %%            U       %%  %  ","'   'ZY''            'XW     ''  '  ","(   (ZY((            (XW     ((  (  ","+   +++++            +++\\[   ++  +  ","*   *****            ***\\[   **  *  ","-   -----            ---\\[   --  -  ",",   ,,,,,            ,,,\\[   ,,  ,  ","0   00000_^]         00000   00  0  ","/   /////_^]         /////   //  /  ","2   22222222         22222   22  2  ","3   33333333         33333   33  3  ","4   44444444         44444   44  4  ","8   88888888         888888  88  8  ","                                 ^  ","                                 \x8a  ",";  f;;;;;;;;         ;;;;;;e ;;  ;  ","<  f<<<<<<<<         <<<<<<e <<  <  ","O  OOOOOOOOO         OOOOOOO OO  O  ","`  `````````         ``````` ``  `  ","S  SSSSSSSSS         SSSSSSS SS  S  ","W  WWWWWWWWW         WWWWWWW WW  W  ","\\  \\\\\\\\\\\\\\\\\\         \\\\\\\\\\\\\\ \\\\ \\\\  ","E  EEEEEEEEE         EEEEEEE EE EE  "," 1 0        /.-,+*)('    & %$  #  \"!","]  ]]]]]]]]]         ]]]]]]] ]] ]]  ","                             G      "],l.gotoTable=["3456789:;<=>?@ AB  CDEFGH IJ ","                             ","                             ","                             ","L456789:;<=>?@ AB  CDEFGH IJ ","            M        EFGH IJ ","       N;<=>?@ AB  CDEFGH IJ ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","            S        EFGH IJ ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","              e              ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                        h  J ","              i          j   ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","o456789:;<=>?@ ABpqCDEFGH IJ ","                             ","  r6789:;<=>?@ AB  CDEFGH IJ ","   s789:;<=>?@ AB  CDEFGH IJ ","    t89:;<=>?@ AB  CDEFGH IJ ","    u89:;<=>?@ AB  CDEFGH IJ ","     v9:;<=>?@ AB  CDEFGH IJ ","     w9:;<=>?@ AB  CDEFGH IJ ","     x9:;<=>?@ AB  CDEFGH IJ ","     y9:;<=>?@ AB  CDEFGH IJ ","      z:;<=>?@ AB  CDEFGH IJ ","      {:;<=>?@ AB  CDEFGH IJ ","       |;<=>?@ AB  CDEFGH IJ ","       };<=>?@ AB  CDEFGH IJ ","       ~;<=>?@ AB  CDEFGH IJ ","         \x7f=>?@ AB  CDEFGH IJ ","\x80456789:;<=>?@ AB  CDEFGH IJ\x81","            \x82        EFGH IJ ","            \x83        EFGH IJ ","                             ","                     \x84 GH IJ ","                     \x85 GH IJ ","              i          \x86   ","              i          \xo456789:;<=>?@ AB\x8cqCDEFGH IJ ","                             ","                             "],l.productions=[[1,1,2],[2,1,3],[3,1,4],[3,3,3,-9,4],[4,1,5],[4,3,4,-8,5],[5,1,6],[5,3,5,-22,6],[5,3,5,-5,6],[6,1,7],[6,3,6,-23,7],[6,3,6,-24,7],[6,3,6,-6,7],[6,3,6,-7,7],[7,1,8],[7,3,7,-25,8],[7,3,7,-26,8],[8,1,9],[8,3,8,-12,9],[8,3,8,-11,9],[8,3,8,-10,9],[9,1,10],[9,2,-26,9],[10,1,11],[10,3,10,-27,11],[11,1,12],[11,1,13],[11,3,13,-28,14],[11,3,13,-4,14],[13,1,15],[13,2,13,16],[15,1,17],[15,3,-29,2,-30],[15,1,-15],[15,1,-16],[15,1,18],[18,3,-13,-29,-30],[18,4,-13,-29,19,-30],[19,1,20],[19,3,20,-31,19],[20,1,2],[12,1,14],[12,1,21],[21,1,-28],[21,2,-28,14],[21,1,22],[14,1,23],[14,3,14,-28,23],[14,1,24],[23,2,25,26],[23,1,26],[23,3,25,26,27],[23,2,26,27],[23,1,28],[27,1,16],[27,2,16,27],[25,2,-14,-3],[25,1,-32],[26,1,29],[26,3,-20,-29,-30],[26,4,-21,-29,-15,-30],[16,3,-33,30,-34],[30,1,2],[22,2,-4,14],[24,3,14,-4,23],[28,1,-35],[28,1,-2],[17,2,-36,-18],[29,1,-17],[29,1,-19],[29,1,-18]],l.DOUBLEDOT=2,l.DOUBLECOLON=3,l.DOUBLESLASH=4,l.NOTEQUAL=5,l.LESSTHANOREQUAL=6,l.GREATERTHANOREQUAL=7,l.AND=8,l.OR=9,l.MOD=10,l.DIV=11,l.MULTIPLYOPERATOR=12,l.FUNCTIONNAME=13,l.AXISNAME=14,l.LITERAL=15,l.NUMBER=16,l.ASTERISKNAMETEST=17,l.QNAME=18,l.NCNAMECOLONASTERISK=19,l.NODETYPE=20,l.PROCESSINGINSTRUCTIONWITHLITERAL=21,l.EQUALS=22,l.LESSTHAN=23,l.GREATERTHAN=24,l.PLUS=25,l.MINUS=26,l.BAR=27,l.SLASH=28,l.LEFTPARENTHESIS=29,l.RIGHTPARENTHESIS=30,l.COMMA=31,l.AT=32,l.LEFTBRACKET=33,l.RIGHTBRACKET=34,l.DOT=35,l.DOLLAR=36,l.prototype.tokenize=function(t){for(var e=[],r=[],n=t+"\0",i=0,o=n.charAt(i++);;){for(;" "==o||"\t"==o||"\r"==o||"\n"==o;)o=n.charAt(i++);if("\0"==o||i>=n.length)break;if("("!=o)if(")"!=o)if("["!=o)if("]"!=o)if("@"!=o)if(","!=o)if("|"!=o)if("+"!=o)if("-"!=o)if("="!=o)if("$"!=o)if("."!=o)if("'"!=o&&'"'!=o)if(o>="0"&&o<="9"){for(h=o,o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);if("."==o&&n.charAt(i)>="0"&&n.charAt(i)<="9")for(h+=o,h+=n.charAt(i++),o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);e.push(l.NUMBER),r.push(h)}else if("*"!=o)if(":"!=o||":"!=n.charAt(i))if("/"!=o)if("!"!=o||"="!=n.charAt(i))if("<"!=o)if(">"!=o){if("_"!=o&&!X.isLetter(o.charCodeAt(0)))throw new Error("Unexpected character "+o);var s=o;for(o=n.charAt(i++);X.isNCNameChar(o.charCodeAt(0));)s+=o,o=n.charAt(i++);if(e.length>0&&(a=e[e.length-1])!=l.AT&&a!=l.DOUBLECOLON&&a!=l.LEFTPARENTHESIS&&a!=l.LEFTBRACKET&&a!=l.AND&&a!=l.OR&&a!=l.MOD&&a!=l.DIV&&a!=l.MULTIPLYOPERATOR&&a!=l.SLASH&&a!=l.DOUBLESLASH&&a!=l.BAR&&a!=l.PLUS&&a!=l.MINUS&&a!=l.EQUALS&&a!=l.NOTEQUAL&&a!=l.LESSTHAN&&a!=l.LESSTHANOREQUAL&&a!=l.GREATERTHAN&&a!=l.GREATERTHANOREQUAL){if("and"==s){e.push(l.AND),r.push(s);continue}if("or"==s){e.push(l.OR),r.push(s);continue}if("mod"==s){e.push(l.MOD),r.push(s);continue}if("div"==s){e.push(l.DIV),r.push(s);continue}}if(":"==o){if("*"==n.charAt(i)){e.push(l.NCNAMECOLONASTERISK),r.push(s+":*"),i++,o=n.charAt(i++);continue}if("_"==n.charAt(i)||X.isLetter(n.charCodeAt(i))){for(s+=":",o=n.charAt(i++);X.isNCNameChar(o.charCodeAt(0));)s+=o,o=n.charAt(i++);if("("==o){e.push(l.FUNCTIONNAME),r.push(s);continue}e.push(l.QNAME),r.push(s);continue}if(":"==n.charAt(i)){e.push(l.AXISNAME),r.push(s);continue}}if("("==o){if("comment"==s||"text"==s||"node"==s){e.push(l.NODETYPE),r.push(s);continue}if("processing-instruction"==s){")"==n.charAt(i)?e.push(l.NODETYPE):e.push(l.PROCESSINGINSTRUCTIONWITHLITERAL),r.push(s);continue}e.push(l.FUNCTIONNAME),r.push(s);continue}e.push(l.QNAME),r.push(s)}else{if("="==n.charAt(i)){e.push(l.GREATERTHANOREQUAL),r.push(">="),i++,o=n.charAt(i++);continue}e.push(l.GREATERTHAN),r.push(">"),o=n.charAt(i++)}else{if("="==n.charAt(i)){e.push(l.LESSTHANOREQUAL),r.push("<="),i++,o=n.charAt(i++);continue}e.push(l.LESSTHAN),r.push("<"),o=n.charAt(i++)}else e.push(l.NOTEQUAL),r.push("!="),i++,o=n.charAt(i++);else{if("/"==(o=n.charAt(i++))){e.push(l.DOUBLESLASH),r.push("//"),o=n.charAt(i++);continue}e.push(l.SLASH),r.push("/")}else e.push(l.DOUBLECOLON),r.push("::"),i++,o=n.charAt(i++);else{var a;if(e.length>0&&(a=e[e.length-1])!=l.AT&&a!=l.DOUBLECOLON&&a!=l.LEFTPARENTHESIS&&a!=l.LEFTBRACKET&&a!=l.AND&&a!=l.OR&&a!=l.MOD&&a!=l.DIV&&a!=l.MULTIPLYOPERATOR&&a!=l.SLASH&&a!=l.DOUBLESLASH&&a!=l.BAR&&a!=l.PLUS&&a!=l.MINUS&&a!=l.EQUALS&&a!=l.NOTEQUAL&&a!=l.LESSTHAN&&a!=l.LESSTHANOREQUAL&&a!=l.GREATERTHAN&&a!=l.GREATERTHANOREQUAL){e.push(l.MULTIPLYOPERATOR),r.push(o),o=n.charAt(i++);continue}e.push(l.ASTERISKNAMETEST),r.push(o),o=n.charAt(i++)}else{for(var u=o,c="";i<n.length&&(o=n.charAt(i))!==u;)c+=o,i+=1;if(o!==u)throw Q.fromMessage("Unterminated string literal: "+u+c);i+=1,e.push(l.LITERAL),r.push(c),o=n.charAt(i++)}else{if("."==(o=n.charAt(i++))){e.push(l.DOUBLEDOT),r.push(".."),o=n.charAt(i++);continue}if(o>="0"&&o<="9"){var h="."+o;for(o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);e.push(l.NUMBER),r.push(h);continue}e.push(l.DOT),r.push(".")}else e.push(l.DOLLAR),r.push(o),o=n.charAt(i++);else e.push(l.EQUALS),r.push(o),o=n.charAt(i++);else e.push(l.MINUS),r.push(o),o=n.charAt(i++);else e.push(l.PLUS),r.push(o),o=n.charAt(i++);else e.push(l.BAR),r.push(o),o=n.charAt(i++);else e.push(l.COMMA),r.push(o),o=n.charAt(i++);else e.push(l.AT),r.push(o),o=n.charAt(i++);else e.push(l.RIGHTBRACKET),r.push(o),o=n.charAt(i++);else e.push(l.LEFTBRACKET),r.push(o),o=n.charAt(i++);else e.push(l.RIGHTPARENTHESIS),r.push(o),o=n.charAt(i++);else e.push(l.LEFTPARENTHESIS),r.push(o),o=n.charAt(i++)}return e.push(1),r.push("[EOF]"),[e,r]},l.SHIFT="s",l.REDUCE="r",l.ACCEPT="a",l.prototype.parse=function(t){var e,r,n=this.tokenize(t);if(null!=n){e=n[0],r=n[1];var i,o,s=0,a=[],u=[],h=[];for(a.push(0),u.push(1),h.push("_S"),i=e[s],o=r[s++];;)switch(t=a[a.length-1],l.actionTable[t].charAt(i-1)){case l.SHIFT:u.push(-i),h.push(o),a.push(l.actionTableNumber[t].charCodeAt(i-1)-32),i=e[s],o=r[s++];break;case l.REDUCE:for(var p=l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][1],d=[],f=0;f<p;f++)u.pop(),d.unshift(h.pop()),a.pop();var y=a[a.length-1];u.push(l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][0]),null==this.reduceActions[l.actionTableNumber[t].charCodeAt(i-1)-32]?h.push(d[0]):h.push(this.reduceActions[l.actionTableNumber[t].charCodeAt(i-1)-32](d)),a.push(l.gotoTable[y].charCodeAt(l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][0]-2)-33);break;case l.ACCEPT:return new c(h.pop());default:throw new Error("XPath parse error")}}},c.prototype=new Object,c.prototype.constructor=c,c.superclass=Object.prototype,c.prototype.toString=function(){return this.expression.toString()},c.prototype.evaluate=function(t){return t.contextNode=t.expressionContextNode,t.contextSize=1,t.contextPosition=1,t.isHtml&&(h(t,"caseInsensitive",!0),h(t,"allowAnyNamespaceForNoPrefix",!0)),h(t,"caseInsensitive",!1),this.expression.evaluate(t)},c.XML_NAMESPACE_URI="http://www.w3.org/XML/1998/namespace",c.XMLNS_NAMESPACE_URI="http://www.w3.org/2000/xmlns/",p.prototype=new Object,p.prototype.constructor=p,p.superclass=Object.prototype,p.prototype.init=function(){},p.prototype.toString=function(){return"<Expression>"},p.prototype.evaluate=function(t){throw new Error("Could not evaluate expression.")},d.prototype=new p,d.prototype.constructor=d,d.superclass=p.prototype,d.prototype.init=function(t){this.rhs=t},f.prototype=new d,f.prototype.constructor=f,f.superclass=d.prototype,f.prototype.init=function(t){f.superclass.init.call(this,t)},f.prototype.evaluate=function(t){return this.rhs.evaluate(t).number().negate()},f.prototype.toString=function(){return"-"+this.rhs.toString()},y.prototype=new p,y.prototype.constructor=y,y.superclass=p.prototype,y.prototype.init=function(t,e){this.lhs=t,this.rhs=e},m.prototype=new y,m.prototype.constructor=m,m.superclass=y.prototype,m.prototype.init=function(t,e){m.superclass.init.call(this,t,e)},m.prototype.toString=function(){return"("+this.lhs.toString()+" or "+this.rhs.toString()+")"},m.prototype.evaluate=function(t){var e=this.lhs.evaluate(t).bool();return e.booleanValue()?e:this.rhs.evaluate(t).bool()},g.prototype=new y,g.prototype.constructor=g,g.superclass=y.prototype,g.prototype.init=function(t,e){g.superclass.init.call(this,t,e)},g.prototype.toString=function(){return"("+this.lhs.toString()+" and "+this.rhs.toString()+")"},g.prototype.evaluate=function(t){var e=this.lhs.evaluate(t).bool();return e.booleanValue()?this.rhs.evaluate(t).bool():e},v.prototype=new y,v.prototype.constructor=v,v.superclass=y.prototype,v.prototype.init=function(t,e){v.superclass.init.call(this,t,e)},v.prototype.toString=function(){return"("+this.lhs.toString()+" = "+this.rhs.toString()+")"},v.prototype.evaluate=function(t){return this.lhs.evaluate(t).equals(this.rhs.evaluate(t))},T.prototype=new y,T.prototype.constructor=T,T.superclass=y.prototype,T.prototype.init=function(t,e){T.superclass.init.call(this,t,e)},T.prototype.toString=function(){return"("+this.lhs.toString()+" != "+this.rhs.toString()+")"},T.prototype.evaluate=function(t){return this.lhs.evaluate(t).notequal(this.rhs.evaluate(t))},_.prototype=new y,_.prototype.constructor=_,_.superclass=y.prototype,_.prototype.init=function(t,e){_.superclass.init.call(this,t,e)},_.prototype.evaluate=function(t){return this.lhs.evaluate(t).lessthan(this.rhs.evaluate(t))},_.prototype.toString=function(){return"("+this.lhs.toString()+" < "+this.rhs.toString()+")"},E.prototype=new y,E.prototype.constructor=E,E.superclass=y.prototype,E.prototype.init=function(t,e){E.superclass.init.call(this,t,e)},E.prototype.evaluate=function(t){return this.lhs.evaluate(t).greaterthan(this.rhs.evaluate(t))},E.prototype.toString=function(){return"("+this.lhs.toString()+" > "+this.rhs.toString()+")"},b.prototype=new y,b.prototype.constructor=b,b.superclass=y.prototype,b.prototype.init=function(t,e){b.superclass.init.call(this,t,e)},b.prototype.evaluate=function(t){return this.lhs.evaluate(t).lessthanorequal(this.rhs.evaluate(t))},b.prototype.toString=function(){return"("+this.lhs.toString()+" <= "+this.rhs.toString()+")"},S.prototype=new y,S.prototype.constructor=S,S.superclass=y.prototype,S.prototype.init=function(t,e){S.superclass.init.call(this,t,e)},S.prototype.evaluate=function(t){return this.lhs.evaluate(t).greaterthanorequal(this.rhs.evaluate(t))},S.prototype.toString=function(){return"("+this.lhs.toString()+" >= "+this.rhs.toString()+")"},x.prototype=new y,x.prototype.constructor=x,x.superclass=y.prototype,x.prototype.init=function(t,e){x.superclass.init.call(this,t,e)},x.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().plus(this.rhs.evaluate(t).number())},x.prototype.toString=function(){return"("+this.lhs.toString()+" + "+this.rhs.toString()+")"},C.prototype=new y,C.prototype.constructor=C,C.superclass=y.prototype,C.prototype.init=function(t,e){C.superclass.init.call(this,t,e)},C.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().minus(this.rhs.evaluate(t).number())},C.prototype.toString=function(){return"("+this.lhs.toString()+" - "+this.rhs.toString()+")"},A.prototype=new y,A.prototype.constructor=A,A.superclass=y.prototype,A.prototype.init=function(t,e){A.superclass.init.call(this,t,e)},A.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().multiply(this.rhs.evaluate(t).number())},A.prototype.toString=function(){return"("+this.lhs.toString()+" * "+this.rhs.toString()+")"},N.prototype=new y,N.prototype.constructor=N,N.superclass=y.prototype,N.prototype.init=function(t,e){N.superclass.init.call(this,t,e)},N.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().div(this.rhs.evaluate(t).number())},N.prototype.toString=function(){return"("+this.lhs.toString()+" div "+this.rhs.toString()+")"},O.prototype=new y,O.prototype.constructor=O,O.superclass=y.prototype,O.prototype.init=function(t,e){O.superclass.init.call(this,t,e)},O.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().mod(this.rhs.evaluate(t).number())},O.prototype.toString=function(){return"("+this.lhs.toString()+" mod "+this.rhs.toString()+")"},w.prototype=new y,w.prototype.constructor=w,w.superclass=y.prototype,w.prototype.init=function(t,e){w.superclass.init.call(this,t,e)},w.prototype.evaluate=function(t){return this.lhs.evaluate(t).nodeset().union(this.rhs.evaluate(t).nodeset())},w.prototype.toString=function(){return n(i,[this.lhs,this.rhs]).join(" | ")},R.prototype=new p,R.prototype.constructor=R,R.superclass=p.prototype,R.prototype.init=function(t,e,r){R.superclass.init.call(this),this.filter=t,this.filterPredicates=e,this.locationPath=r},R.applyPredicates=function(t,n,i){if(0===t.length)return i;var o=n.extend({});return r((function(t,r){return o.contextSize=t.length,n=function(t,e){return o.contextNode=t,o.contextPosition=e+1,R.predicateMatches(r,o)},i=[],e((function(t,e){n(t,e)&&i.push(t)}),t),i;var n,i}),i,t)},R.getRoot=function(t,e){var r=e[0];if(9===r.nodeType)return r;if(t.virtualRoot)return t.virtualRoot;var n=r.ownerDocument;if(n)return n;for(var i=r;null!=i.parentNode;)i=i.parentNode;return i},R.applyStep=function(t,e,r){var n=[];switch(e.contextNode=r,t.axis){case D.ANCESTOR:if(e.contextNode===e.virtualRoot)break;for(i=2==e.contextNode.nodeType?R.getOwnerElement(e.contextNode):e.contextNode.parentNode;null!=i&&(t.nodeTest.matches(i,e)&&n.push(i),i!==e.virtualRoot);)i=i.parentNode;break;case D.ANCESTORORSELF:for(var i=e.contextNode;null!=i&&(t.nodeTest.matches(i,e)&&n.push(i),i!==e.virtualRoot);i=2==i.nodeType?R.getOwnerElement(i):i.parentNode);break;case D.ATTRIBUTE:var o=e.contextNode.attributes;if(null!=o)for(var s=0;s<o.length;s++)i=o.item(s),t.nodeTest.matches(i,e)&&n.push(i);break;case D.CHILD:for(i=e.contextNode.firstChild;null!=i;i=i.nextSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.DESCENDANT:for(var a=[e.contextNode.firstChild];a.length>0;)for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling;break;case D.DESCENDANTORSELF:for(t.nodeTest.matches(e.contextNode,e)&&n.push(e.contextNode),a=[e.contextNode.firstChild];a.length>0;)for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling;break;case D.FOLLOWING:if(e.contextNode===e.virtualRoot)break;for(a=[],null!=e.contextNode.firstChild?a.unshift(e.contextNode.firstChild):a.unshift(e.contextNode.nextSibling),i=e.contextNode.parentNode;null!=i&&9!=i.nodeType&&i!==e.virtualRoot;i=i.parentNode)a.unshift(i.nextSibling);do{for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling}while(a.length>0);break;case D.FOLLOWINGSIBLING:if(e.contextNode===e.virtualRoot)break;for(i=e.contextNode.nextSibling;null!=i;i=i.nextSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.NAMESPACE:var u={};if(1==e.contextNode.nodeType){for(u.xml=c.XML_NAMESPACE_URI,u.xmlns=c.XMLNS_NAMESPACE_URI,i=e.contextNode;null!=i&&1==i.nodeType;i=i.parentNode)for(s=0;s<i.attributes.length;s++){var l=i.attributes.item(s),h=String(l.name);"xmlns"==h?null==u[""]&&(u[""]=l.value):h.length>6&&"xmlns:"==h.substring(0,6)&&null==u[p=h.substring(6,h.length)]&&(u[p]=l.value)}for(var p in u){var d=new W(p,u[p],e.contextNode);t.nodeTest.matches(d,e)&&n.push(d)}}break;case D.PARENT:i=null,e.contextNode!==e.virtualRoot&&(i=2==e.contextNode.nodeType?R.getOwnerElement(e.contextNode):e.contextNode.parentNode),null!=i&&t.nodeTest.matches(i,e)&&n.push(i);break;case D.PRECEDING:a=null!=e.virtualRoot?[e.virtualRoot]:[L(e.contextNode)];t:for(;a.length>0;)for(i=a.pop();null!=i;){if(i==e.contextNode)break t;t.nodeTest.matches(i,e)&&n.unshift(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling}break;case D.PRECEDINGSIBLING:if(e.contextNode===e.virtualRoot)break;for(i=e.contextNode.previousSibling;null!=i;i=i.previousSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.SELF:t.nodeTest.matches(e.contextNode,e)&&n.push(e.contextNode)}return n},R.applySteps=function(t,e,n){return r(P.bind(null,e),n,t)},R.prototype.applyFilter=function(t,e){if(!this.filter)return{nodes:[t.contextNode]};var r=this.filter.evaluate(t);if(!X.instance_of(r,z)){if(null!=this.filterPredicates&&this.filterPredicates.length>0||null!=this.locationPath)throw new Error("Path expression filter must evaluate to a nodeset if predicates or location path are used");return{nonNodes:r}}return{nodes:R.applyPredicates(this.filterPredicates||[],e,r.toUnsortedArray())}},R.applyLocationPath=function(t,e,r){if(!t)return r;var n=t.absolute?[R.getRoot(e,r)]:r;return R.applySteps(t.steps,e,n)},R.prototype.evaluate=function(t){var e=u(new V,t),r=this.applyFilter(t,e);if("nonNodes"in r)return r.nonNodes;var n=new z;return n.addArray(R.applyLocationPath(this.locationPath,e,r.nodes)),n},R.predicateMatches=function(t,e){var r=t.evaluate(e);return X.instance_of(r,B)?e.contextPosition===r.numberValue():r.booleanValue()},R.predicateString=function(t){return s("[","]",t.toString())},R.predicatesString=function(t){return o("",n(R.predicateString,t))},R.prototype.toString=function(){if(null!=this.filter){var t=i(this.filter);return X.instance_of(this.filter,j)?s("'","'",t):null!=this.filterPredicates&&this.filterPredicates.length?s("(",")",t)+R.predicatesString(this.filterPredicates):null!=this.locationPath?t+(this.locationPath.absolute?"":"/")+i(this.locationPath):t}return i(this.locationPath)},R.getOwnerElement=function(t){if(t.ownerElement)return t.ownerElement;try{if(t.selectSingleNode)return t.selectSingleNode("..")}catch(s){}for(var e=(9==t.nodeType?t:t.ownerDocument).getElementsByTagName("*"),r=0;r<e.length;r++)for(var n=e.item(r),i=n.attributes,o=0;o<i.length;o++)if(i.item(o)===t)return n;return null},I.prototype=new Object,I.prototype.constructor=I,I.superclass=Object.prototype,I.prototype.init=function(t,e){this.absolute=t,this.steps=e},I.prototype.toString=function(){return(this.absolute?"/":"")+n(i,this.steps).join("/")},D.prototype=new Object,D.prototype.constructor=D,D.superclass=Object.prototype,D.prototype.init=function(t,e,r){this.axis=t,this.nodeTest=e,this.predicates=r},D.prototype.toString=function(){return D.STEPNAMES[this.axis]+"::"+this.nodeTest.toString()+R.predicatesString(this.predicates)},D.ANCESTOR=0,D.ANCESTORORSELF=1,D.ATTRIBUTE=2,D.CHILD=3,D.DESCENDANT=4,D.DESCENDANTORSELF=5,D.FOLLOWING=6,D.FOLLOWINGSIBLING=7,D.NAMESPACE=8,D.PARENT=9,D.PRECEDING=10,D.PRECEDINGSIBLING=11,D.SELF=12,D.STEPNAMES=r((function(t,e){return t[e[0]]=e[1],t}),{},[[D.ANCESTOR,"ancestor"],[D.ANCESTORORSELF,"ancestor-or-self"],[D.ATTRIBUTE,"attribute"],[D.CHILD,"child"],[D.DESCENDANT,"descendant"],[D.DESCENDANTORSELF,"descendant-or-self"],[D.FOLLOWING,"following"],[D.FOLLOWINGSIBLING,"following-sibling"],[D.NAMESPACE,"namespace"],[D.PARENT,"parent"],[D.PRECEDING,"preceding"],[D.PRECEDINGSIBLING,"preceding-sibling"],[D.SELF,"self"]]),U.prototype=new Object,U.prototype.constructor=U,U.superclass=Object.prototype,U.prototype.init=function(t,e){this.type=t,this.value=e},U.prototype.toString=function(){return"<unknown nodetest type>"},U.prototype.matches=function(t,e){console.warn("unknown node test type")},U.NAMETESTANY=0,U.NAMETESTPREFIXANY=1,U.NAMETESTQNAME=2,U.COMMENT=3,U.TEXT=4,U.PI=5,U.NODE=6,U.isNodeType=function(t){return function(e){return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return!0;return!1}(t,e.nodeType)}},U.makeNodeTestType=function(t,e,r){var n=r||function(){};return n.prototype=new U(t),n.prototype.constructor=n,u(n.prototype,e),n},U.makeNodeTypeTest=function(t,e,r){return new(U.makeNodeTestType(t,{matches:U.isNodeType(e),toString:(n=r,function(){return n})}));var n},U.hasPrefix=function(t){return t.prefix||-1!==(t.nodeName||t.tagName).indexOf(":")},U.isElementOrAttribute=U.isNodeType([1,2]),U.nameSpaceMatches=function(t,e,r){var n=r.namespaceURI||"";if(!t)return!n||e.allowAnyNamespaceForNoPrefix&&!U.hasPrefix(r);var i=e.namespaceResolver.getNamespace(t,e.expressionContextNode);if(null==i)throw new Error("Cannot resolve QName "+t);return i===n},U.localNameMatches=function(t,e,r){var n=r.localName||r.nodeName;return e.caseInsensitive?t.toLowerCase()===n.toLowerCase():t===n},U.NameTestPrefixAny=U.makeNodeTestType(U.NAMETESTPREFIXANY,{matches:function(t,e){return U.isElementOrAttribute(t)&&U.nameSpaceMatches(this.prefix,e,t)},toString:function(){return this.prefix+":*"}},(function(t){this.prefix=t})),U.NameTestQName=U.makeNodeTestType(U.NAMETESTQNAME,{matches:function(t,e){return U.isNodeType([1,2,W.XPATH_NAMESPACE_NODE])(t)&&U.nameSpaceMatches(this.prefix,e,t)&&U.localNameMatches(this.localName,e,t)},toString:function(){return this.name}},(function(t){var e=t.split(":");this.name=t,this.prefix=e.length>1?e[0]:null,this.localName=e[e.length>1?1:0]})),U.PITest=U.makeNodeTestType(U.PI,{matches:function(t,e){return U.isNodeType([7])(t)&&(t.target||t.nodeName)===this.name},toString:function(){return s('processing-instruction("','")',this.name)}},(function(t){this.name=t})),U.nameTestAny=U.makeNodeTypeTest(U.NAMETESTANY,[1,2,W.XPATH_NAMESPACE_NODE],"*"),U.textTest=U.makeNodeTypeTest(U.TEXT,[3,4],"text()"),U.commentTest=U.makeNodeTypeTest(U.COMMENT,[8],"comment()"),U.nodeTest=U.makeNodeTypeTest(U.NODE,[1,2,3,4,7,8,9],"node()"),U.anyPiTest=U.makeNodeTypeTest(U.PI,[7],"processing-instruction()"),M.prototype=new p,M.prototype.constructor=M,M.superclass=p.prototype,M.prototype.init=function(t){this.variable=t},M.prototype.toString=function(){return"$"+this.variable},M.prototype.evaluate=function(t){var e=X.resolveQName(this.variable,t.namespaceResolver,t.contextNode,!1);if(null==e[0])throw new Error("Cannot resolve QName "+fn);var r=t.variableResolver.getVariable(e[1],e[0]);if(!r)throw Q.fromMessage("Undeclared variable: "+this.toString());return r},k.prototype=new p,k.prototype.constructor=k,k.superclass=p.prototype,k.prototype.init=function(t,e){this.functionName=t,this.arguments=e},k.prototype.toString=function(){for(var t=this.functionName+"(",e=0;e<this.arguments.length;e++)e>0&&(t+=", "),t+=this.arguments[e].toString();return t+")"},k.prototype.evaluate=function(t){var e=q.getFunctionFromContext(this.functionName,t);if(!e)throw new Error("Unknown function "+this.functionName);var r=[t].concat(this.arguments);return e.apply(t.functionResolver.thisArg,r)};var F=new Object;function j(t){arguments.length>0&&this.init(t)}function B(t){arguments.length>0&&this.init(t)}function H(t){arguments.length>0&&this.init(t)}function G(t){this.init(t)}function z(){this.init()}function W(t,e,r){this.isXPathNamespace=!0,this.ownerDocument=r.ownerDocument,this.nodeName="#namespace",this.prefix=t,this.localName=t,this.namespaceURI=e,this.nodeValue=e,this.ownerElement=r,this.nodeType=W.XPATH_NAMESPACE_NODE}function V(t,e,r){this.variableResolver=null!=t?t:new $,this.namespaceResolver=null!=e?e:new Y,this.functionResolver=null!=r?r:new q}function $(){}function q(t){this.thisArg=null!=t?t:K,this.functions=new Object,this.addStandardFunctions()}function Y(){}F.equals=function(t,e){return t.equals(e)},F.notequal=function(t,e){return t.notequal(e)},F.lessthan=function(t,e){return t.lessthan(e)},F.greaterthan=function(t,e){return t.greaterthan(e)},F.lessthanorequal=function(t,e){return t.lessthanorequal(e)},F.greaterthanorequal=function(t,e){return t.greaterthanorequal(e)},j.prototype=new p,j.prototype.constructor=j,j.superclass=p.prototype,j.prototype.init=function(t){this.str=String(t)},j.prototype.toString=function(){return this.str},j.prototype.evaluate=function(t){return this},j.prototype.string=function(){return this},j.prototype.number=function(){return new B(this.str)},j.prototype.bool=function(){return new H(this.str)},j.prototype.nodeset=function(){throw new Error("Cannot convert string to nodeset")},j.prototype.stringValue=function(){return this.str},j.prototype.numberValue=function(){return this.number().numberValue()},j.prototype.booleanValue=function(){return this.bool().booleanValue()},j.prototype.equals=function(t){return X.instance_of(t,H)?this.bool().equals(t):X.instance_of(t,B)?this.number().equals(t):X.instance_of(t,z)?t.compareWithString(this,F.equals):new H(this.str==t.str)},j.prototype.notequal=function(t){return X.instance_of(t,H)?this.bool().notequal(t):X.instance_of(t,B)?this.number().notequal(t):X.instance_of(t,z)?t.compareWithString(this,F.notequal):new H(this.str!=t.str)},j.prototype.lessthan=function(t){return this.number().lessthan(t)},j.prototype.greaterthan=function(t){return this.number().greaterthan(t)},j.prototype.lessthanorequal=function(t){return this.number().lessthanorequal(t)},j.prototype.greaterthanorequal=function(t){return this.number().greaterthanorequal(t)},B.prototype=new p,B.prototype.constructor=B,B.superclass=p.prototype,B.prototype.init=function(t){this.num="string"==typeof t?this.parse(t):Number(t)},B.prototype.numberFormat=/^\s*-?[0-9]*\.?[0-9]+\s*$/,B.prototype.parse=function(t){return this.numberFormat.test(t)?parseFloat(t):Number.NaN},B.prototype.toString=function(){var t=this.num.toString();return-1!==t.indexOf("e-")?function(t){for(var e=t.split("e-"),r=e[0].replace(".",""),n=Number(e[1]),i=0;i<n-1;i+=1)r="0"+r;return"0."+r}(t):-1!==t.indexOf("e")?function(t){for(var e=t.split("e"),r=e[0].replace(".",""),n=Number(e[1])+1-r.length,i=0;i<n;i+=1)r+="0";return r}(t):t},B.prototype.evaluate=function(t){return this},B.prototype.string=function(){return new j(this.toString())},B.prototype.number=function(){return this},B.prototype.bool=function(){return new H(this.num)},B.prototype.nodeset=function(){throw new Error("Cannot convert number to nodeset")},B.prototype.stringValue=function(){return this.string().stringValue()},B.prototype.numberValue=function(){return this.num},B.prototype.booleanValue=function(){return this.bool().booleanValue()},B.prototype.negate=function(){return new B(-this.num)},B.prototype.equals=function(t){return X.instance_of(t,H)?this.bool().equals(t):X.instance_of(t,j)?this.equals(t.number()):X.instance_of(t,z)?t.compareWithNumber(this,F.equals):new H(this.num==t.num)},B.prototype.notequal=function(t){return X.instance_of(t,H)?this.bool().notequal(t):X.instance_of(t,j)?this.notequal(t.number()):X.instance_of(t,z)?t.compareWithNumber(this,F.notequal):new H(this.num!=t.num)},B.prototype.lessthan=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.greaterthan):X.instance_of(t,H)||X.instance_of(t,j)?this.lessthan(t.number()):new H(this.num<t.num)},B.prototype.greaterthan=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.lessthan):X.instance_of(t,H)||X.instance_of(t,j)?this.greaterthan(t.number()):new H(this.num>t.num)},B.prototype.lessthanorequal=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.greaterthanorequal):X.instance_of(t,H)||X.instance_of(t,j)?this.lessthanorequal(t.number()):new H(this.num<=t.num)},B.prototype.greaterthanorequal=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.lessthanorequal):X.instance_of(t,H)||X.instance_of(t,j)?this.greaterthanorequal(t.number()):new H(this.num>=t.num)},B.prototype.plus=function(t){return new B(this.num+t.num)},B.prototype.minus=function(t){return new B(this.num-t.num)},B.prototype.multiply=function(t){return new B(this.num*t.num)},B.prototype.div=function(t){return new B(this.num/t.num)},B.prototype.mod=function(t){return new B(this.num%t.num)},H.prototype=new p,H.prototype.constructor=H,H.superclass=p.prototype,H.prototype.init=function(t){this.b=Boolean(t)},H.prototype.toString=function(){return this.b.toString()},H.prototype.evaluate=function(t){return this},H.prototype.string=function(){return new j(this.b)},H.prototype.number=function(){return new B(this.b)},H.prototype.bool=function(){return this},H.prototype.nodeset=function(){throw new Error("Cannot convert boolean to nodeset")},H.prototype.stringValue=function(){return this.string().stringValue()},H.prototype.numberValue=function(){return this.number().numberValue()},H.prototype.booleanValue=function(){return this.b},H.prototype.not=function(){return new H(!this.b)},H.prototype.equals=function(t){return X.instance_of(t,j)||X.instance_of(t,B)?this.equals(t.bool()):X.instance_of(t,z)?t.compareWithBoolean(this,F.equals):new H(this.b==t.b)},H.prototype.notequal=function(t){return X.instance_of(t,j)||X.instance_of(t,B)?this.notequal(t.bool()):X.instance_of(t,z)?t.compareWithBoolean(this,F.notequal):new H(this.b!=t.b)},H.prototype.lessthan=function(t){return this.number().lessthan(t)},H.prototype.greaterthan=function(t){return this.number().greaterthan(t)},H.prototype.lessthanorequal=function(t){return this.number().lessthanorequal(t)},H.prototype.greaterthanorequal=function(t){return this.number().greaterthanorequal(t)},H.true_=new H(!0),H.false_=new H(!1),G.prototype=new Object,G.prototype.constructor=G,G.superclass=Object.prototype,G.prototype.init=function(t){this.left=null,this.right=null,this.node=t,this.depth=1},G.prototype.balance=function(){var t=null==this.left?0:this.left.depth,e=null==this.right?0:this.right.depth;if(t>e+1)(null==this.left.left?0:this.left.left.depth)<(null==this.left.right?0:this.left.right.depth)&&this.left.rotateRR(),this.rotateLL();else if(t+1<e){var r=null==this.right.right?0:this.right.right.depth;(null==this.right.left?0:this.right.left.depth)>r&&this.right.rotateLL(),this.rotateRR()}},G.prototype.rotateLL=function(){var t=this.node,e=this.right;this.node=this.left.node,this.right=this.left,this.left=this.left.left,this.right.left=this.right.right,this.right.right=e,this.right.node=t,this.right.updateInNewLocation(),this.updateInNewLocation()},G.prototype.rotateRR=function(){var t=this.node,e=this.left;this.node=this.right.node,this.left=this.right,this.right=this.right.right,this.left.right=this.left.left,this.left.left=e,this.left.node=t,this.left.updateInNewLocation(),this.updateInNewLocation()},G.prototype.updateInNewLocation=function(){this.getDepthFromChildren()},G.prototype.getDepthFromChildren=function(){this.depth=null==this.node?0:1,null!=this.left&&(this.depth=this.left.depth+1),null!=this.right&&this.depth<=this.right.depth&&(this.depth=this.right.depth+1)},G.prototype.add=function(t){if(t===this.node)return!1;var e=function(t,e){if(t===e)return 0;if(t.compareDocumentPosition){var r=t.compareDocumentPosition(e);return 1&r||10&r?1:20&r?-1:0}for(var n=0,i=0,o=t;null!=o;o=o.parentNode||o.ownerElement)n++;for(var s=e;null!=s;s=s.parentNode||s.ownerElement)i++;if(n>i){for(;n>i;)t=t.parentNode||t.ownerElement,n--;if(t===e)return 1}else if(i>n){for(;i>n;)e=e.parentNode||e.ownerElement,i--;if(t===e)return-1}for(var a=t.parentNode||t.ownerElement,u=e.parentNode||e.ownerElement;a!==u;)e=u,a=(t=a).parentNode||t.ownerElement,u=e.parentNode||e.ownerElement;var l=X.isAttribute(t),c=X.isAttribute(e);if(l&&!c)return-1;if(!l&&c)return 1;if(a)for(var h=l?a.attributes:a.childNodes,p=h.length,d=0;d<p;d+=1){var f=h[d];if(f===t)return-1;if(f===e)return 1}throw new Error("Unexpected: could not determine node order")}(t,this.node),r=!1;return-1==e?null==this.left?(this.left=new G(t),r=!0):(r=this.left.add(t))&&this.balance():1==e&&(null==this.right?(this.right=new G(t),r=!0):(r=this.right.add(t))&&this.balance()),r&&this.getDepthFromChildren(),r},z.prototype=new p,z.prototype.constructor=z,z.superclass=p.prototype,z.prototype.init=function(){this.tree=null,this.nodes=[],this.size=0},z.prototype.toString=function(){var t=this.first();return null==t?"":this.stringForNode(t)},z.prototype.evaluate=function(t){return this},z.prototype.string=function(){return new j(this.toString())},z.prototype.stringValue=function(){return this.toString()},z.prototype.number=function(){return new B(this.string())},z.prototype.numberValue=function(){return Number(this.string())},z.prototype.bool=function(){return new H(this.booleanValue())},z.prototype.booleanValue=function(){return!!this.size},z.prototype.nodeset=function(){return this},z.prototype.stringForNode=function(t){return 9==t.nodeType||1==t.nodeType||11===t.nodeType?this.stringForContainerNode(t):2===t.nodeType?t.value||t.nodeValue:t.isNamespaceNode?t.namespace:t.nodeValue},z.prototype.stringForContainerNode=function(t){for(var e="",r=t.firstChild;null!=r;r=r.nextSibling){var n=r.nodeType;1!==n&&3!==n&&4!==n&&9!==n&&11!==n||(e+=this.stringForNode(r))}return e},z.prototype.buildTree=function(){if(!this.tree&&this.nodes.length){this.tree=new G(this.nodes[0]);for(var t=1;t<this.nodes.length;t+=1)this.tree.add(this.nodes[t])}return this.tree},z.prototype.first=function(){var t=this.buildTree();if(null==t)return null;for(;null!=t.left;)t=t.left;return t.node},z.prototype.add=function(t){for(var e=0;e<this.nodes.length;e+=1)if(t===this.nodes[e])return;this.tree=null,this.nodes.push(t),this.size+=1},z.prototype.addArray=function(t){var r=this;e((function(t){r.add(t)}),t)},z.prototype.toArray=function(){var t=[];return this.toArrayRec(this.buildTree(),t),t},z.prototype.toArrayRec=function(t,e){null!=t&&(this.toArrayRec(t.left,e),e.push(t.node),this.toArrayRec(t.right,e))},z.prototype.toUnsortedArray=function(){return this.nodes.slice()},z.prototype.compareWithString=function(t,e){for(var r=this.toUnsortedArray(),n=0;n<r.length;n++){var i=r[n],o=e(new j(this.stringForNode(i)),t);if(o.booleanValue())return o}return new H(!1)},z.prototype.compareWithNumber=function(t,e){for(var r=this.toUnsortedArray(),n=0;n<r.length;n++){var i=r[n],o=e(new B(this.stringForNode(i)),t);if(o.booleanValue())return o}return new H(!1)},z.prototype.compareWithBoolean=function(t,e){return e(this.bool(),t)},z.prototype.compareWithNodeSet=function(t,e){for(var r=this.toUnsortedArray(),n=function(t,r){return e(r,t)},i=0;i<r.length;i++){var o=new j(this.stringForNode(r[i])),s=t.compareWithString(o,n);if(s.booleanValue())return s}return new H(!1)},z.compareWith=function(t){var e=Array.prototype.slice,r=t.length,n=function(){var i=e.call(arguments);return i.length<r?function(t,r){return function(){return r.apply(this,t.concat(e.call(arguments)))}}(i,n):t.apply(this,e.apply(arguments,[0,r]))};return n}((function(t,e){return X.instance_of(e,j)?this.compareWithString(e,t):X.instance_of(e,B)?this.compareWithNumber(e,t):X.instance_of(e,H)?this.compareWithBoolean(e,t):this.compareWithNodeSet(e,t)})),z.prototype.equals=z.compareWith(F.equals),z.prototype.notequal=z.compareWith(F.notequal),z.prototype.lessthan=z.compareWith(F.lessthan),z.prototype.greaterthan=z.compareWith(F.greaterthan),z.prototype.lessthanorequal=z.compareWith(F.lessthanorequal),z.prototype.greaterthanorequal=z.compareWith(F.greaterthanorequal),z.prototype.union=function(t){var e=new z;return e.addArray(this.toUnsortedArray()),e.addArray(t.toUnsortedArray()),e},W.prototype=new Object,W.prototype.constructor=W,W.superclass=Object.prototype,W.prototype.toString=function(){return'{ "'+this.prefix+'", "'+this.namespaceURI+'" }'},V.prototype=new Object,V.prototype.constructor=V,V.superclass=Object.prototype,V.prototype.extend=function(t){return u(new V,this,t)},$.prototype=new Object,$.prototype.constructor=$,$.superclass=Object.prototype,$.prototype.getVariable=function(t,e){return null},q.prototype=new Object,q.prototype.constructor=q,q.superclass=Object.prototype,q.prototype.addStandardFunctions=function(){this.functions["{}last"]=K.last,this.functions["{}position"]=K.position,this.functions["{}count"]=K.count,this.functions["{}id"]=K.id,this.functions["{}local-name"]=K.localName,this.functions["{}namespace-uri"]=K.namespaceURI,this.functions["{}name"]=K.name,this.functions["{}string"]=K.string,this.functions["{}concat"]=K.concat,this.functions["{}starts-with"]=K.startsWith,this.functions["{}contains"]=K.contains,this.functions["{}substring-before"]=K.substringBefore,this.functions["{}substring-after"]=K.substringAfter,this.functions["{}substring"]=K.substring,this.functions["{}string-length"]=K.stringLength,this.functions["{}normalize-space"]=K.normalizeSpace,this.functions["{}translate"]=K.translate,this.functions["{}boolean"]=K.boolean_,this.functions["{}not"]=K.not,this.functions["{}true"]=K.true_,this.functions["{}false"]=K.false_,this.functions["{}lang"]=K.lang,this.functions["{}number"]=K.number,this.functions["{}sum"]=K.sum,this.functions["{}floor"]=K.floor,this.functions["{}ceiling"]=K.ceiling,this.functions["{}round"]=K.round},q.prototype.addFunction=function(t,e,r){this.functions["{"+t+"}"+e]=r},q.getFunctionFromContext=function(t,e){var r=X.resolveQName(t,e.namespaceResolver,e.contextNode,!1);if(null===r[0])throw new Error("Cannot resolve QName "+name);return e.functionResolver.getFunction(r[1],r[0])},q.prototype.getFunction=function(t,e){return this.functions["{"+e+"}"+t]},Y.prototype=new Object,Y.prototype.constructor=Y,Y.superclass=Object.prototype,Y.prototype.getNamespace=function(t,e){if("xml"==t)return c.XML_NAMESPACE_URI;if("xmlns"==t)return c.XMLNS_NAMESPACE_URI;for(9==e.nodeType?e=e.documentElement:2==e.nodeType?e=R.getOwnerElement(e):1!=e.nodeType&&(e=e.parentNode);null!=e&&1==e.nodeType;){for(var r=e.attributes,n=0;n<r.length;n++){var i=r.item(n),o=i.name||i.nodeName;if("xmlns"===o&&""===t||o==="xmlns:"+t)return String(i.value||i.nodeValue)}e=e.parentNode}return null};var K=new Object;K.last=function(t){if(1!=arguments.length)throw new Error("Function last expects ()");return new B(t.contextSize)},K.position=function(t){if(1!=arguments.length)throw new Error("Function position expects ()");return new B(t.contextPosition)},K.count=function(){var t,e=arguments[0];if(2!=arguments.length||!X.instance_of(t=arguments[1].evaluate(e),z))throw new Error("Function count expects (node-set)");return new B(t.size)},K.id=function(){var t,e=arguments[0];if(2!=arguments.length)throw new Error("Function id expects (object)");t=arguments[1].evaluate(e);for(var r=(t=X.instance_of(t,z)?t.toArray().join(" "):t.stringValue()).split(/[\x0d\x0a\x09\x20]+/),n=new z,i=9==e.contextNode.nodeType?e.contextNode:e.contextNode.ownerDocument,o=0;o<r.length;o++){var s;null!=(s=i.getElementById?i.getElementById(r[o]):X.getElementById(i,r[o]))&&n.add(s)}return n},K.localName=function(t,e){var r;if(1==arguments.length)r=t.contextNode;else{if(2!=arguments.length)throw new Error("Function local-name expects (node-set?)");r=e.evaluate(t).first()}return new j(null==r?"":r.localName||r.baseName||r.target||r.nodeName||"")},K.namespaceURI=function(){var t,e=arguments[0];if(1==arguments.length)t=e.contextNode;else{if(2!=arguments.length)throw new Error("Function namespace-uri expects (node-set?)");t=arguments[1].evaluate(e).first()}return new j(null==t?"":t.namespaceURI)},K.name=function(){var t,e=arguments[0];if(1==arguments.length)t=e.contextNode;else{if(2!=arguments.length)throw new Error("Function name expects (node-set?)");t=arguments[1].evaluate(e).first()}return null==t?new j(""):1==t.nodeType?new j(t.nodeName):2==t.nodeType?new j(t.name||t.nodeName):7===t.nodeType?new j(t.target||t.nodeName):null==t.localName?new j(""):new j(t.localName)},K.string=function(){var t=arguments[0];if(1==arguments.length)return new j(z.prototype.stringForNode(t.contextNode));if(2==arguments.length)return arguments[1].evaluate(t).string();throw new Error("Function string expects (object?)")},K.concat=function(t){if(arguments.length<3)throw new Error("Function concat expects (string, string[, string]*)");for(var e="",r=1;r<arguments.length;r++)e+=arguments[r].evaluate(t).stringValue();return new j(e)},K.startsWith=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function startsWith expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new H(e.substring(0,r.length)==r)},K.contains=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function contains expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new H(-1!==e.indexOf(r))},K.substringBefore=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function substring-before expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new j(e.substring(0,e.indexOf(r)))},K.substringAfter=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function substring-after expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();if(0==r.length)return new j(e);var n=e.indexOf(r);return new j(-1==n?"":e.substring(n+r.length))},K.substring=function(){var t=arguments[0];if(3!=arguments.length&&4!=arguments.length)throw new Error("Function substring expects (string, number, number?)");var e=arguments[1].evaluate(t).stringValue(),r=Math.round(arguments[2].evaluate(t).numberValue())-1,n=4==arguments.length?r+Math.round(arguments[3].evaluate(t).numberValue()):void 0;return new j(e.substring(r,n))},K.stringLength=function(){var t,e=arguments[0];if(1==arguments.length)t=z.prototype.stringForNode(e.contextNode);else{if(2!=arguments.length)throw new Error("Function string-length expects (string?)");t=arguments[1].evaluate(e).stringValue()}return new B(t.length)},K.normalizeSpace=function(){var t,e=arguments[0];if(1==arguments.length)t=z.prototype.stringForNode(e.contextNode);else{if(2!=arguments.length)throw new Error("Function normalize-space expects (string?)");t=arguments[1].evaluate(e).stringValue()}for(var r=0,n=t.length-1;X.isSpace(t.charCodeAt(n));)n--;for(var i="";r<=n&&X.isSpace(t.charCodeAt(r));)r++;for(;r<=n;)if(X.isSpace(t.charCodeAt(r)))for(i+=" ";r<=n&&X.isSpace(t.charCodeAt(r));)r++;else i+=t.charAt(r),r++;return new j(i)},K.translate=function(t,e,i,s){if(4!=arguments.length)throw new Error("Function translate expects (string, string, string)");var a=e.evaluate(t).stringValue(),u=i.evaluate(t).stringValue(),l=s.evaluate(t).stringValue(),c=r((function(t,e,r){return e in t||(t[e]=r>l.length?"":l[r]),t}),{},u);return new j(o("",n((function(t){return t in c?c[t]:t}),a)))},K.boolean_=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function boolean expects (object)");return arguments[1].evaluate(t).bool()},K.not=function(t,e){if(2!=arguments.length)throw new Error("Function not expects (object)");return e.evaluate(t).bool().not()},K.true_=function(){if(1!=arguments.length)throw new Error("Function true expects ()");return H.true_},K.false_=function(){if(1!=arguments.length)throw new Error("Function false expects ()");return H.false_},K.lang=function(){var t,e=arguments[0];if(2!=arguments.length)throw new Error("Function lang expects (string)");for(var r=e.contextNode;null!=r&&9!=r.nodeType;r=r.parentNode){var n=r.getAttributeNS(c.XML_NAMESPACE_URI,"lang");if(null!=n){t=String(n);break}}if(null==t)return H.false_;var i=arguments[1].evaluate(e).stringValue();return new H(t.substring(0,i.length)==i&&(t.length==i.length||"-"==t.charAt(i.length)))},K.number=function(){var t=arguments[0];if(1!=arguments.length&&2!=arguments.length)throw new Error("Function number expects (object?)");return 1==arguments.length?new B(z.prototype.stringForNode(t.contextNode)):arguments[1].evaluate(t).number()},K.sum=function(){var t,e=arguments[0];if(2!=arguments.length||!X.instance_of(t=arguments[1].evaluate(e),z))throw new Error("Function sum expects (node-set)");t=t.toUnsortedArray();for(var r=0,n=0;n<t.length;n++)r+=new B(z.prototype.stringForNode(t[n])).numberValue();return new B(r)},K.floor=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function floor expects (number)");return new B(Math.floor(arguments[1].evaluate(t).numberValue()))},K.ceiling=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function ceiling expects (number)");return new B(Math.ceil(arguments[1].evaluate(t).numberValue()))},K.round=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function round expects (number)");return new B(Math.round(arguments[1].evaluate(t).numberValue()))};var X=new Object;X.isAttribute=function(t){return t&&(2===t.nodeType||t.ownerElement)},X.splitQName=function(t){var e=t.indexOf(":");return-1==e?[null,t]:[t.substring(0,e),t.substring(e+1)]},X.resolveQName=function(t,e,r,n){var i=X.splitQName(t);return null!=i[0]?i[0]=e.getNamespace(i[0],r):n?(i[0]=e.getNamespace("",r),null==i[0]&&(i[0]="")):i[0]="",i},X.isSpace=function(t){return 9==t||13==t||10==t||32==t},X.isLetter=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=192&&t<=214||t>=216&&t<=246||t>=248&&t<=255||t>=256&&t<=305||t>=308&&t<=318||t>=321&&t<=328||t>=330&&t<=382||t>=384&&t<=451||t>=461&&t<=496||t>=500&&t<=501||t>=506&&t<=535||t>=592&&t<=680||t>=699&&t<=705||902==t||t>=904&&t<=906||908==t||t>=910&&t<=929||t>=931&&t<=974||t>=976&&t<=982||986==t||988==t||990==t||992==t||t>=994&&t<=1011||t>=1025&&t<=1036||t>=1038&&t<=1103||t>=1105&&t<=1116||t>=1118&&t<=1153||t>=1168&&t<=1220||t>=1223&&t<=1224||t>=1227&&t<=1228||t>=1232&&t<=1259||t>=1262&&t<=1269||t>=1272&&t<=1273||t>=1329&&t<=1366||1369==t||t>=1377&&t<=1414||t>=1488&&t<=1514||t>=1520&&t<=1522||t>=1569&&t<=1594||t>=1601&&t<=1610||t>=1649&&t<=1719||t>=1722&&t<=1726||t>=1728&&t<=1742||t>=1744&&t<=1747||1749==t||t>=1765&&t<=1766||t>=2309&&t<=2361||2365==t||t>=2392&&t<=2401||t>=2437&&t<=2444||t>=2447&&t<=2448||t>=2451&&t<=2472||t>=2474&&t<=2480||2482==t||t>=2486&&t<=2489||t>=2524&&t<=2525||t>=2527&&t<=2529||t>=2544&&t<=2545||t>=2565&&t<=2570||t>=2575&&t<=2576||t>=2579&&t<=2600||t>=2602&&t<=2608||t>=2610&&t<=2611||t>=2613&&t<=2614||t>=2616&&t<=2617||t>=2649&&t<=2652||2654==t||t>=2674&&t<=2676||t>=2693&&t<=2699||2701==t||t>=2703&&t<=2705||t>=2707&&t<=2728||t>=2730&&t<=2736||t>=2738&&t<=2739||t>=2741&&t<=2745||2749==t||2784==t||t>=2821&&t<=2828||t>=2831&&t<=2832||t>=2835&&t<=2856||t>=2858&&t<=2864||t>=2866&&t<=2867||t>=2870&&t<=2873||2877==t||t>=2908&&t<=2909||t>=2911&&t<=2913||t>=2949&&t<=2954||t>=2958&&t<=2960||t>=2962&&t<=2965||t>=2969&&t<=2970||2972==t||t>=2974&&t<=2975||t>=2979&&t<=2980||t>=2984&&t<=2986||t>=2990&&t<=2997||t>=2999&&t<=3001||t>=3077&&t<=3084||t>=3086&&t<=3088||t>=3090&&t<=3112||t>=3114&&t<=3123||t>=3125&&t<=3129||t>=3168&&t<=3169||t>=3205&&t<=3212||t>=3214&&t<=3216||t>=3218&&t<=3240||t>=3242&&t<=3251||t>=3253&&t<=3257||3294==t||t>=3296&&t<=3297||t>=3333&&t<=3340||t>=3342&&t<=3344||t>=3346&&t<=3368||t>=3370&&t<=3385||t>=3424&&t<=3425||t>=3585&&t<=3630||3632==t||t>=3634&&t<=3635||t>=3648&&t<=3653||t>=3713&&t<=3714||3716==t||t>=3719&&t<=3720||3722==t||3725==t||t>=3732&&t<=3735||t>=3737&&t<=3743||t>=3745&&t<=3747||3749==t||3751==t||t>=3754&&t<=3755||t>=3757&&t<=3758||3760==t||t>=3762&&t<=3763||3773==t||t>=3776&&t<=3780||t>=3904&&t<=3911||t>=3913&&t<=3945||t>=4256&&t<=4293||t>=4304&&t<=4342||4352==t||t>=4354&&t<=4355||t>=4357&&t<=4359||4361==t||t>=4363&&t<=4364||t>=4366&&t<=4370||4412==t||4414==t||4416==t||4428==t||4430==t||4432==t||t>=4436&&t<=4437||4441==t||t>=4447&&t<=4449||4451==t||4453==t||4455==t||4457==t||t>=4461&&t<=4462||t>=4466&&t<=4467||4469==t||4510==t||4520==t||4523==t||t>=4526&&t<=4527||t>=4535&&t<=4536||4538==t||t>=4540&&t<=4546||4587==t||4592==t||4601==t||t>=7680&&t<=7835||t>=7840&&t<=7929||t>=7936&&t<=7957||t>=7960&&t<=7965||t>=7968&&t<=8005||t>=8008&&t<=8013||t>=8016&&t<=8023||8025==t||8027==t||8029==t||t>=8031&&t<=8061||t>=8064&&t<=8116||t>=8118&&t<=8124||8126==t||t>=8130&&t<=8132||t>=8134&&t<=8140||t>=8144&&t<=8147||t>=8150&&t<=8155||t>=8160&&t<=8172||t>=8178&&t<=8180||t>=8182&&t<=8188||8486==t||t>=8490&&t<=8491||8494==t||t>=8576&&t<=8578||t>=12353&&t<=12436||t>=12449&&t<=12538||t>=12549&&t<=12588||t>=44032&&t<=55203||t>=19968&&t<=40869||12295==t||t>=12321&&t<=12329},X.isNCNameChar=function(t){return t>=48&&t<=57||t>=1632&&t<=1641||t>=1776&&t<=1785||t>=2406&&t<=2415||t>=2534&&t<=2543||t>=2662&&t<=2671||t>=2790&&t<=2799||t>=2918&&t<=2927||t>=3047&&t<=3055||t>=3174&&t<=3183||t>=3302&&t<=3311||t>=3430&&t<=3439||t>=3664&&t<=3673||t>=3792&&t<=3801||t>=3872&&t<=3881||46==t||45==t||95==t||X.isLetter(t)||t>=768&&t<=837||t>=864&&t<=865||t>=1155&&t<=1158||t>=1425&&t<=1441||t>=1443&&t<=1465||t>=1467&&t<=1469||1471==t||t>=1473&&t<=1474||1476==t||t>=1611&&t<=1618||1648==t||t>=1750&&t<=1756||t>=1757&&t<=1759||t>=1760&&t<=1764||t>=1767&&t<=1768||t>=1770&&t<=1773||t>=2305&&t<=2307||2364==t||t>=2366&&t<=2380||2381==t||t>=2385&&t<=2388||t>=2402&&t<=2403||t>=2433&&t<=2435||2492==t||2494==t||2495==t||t>=2496&&t<=2500||t>=2503&&t<=2504||t>=2507&&t<=2509||2519==t||t>=2530&&t<=2531||2562==t||2620==t||2622==t||2623==t||t>=2624&&t<=2626||t>=2631&&t<=2632||t>=2635&&t<=2637||t>=2672&&t<=2673||t>=2689&&t<=2691||2748==t||t>=2750&&t<=2757||t>=2759&&t<=2761||t>=2763&&t<=2765||t>=2817&&t<=2819||2876==t||t>=2878&&t<=2883||t>=2887&&t<=2888||t>=2891&&t<=2893||t>=2902&&t<=2903||t>=2946&&t<=2947||t>=3006&&t<=3010||t>=3014&&t<=3016||t>=3018&&t<=3021||3031==t||t>=3073&&t<=3075||t>=3134&&t<=3140||t>=3142&&t<=3144||t>=3146&&t<=3149||t>=3157&&t<=3158||t>=3202&&t<=3203||t>=3262&&t<=3268||t>=3270&&t<=3272||t>=3274&&t<=3277||t>=3285&&t<=3286||t>=3330&&t<=3331||t>=3390&&t<=3395||t>=3398&&t<=3400||t>=3402&&t<=3405||3415==t||3633==t||t>=3636&&t<=3642||t>=3655&&t<=3662||3761==t||t>=3764&&t<=3769||t>=3771&&t<=3772||t>=3784&&t<=3789||t>=3864&&t<=3865||3893==t||3895==t||3897==t||3902==t||3903==t||t>=3953&&t<=3972||t>=3974&&t<=3979||t>=3984&&t<=3989||3991==t||t>=3993&&t<=4013||t>=4017&&t<=4023||4025==t||t>=8400&&t<=8412||8417==t||t>=12330&&t<=12335||12441==t||12442==t||183==t||720==t||721==t||903==t||1600==t||3654==t||3782==t||12293==t||t>=12337&&t<=12341||t>=12445&&t<=12446||t>=12540&&t<=12542},X.coalesceText=function(t){for(var e=t.firstChild;null!=e;e=e.nextSibling)if(3==e.nodeType||4==e.nodeType){var r=e.nodeValue,n=e;for(e=e.nextSibling;null!=e&&(3==e.nodeType||4==e.nodeType);){r+=e.nodeValue;var i=e;e=e.nextSibling,i.parentNode.removeChild(i)}if(4==n.nodeType){var o=n.parentNode;if(null==n.nextSibling)o.removeChild(n),o.appendChild(o.ownerDocument.createTextNode(r));else{var s=n.nextSibling;o.removeChild(n),o.insertBefore(o.ownerDocument.createTextNode(r),s)}}else n.nodeValue=r;if(null==e)break}else 1==e.nodeType&&X.coalesceText(e)},X.instance_of=function(t,e){for(;null!=t;){if(t.constructor===e)return!0;if(t===Object)return!1;t=t.constructor.superclass}return!1},X.getElementById=function(t,e){if(1==t.nodeType&&(t.getAttribute("id")==e||t.getAttributeNS(null,"id")==e))return t;for(var r=t.firstChild;null!=r;r=r.nextSibling){var n=X.getElementById(r,e);if(null!=n)return n}return null};var Q=function(){function t(e,r,n){var i=Error.call(this,function(e,r){var n=r?": "+r.toString():"";switch(e){case t.INVALID_EXPRESSION_ERR:return"Invalid expression"+n;case t.TYPE_ERR:return"Type error"+n}return null}(e,r)||n);return i.code=e,i.exception=r,i}return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.superclass=Error,t.prototype.toString=function(){return this.message},t.fromMessage=function(e,r){return new t(null,r,e)},t.INVALID_EXPRESSION_ERR=51,t.TYPE_ERR=52,t}();function Z(t,e,r){this.xpath=r.parse(t),this.context=new V,this.context.namespaceResolver=new J(e)}function J(t){this.xpathNSResolver=t}function tt(t){this.node=t,this.namespaceResolver=new Y}function et(t,e){switch(e==et.ANY_TYPE&&(t.constructor===j?e=et.STRING_TYPE:t.constructor===B?e=et.NUMBER_TYPE:t.constructor===H?e=et.BOOLEAN_TYPE:t.constructor===z&&(e=et.UNORDERED_NODE_ITERATOR_TYPE)),this.resultType=e,e){case et.NUMBER_TYPE:return void(this.numberValue=t.numberValue());case et.STRING_TYPE:return void(this.stringValue=t.stringValue());case et.BOOLEAN_TYPE:return void(this.booleanValue=t.booleanValue());case et.ANY_UNORDERED_NODE_TYPE:case et.FIRST_ORDERED_NODE_TYPE:if(t.constructor===z)return void(this.singleNodeValue=t.first());break;case et.UNORDERED_NODE_ITERATOR_TYPE:case et.ORDERED_NODE_ITERATOR_TYPE:if(t.constructor===z)return this.invalidIteratorState=!1,this.nodes=t.toArray(),void(this.iteratorIndex=0);break;case et.UNORDERED_NODE_SNAPSHOT_TYPE:case et.ORDERED_NODE_SNAPSHOT_TYPE:if(t.constructor===z)return this.nodes=t.toArray(),void(this.snapshotLength=this.nodes.length)}throw new Q(Q.TYPE_ERR)}function rt(t,e){t.createExpression=function(t,r){try{return new Z(t,r,e)}catch(t){throw new Q(Q.INVALID_EXPRESSION_ERR,t)}},t.createNSResolver=function(t){return new tt(t)},t.evaluate=function(r,n,i,o,s){if(o<0||o>9)throw{code:0,toString:function(){return"Request type not supported"}};return t.createExpression(r,i,e).evaluate(n,o,s)}}Z.prototype={},Z.prototype.constructor=Z,Z.superclass=Object.prototype,Z.getOwnerDocument=function(t){return 9===t.nodeType?t:t.ownerDocument},Z.detectHtmlDom=function(t){if(!t)return!1;var e=Z.getOwnerDocument(t);try{return e.implementation.hasFeature("HTML","2.0")}catch(r){return!0}},Z.prototype.evaluate=function(t,e,r){return this.context.expressionContextNode=t,this.context.caseInsensitive=Z.detectHtmlDom(t),new et(this.xpath.evaluate(this.context),e)},J.prototype={},J.prototype.constructor=J,J.superclass=Object.prototype,J.prototype.getNamespace=function(t,e){return null==this.xpathNSResolver?null:this.xpathNSResolver.lookupNamespaceURI(t)},tt.prototype={},tt.prototype.constructor=tt,tt.superclass=Object.prototype,tt.prototype.lookupNamespaceURI=function(t){return this.namespaceResolver.getNamespace(t,this.node)},et.prototype={},et.prototype.constructor=et,et.superclass=Object.prototype,et.prototype.iterateNext=function(){if(this.resultType!=et.UNORDERED_NODE_ITERATOR_TYPE&&this.resultType!=et.ORDERED_NODE_ITERATOR_TYPE)throw new Q(Q.TYPE_ERR);return this.nodes[this.iteratorIndex++]},et.prototype.snapshotItem=function(t){if(this.resultType!=et.UNORDERED_NODE_SNAPSHOT_TYPE&&this.resultType!=et.ORDERED_NODE_SNAPSHOT_TYPE)throw new Q(Q.TYPE_ERR);return this.nodes[t]},et.ANY_TYPE=0,et.NUMBER_TYPE=1,et.STRING_TYPE=2,et.BOOLEAN_TYPE=3,et.UNORDERED_NODE_ITERATOR_TYPE=4,et.ORDERED_NODE_ITERATOR_TYPE=5,et.UNORDERED_NODE_SNAPSHOT_TYPE=6,et.ORDERED_NODE_SNAPSHOT_TYPE=7,et.ANY_UNORDERED_NODE_TYPE=8,et.FIRST_ORDERED_NODE_TYPE=9;try{var nt=!0;try{document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("XPath",null)&&(nt=!1)}catch(it){}nt&&rt(document,new l)}catch(it){}rt(t,new l),new l,new Y,new q,new $,u(t,{XPath:c,XPathParser:l,XPathResult:et,Step:D,PathExpr:R,NodeTest:U,LocationPath:I,OrOperation:m,AndOperation:g,BarOperation:w,EqualsOperation:v,NotEqualOperation:T,LessThanOperation:_,GreaterThanOperation:E,LessThanOrEqualOperation:b,GreaterThanOrEqualOperation:S,PlusOperation:x,MinusOperation:C,MultiplyOperation:A,DivOperation:N,ModOperation:O,UnaryMinusOperation:f,FunctionCall:k,VariableReference:M,XPathContext:V,XNodeSet:z,XBoolean:H,XString:j,XNumber:B,NamespaceResolver:Y,FunctionResolver:q,VariableResolver:$,Utilities:X}),t.select=function(e,r,n){return t.selectWithResolver(e,r,null,n)}}(void 0===r?{}:r)},{}],238:[function(t,e,r){function n(t){this.options=t||{locator:{}}}function i(){this.cdata=!1}function o(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}function s(t){if(t)return"\n@"+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function a(t,e,r){return"string"==typeof t?t.substr(e,r):t.length>=e+r||e?new java.lang.String(t,e,r)+"":t}function u(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}n.prototype.parseFromString=function(t,e){var r=this.options,n=new h,o=r.domBuilder||new i,a=r.errorHandler,u=r.locator,c=r.xmlns||{},p=/\/x?html?$/.test(e),d=p?l.entityMap:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&o.setDocumentLocator(u),n.errorHandler=function(t,e,r){if(!t){if(e instanceof i)return e;t=e}var n={},o=t instanceof Function;function a(e){var i=t[e];!i&&o&&(i=2==t.length?function(r){t(e,r)}:t),n[e]=i&&function(t){i("[xmldom "+e+"]\t"+t+s(r))}||function(){}}return r=r||{},a("warning"),a("error"),a("fatalError"),n}(a,o,u),n.domBuilder=r.domBuilder||o,p&&(c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",t&&"string"==typeof t?n.parse(t,c,d):n.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new d).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,r,n){var i=this.doc,s=i.createElementNS(t,r||e),a=n.length;u(this,s),this.currentElement=s,this.locator&&o(this.locator,s);for(var l=0;l<a;l++){t=n.getURI(l);var c=n.getValue(l),h=(r=n.getQName(l),i.createAttributeNS(t,r));this.locator&&o(n.getLocator(l),h),h.value=h.nodeValue=c,s.setAttributeNode(h)}},endElement:function(t,e,r){var n=this.currentElement;n.tagName,this.currentElement=n.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var r=this.doc.createProcessingInstruction(t,e);this.locator&&o(this.locator,r),u(this,r)},ignorableWhitespace:function(t,e,r){},characters:function(t,e,r){if(t=a.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(t);else n=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(t)&&this.doc.appendChild(n),this.locator&&o(this.locator,n)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,r){t=a.apply(this,arguments);var n=this.doc.createComment(t);this.locator&&o(this.locator,n),u(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(t,e,r);this.locator&&o(this.locator,i),u(this,i)}},warning:function(t){console.warn("[xmldom warning]\t"+t,s(this.locator))},error:function(t){console.error("[xmldom error]\t"+t,s(this.locator))},fatalError:function(t){throw new p(t,this.locator)}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(t){i.prototype[t]=function(){return null}}));var l=t(240),c=t(241),h=c.XMLReader,p=c.ParseError,d=t(239).DOMImplementation;t(239).XMLSerializer,r.DOMParser=n},{239:239,240:240,241:241}],424:[function(t,e,r){"use strict";const n=t(426),i=Symbol("max"),o=Symbol("length"),s=Symbol("lengthCalculator"),a=Symbol("allowStale"),u=Symbol("maxAge"),l=Symbol("dispose"),c=Symbol("noDisposeOnSet"),h=Symbol("lruList"),p=Symbol("cache"),d=Symbol("updateAgeOnGet"),f=()=>1,y=(t,e,r)=>{const n=t[p].get(e);if(n){const e=n.value;if(m(t,e)){if(v(t,n),!t[a])return}else r&&(t[d]&&(n.value.now=Date.now()),t[h].unshiftNode(n));return e.value}},m=(t,e)=>{if(!e||!e.maxAge&&!t[u])return!1;const r=Date.now()-e.now;return e.maxAge?r>e.maxAge:t[u]&&r>t[u]},g=t=>{if(t[o]>t[i])for(let e=t[h].tail;t[o]>t[i]&&null!==e;){const r=e.prev;v(t,e),e=r}},v=(t,e)=>{if(e){const r=e.value;t[l]&&t[l](r.key,r.value),t[o]-=r.length,t[p].delete(r.key),t[h].removeNode(e)}};class T{constructor(t,e,r,n,i){this.key=t,this.value=e,this.length=r,this.now=n,this.maxAge=i||0}}const _=(t,e,r,n)=>{let i=r.value;m(t,i)&&(v(t,r),t[a]||(i=void 0)),i&&e.call(n,i.value,i.key,t)};e.exports=class{constructor(t){if("number"==typeof t&&(t={max:t}),t||(t={}),t.max&&("number"!=typeof t.max||t.max<0))throw new TypeError("max must be a non-negative number");this[i]=t.max||1/0;const e=t.length||f;if(this[s]="function"!=typeof e?f:e,this[a]=t.stale||!1,t.maxAge&&"number"!=typeof t.maxAge)throw new TypeError("maxAge must be a number");this[u]=t.maxAge||0,this[l]=t.dispose,this[c]=t.noDisposeOnSet||!1,this[d]=t.updateAgeOnGet||!1,this.reset()}set max(t){if("number"!=typeof t||t<0)throw new TypeError("max must be a non-negative number");this[i]=t||1/0,g(this)}get max(){return this[i]}set allowStale(t){this[a]=!!t}get allowStale(){return this[a]}set maxAge(t){if("number"!=typeof t)throw new TypeError("maxAge must be a non-negative number");this[u]=t,g(this)}get maxAge(){return this[u]}set lengthCalculator(t){"function"!=typeof t&&(t=f),t!==this[s]&&(this[s]=t,this[o]=0,this[h].forEach(t=>{t.length=this[s](t.value,t.key),this[o]+=t.length})),g(this)}get lengthCalculator(){return this[s]}get length(){return this[o]}get itemCount(){return this[h].length}rforEach(t,e){e=e||this;for(let r=this[h].tail;null!==r;){const n=r.prev;_(this,t,r,e),r=n}}forEach(t,e){e=e||this;for(let r=this[h].head;null!==r;){const n=r.next;_(this,t,r,e),r=n}}keys(){return this[h].toArray().map(t=>t.key)}values(){return this[h].toArray().map(t=>t.value)}reset(){this[l]&&this[h]&&this[h].length&&this[h].forEach(t=>this[l](t.key,t.value)),this[p]=new Map,this[h]=new n,this[o]=0}dump(){return this[h].map(t=>!m(this,t)&&{k:t.key,v:t.value,e:t.now+(t.maxAge||0)}).toArray().filter(t=>t)}dumpLru(){return this[h]}set(t,e,r){if((r=r||this[u])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,a=this[s](e,t);if(this[p].has(t)){if(a>this[i])return v(this,this[p].get(t)),!1;const s=this[p].get(t).value;return this[l]&&(this[c]||this[l](t,s.value)),s.now=n,s.maxAge=r,s.value=e,this[o]+=a-s.length,s.length=a,this.get(t),g(this),!0}const d=new T(t,e,a,n,r);return d.length>this[i]?(this[l]&&this[l](t,e),!1):(this[o]+=d.length,this[h].unshift(d),this[p].set(t,this[h].head),g(this),!0)}has(t){if(!this[p].has(t))return!1;const e=this[p].get(t).value;return!m(this,e)}get(t){return y(this,t,!0)}peek(t){return y(this,t,!1)}pop(){const t=this[h].tail;return t?(v(this,t),t.value):null}del(t){v(this,this[p].get(t))}load(t){this.reset();const e=Date.now();for(let r=t.length-1;r>=0;r--){const n=t[r],i=n.e||0;if(0===i)this.set(n.k,n.v);else{const t=i-e;t>0&&this.set(n.k,n.v,t)}}}prune(){this[p].forEach((t,e)=>y(this,e,!1))}}},{426:426}],348:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(242)),n(t(243)),n(t(244)),n(t(245)),n(t(246)),n(t(247)),n(t(248)),n(t(249)),n(t(250)),n(t(251)),n(t(253)),n(t(254)),n(t(255)),n(t(256)),n(t(257)),n(t(259)),n(t(258)),n(t(260)),n(t(261)),n(t(262)),n(t(263)),n(t(264)),n(t(265)),n(t(266)),n(t(267)),n(t(268)),n(t(269)),n(t(270)),n(t(271)),n(t(272)),n(t(273)),n(t(274)),n(t(275)),n(t(276)),n(t(277)),n(t(278))},{242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278}],168:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ArrayExpressionConverter=class{convert(t){return t instanceof n.ArrayExpression?t:new n.ArrayExpression(t)}}},{186:186}],169:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.BoolExpressionConverter=class{convert(t){return t instanceof n.BoolExpression?t:new n.BoolExpression(t)}}},{186:186}],170:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.EnumExpressionConverter=class{constructor(t){this.enumValue=t,this.lowercaseIndex=Object.keys(t||{}).reduce((t,e)=>(t[e.toLowerCase()]=e,t),{})}convert(t){if(t instanceof n.EnumExpression)return t;if("string"==typeof t){let e=this.enumValue[t];return void 0===e&&(e=this.enumValue[this.lowercaseIndex[t]]),void 0!==e?new n.EnumExpression(e):new n.EnumExpression("="+t)}return new n.EnumExpression(t)}}},{186:186}],171:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179);r.ExpressionConverter=class{convert(t){return t instanceof n.Expression?t:n.Expression.parse(t)}}},{179:179}],173:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.IntExpressionConverter=class{convert(t){return t instanceof n.IntExpression?t:new n.IntExpression(t)}}},{186:186}],174:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.NumberExpressionConverter=class{convert(t){return t instanceof n.NumberExpression?t:new n.NumberExpression(t)}}},{186:186}],175:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ObjectExpressionConverter=class{convert(t){return t instanceof n.ObjectExpression?t:new n.ObjectExpression(t)}}},{186:186}],176:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.StringExpressionConverter=class{convert(t){return t instanceof n.StringExpression?t:new n.StringExpression(t)}}},{186:186}],177:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ValueExpressionConverter=class{convert(t){return t instanceof n.ValueExpression?t:new n.ValueExpression(t)}}},{186:186}],182:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.ArrayExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(!(null==t||Array.isArray(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("ArrayExpression accepts string, array or Expression as the value.");super.setValue(t)}}},{179:179,185:185}],185:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179);r.ExpressionProperty=class{constructor(t,e){this.defaultValue=e,this.setValue(t)}toString(){return this.expressionText?"="+this.expressionText.replace(/^=/,""):this.value?this.value.toString():""}toExpression(){if(this.expression)return this.expression;if(this.expressionText)return this.expression=n.Expression.parse(this.expressionText.replace(/^=/,"")),this.expression;switch(typeof this.value){case"string":case"number":case"boolean":this.expression=n.Expression.parse(this.value.toString());break;default:void 0===this.value?this.expression=n.Expression.parse("undefined"):null===this.value?this.expression=n.Expression.parse("null"):this.expression=n.Expression.parse(`json(${JSON.stringify(this.value)})`)}return this.expression}getValue(t){const{value:e,error:r}=this.tryGetValue(t);if(r)throw r;return e}tryGetValue(t){if(!this.expression&&this.expressionText)try{this.expression=n.Expression.parse(this.expressionText.replace(/^=/,""))}catch(e){return{value:void 0,error:e.message}}return this.expression?this.expression.tryEvaluate(t):{value:this.value,error:void 0}}setValue(t){this.value=this.defaultValue,this.expression=void 0,this.expressionText=void 0,"string"==typeof t?this.expressionText=t.replace(/^=/,""):t instanceof n.Expression?(this.expression=t,this.expressionText=t.toString()):void 0!==t&&(this.value=t)}}},{179:179}],183:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.BoolExpression=class extends n.ExpressionProperty{constructor(t){super(t,!1)}setValue(t){if(null!=t&&"boolean"!=typeof t&&"string"!=typeof t&&!(t instanceof i.Expression))throw new Error("BoolExpression accepts string, boolean or Expression as the value.");super.setValue(t)}}},{179:179,185:185}],184:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.EnumExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){super.setValue(void 0),"string"!=typeof t||t.startsWith("=")?super.setValue(t):this.value=t}}},{185:185}],187:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179),o=t(196);r.IntExpression=class extends n.ExpressionProperty{constructor(t){super(t,0)}tryGetValue(t){const e=super.tryGetValue(t);return o.FunctionUtils.isNumber(e.value)&&(e.value=Math.trunc(e.value)),e}setValue(t){if(!(null==t||o.FunctionUtils.isNumber(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("IntExpression accepts string, number or Expression as the value.");super.setValue(t)}}},{179:179,185:185,196:196}],188:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179),o=t(196);r.NumberExpression=class extends n.ExpressionProperty{constructor(t){super(t,0)}setValue(t){if(!(null==t||o.FunctionUtils.isNumber(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("NumberExpression accepts string, number or Expression as the value.");super.setValue(t)}}},{179:179,185:185,196:196}],189:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.ObjectExpression=class extends n.ExpressionProperty{constructor(t){super(t)}}},{185:185}],190:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.StringExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(super.setValue(void 0),t instanceof i.Expression)super.setValue(t);else{if("string"==typeof t)return t.startsWith("=")?void(this.expressionText=t):(t.startsWith("\\=")&&(t=t.substr(1)),void(this.expressionText=`=\`${t.replace("`","\\`")}\``));if(null!=t)throw new Error("StringExpression accepts string or Expression as the value.")}}}},{179:179,185:185}],191:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.ValueExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(super.setValue(void 0),"string"==typeof t)return t.startsWith("=")?void(this.expressionText=t):(t.startsWith("\\=")&&(t=t.substr(1)),void(this.expressionText=`=\`${t.replace("`","\\`")}\``));super.setValue(t)}}},{185:185}],451:[function(t,e,r){(function(e){(function(){var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r};if(e.env.NODE_DEBUG){var i=e.env.NODE_DEBUG;i=i.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),new RegExp("^"+i+"$","i")}function o(t,e){var n={seen:[],stylize:a};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(e)?n.showHidden=e:e&&r._extend(n,e),m(n.showHidden)&&(n.showHidden=!1),m(n.depth)&&(n.depth=2),m(n.colors)&&(n.colors=!1),m(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=s),u(n,t,n.depth)}function s(t,e){var r=o.styles[e];return r?"\x1b["+o.colors[r][0]+"m"+t+"\x1b["+o.colors[r][1]+"m":t}function a(t,e){return t}function u(t,e,n){if(t.customInspect&&e&&E(e.inspect)&&e.inspect!==r.inspect&&(!e.constructor||e.constructor.prototype!==e)){var i=e.inspect(n,t);return y(i)||(i=u(t,i,n)),i}var o=function(t,e){if(m(e))return t.stylize("undefined","undefined");if(y(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return f(e)?t.stylize(""+e,"number"):p(e)?t.stylize(""+e,"boolean"):d(e)?t.stylize("null","null"):void 0}(t,e);if(o)return o;var s=Object.keys(e),a=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(e)),_(e)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return l(e);if(0===s.length){if(E(e)){var v=e.name?": "+e.name:"";return t.stylize("[Function"+v+"]","special")}if(g(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(T(e))return t.stylize(Date.prototype.toString.call(e),"date");if(_(e))return l(e)}var b,x="",C=!1,A=["{","}"];return h(e)&&(C=!0,A=["[","]"]),E(e)&&(x=" [Function"+(e.name?": "+e.name:"")+"]"),g(e)&&(x=" "+RegExp.prototype.toString.call(e)),T(e)&&(x=" "+Date.prototype.toUTCString.call(e)),_(e)&&(x=" "+l(e)),0!==s.length||C&&0!=e.length?n<0?g(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),b=C?function(t,e,r,n,i){for(var o=[],s=0,a=e.length;s<a;++s)S(e,String(s))?o.push(c(t,e,r,n,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(c(t,e,r,n,i,!0))})),o}(t,e,n,a,s):s.map((function(r){return c(t,e,n,a,r,C)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(b,x,A)):A[0]+x+A[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function c(t,e,r,n,i,o){var s,a,l;if((l=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(a=t.stylize("[Setter]","special")),S(n,i)||(s="["+i+"]"),a||(t.seen.indexOf(l.value)<0?(a=d(r)?u(t,l.value,null):u(t,l.value,r-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),m(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function h(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function d(t){return null===t}function f(t){return"number"==typeof t}function y(t){return"string"==typeof t}function m(t){return void 0===t}function g(t){return v(t)&&"[object RegExp]"===b(t)}function v(t){return"object"==typeof t&&null!==t}function T(t){return v(t)&&"[object Date]"===b(t)}function _(t){return v(t)&&("[object Error]"===b(t)||t instanceof Error)}function E(t){return"function"==typeof t}function b(t){return Object.prototype.toString.call(t)}r.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.types=t(450),r.types.isRegExp=g,r.types.isDate=T,r.types.isNativeError=_,t(449);function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t(417),r._extend=function(t,e){if(!e||!v(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var x="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;r.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(x&&t[x]){var e;if("function"!=typeof(e=t[x]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,i)}catch(s){r(s)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),x&&Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},r.promisify.custom=x}).call(this)}).call(this,t(428))},{417:417,428:428,449:449,450:450}],423:[function(t,e,r){(function(t){(function(){var n="[object Arguments]",i="[object Map]",o="[object Object]",s="[object Set]",a=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,l={};l["[object Float32Array]"]=l["[object Float64Array]"]=l["[object Int8Array]"]=l["[object Int16Array]"]=l["[object Int32Array]"]=l["[object Uint8Array]"]=l["[object Uint8ClampedArray]"]=l["[object Uint16Array]"]=l["[object Uint32Array]"]=!0,l[n]=l["[object Array]"]=l["[object ArrayBuffer]"]=l["[object Boolean]"]=l["[object DataView]"]=l["[object Date]"]=l["[object Error]"]=l["[object Function]"]=l[i]=l["[object Number]"]=l[o]=l["[object RegExp]"]=l[s]=l["[object String]"]=l["[object WeakMap]"]=!1;var c="object"==typeof t&&t&&t.Object===Object&&t,h="object"==typeof self&&self&&self.Object===Object&&self,p=c||h||Function("return this")(),d="object"==typeof r&&r&&!r.nodeType&&r,f=d&&"object"==typeof e&&e&&!e.nodeType&&e,y=f&&f.exports===d,m=y&&c.process,g=function(){try{return m&&m.binding&&m.binding("util")}catch(t){}}(),v=g&&g.isTypedArray;function T(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function _(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function E(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var b,S,x,C=Array.prototype,A=Function.prototype,N=Object.prototype,O=p["__core-js_shared__"],w=A.toString,R=N.hasOwnProperty,L=(b=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+b:"",P=N.toString,I=RegExp("^"+w.call(R).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),D=y?p.Buffer:void 0,U=p.Symbol,M=p.Uint8Array,k=N.propertyIsEnumerable,F=C.splice,j=U?U.toStringTag:void 0,B=Object.getOwnPropertySymbols,H=D?D.isBuffer:void 0,G=(S=Object.keys,x=Object,function(t){return S(x(t))}),z=ft(p,"DataView"),W=ft(p,"Map"),V=ft(p,"Promise"),$=ft(p,"Set"),q=ft(p,"WeakMap"),Y=ft(Object,"create"),K=vt(z),X=vt(W),Q=vt(V),Z=vt($),J=vt(q),tt=U?U.prototype:void 0,et=tt?tt.valueOf:void 0;function rt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function nt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function it(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function ot(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new it;++e<r;)this.add(t[e])}function st(t){var e=this.__data__=new nt(t);this.size=e.size}function at(t,e){for(var r=t.length;r--;)if(Tt(t[r][0],e))return r;return-1}function ut(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":j&&j in Object(t)?function(t){var e=R.call(t,j),r=t[j];try{t[j]=void 0;var n=!0}catch(o){}var i=P.call(t);return n&&(e?t[j]=r:delete t[j]),i}(t):function(t){return P.call(t)}(t)}function lt(t){return At(t)&&ut(t)==n}function ct(t,e,r,a,u){return t===e||(null==t||null==e||!At(t)&&!At(e)?t!=t&&e!=e:function(t,e,r,a,u,l){var c=Et(t),h=Et(e),p=c?"[object Array]":mt(t),d=h?"[object Array]":mt(e),f=(p=p==n?o:p)==o,y=(d=d==n?o:d)==o,m=p==d;if(m&&bt(t)){if(!bt(e))return!1;c=!0,f=!1}if(m&&!f)return l||(l=new st),c||Nt(t)?ht(t,e,r,a,u,l):function(t,e,r,n,o,a,u){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!a(new M(t),new M(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Tt(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case i:var l=_;case s:var c=1&n;if(l||(l=E),t.size!=e.size&&!c)return!1;var h=u.get(t);if(h)return h==e;n|=2,u.set(t,e);var p=ht(l(t),l(e),n,o,a,u);return u.delete(t),p;case"[object Symbol]":if(et)return et.call(t)==et.call(e)}return!1}(t,e,p,r,a,u,l);if(!(1&r)){var g=f&&R.call(t,"__wrapped__"),v=y&&R.call(e,"__wrapped__");if(g||v){var T=g?t.value():t,b=v?e.value():e;return l||(l=new st),u(T,b,r,a,l)}}return!!m&&(l||(l=new st),function(t,e,r,n,i,o){var s=1&r,a=pt(t),u=a.length;if(u!=pt(e).length&&!s)return!1;for(var l=u;l--;){var c=a[l];if(!(s?c in e:R.call(e,c)))return!1}var h=o.get(t);if(h&&o.get(e))return h==e;var p=!0;o.set(t,e),o.set(e,t);for(var d=s;++l<u;){var f=t[c=a[l]],y=e[c];if(n)var m=s?n(y,f,c,e,t,o):n(f,y,c,t,e,o);if(!(void 0===m?f===y||i(f,y,r,n,o):m)){p=!1;break}d||(d="constructor"==c)}if(p&&!d){var g=t.constructor,v=e.constructor;g!=v&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof v&&v instanceof v)&&(p=!1)}return o.delete(t),o.delete(e),p}(t,e,r,a,u,l))}(t,e,r,a,ct,u))}function ht(t,e,r,n,i,o){var s=1&r,a=t.length,u=e.length;if(a!=u&&!(s&&u>a))return!1;var l=o.get(t);if(l&&o.get(e))return l==e;var c=-1,h=!0,p=2&r?new ot:void 0;for(o.set(t,e),o.set(e,t);++c<a;){var d=t[c],f=e[c];if(n)var y=s?n(f,d,c,e,t,o):n(d,f,c,t,e,o);if(void 0!==y){if(y)continue;h=!1;break}if(p){if(!T(e,(function(t,e){if(s=e,!p.has(s)&&(d===t||i(d,t,r,n,o)))return p.push(e);var s}))){h=!1;break}}else if(d!==f&&!i(d,f,r,n,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function pt(t){return function(t,e,r){var n=e(t);return Et(t)?n:function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}(n,r(t))}(t,Ot,yt)}function dt(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function ft(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Ct(t)||(e=t,L&&L in e))&&(St(t)?I:a).test(vt(t));var e}(r)?r:void 0}rt.prototype.clear=function(){this.__data__=Y?Y(null):{},this.size=0},rt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},rt.prototype.get=function(t){var e=this.__data__;if(Y){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return R.call(e,t)?e[t]:void 0},rt.prototype.has=function(t){var e=this.__data__;return Y?void 0!==e[t]:R.call(e,t)},rt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=Y&&void 0===e?"__lodash_hash_undefined__":e,this},nt.prototype.clear=function(){this.__data__=[],this.size=0},nt.prototype.delete=function(t){var e=this.__data__,r=at(e,t);return!(r<0||(r==e.length-1?e.pop():F.call(e,r,1),--this.size,0))},nt.prototype.get=function(t){var e=this.__data__,r=at(e,t);return r<0?void 0:e[r][1]},nt.prototype.has=function(t){return at(this.__data__,t)>-1},nt.prototype.set=function(t,e){var r=this.__data__,n=at(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},it.prototype.clear=function(){this.size=0,this.__data__={hash:new rt,map:new(W||nt),string:new rt}},it.prototype.delete=function(t){var e=dt(this,t).delete(t);return this.size-=e?1:0,e},it.prototype.get=function(t){return dt(this,t).get(t)},it.prototype.has=function(t){return dt(this,t).has(t)},it.prototype.set=function(t,e){var r=dt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},ot.prototype.add=ot.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},ot.prototype.has=function(t){return this.__data__.has(t)},st.prototype.clear=function(){this.__data__=new nt,this.size=0},st.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},st.prototype.get=function(t){return this.__data__.get(t)},st.prototype.has=function(t){return this.__data__.has(t)},st.prototype.set=function(t,e){var r=this.__data__;if(r instanceof nt){var n=r.__data__;if(!W||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new it(n)}return r.set(t,e),this.size=r.size,this};var yt=B?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,i=null==e?0:e.length,o=0,s=[];++n<i;){var a=e[n];u=a,k.call(t,u)&&(s[o++]=a)}var u;return s}(B(t)))}:function(){return[]},mt=ut;function gt(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||u.test(t))&&t>-1&&t%1==0&&t<e}function vt(t){if(null!=t){try{return w.call(t)}catch(e){}try{return t+""}catch(e){}}return""}function Tt(t,e){return t===e||t!=t&&e!=e}(z&&"[object DataView]"!=mt(new z(new ArrayBuffer(1)))||W&&mt(new W)!=i||V&&"[object Promise]"!=mt(V.resolve())||$&&mt(new $)!=s||q&&"[object WeakMap]"!=mt(new q))&&(mt=function(t){var e=ut(t),r=e==o?t.constructor:void 0,n=r?vt(r):"";if(n)switch(n){case K:return"[object DataView]";case X:return i;case Q:return"[object Promise]";case Z:return s;case J:return"[object WeakMap]"}return e});var _t=lt(function(){return arguments}())?lt:function(t){return At(t)&&R.call(t,"callee")&&!k.call(t,"callee")},Et=Array.isArray,bt=H||function(){return!1};function St(t){if(!Ct(t))return!1;var e=ut(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function xt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ct(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function At(t){return null!=t&&"object"==typeof t}var Nt=v?function(t){return function(e){return t(e)}}(v):function(t){return At(t)&&xt(t.length)&&!!l[ut(t)]};function Ot(t){return null!=(e=t)&&xt(e.length)&&!St(e)?function(t,e){var r=Et(t),n=!r&&_t(t),i=!r&&!n&&bt(t),o=!r&&!n&&!i&&Nt(t),s=r||n||i||o,a=s?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=a.length;for(var l in t)!e&&!R.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||gt(l,u))||a.push(l);return a}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||N))return G(t);var e,r,n=[];for(var i in Object(t))R.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t);var e}e.exports=function(t,e){return ct(t,e)}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],197:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(260),s=t(304),a=t(278),u=n(t(365));class l extends o.Lexer{constructor(t){super(t),this._interp=new s.LexerATNSimulator(l._ATN,this)}get vocabulary(){return l.VOCABULARY}get grammarFileName(){return"CommonRegex.g4"}get ruleNames(){return l.ruleNames}get serializedATN(){return l._serializedATN}get channelNames(){return l.channelNames}get modeNames(){return l.modeNames}static get _ATN(){return l.__ATN||(l.__ATN=(new i.ATNDeserializer).deserialize(u.toCharArray(l._serializedATN))),l.__ATN}}l.Quoted=1,l.BlockQuoted=2,l.BellChar=3,l.ControlChar=4,l.EscapeChar=5,l.FormFeed=6,l.NewLine=7,l.CarriageReturn=8,l.Tab=9,l.Backslash=10,l.HexChar=11,l.Dot=12,l.DecimalDigit=13,l.NotDecimalDigit=14,l.CharWithProperty=15,l.CharWithoutProperty=16,l.WhiteSpace=17,l.NotWhiteSpace=18,l.WordChar=19,l.NotWordChar=20,l.CharacterClassStart=21,l.CharacterClassEnd=22,l.Caret=23,l.Hyphen=24,l.QuestionMark=25,l.Plus=26,l.Star=27,l.OpenBrace=28,l.CloseBrace=29,l.Comma=30,l.EndOfSubject=31,l.Pipe=32,l.OpenParen=33,l.CloseParen=34,l.LessThan=35,l.GreaterThan=36,l.SingleQuote=37,l.Underscore=38,l.Colon=39,l.Hash=40,l.Equals=41,l.Exclamation=42,l.Ampersand=43,l.ALC=44,l.BLC=45,l.CLC=46,l.DLC=47,l.ELC=48,l.FLC=49,l.GLC=50,l.HLC=51,l.ILC=52,l.JLC=53,l.KLC=54,l.LLC=55,l.MLC=56,l.NLC=57,l.OLC=58,l.PLC=59,l.QLC=60,l.RLC=61,l.SLC=62,l.TLC=63,l.ULC=64,l.VLC=65,l.WLC=66,l.XLC=67,l.YLC=68,l.ZLC=69,l.AUC=70,l.BUC=71,l.CUC=72,l.DUC=73,l.EUC=74,l.FUC=75,l.GUC=76,l.HUC=77,l.IUC=78,l.JUC=79,l.KUC=80,l.LUC=81,l.MUC=82,l.NUC=83,l.OUC=84,l.PUC=85,l.QUC=86,l.RUC=87,l.SUC=88,l.TUC=89,l.UUC=90,l.VUC=91,l.WUC=92,l.XUC=93,l.YUC=94,l.ZUC=95,l.D1=96,l.D2=97,l.D3=98,l.D4=99,l.D5=100,l.D6=101,l.D7=102,l.D8=103,l.D9=104,l.D0=105,l.OtherChar=106,l.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],l.modeNames=["DEFAULT_MODE"],l.ruleNames=["Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar","UnderscoreAlphaNumerics","AlphaNumerics","AlphaNumeric","NonAlphaNumeric","HexDigit","ASCII"],l._LITERAL_NAMES=[void 0,void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'",void 0,"'.'","'\\'","'\\'",void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'['","']'","'^'","'-'","'?'","'+'","'*'","'{'","'}'","','","'$'","'|'","'('","')'","'<'","'>'","'''","'_'","':'","'#'","'='","'!'","'&'","'a'","'b'","'c'","'d'","'e'","'f'","'g'","'h'","'i'","'j'","'k'","'l'","'m'","'n'","'o'","'p'","'q'","'r'","'s'","'t'","'u'","'v'","'w'","'x'","'y'","'z'","'A'","'B'","'C'","'D'","'E'","'F'","'G'","'H'","'I'","'J'","'K'","'L'","'M'","'N'","'O'","'P'","'Q'","'R'","'S'","'T'","'U'","'V'","'W'","'X'","'Y'","'Z'","'1'","'2'","'3'","'4'","'5'","'6'","'7'","'8'","'9'","'0'"],l._SYMBOLIC_NAMES=[void 0,"Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar"],l.VOCABULARY=new a.VocabularyImpl(l._LITERAL_NAMES,l._SYMBOLIC_NAMES,[]),l._serializedATN="\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02l\u01fc\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03\xeb\n\x03\f\x03\x0e\x03\xee\v\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x06\f\u0114\n\f\r\f\x0e\f\u0115\x03\f\x03\f\x05\f\u011a\n\f\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03'\x03'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032\x032\x033\x033\x034\x034\x035\x035\x036\x036\x037\x037\x038\x038\x039\x039\x03:\x03:\x03;\x03;\x03<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x03@\x03@\x03A\x03A\x03B\x03B\x03C\x03C\x03D\x03D\x03E\x03E\x03F\x03F\x03G\x03G\x03H\x03H\x03I\x03I\x03J\x03J\x03K\x03K\x03L\x03L\x03M\x03M\x03N\x03N\x03O\x03O\x03P\x03P\x03Q\x03Q\x03R\x03R\x03S\x03S\x03T\x03T\x03U\x03U\x03V\x03V\x03W\x03W\x03X\x03X\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x03\\\x03\\\x03]\x03]\x03^\x03^\x03_\x03_\x03`\x03`\x03a\x03a\x03b\x03b\x03c\x03c\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03h\x03h\x03i\x03i\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u01ec\nl\rl\x0el\u01ed\x03m\x06m\u01f1\nm\rm\x0em\u01f2\x03n\x03n\x03o\x03o\x03p\x03p\x03q\x03q\x03\xec\x02\x02r\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0f\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0e\x1b\x02\x0f\x1d\x02\x10\x1f\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1a3\x02\x1b5\x02\x1c7\x02\x1d9\x02\x1e;\x02\x1f=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02=y\x02>{\x02?}\x02@\x7f\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02F\x8b\x02G\x8d\x02H\x8f\x02I\x91\x02J\x93\x02K\x95\x02L\x97\x02M\x99\x02N\x9b\x02O\x9d\x02P\x9f\x02Q\xa1\x02R\xa3\x02S\xa5\x02T\xa7\x02U\xa9\x02V\xab\x02W\xad\x02X\xaf\x02Y\xb1\x02Z\xb3\x02[\xb5\x02\\\xb7\x02]\xb9\x02^\xbb\x02_\xbd\x02`\xbf\x02a\xc1\x02b\xc3\x02c\xc5\x02d\xc7\x02e\xc9\x02f\xcb\x02g\xcd\x02h\xcf\x02i\xd1\x02j\xd3\x02k\xd5\x02l\xd7\x02\x02\xd9\x02\x02\xdb\x02\x02\xdd\x02\x02\xdf\x02\x02\xe1\x02\x02\x03\x02\x05\x05\x022;C\\c|\x05\x022;CHch\x03\x02\x02\x81\x02\u01fb\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7f\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8b\x03\x02\x02\x02\x02\x8d\x03\x02\x02\x02\x02\x8f\x03\x02\x02\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02\x99\x03\x02\x02\x02\x02\x9b\x03\x02\x02\x02\x02\x9d\x03\x02\x02\x02\x02\x9f\x03\x02\x02\x02\x02\xa1\x03\x02\x02\x02\x02\xa3\x03\x02\x02\x02\x02\xa5\x03\x02\x02\x02\x02\xa7\x03\x02\x02\x02\x02\xa9\x03\x02\x02\x02\x02\xab\x03\x02\x02\x02\x02\xad\x03\x02\x02\x02\x02\xaf\x03\x02\x02\x02\x02\xb1\x03\x02\x02\x02\x02\xb3\x03\x02\x02\x02\x02\xb5\x03\x02\x02\x02\x02\xb7\x03\x02\x02\x02\x02\xb9\x03\x02\x02\x02\x02\xbb\x03\x02\x02\x02\x02\xbd\x03\x02\x02\x02\x02\xbf\x03\x02\x02\x02\x02\xc1\x03\x02\x02\x02\x02\xc3\x03\x02\x02\x02\x02\xc5\x03\x02\x02\x02\x02\xc7\x03\x02\x02\x02\x02\xc9\x03\x02\x02\x02\x02\xcb\x03\x02\x02\x02\x02\xcd\x03\x02\x02\x02\x02\xcf\x03\x02\x02\x02\x02\xd1\x03\x02\x02\x02\x02\xd3\x03\x02\x02\x02\x02\xd5\x03\x02\x02\x02\x03\xe3\x03\x02\x02\x02\x05\xe6\x03\x02\x02\x02\x07\xf2\x03\x02\x02\x02\t\xf5\x03\x02\x02\x02\v\xf8\x03\x02\x02\x02\r\xfb\x03\x02\x02\x02\x0f\xfe\x03\x02\x02\x02\x11\u0101\x03\x02\x02\x02\x13\u0104\x03\x02\x02\x02\x15\u0107\x03\x02\x02\x02\x17\u0109\x03\x02\x02\x02\x19\u011b\x03\x02\x02\x02\x1b\u011d\x03\x02\x02\x02\x1d\u0120\x03\x02\x02\x02\x1f\u0123\x03\x02\x02\x02!\u012a\x03\x02\x02\x02#\u0131\x03\x02\x02\x02%\u0134\x03\x02\x02\x02'\u0137\x03\x02\x02\x02)\u013a\x03\x02\x02\x02+\u013d\x03\x02\x02\x02-\u013f\x03\x02\x02\x02/\u0141\x03\x02\x02\x021\u0143\x03\x02\x02\x023\u0145\x03\x02\x02\x025\u0147\x03\x02\x02\x027\u0149\x03\x02\x02\x029\u014b\x03\x02\x02\x02;\u014d\x03\x02\x02\x02=\u014f\x03\x02\x02\x02?\u0151\x03\x02\x02\x02A\u0153\x03\x02\x02\x02C\u0155\x03\x02\x02\x02E\u0157\x03\x02\x02\x02G\u0159\x03\x02\x02\x02I\u015b\x03\x02\x02\x02K\u015d\x03\x02\x02\x02M\u015f\x03\x02\x02\x02O\u0161\x03\x02\x02\x02Q\u0163\x03\x02\x02\x02S\u0165\x03\x02\x02\x02U\u0167\x03\x02\x02\x02W\u0169\x03\x02\x02\x02Y\u016b\x03\x02\x02\x02[\u016d\x03\x02\x02\x02]\u016f\x03\x02\x02\x02_\u0171\x03\x02\x02\x02a\u0173\x03\x02\x02\x02c\u0175\x03\x02\x02\x02e\u0177\x03\x02\x02\x02g\u0179\x03\x02\x02\x02i\u017b\x03\x02\x02\x02k\u017d\x03\x02\x02\x02m\u017f\x03\x02\x02\x02o\u0181\x03\x02\x02\x02q\u0183\x03\x02\x02\x02s\u0185\x03\x02\x02\x02u\u0187\x03\x02\x02\x02w\u0189\x03\x02\x02\x02y\u018b\x03\x02\x02\x02{\u018d\x03\x02\x02\x02}\u018f\x03\x02\x02\x02\x7f\u0191\x03\x02\x02\x02\x81\u0193\x03\x02\x02\x02\x83\u0195\x03\x02\x02\x02\x85\u0197\x03\x02\x02\x02\x87\u0199\x03\x02\x02\x02\x89\u019b\x03\x02\x02\x02\x8b\u019d\x03\x02\x02\x02\x8d\u019f\x03\x02\x02\x02\x8f\u01a1\x03\x02\x02\x02\x91\u01a3\x03\x02\x02\x02\x93\u01a5\x03\x02\x02\x02\x95\u01a7\x03\x02\x02\x02\x97\u01a9\x03\x02\x02\x02\x99\u01ab\x03\x02\x02\x02\x9b\u01ad\x03\x02\x02\x02\x9d\u01af\x03\x02\x02\x02\x9f\u01b1\x03\x02\x02\x02\xa1\u01b3\x03\x02\x02\x02\xa3\u01b5\x03\x02\x02\x02\xa5\u01b7\x03\x02\x02\x02\xa7\u01b9\x03\x02\x02\x02\xa9\u01bb\x03\x02\x02\x02\xab\u01bd\x03\x02\x02\x02\xad\u01bf\x03\x02\x02\x02\xaf\u01c1\x03\x02\x02\x02\xb1\u01c3\x03\x02\x02\x02\xb3\u01c5\x03\x02\x02\x02\xb5\u01c7\x03\x02\x02\x02\xb7\u01c9\x03\x02\x02\x02\xb9\u01cb\x03\x02\x02\x02\xbb\u01cd\x03\x02\x02\x02\xbd\u01cf\x03\x02\x02\x02\xbf\u01d1\x03\x02\x02\x02\xc1\u01d3\x03\x02\x02\x02\xc3\u01d5\x03\x02\x02\x02\xc5\u01d7\x03\x02\x02\x02\xc7\u01d9\x03\x02\x02\x02\xc9\u01db\x03\x02\x02\x02\xcb\u01dd\x03\x02\x02\x02\xcd\u01df\x03\x02\x02\x02\xcf\u01e1\x03\x02\x02\x02\xd1\u01e3\x03\x02\x02\x02\xd3\u01e5\x03\x02\x02\x02\xd5\u01e7\x03\x02\x02\x02\xd7\u01eb\x03\x02\x02\x02\xd9\u01f0\x03\x02\x02\x02\xdb\u01f4\x03\x02\x02\x02\xdd\u01f6\x03\x02\x02\x02\xdf\u01f8\x03\x02\x02\x02\xe1\u01fa\x03\x02\x02\x02\xe3\xe4\x07^\x02\x02\xe4\xe5\x05\xddo\x02\xe5\x04\x03\x02\x02\x02\xe6\xe7\x07^\x02\x02\xe7\xe8\x07S\x02\x02\xe8\xec\x03\x02\x02\x02\xe9\xeb\v\x02\x02\x02\xea\xe9\x03\x02\x02\x02\xeb\xee\x03\x02\x02\x02\xec\xed\x03\x02\x02\x02\xec\xea\x03\x02\x02\x02\xed\xef\x03\x02\x02\x02\xee\xec\x03\x02\x02\x02\xef\xf0\x07^\x02\x02\xf0\xf1\x07G\x02\x02\xf1\x06\x03\x02\x02\x02\xf2\xf3\x07^\x02\x02\xf3\xf4\x07c\x02\x02\xf4\b\x03\x02\x02\x02\xf5\xf6\x07^\x02\x02\xf6\xf7\x07e\x02\x02\xf7\n\x03\x02\x02\x02\xf8\xf9\x07^\x02\x02\xf9\xfa\x07g\x02\x02\xfa\f\x03\x02\x02\x02\xfb\xfc\x07^\x02\x02\xfc\xfd\x07h\x02\x02\xfd\x0e\x03\x02\x02\x02\xfe\xff\x07^\x02\x02\xff\u0100\x07p\x02\x02\u0100\x10\x03\x02\x02\x02\u0101\u0102\x07^\x02\x02\u0102\u0103\x07t\x02\x02\u0103\x12\x03\x02\x02\x02\u0104\u0105\x07^\x02\x02\u0105\u0106\x07v\x02\x02\u0106\x14\x03\x02\x02\x02\u0107\u0108\x07^\x02\x02\u0108\x16\x03\x02\x02\x02\u0109\u010a\x07^\x02\x02\u010a\u010b\x07z\x02\x02\u010b\u0119\x03\x02\x02\x02\u010c\u010d\x05\xdfp\x02\u010d\u010e\x05\xdfp\x02\u010e\u011a\x03\x02\x02\x02\u010f\u0110\x07}\x02\x02\u0110\u0111\x05\xdfp\x02\u0111\u0113\x05\xdfp\x02\u0112\u0114\x05\xdfp\x02\u0113\u0112\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0115\u0116\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117\u0118\x07\x7f\x02\x02\u0118\u011a\x03\x02\x02\x02\u0119\u010c\x03\x02\x02\x02\u0119\u010f\x03\x02\x02\x02\u011a\x18\x03\x02\x02\x02\u011b\u011c\x070\x02\x02\u011c\x1a\x03\x02\x02\x02\u011d\u011e\x07^\x02\x02\u011e\u011f\x07f\x02\x02\u011f\x1c\x03\x02\x02\x02\u0120\u0121\x07^\x02\x02\u0121\u0122\x07F\x02\x02\u0122\x1e\x03\x02\x02\x02\u0123\u0124\x07^\x02\x02\u0124\u0125\x07r\x02\x02\u0125\u0126\x07}\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128\x05\xd7l\x02\u0128\u0129\x07\x7f\x02\x02\u0129 \x03\x02\x02\x02\u012a\u012b\x07^\x02\x02\u012b\u012c\x07R\x02\x02\u012c\u012d\x07}\x02\x02\u012d\u012e\x03\x02\x02\x02\u012e\u012f\x05\xd7l\x02\u012f\u0130\x07\x7f\x02\x02\u0130\"\x03\x02\x02\x02\u0131\u0132\x07^\x02\x02\u0132\u0133\x07u\x02\x02\u0133$\x03\x02\x02\x02\u0134\u0135\x07^\x02\x02\u0135\u0136\x07U\x02\x02\u0136&\x03\x02\x02\x02\u0137\u0138\x07^\x02\x02\u0138\u0139\x07y\x02\x02\u0139(\x03\x02\x02\x02\u013a\u013b\x07^\x02\x02\u013b\u013c\x07Y\x02\x02\u013c*\x03\x02\x02\x02\u013d\u013e\x07]\x02\x02\u013e,\x03\x02\x02\x02\u013f\u0140\x07_\x02\x02\u0140.\x03\x02\x02\x02\u0141\u0142\x07`\x02\x02\u01420\x03\x02\x02\x02\u0143\u0144\x07/\x02\x02\u01442\x03\x02\x02\x02\u0145\u0146\x07A\x02\x02\u01464\x03\x02\x02\x02\u0147\u0148\x07-\x02\x02\u01486\x03\x02\x02\x02\u0149\u014a\x07,\x02\x02\u014a8\x03\x02\x02\x02\u014b\u014c\x07}\x02\x02\u014c:\x03\x02\x02\x02\u014d\u014e\x07\x7f\x02\x02\u014e<\x03\x02\x02\x02\u014f\u0150\x07.\x02\x02\u0150>\x03\x02\x02\x02\u0151\u0152\x07&\x02\x02\u0152@\x03\x02\x02\x02\u0153\u0154\x07~\x02\x02\u0154B\x03\x02\x02\x02\u0155\u0156\x07*\x02\x02\u0156D\x03\x02\x02\x02\u0157\u0158\x07+\x02\x02\u0158F\x03\x02\x02\x02\u0159\u015a\x07>\x02\x02\u015aH\x03\x02\x02\x02\u015b\u015c\x07@\x02\x02\u015cJ\x03\x02\x02\x02\u015d\u015e\x07)\x02\x02\u015eL\x03\x02\x02\x02\u015f\u0160\x07a\x02\x02\u0160N\x03\x02\x02\x02\u0161\u0162\x07<\x02\x02\u0162P\x03\x02\x02\x02\u0163\u0164\x07%\x02\x02\u0164R\x03\x02\x02\x02\u0165\u0166\x07?\x02\x02\u0166T\x03\x02\x02\x02\u0167\u0168\x07#\x02\x02\u0168V\x03\x02\x02\x02\u0169\u016a\x07(\x02\x02\u016aX\x03\x02\x02\x02\u016b\u016c\x07c\x02\x02\u016cZ\x03\x02\x02\x02\u016d\u016e\x07d\x02\x02\u016e\\\x03\x02\x02\x02\u016f\u0170\x07e\x02\x02\u0170^\x03\x02\x02\x02\u0171\u0172\x07f\x02\x02\u0172`\x03\x02\x02\x02\u0173\u0174\x07g\x02\x02\u0174b\x03\x02\x02\x02\u0175\u0176\x07h\x02\x02\u0176d\x03\x02\x02\x02\u0177\u0178\x07i\x02\x02\u0178f\x03\x02\x02\x02\u0179\u017a\x07j\x02\x02\u017ah\x03\x02\x02\x02\u017b\u017c\x07k\x02\x02\u017cj\x03\x02\x02\x02\u017d\u017e\x07l\x02\x02\u017el\x03\x02\x02\x02\u017f\u0180\x07m\x02\x02\u0180n\x03\x02\x02\x02\u0181\u0182\x07n\x02\x02\u0182p\x03\x02\x02\x02\u0183\u0184\x07o\x02\x02\u0184r\x03\x02\x02\x02\u0185\u0186\x07p\x02\x02\u0186t\x03\x02\x02\x02\u0187\u0188\x07q\x02\x02\u0188v\x03\x02\x02\x02\u0189\u018a\x07r\x02\x02\u018ax\x03\x02\x02\x02\u018b\u018c\x07s\x02\x02\u018cz\x03\x02\x02\x02\u018d\u018e\x07t\x02\x02\u018e|\x03\x02\x02\x02\u018f\u0190\x07u\x02\x02\u0190~\x03\x02\x02\x02\u0191\u0192\x07v\x02\x02\u0192\x80\x03\x02\x02\x02\u0193\u0194\x07w\x02\x02\u0194\x82\x03\x02\x02\x02\u0195\u0196\x07x\x02\x02\u0196\x84\x03\x02\x02\x02\u0197\u0198\x07y\x02\x02\u0198\x86\x03\x02\x02\x02\u0199\u019a\x07z\x02\x02\u019a\x88\x03\x02\x02\x02\u019b\u019c\x07{\x02\x02\u019c\x8a\x03\x02\x02\x02\u019d\u019e\x07|\x02\x02\u019e\x8c\x03\x02\x02\x02\u019f\u01a0\x07C\x02\x02\u01a0\x8e\x03\x02\x02\x02\u01a1\u01a2\x07D\x02\x02\u01a2\x90\x03\x02\x02\x02\u01a3\u01a4\x07E\x02\x02\u01a4\x92\x03\x02\x02\x02\u01a5\u01a6\x07F\x02\x02\u01a6\x94\x03\x02\x02\x02\u01a7\u01a8\x07G\x02\x02\u01a8\x96\x03\x02\x02\x02\u01a9\u01aa\x07H\x02\x02\u01aa\x98\x03\x02\x02\x02\u01ab\u01ac\x07I\x02\x02\u01ac\x9a\x03\x02\x02\x02\u01ad\u01ae\x07J\x02\x02\u01ae\x9c\x03\x02\x02\x02\u01af\u01b0\x07K\x02\x02\u01b0\x9e\x03\x02\x02\x02\u01b1\u01b2\x07L\x02\x02\u01b2\xa0\x03\x02\x02\x02\u01b3\u01b4\x07M\x02\x02\u01b4\xa2\x03\x02\x02\x02\u01b5\u01b6\x07N\x02\x02\u01b6\xa4\x03\x02\x02\x02\u01b7\u01b8\x07O\x02\x02\u01b8\xa6\x03\x02\x02\x02\u01b9\u01ba\x07P\x02\x02\u01ba\xa8\x03\x02\x02\x02\u01bb\u01bc\x07Q\x02\x02\u01bc\xaa\x03\x02\x02\x02\u01bd\u01be\x07R\x02\x02\u01be\xac\x03\x02\x02\x02\u01bf\u01c0\x07S\x02\x02\u01c0\xae\x03\x02\x02\x02\u01c1\u01c2\x07T\x02\x02\u01c2\xb0\x03\x02\x02\x02\u01c3\u01c4\x07U\x02\x02\u01c4\xb2\x03\x02\x02\x02\u01c5\u01c6\x07V\x02\x02\u01c6\xb4\x03\x02\x02\x02\u01c7\u01c8\x07W\x02\x02\u01c8\xb6\x03\x02\x02\x02\u01c9\u01ca\x07X\x02\x02\u01ca\xb8\x03\x02\x02\x02\u01cb\u01cc\x07Y\x02\x02\u01cc\xba\x03\x02\x02\x02\u01cd\u01ce\x07Z\x02\x02\u01ce\xbc\x03\x02\x02\x02\u01cf\u01d0\x07[\x02\x02\u01d0\xbe\x03\x02\x02\x02\u01d1\u01d2\x07\\\x02\x02\u01d2\xc0\x03\x02\x02\x02\u01d3\u01d4\x073\x02\x02\u01d4\xc2\x03\x02\x02\x02\u01d5\u01d6\x074\x02\x02\u01d6\xc4\x03\x02\x02\x02\u01d7\u01d8\x075\x02\x02\u01d8\xc6\x03\x02\x02\x02\u01d9\u01da\x076\x02\x02\u01da\xc8\x03\x02\x02\x02\u01db\u01dc\x077\x02\x02\u01dc\xca\x03\x02\x02\x02\u01dd\u01de\x078\x02\x02\u01de\xcc\x03\x02\x02\x02\u01df\u01e0\x079\x02\x02\u01e0\xce\x03\x02\x02\x02\u01e1\u01e2\x07:\x02\x02\u01e2\xd0\x03\x02\x02\x02\u01e3\u01e4\x07;\x02\x02\u01e4\xd2\x03\x02\x02\x02\u01e5\u01e6\x072\x02\x02\u01e6\xd4\x03\x02\x02\x02\u01e7\u01e8\v\x02\x02\x02\u01e8\xd6\x03\x02\x02\x02\u01e9\u01ec\x07a\x02\x02\u01ea\u01ec\x05\xdbn\x02\u01eb\u01e9\x03\x02\x02\x02\u01eb\u01ea\x03\x02\x02\x02\u01ec\u01ed\x03\x02\x02\x02\u01ed\u01eb\x03\x02\x02\x02\u01ed\u01ee\x03\x02\x02\x02\u01ee\xd8\x03\x02\x02\x02\u01ef\u01f1\x05\xdbn\x02\u01f0\u01ef\x03\x02\x02\x02\u01f1\u01f2\x03\x02\x02\x02\u01f2\u01f0\x03\x02\x02\x02\u01f2\u01f3\x03\x02\x02\x02\u01f3\xda\x03\x02\x02\x02\u01f4\u01f5\t\x02\x02\x02\u01f5\xdc\x03\x02\x02\x02\u01f6\u01f7\n\x02\x02\x02\u01f7\xde\x03\x02\x02\x02\u01f8\u01f9\t\x03\x02\x02\u01f9\xe0\x03\x02\x02\x02\u01fa\u01fb\t\x04\x02\x02\u01fb\xe2\x03\x02\x02\x02\t\x02\xec\u0115\u0119\u01eb\u01ed\u01f2\x02",r.CommonRegexLexer=l},{260:260,278:278,283:283,304:304,365:365}],260:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(249),o=t(357),s=t(358),a=t(258),u=t(304),l=t(262),c=t(252),h=t(271),p=t(276);class d extends h.Recognizer{constructor(t){super(),this._factory=i.CommonTokenFactory.DEFAULT,this._tokenStartCharIndex=-1,this._tokenStartLine=0,this._tokenStartCharPositionInLine=0,this._hitEOF=!1,this._channel=0,this._type=0,this._modeStack=new o.IntegerStack,this._mode=d.DEFAULT_MODE,this._input=t,this._tokenFactorySourcePair={source:this,stream:t}}static get DEFAULT_TOKEN_CHANNEL(){return p.Token.DEFAULT_CHANNEL}static get HIDDEN(){return p.Token.HIDDEN_CHANNEL}reset(t){(void 0===t||t)&&this._input.seek(0),this._token=void 0,this._type=p.Token.INVALID_TYPE,this._channel=p.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartCharPositionInLine=-1,this._tokenStartLine=-1,this._text=void 0,this._hitEOF=!1,this._mode=d.DEFAULT_MODE,this._modeStack.clear(),this.interpreter.reset()}nextToken(){if(null==this._input)throw new Error("nextToken requires a non-null input stream.");let t=this._input.mark();try{t:for(;;){if(this._hitEOF)return this.emitEOF();this._token=void 0,this._channel=p.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartCharPositionInLine=this.interpreter.charPositionInLine,this._tokenStartLine=this.interpreter.line,this._text=void 0;do{let t;this._type=p.Token.INVALID_TYPE;try{t=this.interpreter.match(this._input,this._mode)}catch(e){if(!(e instanceof l.LexerNoViableAltException))throw e;this.notifyListeners(e),this.recover(e),t=d.SKIP}if(this._input.LA(1)===a.IntStream.EOF&&(this._hitEOF=!0),this._type===p.Token.INVALID_TYPE&&(this._type=t),this._type===d.SKIP)continue t}while(this._type===d.MORE);return null==this._token?this.emit():this._token}}finally{this._input.release(t)}}skip(){this._type=d.SKIP}more(){this._type=d.MORE}mode(t){this._mode=t}pushMode(t){u.LexerATNSimulator.debug&&console.log("pushMode "+t),this._modeStack.push(this._mode),this.mode(t)}popMode(){if(this._modeStack.isEmpty)throw new Error("EmptyStackException");return u.LexerATNSimulator.debug&&console.log("popMode back to "+this._modeStack.peek()),this.mode(this._modeStack.pop()),this._mode}get tokenFactory(){return this._factory}set tokenFactory(t){this._factory=t}get inputStream(){return this._input}set inputStream(t){this.reset(!1),this._input=t,this._tokenFactorySourcePair={source:this,stream:this._input}}get sourceName(){return this._input.sourceName}emit(t){return t||(t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.charIndex-1,this._tokenStartLine,this._tokenStartCharPositionInLine)),this._token=t,t}emitEOF(){let t=this.charPositionInLine,e=this.line,r=this._factory.create(this._tokenFactorySourcePair,p.Token.EOF,void 0,p.Token.DEFAULT_CHANNEL,this._input.index,this._input.index-1,e,t);return this.emit(r),r}get line(){return this.interpreter.line}set line(t){this.interpreter.line=t}get charPositionInLine(){return this.interpreter.charPositionInLine}set charPositionInLine(t){this.interpreter.charPositionInLine=t}get charIndex(){return this._input.index}get text(){return null!=this._text?this._text:this.interpreter.getText(this._input)}set text(t){this._text=t}get token(){return this._token}set token(t){this._token=t}set type(t){this._type=t}get type(){return this._type}set channel(t){this._channel=t}get channel(){return this._channel}getAllTokens(){let t=[],e=this.nextToken();for(;e.type!==p.Token.EOF;)t.push(e),e=this.nextToken();return t}notifyListeners(t){let e=this._input.getText(s.Interval.of(this._tokenStartCharIndex,this._input.index)),r="token recognition error at: '"+this.getErrorDisplay(e)+"'",n=this.getErrorListenerDispatch();n.syntaxError&&n.syntaxError(this,void 0,this._tokenStartLine,this._tokenStartCharPositionInLine,r,t)}getErrorDisplay(t){if("number"==typeof t){switch(t){case p.Token.EOF:return"<EOF>";case 10:return"\\n";case 9:return"\\t";case 13:return"\\r"}return String.fromCharCode(t)}return t.replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r")}getCharErrorDisplay(t){return"'"+this.getErrorDisplay(t)+"'"}recover(t){t instanceof l.LexerNoViableAltException?this._input.LA(1)!==a.IntStream.EOF&&this.interpreter.consume(this._input):this._input.consume()}}d.DEFAULT_MODE=0,d.MORE=-2,d.SKIP=-3,d.MIN_CHAR_VALUE=0,d.MAX_CHAR_VALUE=1114111,n([c.Override],d.prototype,"nextToken",null),n([c.Override],d.prototype,"tokenFactory",null),n([c.Override],d.prototype,"inputStream",null),n([c.Override],d.prototype,"sourceName",null),n([c.Override],d.prototype,"line",null),n([c.Override],d.prototype,"charPositionInLine",null),r.Lexer=d},{249:249,252:252,258:258,262:262,271:271,276:276,304:304,357:357,358:358}],278:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(276);class s{constructor(t,e,r){this.literalNames=t,this.symbolicNames=e,this.displayNames=r,this._maxTokenType=Math.max(this.displayNames.length,Math.max(this.literalNames.length,this.symbolicNames.length))-1}get maxTokenType(){return this._maxTokenType}getLiteralName(t){if(t>=0&&t<this.literalNames.length)return this.literalNames[t]}getSymbolicName(t){return t>=0&&t<this.symbolicNames.length?this.symbolicNames[t]:t===o.Token.EOF?"EOF":void 0}getDisplayName(t){if(t>=0&&t<this.displayNames.length){let e=this.displayNames[t];if(e)return e}let e=this.getLiteralName(t);return e||(this.getSymbolicName(t)||String(t))}}s.EMPTY_VOCABULARY=new s([],[],[]),n([i.NotNull],s.prototype,"literalNames",void 0),n([i.NotNull],s.prototype,"symbolicNames",void 0),n([i.NotNull],s.prototype,"displayNames",void 0),n([i.Override],s.prototype,"maxTokenType",null),n([i.Override],s.prototype,"getLiteralName",null),n([i.Override],s.prototype,"getSymbolicName",null),n([i.Override,i.NotNull],s.prototype,"getDisplayName",null),n([i.NotNull],s,"EMPTY_VOCABULARY",void 0),r.VocabularyImpl=s},{252:252,276:276}],365:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.escapeWhitespace=function(t,e){return e?t.replace(/ /,"\xb7"):t.replace(/\t/,"\\t").replace(/\n/,"\\n").replace(/\r/,"\\r")},r.join=function(t,e){let r="",n=!0;for(let i of t)n?n=!1:r+=e,r+=i;return r},r.equals=function(t,e){return t===e||void 0!==t&&void 0!==e&&t.equals(e)},r.toMap=function(t){let e=new Map;for(let r=0;r<t.length;r++)e.set(t[r],r);return e},r.toCharArray=function(t){if("string"==typeof t){let e=new Uint16Array(t.length);for(let r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}return t.toCharArray()}},{}],304:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(343),s=t(279),a=t(280),u=t(281),l=t(284),c=t(346),h=t(358),p=t(258),d=t(260),f=t(305),y=t(262),m=t(252),g=t(318),v=t(326),T=t(332),_=t(276);let E=class t extends l.ATNSimulator{constructor(e,r){super(e),this.optimize_tail_calls=!0,this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=d.Lexer.DEFAULT_MODE,this.prevAccept=new t.SimState,this.recog=r}copyState(t){this._charPositionInLine=t.charPositionInLine,this._line=t._line,this.mode=t.mode,this.startIndex=t.startIndex}match(e,r){t.match_calls++,this.mode=r;let n=e.mark();try{this.startIndex=e.index,this.prevAccept.reset();let t=this.atn.modeToDFA[r].s0;return null==t?this.matchATN(e):this.execATN(e,t)}finally{e.release(n)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=d.Lexer.DEFAULT_MODE}matchATN(e){let r=this.atn.modeToStartState[this.mode];t.debug&&console.log(`matchATN mode ${this.mode} start: ${r}`);let n=this.mode,i=this.computeStartState(e,r),o=i.hasSemanticContext;o&&(i.hasSemanticContext=!1);let s=this.addDFAState(i);if(!o){let t=this.atn.modeToDFA[this.mode];t.s0?s=t.s0:t.s0=s}let a=this.execATN(e,s);return t.debug&&console.log("DFA after matchATN: "+this.atn.modeToDFA[n].toLexerString()),a}execATN(e,r){t.debug&&console.log("start state closure="+r.configs),r.isAcceptState&&this.captureSimState(this.prevAccept,e,r);let n=e.LA(1),i=r;for(;;){t.debug&&console.log("execATN loop starting closure: "+i.configs);let r=this.getExistingTargetState(i,n);if(null==r&&(r=this.computeTargetState(e,i,n)),r===l.ATNSimulator.ERROR)break;if(n!==p.IntStream.EOF&&this.consume(e),r.isAcceptState&&(this.captureSimState(this.prevAccept,e,r),n===p.IntStream.EOF))break;n=e.LA(1),i=r}return this.failOrAccept(this.prevAccept,e,i.configs,n)}getExistingTargetState(e,r){let n=e.getTarget(r);return t.debug&&null!=n&&console.log("reuse state "+e.stateNumber+" edge to "+n.stateNumber),n}computeTargetState(t,e,r){let n=new g.OrderedATNConfigSet;return this.getReachableConfigSet(t,e.configs,n,r),n.isEmpty?(n.hasSemanticContext||this.addDFAEdge(e,r,l.ATNSimulator.ERROR),l.ATNSimulator.ERROR):this.addDFAEdge(e,r,n)}failOrAccept(t,e,r,n){if(null!=t.dfaState){let r=t.dfaState.lexerActionExecutor;return this.accept(e,r,this.startIndex,t.index,t.line,t.charPos),t.dfaState.prediction}if(n===p.IntStream.EOF&&e.index===this.startIndex)return _.Token.EOF;throw new y.LexerNoViableAltException(this.recog,e,this.startIndex,r)}getReachableConfigSet(e,r,n,i){let o=s.ATN.INVALID_ALT_NUMBER;for(let s of r){let r=s.alt===o;if(r&&s.hasPassedThroughNonGreedyDecision)continue;t.debug&&console.log(`testing ${this.getTokenName(i)} at ${s.toString(this.recog,!0)}`);let a=s.state.numberOfOptimizedTransitions;for(let t=0;t<a;t++){let a=s.state.getOptimizedTransition(t),u=this.getReachableTarget(a,i);if(null!=u){let t,a=s.lexerActionExecutor;null!=a?(a=a.fixOffsetBeforeMatch(e.index-this.startIndex),t=s.transform(u,!0,a)):t=s.transform(u,!0);let l=i===p.IntStream.EOF;if(this.closure(e,t,n,r,!0,l)){o=s.alt;break}}}}}accept(e,r,n,i,o,s){t.debug&&console.log("ACTION "+r),e.seek(i),this._line=o,this._charPositionInLine=s,null!=r&&null!=this.recog&&r.execute(this.recog,e,n)}getReachableTarget(t,e){if(t.matches(e,d.Lexer.MIN_CHAR_VALUE,d.Lexer.MAX_CHAR_VALUE))return t.target}computeStartState(t,e){let r=v.PredictionContext.EMPTY_FULL,n=new g.OrderedATNConfigSet;for(let i=0;i<e.numberOfTransitions;i++){let o=e.transition(i).target,s=a.ATNConfig.create(o,i+1,r);this.closure(t,s,n,!1,!1,!1)}return n}closure(e,r,n,i,o,s){if(t.debug&&console.log("closure("+r.toString(this.recog,!0)+")"),r.state instanceof T.RuleStopState){t.debug&&(null!=this.recog?console.log(`closure at ${this.recog.ruleNames[r.state.ruleIndex]} rule stop ${r}`):console.log("closure at rule stop "+r));let a=r.context;if(a.isEmpty)return n.add(r),!0;a.hasEmpty&&(n.add(r.transform(r.state,!0,v.PredictionContext.EMPTY_FULL)),i=!0);for(let t=0;t<a.size;t++){let u=a.getReturnState(t);if(u===v.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let l=a.getParent(t),c=this.atn.states[u],h=r.transform(c,!1,l);i=this.closure(e,h,n,i,o,s)}return i}r.state.onlyHasEpsilonTransitions||i&&r.hasPassedThroughNonGreedyDecision||n.add(r);let a=r.state;for(let t=0;t<a.numberOfOptimizedTransitions;t++){let u=a.getOptimizedTransition(t),l=this.getEpsilonTarget(e,r,u,n,o,s);null!=l&&(i=this.closure(e,l,n,i,o,s))}return i}getEpsilonTarget(e,r,n,i,o,s){let a;switch(n.serializationType){case 3:let u=n;if(this.optimize_tail_calls&&u.optimizedTailCall&&!r.context.hasEmpty)a=r.transform(n.target,!0);else{let t=r.context.getChild(u.followState.stateNumber);a=r.transform(n.target,!0,t)}break;case 10:throw new Error("Precedence predicates are not supported in lexers.");case 4:let l=n;t.debug&&console.log("EVAL rule "+l.ruleIndex+":"+l.predIndex),i.hasSemanticContext=!0,a=this.evaluatePredicate(e,l.ruleIndex,l.predIndex,o)?r.transform(n.target,!0):void 0;break;case 6:if(r.context.hasEmpty){let t=f.LexerActionExecutor.append(r.lexerActionExecutor,this.atn.lexerActions[n.actionIndex]);a=r.transform(n.target,!0,t);break}a=r.transform(n.target,!0);break;case 1:a=r.transform(n.target,!0);break;case 5:case 2:case 7:if(s&&n.matches(p.IntStream.EOF,d.Lexer.MIN_CHAR_VALUE,d.Lexer.MAX_CHAR_VALUE)){a=r.transform(n.target,!1);break}a=void 0;break;default:a=void 0}return a}evaluatePredicate(t,e,r,n){if(null==this.recog)return!0;if(!n)return this.recog.sempred(void 0,e,r);let i=this._charPositionInLine,o=this._line,s=t.index,a=t.mark();try{return this.consume(t),this.recog.sempred(void 0,e,r)}finally{this._charPositionInLine=i,this._line=o,t.seek(s),t.release(a)}}captureSimState(t,e,r){t.index=e.index,t.line=this._line,t.charPos=this._charPositionInLine,t.dfaState=r}addDFAEdge(e,r,n){if(n instanceof u.ATNConfigSet){let t=n.hasSemanticContext;t&&(n.hasSemanticContext=!1);let i=this.addDFAState(n);return t||this.addDFAEdge(e,r,i),i}t.debug&&console.log("EDGE "+e+" -> "+n+" upon "+String.fromCharCode(r)),null!=e&&e.setTarget(r,n)}addDFAState(t){let e=new c.DFAState(t),r=this.atn.modeToDFA[this.mode].states.get(e);if(null!=r)return r;t.optimizeConfigs(this);let n,i=new c.DFAState(t.clone(!0));for(let o of t)if(o.state instanceof T.RuleStopState){n=o;break}if(null!=n){let t=this.atn.ruleToTokenType[n.state.ruleIndex],e=n.lexerActionExecutor;i.acceptStateInfo=new o.AcceptStateInfo(t,e)}return this.atn.modeToDFA[this.mode].addState(i)}getDFA(t){return this.atn.modeToDFA[t]}getText(t){return t.getText(h.Interval.of(this.startIndex,t.index-1))}get line(){return this._line}set line(t){this._line=t}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(t){this._charPositionInLine=t}consume(t){t.LA(1)==="\n".charCodeAt(0)?(this._line++,this._charPositionInLine=0):this._charPositionInLine++,t.consume()}getTokenName(t){return-1===t?"EOF":"'"+String.fromCharCode(t)+"'"}};E.match_calls=0,n([m.NotNull],E.prototype,"prevAccept",void 0),n([i(0,m.NotNull)],E.prototype,"copyState",null),n([i(0,m.NotNull)],E.prototype,"match",null),n([m.Override],E.prototype,"reset",null),n([i(0,m.NotNull)],E.prototype,"matchATN",null),n([i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"execATN",null),n([i(0,m.NotNull)],E.prototype,"getExistingTargetState",null),n([m.NotNull,i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"computeTargetState",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"getReachableConfigSet",null),n([i(0,m.NotNull)],E.prototype,"accept",null),n([m.NotNull,i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"computeStartState",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"closure",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull),i(3,m.NotNull)],E.prototype,"getEpsilonTarget",null),n([i(0,m.NotNull)],E.prototype,"evaluatePredicate",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"captureSimState",null),n([m.NotNull,i(0,m.NotNull)],E.prototype,"addDFAState",null),n([m.NotNull],E.prototype,"getDFA",null),n([m.NotNull,i(0,m.NotNull)],E.prototype,"getText",null),n([i(0,m.NotNull)],E.prototype,"consume",null),n([m.NotNull],E.prototype,"getTokenName",null),E=n([i(0,m.NotNull)],E),r.LexerATNSimulator=E,function(t){t.debug=!1,t.dfa_debug=!1,t.SimState=class{constructor(){this.index=-1,this.line=0,this.charPos=-1}reset(){this.index=-1,this.line=0,this.charPos=-1,this.dfaState=void 0}}}(E=r.LexerATNSimulator||(r.LexerATNSimulator={})),r.LexerATNSimulator=E},{252:252,258:258,260:260,262:262,276:276,279:279,280:280,281:281,284:284,305:305,318:318,326:326,332:332,343:343,346:346,358:358}],283:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(288),s=t(350),a=t(279),u=t(282),l=t(286),c=t(290),h=t(291),p=t(292),d=t(353),f=t(293),y=t(294),m=t(299),g=t(344),v=t(300),T=t(359),_=t(302),E=t(306),b=t(307),S=t(309),x=t(310),C=t(311),A=t(312),N=t(313),O=t(314),w=t(316),R=t(252),L=t(317),P=t(320),I=t(321),D=t(322),U=t(323),M=t(325),k=t(330),F=t(331),j=t(332),B=t(333),H=t(335),G=t(337),z=t(339),W=t(338),V=t(276),$=t(340),q=t(364),Y=t(342);var K;!function(t){t[t.UNICODE_BMP=0]="UNICODE_BMP",t[t.UNICODE_SMP=1]="UNICODE_SMP"}(K||(K={}));class X{constructor(t){null==t&&(t=u.ATNDeserializationOptions.defaultOptions),this.deserializationOptions=t}static get SERIALIZED_VERSION(){return 3}static isFeatureSupported(t,e){let r=X.SUPPORTED_UUIDS.findIndex(e=>e.equals(t));return!(r<0)&&X.SUPPORTED_UUIDS.findIndex(t=>t.equals(e))>=r}static getUnicodeDeserializer(t){return 0===t?{readUnicode:(t,e)=>X.toInt(t[e]),size:1}:{readUnicode:(t,e)=>X.toInt32(t,e),size:2}}deserialize(t){t=t.slice(0);for(let o=1;o<t.length;o++)t[o]=t[o]-2&65535;let e=0,r=X.toInt(t[e++]);if(r!==X.SERIALIZED_VERSION){let t=`Could not deserialize ATN with version ${r} (expected ${X.SERIALIZED_VERSION}).`;throw new Error(t)}let n=X.toUUID(t,e);if(e+=8,X.SUPPORTED_UUIDS.findIndex(t=>t.equals(n))<0){let t=`Could not deserialize ATN with UUID ${n} (expected ${X.SERIALIZED_UUID} or a legacy UUID).`;throw new Error(t)}let i=X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,n),u=X.toInt(t[e++]),d=X.toInt(t[e++]),m=new a.ATN(u,d),T=[],E=[],S=X.toInt(t[e++]);for(let o=0;o<S;o++){let r=X.toInt(t[e++]);if(r===l.ATNStateType.INVALID_TYPE){m.addState(new _.InvalidState);continue}let n=X.toInt(t[e++]);65535===n&&(n=-1);let i=this.stateFactory(r,n);if(r===l.ATNStateType.LOOP_END){let r=X.toInt(t[e++]);T.push([i,r])}else if(i instanceof y.BlockStartState){let r=X.toInt(t[e++]);E.push([i,r])}m.addState(i)}for(let o of T)o[0].loopBackState=m.states[o[1]];for(let o of E)o[0].endState=m.states[o[1]];let x=X.toInt(t[e++]);for(let o=0;o<x;o++){let r=X.toInt(t[e++]);m.states[r].nonGreedy=!0}let C=X.toInt(t[e++]);for(let o=0;o<C;o++){let r=X.toInt(t[e++]);m.states[r].sll=!0}let A=X.toInt(t[e++]);for(let o=0;o<A;o++){let r=X.toInt(t[e++]);m.states[r].isPrecedenceRule=!0}let N=X.toInt(t[e++]);0===m.grammarType&&(m.ruleToTokenType=new Int32Array(N)),m.ruleToStartState=new Array(N);for(let o=0;o<N;o++){let r=X.toInt(t[e++]),i=m.states[r];if(i.leftFactored=0!==X.toInt(t[e++]),m.ruleToStartState[o]=i,0===m.grammarType){let r=X.toInt(t[e++]);if(65535===r&&(r=V.Token.EOF),m.ruleToTokenType[o]=r,!X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,n)){let r=X.toInt(t[e++]);65535===r&&(r=-1)}}}m.ruleToStopState=new Array(N);for(let o of m.states)o instanceof j.RuleStopState&&(m.ruleToStopState[o.ruleIndex]=o,m.ruleToStartState[o.ruleIndex].stopState=o);let O=X.toInt(t[e++]);for(let o=0;o<O;o++){let r=X.toInt(t[e++]);m.modeToStartState.push(m.states[r])}m.modeToDFA=new Array(O);for(let o=0;o<O;o++)m.modeToDFA[o]=new g.DFA(m.modeToStartState[o]);let R=[];e=this.deserializeSets(t,e,R,X.getUnicodeDeserializer(0)),X.isFeatureSupported(X.ADDED_UNICODE_SMP,n)&&(e=this.deserializeSets(t,e,R,X.getUnicodeDeserializer(1)));let L=X.toInt(t[e++]);for(let o=0;o<L;o++){let r=X.toInt(t[e]),n=X.toInt(t[e+1]),i=X.toInt(t[e+2]),o=X.toInt(t[e+3]),s=X.toInt(t[e+4]),a=X.toInt(t[e+5]),u=this.edgeFactory(m,i,r,n,o,s,a,R);m.states[r].addTransition(u),e+=6}let P=new s.Array2DHashSet({hashCode:t=>t.stopState^t.returnState^t.outermostPrecedenceReturn,equals:(t,e)=>t.stopState===e.stopState&&t.returnState===e.returnState&&t.outermostPrecedenceReturn===e.outermostPrecedenceReturn}),U=[];for(let o of m.states){let t=o.ruleIndex>=0&&m.ruleToStartState[o.ruleIndex].leftFactored;for(let e=0;e<o.numberOfTransitions;e++){let r=o.transition(e);if(!(r instanceof B.RuleTransition))continue;let n=r;if(!m.ruleToStartState[n.target.ruleIndex].leftFactored&&t)continue;let i=-1;m.ruleToStartState[n.target.ruleIndex].isPrecedenceRule&&0===n.precedence&&(i=n.target.ruleIndex);let s={stopState:n.target.ruleIndex,returnState:n.followState.stateNumber,outermostPrecedenceReturn:i};P.add(s)&&U.push(s)}}for(let o of U){let t=new v.EpsilonTransition(m.states[o.returnState],o.outermostPrecedenceReturn);m.ruleToStopState[o.stopState].addTransition(t)}for(let o of m.states){if(o instanceof y.BlockStartState){if(null==o.endState)throw new Error("IllegalStateException");if(null!=o.endState.startState)throw new Error("IllegalStateException");o.endState.startState=o}if(o instanceof D.PlusLoopbackState){let t=o;for(let e=0;e<t.numberOfTransitions;e++){let r=t.transition(e).target;r instanceof I.PlusBlockStartState&&(r.loopBackState=t)}}else if(o instanceof z.StarLoopbackState){let t=o;for(let e=0;e<t.numberOfTransitions;e++){let r=t.transition(e).target;r instanceof W.StarLoopEntryState&&(r.loopBackState=t)}}}let M=X.toInt(t[e++]);for(let o=1;o<=M;o++){let r=X.toInt(t[e++]),n=m.states[r];m.decisionToState.push(n),n.decision=o-1}if(0===m.grammarType)if(i){m.lexerActions=new Array(X.toInt(t[e++]));for(let r=0;r<m.lexerActions.length;r++){let n=X.toInt(t[e++]),i=X.toInt(t[e++]);65535===i&&(i=-1);let o=X.toInt(t[e++]);65535===o&&(o=-1);let s=this.lexerActionFactory(n,i,o);m.lexerActions[r]=s}}else{let t=[];for(let e of m.states)for(let r=0;r<e.numberOfTransitions;r++){let n=e.transition(r);if(!(n instanceof o.ActionTransition))continue;let i=n.ruleIndex,s=n.actionIndex,a=new b.LexerCustomAction(i,s);e.setTransition(r,new o.ActionTransition(n.target,i,t.length,!1)),t.push(a)}m.lexerActions=t}this.markPrecedenceDecisions(m),m.decisionToDFA=new Array(M);for(let o=0;o<M;o++)m.decisionToDFA[o]=new g.DFA(m.decisionToState[o],o);if(this.deserializationOptions.isVerifyATN&&this.verifyATN(m),this.deserializationOptions.isGenerateRuleBypassTransitions&&1===m.grammarType){m.ruleToTokenType=new Int32Array(m.ruleToStartState.length);for(let t=0;t<m.ruleToStartState.length;t++)m.ruleToTokenType[t]=m.maxTokenType+t+1;for(let t=0;t<m.ruleToStartState.length;t++){let e=new h.BasicBlockStartState;e.ruleIndex=t,m.addState(e);let r,n,i=new f.BlockEndState;if(i.ruleIndex=t,m.addState(i),e.endState=i,m.defineDecisionState(e),i.startState=e,m.ruleToStartState[t].isPrecedenceRule){r=void 0;for(let e of m.states){if(e.ruleIndex!==t)continue;if(!(e instanceof W.StarLoopEntryState))continue;let n=e.transition(e.numberOfTransitions-1).target;if(n instanceof w.LoopEndState&&n.epsilonOnlyTransitions&&n.transition(0).target instanceof j.RuleStopState){r=e;break}}if(!r)throw new Error("Couldn't identify final state of the precedence rule prefix section.");n=r.loopBackState.transition(0)}else r=m.ruleToStopState[t];for(let t of m.states)for(let e=0;e<t.numberOfTransitions;e++){let o=t.transition(e);o!==n&&o.target===r&&(o.target=i)}for(;m.ruleToStartState[t].numberOfTransitions>0;){let r=m.ruleToStartState[t].removeTransition(m.ruleToStartState[t].numberOfTransitions-1);e.addTransition(r)}m.ruleToStartState[t].addTransition(new v.EpsilonTransition(e)),i.addTransition(new v.EpsilonTransition(r));let o=new p.BasicState;m.addState(o),o.addTransition(new c.AtomTransition(i,m.ruleToTokenType[t])),e.addTransition(new v.EpsilonTransition(o))}this.deserializationOptions.isVerifyATN&&this.verifyATN(m)}if(this.deserializationOptions.isOptimize){for(;;){let t=0;t+=X.inlineSetRules(m),t+=X.combineChainedEpsilons(m);let e=0===m.grammarType;if(0===(t+=X.optimizeSets(m,e)))break}this.deserializationOptions.isVerifyATN&&this.verifyATN(m)}return X.identifyTailCalls(m),m}deserializeSets(t,e,r,n){let i=X.toInt(t[e++]);for(let o=0;o<i;o++){let i=X.toInt(t[e]);e++;let o=new T.IntervalSet;r.push(o),0!==X.toInt(t[e++])&&o.add(-1);for(let r=0;r<i;r++){let r=n.readUnicode(t,e);e+=n.size;let i=n.readUnicode(t,e);e+=n.size,o.add(r,i)}}return e}markPrecedenceDecisions(t){let e=new Map;for(let r of t.states)if(r instanceof W.StarLoopEntryState&&t.ruleToStartState[r.ruleIndex].isPrecedenceRule){let n=r.transition(r.numberOfTransitions-1).target;n instanceof w.LoopEndState&&n.epsilonOnlyTransitions&&n.transition(0).target instanceof j.RuleStopState&&(e.set(r.ruleIndex,r),r.precedenceRuleDecision=!0,r.precedenceLoopbackStates=new d.BitSet(t.states.length))}for(let r of e)for(let e of t.ruleToStopState[r[0]].getTransitions())1===e.serializationType&&-1===e.outermostPrecedenceReturn&&r[1].precedenceLoopbackStates.set(e.target.stateNumber)}verifyATN(t){for(let e of t.states)if(this.checkCondition(null!=e,"ATN states should not be null."),e.stateType!==l.ATNStateType.INVALID_TYPE){if(this.checkCondition(e.onlyHasEpsilonTransitions||e.numberOfTransitions<=1),e instanceof I.PlusBlockStartState&&this.checkCondition(null!=e.loopBackState),e instanceof W.StarLoopEntryState){let t=e;if(this.checkCondition(null!=t.loopBackState),this.checkCondition(2===t.numberOfTransitions),t.transition(0).target instanceof G.StarBlockStartState)this.checkCondition(t.transition(1).target instanceof w.LoopEndState),this.checkCondition(!t.nonGreedy);else{if(!(t.transition(0).target instanceof w.LoopEndState))throw new Error("IllegalStateException");this.checkCondition(t.transition(1).target instanceof G.StarBlockStartState),this.checkCondition(t.nonGreedy)}}if(e instanceof z.StarLoopbackState&&(this.checkCondition(1===e.numberOfTransitions),this.checkCondition(e.transition(0).target instanceof W.StarLoopEntryState)),e instanceof w.LoopEndState&&this.checkCondition(null!=e.loopBackState),e instanceof F.RuleStartState&&this.checkCondition(null!=e.stopState),e instanceof y.BlockStartState&&this.checkCondition(null!=e.endState),e instanceof f.BlockEndState&&this.checkCondition(null!=e.startState),e instanceof m.DecisionState){let t=e;this.checkCondition(t.numberOfTransitions<=1||t.decision>=0)}else this.checkCondition(e.numberOfTransitions<=1||e instanceof j.RuleStopState)}}checkCondition(t,e){if(!t)throw new Error("IllegalStateException: "+e)}static inlineSetRules(t){let e=0,r=new Array(t.ruleToStartState.length);for(let n=0;n<t.ruleToStartState.length;n++){let e=t.ruleToStartState[n];for(;e.onlyHasEpsilonTransitions&&1===e.numberOfOptimizedTransitions&&1===e.getOptimizedTransition(0).serializationType;)e=e.getOptimizedTransition(0).target;if(1!==e.numberOfOptimizedTransitions)continue;let i=e.getOptimizedTransition(0),o=i.target;if(!i.isEpsilon&&o.onlyHasEpsilonTransitions&&1===o.numberOfOptimizedTransitions&&o.getOptimizedTransition(0).target instanceof j.RuleStopState)switch(i.serializationType){case 5:case 2:case 7:r[n]=i;break;case 8:case 9:default:continue}}for(let n of t.states){if(n.ruleIndex<0)continue;let i;for(let o=0;o<n.numberOfOptimizedTransitions;o++){let s=n.getOptimizedTransition(o);if(!(s instanceof B.RuleTransition)){null!=i&&i.push(s);continue}let a=s,u=r[a.target.ruleIndex];if(null==u){null!=i&&i.push(s);continue}if(null==i){i=[];for(let t=0;t<o;t++)i.push(n.getOptimizedTransition(o))}e++;let l=a.followState,h=new p.BasicState;switch(h.setRuleIndex(l.ruleIndex),t.addState(h),i.push(new v.EpsilonTransition(h)),u.serializationType){case 5:h.addTransition(new c.AtomTransition(l,u._label));break;case 2:h.addTransition(new k.RangeTransition(l,u.from,u.to));break;case 7:h.addTransition(new H.SetTransition(l,u.label));break;default:throw new Error("UnsupportedOperationException")}}if(null!=i){if(n.isOptimized)for(;n.numberOfOptimizedTransitions>0;)n.removeOptimizedTransition(n.numberOfOptimizedTransitions-1);for(let t of i)n.addOptimizedTransition(t)}}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+e+" rule invocations by inlining sets."),e}static combineChainedEpsilons(t){let e=0;for(let r of t.states){if(!r.onlyHasEpsilonTransitions||r instanceof j.RuleStopState)continue;let t;t:for(let n=0;n<r.numberOfOptimizedTransitions;n++){let i=r.getOptimizedTransition(n),o=i.target;if(1===i.serializationType&&-1===i.outermostPrecedenceReturn&&o.stateType===l.ATNStateType.BASIC&&o.onlyHasEpsilonTransitions){for(let e=0;e<o.numberOfOptimizedTransitions;e++)if(1!==o.getOptimizedTransition(e).serializationType||-1!==o.getOptimizedTransition(e).outermostPrecedenceReturn){null!=t&&t.push(i);continue t}if(e++,null==t){t=[];for(let e=0;e<n;e++)t.push(r.getOptimizedTransition(e))}for(let e=0;e<o.numberOfOptimizedTransitions;e++){let r=o.getOptimizedTransition(e).target;t.push(new v.EpsilonTransition(r))}}else null!=t&&t.push(i)}if(null!=t){if(r.isOptimized)for(;r.numberOfOptimizedTransitions>0;)r.removeOptimizedTransition(r.numberOfOptimizedTransitions-1);for(let e of t)r.addOptimizedTransition(e)}}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+e+" transitions by combining chained epsilon transitions."),e}static optimizeSets(t,e){if(e)return 0;let r=0,n=t.decisionToState;for(let i of n){let e=new T.IntervalSet;for(let t=0;t<i.numberOfOptimizedTransitions;t++){let r=i.getOptimizedTransition(t);if(!(r instanceof v.EpsilonTransition))continue;if(1!==r.target.numberOfOptimizedTransitions)continue;let n=r.target.getOptimizedTransition(0);n.target instanceof f.BlockEndState&&(n instanceof L.NotSetTransition||(n instanceof c.AtomTransition||n instanceof k.RangeTransition||n instanceof H.SetTransition)&&e.add(t))}if(e.size<=1)continue;let n=[];for(let t=0;t<i.numberOfOptimizedTransitions;t++)e.contains(t)||n.push(i.getOptimizedTransition(t));let o,s=i.getOptimizedTransition(e.minElement).target.getOptimizedTransition(0).target,a=new T.IntervalSet;for(let t of e.intervals)for(let e=t.a;e<=t.b;e++){let t=i.getOptimizedTransition(e).target.getOptimizedTransition(0);if(t instanceof L.NotSetTransition)throw new Error("Not yet implemented.");a.addAll(t.label)}if(1===a.intervals.length)if(1===a.size)o=new c.AtomTransition(s,a.minElement);else{let t=a.intervals[0];o=new k.RangeTransition(s,t.a,t.b)}else o=new H.SetTransition(s,a);let u=new p.BasicState;if(u.setRuleIndex(i.ruleIndex),t.addState(u),u.addTransition(o),n.push(new v.EpsilonTransition(u)),r+=i.numberOfOptimizedTransitions-n.length,i.isOptimized)for(;i.numberOfOptimizedTransitions>0;)i.removeOptimizedTransition(i.numberOfOptimizedTransitions-1);for(let t of n)i.addOptimizedTransition(t)}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+r+" paths by collapsing sets."),r}static identifyTailCalls(t){for(let e of t.states){for(let r=0;r<e.numberOfTransitions;r++){let n=e.transition(r);n instanceof B.RuleTransition&&(n.tailCall=this.testTailCall(t,n,!1),n.optimizedTailCall=this.testTailCall(t,n,!0))}if(e.isOptimized)for(let r=0;r<e.numberOfOptimizedTransitions;r++){let n=e.getOptimizedTransition(r);n instanceof B.RuleTransition&&(n.tailCall=this.testTailCall(t,n,!1),n.optimizedTailCall=this.testTailCall(t,n,!0))}}}static testTailCall(t,e,r){if(!r&&e.tailCall)return!0;if(r&&e.optimizedTailCall)return!0;let n=new d.BitSet(t.states.length),i=[];for(i.push(e.followState);;){let t=i.pop();if(!t)break;if(n.get(t.stateNumber))continue;if(t instanceof j.RuleStopState)continue;if(!t.onlyHasEpsilonTransitions)return!1;let e=r?t.numberOfOptimizedTransitions:t.numberOfTransitions;for(let n=0;n<e;n++){let e=r?t.getOptimizedTransition(n):t.transition(n);if(1!==e.serializationType)return!1;i.push(e.target)}}return!0}static toInt(t){return t}static toInt32(t,e){return(t[e]|t[e+1]<<16)>>>0}static toUUID(t,e){let r=X.toInt32(t,e),n=X.toInt32(t,e+2),i=X.toInt32(t,e+4),o=X.toInt32(t,e+6);return new q.UUID(o,i,n,r)}edgeFactory(t,e,r,n,i,s,a,u){let l=t.states[n];switch(e){case 1:return new v.EpsilonTransition(l);case 2:return 0!==a?new k.RangeTransition(l,V.Token.EOF,s):new k.RangeTransition(l,i,s);case 3:return new B.RuleTransition(t.states[i],s,a,l);case 4:return new M.PredicateTransition(l,i,s,0!==a);case 10:return new U.PrecedencePredicateTransition(l,i);case 5:return 0!==a?new c.AtomTransition(l,V.Token.EOF):new c.AtomTransition(l,i);case 6:return new o.ActionTransition(l,i,s,0!==a);case 7:return new H.SetTransition(l,u[i]);case 8:return new L.NotSetTransition(l,u[i]);case 9:return new Y.WildcardTransition(l)}throw new Error("The specified transition type is not valid.")}stateFactory(t,e){let r;switch(t){case l.ATNStateType.INVALID_TYPE:return new _.InvalidState;case l.ATNStateType.BASIC:r=new p.BasicState;break;case l.ATNStateType.RULE_START:r=new F.RuleStartState;break;case l.ATNStateType.BLOCK_START:r=new h.BasicBlockStartState;break;case l.ATNStateType.PLUS_BLOCK_START:r=new I.PlusBlockStartState;break;case l.ATNStateType.STAR_BLOCK_START:r=new G.StarBlockStartState;break;case l.ATNStateType.TOKEN_START:r=new $.TokensStartState;break;case l.ATNStateType.RULE_STOP:r=new j.RuleStopState;break;case l.ATNStateType.BLOCK_END:r=new f.BlockEndState;break;case l.ATNStateType.STAR_LOOP_BACK:r=new z.StarLoopbackState;break;case l.ATNStateType.STAR_LOOP_ENTRY:r=new W.StarLoopEntryState;break;case l.ATNStateType.PLUS_LOOP_BACK:r=new D.PlusLoopbackState;break;case l.ATNStateType.LOOP_END:r=new w.LoopEndState;break;default:throw new Error(`The specified state type ${t} is not valid.`)}return r.ruleIndex=e,r}lexerActionFactory(t,e,r){switch(t){case 0:return new E.LexerChannelAction(e);case 1:return new b.LexerCustomAction(e,r);case 2:return new S.LexerModeAction(e);case 3:return x.LexerMoreAction.INSTANCE;case 4:return C.LexerPopModeAction.INSTANCE;case 5:return new A.LexerPushModeAction(e);case 6:return N.LexerSkipAction.INSTANCE;case 7:return new O.LexerTypeAction(e);default:throw new Error(`The specified lexer action type ${t} is not valid.`)}}}X.BASE_SERIALIZED_UUID=q.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3"),X.ADDED_LEXER_ACTIONS=q.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D"),X.ADDED_UNICODE_SMP=q.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B"),X.SUPPORTED_UUIDS=[X.BASE_SERIALIZED_UUID,X.ADDED_LEXER_ACTIONS,X.ADDED_UNICODE_SMP],X.SERIALIZED_UUID=X.ADDED_UNICODE_SMP,n([R.NotNull],X.prototype,"deserializationOptions",void 0),n([i(0,R.NotNull)],X.prototype,"deserialize",null),n([i(0,R.NotNull)],X.prototype,"markPrecedenceDecisions",null),n([R.NotNull,i(0,R.NotNull)],X.prototype,"edgeFactory",null),r.ATNDeserializer=X},{252:252,276:276,279:279,282:282,286:286,288:288,290:290,291:291,292:292,293:293,294:294,299:299,300:300,302:302,306:306,307:307,309:309,310:310,311:311,312:312,313:313,314:314,316:316,317:317,320:320,321:321,322:322,323:323,325:325,330:330,331:331,332:332,333:333,335:335,337:337,338:338,339:339,340:340,342:342,344:344,350:350,353:353,359:359,364:364}],198:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(264),s=t(265),a=t(267),u=t(320),l=t(270),c=t(276),h=t(278),p=n(t(365));class d extends s.Parser{constructor(t){super(t),this._interp=new u.ParserATNSimulator(d._ATN,this)}get vocabulary(){return d.VOCABULARY}get grammarFileName(){return"CommonRegex.g4"}get ruleNames(){return d.ruleNames}get serializedATN(){return d._serializedATN}parse(){let t=new f(this._ctx,this.state);this.enterRule(t,0,d.RULE_parse);try{this.enterOuterAlt(t,1),this.state=54,this.alternation(),this.state=55,this.match(d.EOF)}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}alternation(){let t,e=new y(this._ctx,this.state);this.enterRule(e,2,d.RULE_alternation);try{for(this.enterOuterAlt(e,1),this.state=57,this.expr(),this.state=62,this._errHandler.sync(this),t=this._input.LA(1);t===d.Pipe;)this.state=58,this.match(d.Pipe),this.state=59,this.expr(),this.state=64,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}expr(){let t,e=new m(this._ctx,this.state);this.enterRule(e,4,d.RULE_expr);try{for(this.enterOuterAlt(e,1),this.state=68,this._errHandler.sync(this),t=this._input.LA(1);0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.CharacterClassEnd|1<<d.Caret|1<<d.Hyphen|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-33&-32)&&0!=(1<<t-33&(1<<d.OpenParen-33|1<<d.LessThan-33|1<<d.GreaterThan-33|1<<d.SingleQuote-33|1<<d.Underscore-33|1<<d.Colon-33|1<<d.Hash-33|1<<d.Equals-33|1<<d.Exclamation-33|1<<d.Ampersand-33|1<<d.ALC-33|1<<d.BLC-33|1<<d.CLC-33|1<<d.DLC-33|1<<d.ELC-33|1<<d.FLC-33|1<<d.GLC-33|1<<d.HLC-33|1<<d.ILC-33|1<<d.JLC-33|1<<d.KLC-33|1<<d.LLC-33|1<<d.MLC-33|1<<d.NLC-33|1<<d.OLC-33|1<<d.PLC-33|1<<d.QLC-33|1<<d.RLC-33|1<<d.SLC-33|1<<d.TLC-33|1<<d.ULC-33))||0==(t-65&-32)&&0!=(1<<t-65&(1<<d.VLC-65|1<<d.WLC-65|1<<d.XLC-65|1<<d.YLC-65|1<<d.ZLC-65|1<<d.AUC-65|1<<d.BUC-65|1<<d.CUC-65|1<<d.DUC-65|1<<d.EUC-65|1<<d.FUC-65|1<<d.GUC-65|1<<d.HUC-65|1<<d.IUC-65|1<<d.JUC-65|1<<d.KUC-65|1<<d.LUC-65|1<<d.MUC-65|1<<d.NUC-65|1<<d.OUC-65|1<<d.PUC-65|1<<d.QUC-65|1<<d.RUC-65|1<<d.SUC-65|1<<d.TUC-65|1<<d.UUC-65|1<<d.VUC-65|1<<d.WUC-65|1<<d.XUC-65|1<<d.YUC-65|1<<d.ZUC-65|1<<d.D1-65))||0==(t-97&-32)&&0!=(1<<t-97&(1<<d.D2-97|1<<d.D3-97|1<<d.D4-97|1<<d.D5-97|1<<d.D6-97|1<<d.D7-97|1<<d.D8-97|1<<d.D9-97|1<<d.D0-97|1<<d.OtherChar-97));)this.state=65,this.element(),this.state=70,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}element(){let t=new g(this._ctx,this.state);this.enterRule(t,6,d.RULE_element);try{switch(this.enterOuterAlt(t,1),this.state=71,this.atom(),this.state=73,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,2,this._ctx)){case 1:this.state=72,this.quantifier()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}quantifier(){let t=new v(this._ctx,this.state);this.enterRule(t,8,d.RULE_quantifier);try{switch(this.state=99,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,3,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=75,this.match(d.QuestionMark),this.state=76,this.quantifier_type();break;case 2:this.enterOuterAlt(t,2),this.state=77,this.match(d.Plus),this.state=78,this.quantifier_type();break;case 3:this.enterOuterAlt(t,3),this.state=79,this.match(d.Star),this.state=80,this.quantifier_type();break;case 4:this.enterOuterAlt(t,4),this.state=81,this.match(d.OpenBrace),this.state=82,this.number(),this.state=83,this.match(d.CloseBrace),this.state=84,this.quantifier_type();break;case 5:this.enterOuterAlt(t,5),this.state=86,this.match(d.OpenBrace),this.state=87,this.number(),this.state=88,this.match(d.Comma),this.state=89,this.match(d.CloseBrace),this.state=90,this.quantifier_type();break;case 6:this.enterOuterAlt(t,6),this.state=92,this.match(d.OpenBrace),this.state=93,this.number(),this.state=94,this.match(d.Comma),this.state=95,this.number(),this.state=96,this.match(d.CloseBrace),this.state=97,this.quantifier_type()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}quantifier_type(){let t=new T(this._ctx,this.state);this.enterRule(t,10,d.RULE_quantifier_type);try{switch(this.state=104,this._errHandler.sync(this),this._input.LA(1)){case d.Plus:this.enterOuterAlt(t,1),this.state=101,this.match(d.Plus);break;case d.QuestionMark:this.enterOuterAlt(t,2),this.state=102,this.match(d.QuestionMark);break;case d.EOF:case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.ControlChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Dot:case d.DecimalDigit:case d.NotDecimalDigit:case d.CharWithProperty:case d.CharWithoutProperty:case d.WhiteSpace:case d.NotWhiteSpace:case d.WordChar:case d.NotWordChar:case d.CharacterClassStart:case d.CharacterClassEnd:case d.Caret:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.EndOfSubject:case d.Pipe:case d.OpenParen:case d.CloseParen:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,3);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}character_class(){let t,e=new _(this._ctx,this.state);this.enterRule(e,12,d.RULE_character_class);try{switch(this.state=123,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,7,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=106,this.match(d.CharacterClassStart),this.state=107,this.match(d.Caret),this.state=109,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=108,this.cc_atom(),this.state=111,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.CloseParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)));this.state=113,this.match(d.CharacterClassEnd);break;case 2:this.enterOuterAlt(e,2),this.state=115,this.match(d.CharacterClassStart),this.state=117,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=116,this.cc_atom(),this.state=119,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.CloseParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)));this.state=121,this.match(d.CharacterClassEnd)}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}capture(){let t=new E(this._ctx,this.state);this.enterRule(t,14,d.RULE_capture);try{switch(this.state=137,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,8,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=125,this.match(d.OpenParen),this.state=126,this.match(d.QuestionMark),this.state=127,this.match(d.LessThan),this.state=128,this.name(),this.state=129,this.match(d.GreaterThan),this.state=130,this.alternation(),this.state=131,this.match(d.CloseParen);break;case 2:this.enterOuterAlt(t,2),this.state=133,this.match(d.OpenParen),this.state=134,this.alternation(),this.state=135,this.match(d.CloseParen)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}non_capture(){let t=new b(this._ctx,this.state);this.enterRule(t,16,d.RULE_non_capture);try{this.enterOuterAlt(t,1),this.state=139,this.match(d.OpenParen),this.state=140,this.match(d.QuestionMark),this.state=141,this.match(d.Colon),this.state=142,this.alternation(),this.state=143,this.match(d.CloseParen)}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}option(){let t,e=new S(this._ctx,this.state);this.enterRule(e,18,d.RULE_option);try{this.enterOuterAlt(e,1),this.state=145,this.match(d.OpenParen),this.state=146,this.match(d.QuestionMark),this.state=148,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=147,this.option_flag(),this.state=150,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(t-52&-32)&&0!=(1<<t-52&(1<<d.ILC-52|1<<d.MLC-52|1<<d.SLC-52)));this.state=152,this.match(d.CloseParen)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}option_flag(){let t,e=new x(this._ctx,this.state);this.enterRule(e,20,d.RULE_option_flag);try{this.enterOuterAlt(e,1),this.state=154,0!=((t=this._input.LA(1))-52&-32)||0==(1<<t-52&(1<<d.ILC-52|1<<d.MLC-52|1<<d.SLC-52))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}atom(){let t=new C(this._ctx,this.state);this.enterRule(t,22,d.RULE_atom);try{switch(this.state=165,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,10,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=156,this.shared_atom();break;case 2:this.enterOuterAlt(t,2),this.state=157,this.literal();break;case 3:this.enterOuterAlt(t,3),this.state=158,this.character_class();break;case 4:this.enterOuterAlt(t,4),this.state=159,this.capture();break;case 5:this.enterOuterAlt(t,5),this.state=160,this.non_capture();break;case 6:this.enterOuterAlt(t,6),this.state=161,this.option();break;case 7:this.enterOuterAlt(t,7),this.state=162,this.match(d.Dot);break;case 8:this.enterOuterAlt(t,8),this.state=163,this.match(d.Caret);break;case 9:this.enterOuterAlt(t,9),this.state=164,this.match(d.EndOfSubject)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}cc_atom(){let t=new A(this._ctx,this.state);this.enterRule(t,24,d.RULE_cc_atom);try{switch(this.state=173,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,11,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=167,this.cc_literal(),this.state=168,this.match(d.Hyphen),this.state=169,this.cc_literal();break;case 2:this.enterOuterAlt(t,2),this.state=171,this.shared_atom();break;case 3:this.enterOuterAlt(t,3),this.state=172,this.cc_literal()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}shared_atom(){let t,e=new N(this._ctx,this.state);this.enterRule(e,26,d.RULE_shared_atom);try{this.enterOuterAlt(e,1),this.state=175,0!=(-32&(t=this._input.LA(1)))||0==(1<<t&(1<<d.ControlChar|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}literal(){let t=new O(this._ctx,this.state);this.enterRule(t,28,d.RULE_literal);try{switch(this.state=179,this._errHandler.sync(this),this._input.LA(1)){case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,1),this.state=177,this.shared_literal();break;case d.CharacterClassEnd:this.enterOuterAlt(t,2),this.state=178,this.match(d.CharacterClassEnd);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}cc_literal(){let t=new w(this._ctx,this.state);this.enterRule(t,30,d.RULE_cc_literal);try{switch(this.state=192,this._errHandler.sync(this),this._input.LA(1)){case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,1),this.state=181,this.shared_literal();break;case d.Dot:this.enterOuterAlt(t,2),this.state=182,this.match(d.Dot);break;case d.CharacterClassStart:this.enterOuterAlt(t,3),this.state=183,this.match(d.CharacterClassStart);break;case d.Caret:this.enterOuterAlt(t,4),this.state=184,this.match(d.Caret);break;case d.QuestionMark:this.enterOuterAlt(t,5),this.state=185,this.match(d.QuestionMark);break;case d.Plus:this.enterOuterAlt(t,6),this.state=186,this.match(d.Plus);break;case d.Star:this.enterOuterAlt(t,7),this.state=187,this.match(d.Star);break;case d.EndOfSubject:this.enterOuterAlt(t,8),this.state=188,this.match(d.EndOfSubject);break;case d.Pipe:this.enterOuterAlt(t,9),this.state=189,this.match(d.Pipe);break;case d.OpenParen:this.enterOuterAlt(t,10),this.state=190,this.match(d.OpenParen);break;case d.CloseParen:this.enterOuterAlt(t,11),this.state=191,this.match(d.CloseParen);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}shared_literal(){let t=new R(this._ctx,this.state);this.enterRule(t,32,d.RULE_shared_literal);try{switch(this.state=220,this._errHandler.sync(this),this._input.LA(1)){case d.Backslash:this.enterOuterAlt(t,1),this.state=194,this.octal_char();break;case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.enterOuterAlt(t,2),this.state=195,this.letter();break;case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:this.enterOuterAlt(t,3),this.state=196,this.digit();break;case d.BellChar:this.enterOuterAlt(t,4),this.state=197,this.match(d.BellChar);break;case d.EscapeChar:this.enterOuterAlt(t,5),this.state=198,this.match(d.EscapeChar);break;case d.FormFeed:this.enterOuterAlt(t,6),this.state=199,this.match(d.FormFeed);break;case d.NewLine:this.enterOuterAlt(t,7),this.state=200,this.match(d.NewLine);break;case d.CarriageReturn:this.enterOuterAlt(t,8),this.state=201,this.match(d.CarriageReturn);break;case d.Tab:this.enterOuterAlt(t,9),this.state=202,this.match(d.Tab);break;case d.HexChar:this.enterOuterAlt(t,10),this.state=203,this.match(d.HexChar);break;case d.Quoted:this.enterOuterAlt(t,11),this.state=204,this.match(d.Quoted);break;case d.BlockQuoted:this.enterOuterAlt(t,12),this.state=205,this.match(d.BlockQuoted);break;case d.OpenBrace:this.enterOuterAlt(t,13),this.state=206,this.match(d.OpenBrace);break;case d.CloseBrace:this.enterOuterAlt(t,14),this.state=207,this.match(d.CloseBrace);break;case d.Comma:this.enterOuterAlt(t,15),this.state=208,this.match(d.Comma);break;case d.Hyphen:this.enterOuterAlt(t,16),this.state=209,this.match(d.Hyphen);break;case d.LessThan:this.enterOuterAlt(t,17),this.state=210,this.match(d.LessThan);break;case d.GreaterThan:this.enterOuterAlt(t,18),this.state=211,this.match(d.GreaterThan);break;case d.SingleQuote:this.enterOuterAlt(t,19),this.state=212,this.match(d.SingleQuote);break;case d.Underscore:this.enterOuterAlt(t,20),this.state=213,this.match(d.Underscore);break;case d.Colon:this.enterOuterAlt(t,21),this.state=214,this.match(d.Colon);break;case d.Hash:this.enterOuterAlt(t,22),this.state=215,this.match(d.Hash);break;case d.Equals:this.enterOuterAlt(t,23),this.state=216,this.match(d.Equals);break;case d.Exclamation:this.enterOuterAlt(t,24),this.state=217,this.match(d.Exclamation);break;case d.Ampersand:this.enterOuterAlt(t,25),this.state=218,this.match(d.Ampersand);break;case d.OtherChar:this.enterOuterAlt(t,26),this.state=219,this.match(d.OtherChar);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}number(){let t=new L(this._ctx,this.state);this.enterRule(t,34,d.RULE_number);try{this.enterOuterAlt(t,1),this.state=222,this.digits()}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}octal_char(){let t,e=new P(this._ctx,this.state);this.enterRule(e,36,d.RULE_octal_char);try{switch(this.enterOuterAlt(e,1),this.state=233,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,15,this._ctx)){case 1:this.state=224,this.match(d.Backslash),this.state=225,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=226,this.octal_digit(),this.state=227,this.octal_digit();break;case 2:this.state=229,this.match(d.Backslash),this.state=230,this.octal_digit(),this.state=231,this.octal_digit()}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}octal_digit(){let t,e=new I(this._ctx,this.state);this.enterRule(e,38,d.RULE_octal_digit);try{this.enterOuterAlt(e,1),this.state=235,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}digits(){let t,e=new D(this._ctx,this.state);this.enterRule(e,40,d.RULE_digits);try{this.enterOuterAlt(e,1),this.state=238,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=237,this.digit(),this.state=240,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96)))}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}digit(){let t,e=new U(this._ctx,this.state);this.enterRule(e,42,d.RULE_digit);try{this.enterOuterAlt(e,1),this.state=242,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}name(){let t=new M(this._ctx,this.state);this.enterRule(t,44,d.RULE_name);try{this.enterOuterAlt(t,1),this.state=244,this.alpha_nums()}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}alpha_nums(){let t,e=new k(this._ctx,this.state);this.enterRule(e,46,d.RULE_alpha_nums);try{switch(this.enterOuterAlt(e,1),this.state=248,this._errHandler.sync(this),this._input.LA(1)){case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.state=246,this.letter();break;case d.Underscore:this.state=247,this.match(d.Underscore);break;default:throw new o.NoViableAltException(this)}for(this.state=255,this._errHandler.sync(this),t=this._input.LA(1);0==(t-38&-32)&&0!=(1<<t-38&(1<<d.Underscore-38|1<<d.ALC-38|1<<d.BLC-38|1<<d.CLC-38|1<<d.DLC-38|1<<d.ELC-38|1<<d.FLC-38|1<<d.GLC-38|1<<d.HLC-38|1<<d.ILC-38|1<<d.JLC-38|1<<d.KLC-38|1<<d.LLC-38|1<<d.MLC-38|1<<d.NLC-38|1<<d.OLC-38|1<<d.PLC-38|1<<d.QLC-38|1<<d.RLC-38|1<<d.SLC-38|1<<d.TLC-38|1<<d.ULC-38|1<<d.VLC-38|1<<d.WLC-38|1<<d.XLC-38|1<<d.YLC-38|1<<d.ZLC-38))||0==(t-70&-32)&&0!=(1<<t-70&(1<<d.AUC-70|1<<d.BUC-70|1<<d.CUC-70|1<<d.DUC-70|1<<d.EUC-70|1<<d.FUC-70|1<<d.GUC-70|1<<d.HUC-70|1<<d.IUC-70|1<<d.JUC-70|1<<d.KUC-70|1<<d.LUC-70|1<<d.MUC-70|1<<d.NUC-70|1<<d.OUC-70|1<<d.PUC-70|1<<d.QUC-70|1<<d.RUC-70|1<<d.SUC-70|1<<d.TUC-70|1<<d.UUC-70|1<<d.VUC-70|1<<d.WUC-70|1<<d.XUC-70|1<<d.YUC-70|1<<d.ZUC-70|1<<d.D1-70|1<<d.D2-70|1<<d.D3-70|1<<d.D4-70|1<<d.D5-70|1<<d.D6-70))||0==(t-102&-32)&&0!=(1<<t-102&(1<<d.D7-102|1<<d.D8-102|1<<d.D9-102|1<<d.D0-102));){switch(this.state=253,this._errHandler.sync(this),this._input.LA(1)){case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.state=250,this.letter();break;case d.Underscore:this.state=251,this.match(d.Underscore);break;case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:this.state=252,this.digit();break;default:throw new o.NoViableAltException(this)}this.state=257,this._errHandler.sync(this),t=this._input.LA(1)}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}non_close_parens(){let t,e=new F(this._ctx,this.state);this.enterRule(e,48,d.RULE_non_close_parens);try{this.enterOuterAlt(e,1),this.state=259,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=258,this.non_close_paren(),this.state=261,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.CharacterClassEnd|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)))}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}non_close_paren(){let t,e=new j(this._ctx,this.state);this.enterRule(e,50,d.RULE_non_close_paren);try{this.enterOuterAlt(e,1),this.state=263,(t=this._input.LA(1))<=0||t===d.CloseParen?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}letter(){let t,e=new B(this._ctx,this.state);this.enterRule(e,52,d.RULE_letter);try{this.enterOuterAlt(e,1),this.state=265,0==((t=this._input.LA(1))-44&-32)&&0!=(1<<t-44&(1<<d.ALC-44|1<<d.BLC-44|1<<d.CLC-44|1<<d.DLC-44|1<<d.ELC-44|1<<d.FLC-44|1<<d.GLC-44|1<<d.HLC-44|1<<d.ILC-44|1<<d.JLC-44|1<<d.KLC-44|1<<d.LLC-44|1<<d.MLC-44|1<<d.NLC-44|1<<d.OLC-44|1<<d.PLC-44|1<<d.QLC-44|1<<d.RLC-44|1<<d.SLC-44|1<<d.TLC-44|1<<d.ULC-44|1<<d.VLC-44|1<<d.WLC-44|1<<d.XLC-44|1<<d.YLC-44|1<<d.ZLC-44|1<<d.AUC-44|1<<d.BUC-44|1<<d.CUC-44|1<<d.DUC-44|1<<d.EUC-44|1<<d.FUC-44))||0==(t-76&-32)&&0!=(1<<t-76&(1<<d.GUC-76|1<<d.HUC-76|1<<d.IUC-76|1<<d.JUC-76|1<<d.KUC-76|1<<d.LUC-76|1<<d.MUC-76|1<<d.NUC-76|1<<d.OUC-76|1<<d.PUC-76|1<<d.QUC-76|1<<d.RUC-76|1<<d.SUC-76|1<<d.TUC-76|1<<d.UUC-76|1<<d.VUC-76|1<<d.WUC-76|1<<d.XUC-76|1<<d.YUC-76|1<<d.ZUC-76))?(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()):this._errHandler.recoverInline(this)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}static get _ATN(){return d.__ATN||(d.__ATN=(new i.ATNDeserializer).deserialize(p.toCharArray(d._serializedATN))),d.__ATN}}d.Quoted=1,d.BlockQuoted=2,d.BellChar=3,d.ControlChar=4,d.EscapeChar=5,d.FormFeed=6,d.NewLine=7,d.CarriageReturn=8,d.Tab=9,d.Backslash=10,d.HexChar=11,d.Dot=12,d.DecimalDigit=13,d.NotDecimalDigit=14,d.CharWithProperty=15,d.CharWithoutProperty=16,d.WhiteSpace=17,d.NotWhiteSpace=18,d.WordChar=19,d.NotWordChar=20,d.CharacterClassStart=21,d.CharacterClassEnd=22,d.Caret=23,d.Hyphen=24,d.QuestionMark=25,d.Plus=26,d.Star=27,d.OpenBrace=28,d.CloseBrace=29,d.Comma=30,d.EndOfSubject=31,d.Pipe=32,d.OpenParen=33,d.CloseParen=34,d.LessThan=35,d.GreaterThan=36,d.SingleQuote=37,d.Underscore=38,d.Colon=39,d.Hash=40,d.Equals=41,d.Exclamation=42,d.Ampersand=43,d.ALC=44,d.BLC=45,d.CLC=46,d.DLC=47,d.ELC=48,d.FLC=49,d.GLC=50,d.HLC=51,d.ILC=52,d.JLC=53,d.KLC=54,d.LLC=55,d.MLC=56,d.NLC=57,d.OLC=58,d.PLC=59,d.QLC=60,d.RLC=61,d.SLC=62,d.TLC=63,d.ULC=64,d.VLC=65,d.WLC=66,d.XLC=67,d.YLC=68,d.ZLC=69,d.AUC=70,d.BUC=71,d.CUC=72,d.DUC=73,d.EUC=74,d.FUC=75,d.GUC=76,d.HUC=77,d.IUC=78,d.JUC=79,d.KUC=80,d.LUC=81,d.MUC=82,d.NUC=83,d.OUC=84,d.PUC=85,d.QUC=86,d.RUC=87,d.SUC=88,d.TUC=89,d.UUC=90,d.VUC=91,d.WUC=92,d.XUC=93,d.YUC=94,d.ZUC=95,d.D1=96,d.D2=97,d.D3=98,d.D4=99,d.D5=100,d.D6=101,d.D7=102,d.D8=103,d.D9=104,d.D0=105,d.OtherChar=106,d.RULE_parse=0,d.RULE_alternation=1,d.RULE_expr=2,d.RULE_element=3,d.RULE_quantifier=4,d.RULE_quantifier_type=5,d.RULE_character_class=6,d.RULE_capture=7,d.RULE_non_capture=8,d.RULE_option=9,d.RULE_option_flag=10,d.RULE_atom=11,d.RULE_cc_atom=12,d.RULE_shared_atom=13,d.RULE_literal=14,d.RULE_cc_literal=15,d.RULE_shared_literal=16,d.RULE_number=17,d.RULE_octal_char=18,d.RULE_octal_digit=19,d.RULE_digits=20,d.RULE_digit=21,d.RULE_name=22,d.RULE_alpha_nums=23,d.RULE_non_close_parens=24,d.RULE_non_close_paren=25,d.RULE_letter=26,d.ruleNames=["parse","alternation","expr","element","quantifier","quantifier_type","character_class","capture","non_capture","option","option_flag","atom","cc_atom","shared_atom","literal","cc_literal","shared_literal","number","octal_char","octal_digit","digits","digit","name","alpha_nums","non_close_parens","non_close_paren","letter"],d._LITERAL_NAMES=[void 0,void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'",void 0,"'.'","'\\'","'\\'",void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'['","']'","'^'","'-'","'?'","'+'","'*'","'{'","'}'","','","'$'","'|'","'('","')'","'<'","'>'","'''","'_'","':'","'#'","'='","'!'","'&'","'a'","'b'","'c'","'d'","'e'","'f'","'g'","'h'","'i'","'j'","'k'","'l'","'m'","'n'","'o'","'p'","'q'","'r'","'s'","'t'","'u'","'v'","'w'","'x'","'y'","'z'","'A'","'B'","'C'","'D'","'E'","'F'","'G'","'H'","'I'","'J'","'K'","'L'","'M'","'N'","'O'","'P'","'Q'","'R'","'S'","'T'","'U'","'V'","'W'","'X'","'Y'","'Z'","'1'","'2'","'3'","'4'","'5'","'6'","'7'","'8'","'9'","'0'"],d._SYMBOLIC_NAMES=[void 0,"Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar"],d.VOCABULARY=new h.VocabularyImpl(d._LITERAL_NAMES,d._SYMBOLIC_NAMES,[]),d._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x03l\u010e\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x07\x03?\n\x03\f\x03\x0e\x03B\v\x03\x03\x04\x07\x04E\n\x04\f\x04\x0e\x04H\v\x04\x03\x05\x03\x05\x05\x05L\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06f\n\x06\x03\x07\x03\x07\x03\x07\x05\x07k\n\x07\x03\b\x03\b\x03\b\x06\bp\n\b\r\b\x0e\bq\x03\b\x03\b\x03\b\x03\b\x06\bx\n\b\r\b\x0e\by\x03\b\x03\b\x05\b~\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\x8c\n\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x06\v\x97\n\v\r\v\x0e\v\x98\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\xa8\n\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x05\x0e\xb0\n\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x05\x10\xb6\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\xc3\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\xdf\n\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\xec\n\x14\x03\x15\x03\x15\x03\x16\x06\x16\xf1\n\x16\r\x16\x0e\x16\xf2\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x05\x19\xfb\n\x19\x03\x19\x03\x19\x03\x19\x07\x19\u0100\n\x19\f\x19\x0e\x19\u0103\v\x19\x03\x1a\x06\x1a\u0106\n\x1a\r\x1a\x0e\x1a\u0107\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x02\x02\x02\x1d\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0e\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1a\x02\x1c\x02\x1e\x02 \x02"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x02\x02\t\x05\x0266::@@\x04\x02\x06\x06\x0f\x16\x04\x02bdkk\x04\x02bhkk\x03\x02bk\x03\x02$$\x03\x02.a\x02\u0136\x028\x03\x02\x02\x02\x04;\x03\x02\x02\x02\x06F\x03\x02\x02\x02\bI\x03\x02\x02\x02\ne\x03\x02\x02\x02\fj\x03\x02\x02\x02\x0e}\x03\x02\x02\x02\x10\x8b\x03\x02\x02\x02\x12\x8d\x03\x02\x02\x02\x14\x93\x03\x02\x02\x02\x16\x9c\x03\x02\x02\x02\x18\xa7\x03\x02\x02\x02\x1a\xaf\x03\x02\x02\x02\x1c\xb1\x03\x02\x02\x02\x1e\xb5\x03\x02\x02\x02 \xc2\x03\x02\x02\x02"\xde\x03\x02\x02\x02$\xe0\x03\x02\x02\x02&\xeb\x03\x02\x02\x02(\xed\x03\x02\x02\x02*\xf0\x03\x02\x02\x02,\xf4\x03\x02\x02\x02.\xf6\x03\x02\x02\x020\xfa\x03\x02\x02\x022\u0105\x03\x02\x02\x024\u0109\x03\x02\x02\x026\u010b\x03\x02\x02\x0289\x05\x04\x03\x029:\x07\x02\x02\x03:\x03\x03\x02\x02\x02;@\x05\x06\x04\x02<=\x07"\x02\x02=?\x05\x06\x04\x02><\x03\x02\x02\x02?B\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02A\x05\x03\x02\x02\x02B@\x03\x02\x02\x02CE\x05\b\x05\x02DC\x03\x02\x02\x02EH\x03\x02\x02\x02FD\x03\x02\x02\x02FG\x03\x02\x02\x02G\x07\x03\x02\x02\x02HF\x03\x02\x02\x02IK\x05\x18\r\x02JL\x05\n\x06\x02KJ\x03\x02\x02\x02KL\x03\x02\x02\x02L\t\x03\x02\x02\x02MN\x07\x1b\x02\x02Nf\x05\f\x07\x02OP\x07\x1c\x02\x02Pf\x05\f\x07\x02QR\x07\x1d\x02\x02Rf\x05\f\x07\x02ST\x07\x1e\x02\x02TU\x05$\x13\x02UV\x07\x1f\x02\x02VW\x05\f\x07\x02Wf\x03\x02\x02\x02XY\x07\x1e\x02\x02YZ\x05$\x13\x02Z[\x07 \x02\x02[\\\x07\x1f\x02\x02\\]\x05\f\x07\x02]f\x03\x02\x02\x02^_\x07\x1e\x02\x02_`\x05$\x13\x02`a\x07 \x02\x02ab\x05$\x13\x02bc\x07\x1f\x02\x02cd\x05\f\x07\x02df\x03\x02\x02\x02eM\x03\x02\x02\x02eO\x03\x02\x02\x02eQ\x03\x02\x02\x02eS\x03\x02\x02\x02eX\x03\x02\x02\x02e^\x03\x02\x02\x02f\v\x03\x02\x02\x02gk\x07\x1c\x02\x02hk\x07\x1b\x02\x02ik\x03\x02\x02\x02jg\x03\x02\x02\x02jh\x03\x02\x02\x02ji\x03\x02\x02\x02k\r\x03\x02\x02\x02lm\x07\x17\x02\x02mo\x07\x19\x02\x02np\x05\x1a\x0e\x02on\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02st\x07\x18\x02\x02t~\x03\x02\x02\x02uw\x07\x17\x02\x02vx\x05\x1a\x0e\x02wv\x03\x02\x02\x02xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02\x02{|\x07\x18\x02\x02|~\x03\x02\x02\x02}l\x03\x02\x02\x02}u\x03\x02\x02\x02~\x0f\x03\x02\x02\x02\x7f\x80\x07#\x02\x02\x80\x81\x07\x1b\x02\x02\x81\x82\x07%\x02\x02\x82\x83\x05.\x18\x02\x83\x84\x07&\x02\x02\x84\x85\x05\x04\x03\x02\x85\x86\x07$\x02\x02\x86\x8c\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88\x89\x05\x04\x03\x02\x89\x8a\x07$\x02\x02\x8a\x8c\x03\x02\x02\x02\x8b\x7f\x03\x02\x02\x02\x8b\x87\x03\x02\x02\x02\x8c\x11\x03\x02\x02\x02\x8d\x8e\x07#\x02\x02\x8e\x8f\x07\x1b\x02\x02\x8f\x90\x07)\x02\x02\x90\x91\x05\x04\x03\x02\x91\x92\x07$\x02\x02\x92\x13\x03\x02\x02\x02\x93\x94\x07#\x02\x02\x94\x96\x07\x1b\x02\x02\x95\x97\x05\x16\f\x02\x96\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99\x9a\x03\x02\x02\x02\x9a\x9b\x07$\x02\x02\x9b\x15\x03\x02\x02\x02\x9c\x9d\t\x02\x02\x02\x9d\x17\x03\x02\x02\x02\x9e\xa8\x05\x1c\x0f\x02\x9f\xa8\x05\x1e\x10\x02\xa0\xa8\x05\x0e\b\x02\xa1\xa8\x05\x10\t\x02\xa2\xa8\x05\x12\n\x02\xa3\xa8\x05\x14\v\x02\xa4\xa8\x07\x0e\x02\x02\xa5\xa8\x07\x19\x02\x02\xa6\xa8\x07!\x02\x02\xa7\x9e\x03\x02\x02\x02\xa7\x9f\x03\x02\x02\x02\xa7\xa0\x03\x02\x02\x02\xa7\xa1\x03\x02\x02\x02\xa7\xa2\x03\x02\x02\x02\xa7\xa3\x03\x02\x02\x02\xa7\xa4\x03\x02\x02\x02\xa7\xa5\x03\x02\x02\x02\xa7\xa6\x03\x02\x02\x02\xa8\x19\x03\x02\x02\x02\xa9\xaa\x05 \x11\x02\xaa\xab\x07\x1a\x02\x02\xab\xac\x05 \x11\x02\xac\xb0\x03\x02\x02\x02\xad\xb0\x05\x1c\x0f\x02\xae\xb0\x05 \x11\x02\xaf\xa9\x03\x02\x02\x02\xaf\xad\x03\x02\x02\x02\xaf\xae\x03\x02\x02\x02\xb0\x1b\x03\x02\x02\x02\xb1\xb2\t\x03\x02\x02\xb2\x1d\x03\x02\x02\x02\xb3\xb6\x05"\x12\x02\xb4\xb6\x07\x18\x02\x02\xb5\xb3\x03\x02\x02\x02\xb5\xb4\x03\x02\x02\x02\xb6\x1f\x03\x02\x02\x02\xb7\xc3\x05"\x12\x02\xb8\xc3\x07\x0e\x02\x02\xb9\xc3\x07\x17\x02\x02\xba\xc3\x07\x19\x02\x02\xbb\xc3\x07\x1b\x02\x02\xbc\xc3\x07\x1c\x02\x02\xbd\xc3\x07\x1d\x02\x02\xbe\xc3\x07!\x02\x02\xbf\xc3\x07"\x02\x02\xc0\xc3\x07#\x02\x02\xc1\xc3\x07$\x02\x02\xc2\xb7\x03\x02\x02\x02\xc2\xb8\x03\x02\x02\x02\xc2\xb9\x03\x02\x02\x02\xc2\xba\x03\x02\x02\x02\xc2\xbb\x03\x02\x02\x02\xc2\xbc\x03\x02\x02\x02\xc2\xbd\x03\x02\x02\x02\xc2\xbe\x03\x02\x02\x02\xc2\xbf\x03\x02\x02\x02\xc2\xc0\x03\x02\x02\x02\xc2\xc1\x03\x02\x02\x02\xc3!\x03\x02\x02\x02\xc4\xdf\x05&\x14\x02\xc5\xdf\x056\x1c\x02\xc6\xdf\x05,\x17\x02\xc7\xdf\x07\x05\x02\x02\xc8\xdf\x07\x07\x02\x02\xc9\xdf\x07\b\x02\x02\xca\xdf\x07\t\x02\x02\xcb\xdf\x07\n\x02\x02\xcc\xdf\x07\v\x02\x02\xcd\xdf\x07\r\x02\x02\xce\xdf\x07\x03\x02\x02\xcf\xdf\x07\x04\x02\x02\xd0\xdf\x07\x1e\x02\x02\xd1\xdf\x07\x1f\x02\x02\xd2\xdf\x07 \x02\x02\xd3\xdf\x07\x1a\x02\x02\xd4\xdf\x07%\x02\x02\xd5\xdf\x07&\x02\x02\xd6\xdf\x07\'\x02\x02\xd7\xdf\x07(\x02\x02\xd8\xdf\x07)\x02\x02\xd9\xdf\x07*\x02\x02\xda\xdf\x07+\x02\x02\xdb\xdf\x07,\x02\x02\xdc\xdf\x07-\x02\x02\xdd\xdf\x07l\x02\x02\xde\xc4\x03\x02\x02\x02\xde\xc5\x03\x02\x02\x02\xde\xc6\x03\x02\x02\x02\xde\xc7\x03\x02\x02\x02\xde\xc8\x03\x02\x02\x02\xde\xc9\x03\x02\x02\x02\xde\xca\x03\x02\x02\x02\xde\xcb\x03\x02\x02\x02\xde\xcc\x03\x02\x02\x02\xde\xcd\x03\x02\x02\x02\xde\xce\x03\x02\x02\x02\xde\xcf\x03\x02\x02\x02\xde\xd0\x03\x02\x02\x02\xde\xd1\x03\x02\x02\x02\xde\xd2\x03\x02\x02\x02\xde\xd3\x03\x02\x02\x02\xde\xd4\x03\x02\x02\x02\xde\xd5\x03\x02\x02\x02\xde\xd6\x03\x02\x02\x02\xde\xd7\x03\x02\x02\x02\xde\xd8\x03\x02\x02\x02\xde\xd9\x03\x02\x02\x02\xde\xda\x03\x02\x02\x02\xde\xdb\x03\x02\x02\x02\xde\xdc\x03\x02\x02\x02\xde\xdd\x03\x02\x02\x02\xdf#\x03\x02\x02\x02\xe0\xe1\x05*\x16\x02\xe1%\x03\x02\x02\x02\xe2\xe3\x07\f\x02\x02\xe3\xe4\t\x04\x02\x02\xe4\xe5\x05(\x15\x02\xe5\xe6\x05(\x15\x02\xe6\xec\x03\x02\x02\x02\xe7\xe8\x07\f\x02\x02\xe8\xe9\x05(\x15\x02\xe9\xea\x05(\x15\x02\xea\xec\x03\x02\x02\x02\xeb\xe2\x03\x02\x02\x02\xeb\xe7\x03\x02\x02\x02\xec\'\x03\x02\x02\x02\xed\xee\t\x05\x02\x02\xee)\x03\x02\x02\x02\xef\xf1\x05,\x17\x02\xf0\xef\x03\x02\x02\x02\xf1\xf2\x03\x02\x02\x02\xf2\xf0\x03\x02\x02\x02\xf2\xf3\x03\x02\x02\x02\xf3+\x03\x02\x02\x02\xf4\xf5\t\x06\x02\x02\xf5-\x03\x02\x02\x02\xf6\xf7\x050\x19\x02\xf7/\x03\x02\x02\x02\xf8\xfb\x056\x1c\x02\xf9\xfb\x07(\x02\x02\xfa\xf8\x03\x02\x02\x02\xfa\xf9\x03\x02\x02\x02\xfb\u0101\x03\x02\x02\x02\xfc\u0100\x056\x1c\x02\xfd\u0100\x07(\x02\x02\xfe\u0100\x05,\x17\x02\xff\xfc\x03\x02\x02\x02\xff\xfd\x03\x02\x02\x02\xff\xfe\x03\x02\x02\x02\u0100\u0103\x03\x02\x02\x02\u0101\xff\x03\x02\x02\x02\u0101\u0102\x03\x02\x02\x02\u01021\x03\x02\x02\x02\u0103\u0101\x03\x02\x02\x02\u0104\u0106\x054\x1b\x02\u0105\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u01083\x03\x02\x02\x02\u0109\u010a\n\x07\x02\x02\u010a5\x03\x02\x02\x02\u010b\u010c\t\b\x02\x02\u010c7\x03\x02\x02\x02\x17@FKejqy}\x8b\x98\xa7\xaf\xb5\xc2\xde\xeb\xf2\xfa\xff\u0101\u0107',r.CommonRegexParser=d;class f extends a.ParserRuleContext{alternation(){return this.getRuleContext(0,y)}EOF(){return this.getToken(d.EOF,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_parse}enterRule(t){t.enterParse&&t.enterParse(this)}exitRule(t){t.exitParse&&t.exitParse(this)}accept(t){return t.visitParse?t.visitParse(this):t.visitChildren(this)}}r.ParseContext=f;class y extends a.ParserRuleContext{expr(t){return void 0===t?this.getRuleContexts(m):this.getRuleContext(t,m)}Pipe(t){return void 0===t?this.getTokens(d.Pipe):this.getToken(d.Pipe,t)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_alternation}enterRule(t){t.enterAlternation&&t.enterAlternation(this)}exitRule(t){t.exitAlternation&&t.exitAlternation(this)}accept(t){return t.visitAlternation?t.visitAlternation(this):t.visitChildren(this)}}r.AlternationContext=y;class m extends a.ParserRuleContext{element(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_expr}enterRule(t){t.enterExpr&&t.enterExpr(this)}exitRule(t){t.exitExpr&&t.exitExpr(this)}accept(t){return t.visitExpr?t.visitExpr(this):t.visitChildren(this)}}r.ExprContext=m;class g extends a.ParserRuleContext{atom(){return this.getRuleContext(0,C)}quantifier(){return this.tryGetRuleContext(0,v)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_element}enterRule(t){t.enterElement&&t.enterElement(this)}exitRule(t){t.exitElement&&t.exitElement(this)}accept(t){return t.visitElement?t.visitElement(this):t.visitChildren(this)}}r.ElementContext=g;class v extends a.ParserRuleContext{QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}quantifier_type(){return this.getRuleContext(0,T)}Plus(){return this.tryGetToken(d.Plus,0)}Star(){return this.tryGetToken(d.Star,0)}OpenBrace(){return this.tryGetToken(d.OpenBrace,0)}number(t){return void 0===t?this.getRuleContexts(L):this.getRuleContext(t,L)}CloseBrace(){return this.tryGetToken(d.CloseBrace,0)}Comma(){return this.tryGetToken(d.Comma,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_quantifier}enterRule(t){t.enterQuantifier&&t.enterQuantifier(this)}exitRule(t){t.exitQuantifier&&t.exitQuantifier(this)}accept(t){return t.visitQuantifier?t.visitQuantifier(this):t.visitChildren(this)}}r.QuantifierContext=v;class T extends a.ParserRuleContext{Plus(){return this.tryGetToken(d.Plus,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_quantifier_type}enterRule(t){t.enterQuantifier_type&&t.enterQuantifier_type(this)}exitRule(t){t.exitQuantifier_type&&t.exitQuantifier_type(this)}accept(t){return t.visitQuantifier_type?t.visitQuantifier_type(this):t.visitChildren(this)}}r.Quantifier_typeContext=T;class _ extends a.ParserRuleContext{CharacterClassStart(){return this.getToken(d.CharacterClassStart,0)}Caret(){return this.tryGetToken(d.Caret,0)}CharacterClassEnd(){return this.getToken(d.CharacterClassEnd,0)}cc_atom(t){return void 0===t?this.getRuleContexts(A):this.getRuleContext(t,A)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_character_class}enterRule(t){t.enterCharacter_class&&t.enterCharacter_class(this)}exitRule(t){t.exitCharacter_class&&t.exitCharacter_class(this)}accept(t){return t.visitCharacter_class?t.visitCharacter_class(this):t.visitChildren(this)}}r.Character_classContext=_;class E extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}LessThan(){return this.tryGetToken(d.LessThan,0)}name(){return this.tryGetRuleContext(0,M)}GreaterThan(){return this.tryGetToken(d.GreaterThan,0)}alternation(){return this.getRuleContext(0,y)}CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_capture}enterRule(t){t.enterCapture&&t.enterCapture(this)}exitRule(t){t.exitCapture&&t.exitCapture(this)}accept(t){return t.visitCapture?t.visitCapture(this):t.visitChildren(this)}}r.CaptureContext=E;class b extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.getToken(d.QuestionMark,0)}Colon(){return this.getToken(d.Colon,0)}alternation(){return this.getRuleContext(0,y)}CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_capture}enterRule(t){t.enterNon_capture&&t.enterNon_capture(this)}exitRule(t){t.exitNon_capture&&t.exitNon_capture(this)}accept(t){return t.visitNon_capture?t.visitNon_capture(this):t.visitChildren(this)}}r.Non_captureContext=b;class S extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.getToken(d.QuestionMark,0)}CloseParen(){return this.getToken(d.CloseParen,0)}option_flag(t){return void 0===t?this.getRuleContexts(x):this.getRuleContext(t,x)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_option}enterRule(t){t.enterOption&&t.enterOption(this)}exitRule(t){t.exitOption&&t.exitOption(this)}accept(t){return t.visitOption?t.visitOption(this):t.visitChildren(this)}}r.OptionContext=S;class x extends a.ParserRuleContext{ILC(){return this.tryGetToken(d.ILC,0)}MLC(){return this.tryGetToken(d.MLC,0)}SLC(){return this.tryGetToken(d.SLC,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_option_flag}enterRule(t){t.enterOption_flag&&t.enterOption_flag(this)}exitRule(t){t.exitOption_flag&&t.exitOption_flag(this)}accept(t){return t.visitOption_flag?t.visitOption_flag(this):t.visitChildren(this)}}r.Option_flagContext=x;class C extends a.ParserRuleContext{shared_atom(){return this.tryGetRuleContext(0,N)}literal(){return this.tryGetRuleContext(0,O)}character_class(){return this.tryGetRuleContext(0,_)}capture(){return this.tryGetRuleContext(0,E)}non_capture(){return this.tryGetRuleContext(0,b)}option(){return this.tryGetRuleContext(0,S)}Dot(){return this.tryGetToken(d.Dot,0)}Caret(){return this.tryGetToken(d.Caret,0)}EndOfSubject(){return this.tryGetToken(d.EndOfSubject,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_atom}enterRule(t){t.enterAtom&&t.enterAtom(this)}exitRule(t){t.exitAtom&&t.exitAtom(this)}accept(t){return t.visitAtom?t.visitAtom(this):t.visitChildren(this)}}r.AtomContext=C;class A extends a.ParserRuleContext{cc_literal(t){return void 0===t?this.getRuleContexts(w):this.getRuleContext(t,w)}Hyphen(){return this.tryGetToken(d.Hyphen,0)}shared_atom(){return this.tryGetRuleContext(0,N)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_cc_atom}enterRule(t){t.enterCc_atom&&t.enterCc_atom(this)}exitRule(t){t.exitCc_atom&&t.exitCc_atom(this)}accept(t){return t.visitCc_atom?t.visitCc_atom(this):t.visitChildren(this)}}r.Cc_atomContext=A;class N extends a.ParserRuleContext{ControlChar(){return this.tryGetToken(d.ControlChar,0)}DecimalDigit(){return this.tryGetToken(d.DecimalDigit,0)}NotDecimalDigit(){return this.tryGetToken(d.NotDecimalDigit,0)}CharWithProperty(){return this.tryGetToken(d.CharWithProperty,0)}CharWithoutProperty(){return this.tryGetToken(d.CharWithoutProperty,0)}WhiteSpace(){return this.tryGetToken(d.WhiteSpace,0)}NotWhiteSpace(){return this.tryGetToken(d.NotWhiteSpace,0)}WordChar(){return this.tryGetToken(d.WordChar,0)}NotWordChar(){return this.tryGetToken(d.NotWordChar,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_shared_atom}enterRule(t){t.enterShared_atom&&t.enterShared_atom(this)}exitRule(t){t.exitShared_atom&&t.exitShared_atom(this)}accept(t){return t.visitShared_atom?t.visitShared_atom(this):t.visitChildren(this)}}r.Shared_atomContext=N;class O extends a.ParserRuleContext{shared_literal(){return this.tryGetRuleContext(0,R)}CharacterClassEnd(){return this.tryGetToken(d.CharacterClassEnd,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_literal}enterRule(t){t.enterLiteral&&t.enterLiteral(this)}exitRule(t){t.exitLiteral&&t.exitLiteral(this)}accept(t){return t.visitLiteral?t.visitLiteral(this):t.visitChildren(this)}}r.LiteralContext=O;class w extends a.ParserRuleContext{shared_literal(){return this.tryGetRuleContext(0,R)}Dot(){return this.tryGetToken(d.Dot,0)}CharacterClassStart(){return this.tryGetToken(d.CharacterClassStart,0)}Caret(){return this.tryGetToken(d.Caret,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}Plus(){return this.tryGetToken(d.Plus,0)}Star(){return this.tryGetToken(d.Star,0)}EndOfSubject(){return this.tryGetToken(d.EndOfSubject,0)}Pipe(){return this.tryGetToken(d.Pipe,0)}OpenParen(){return this.tryGetToken(d.OpenParen,0)}CloseParen(){return this.tryGetToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_cc_literal}enterRule(t){t.enterCc_literal&&t.enterCc_literal(this)}exitRule(t){t.exitCc_literal&&t.exitCc_literal(this)}accept(t){return t.visitCc_literal?t.visitCc_literal(this):t.visitChildren(this)}}r.Cc_literalContext=w;class R extends a.ParserRuleContext{octal_char(){return this.tryGetRuleContext(0,P)}letter(){return this.tryGetRuleContext(0,B)}digit(){return this.tryGetRuleContext(0,U)}BellChar(){return this.tryGetToken(d.BellChar,0)}EscapeChar(){return this.tryGetToken(d.EscapeChar,0)}FormFeed(){return this.tryGetToken(d.FormFeed,0)}NewLine(){return this.tryGetToken(d.NewLine,0)}CarriageReturn(){return this.tryGetToken(d.CarriageReturn,0)}Tab(){return this.tryGetToken(d.Tab,0)}HexChar(){return this.tryGetToken(d.HexChar,0)}Quoted(){return this.tryGetToken(d.Quoted,0)}BlockQuoted(){return this.tryGetToken(d.BlockQuoted,0)}OpenBrace(){return this.tryGetToken(d.OpenBrace,0)}CloseBrace(){return this.tryGetToken(d.CloseBrace,0)}Comma(){return this.tryGetToken(d.Comma,0)}Hyphen(){return this.tryGetToken(d.Hyphen,0)}LessThan(){return this.tryGetToken(d.LessThan,0)}GreaterThan(){return this.tryGetToken(d.GreaterThan,0)}SingleQuote(){return this.tryGetToken(d.SingleQuote,0)}Underscore(){return this.tryGetToken(d.Underscore,0)}Colon(){return this.tryGetToken(d.Colon,0)}Hash(){return this.tryGetToken(d.Hash,0)}Equals(){return this.tryGetToken(d.Equals,0)}Exclamation(){return this.tryGetToken(d.Exclamation,0)}Ampersand(){return this.tryGetToken(d.Ampersand,0)}OtherChar(){return this.tryGetToken(d.OtherChar,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_shared_literal}enterRule(t){t.enterShared_literal&&t.enterShared_literal(this)}exitRule(t){t.exitShared_literal&&t.exitShared_literal(this)}accept(t){return t.visitShared_literal?t.visitShared_literal(this):t.visitChildren(this)}}r.Shared_literalContext=R;class L extends a.ParserRuleContext{digits(){return this.getRuleContext(0,D)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_number}enterRule(t){t.enterNumber&&t.enterNumber(this)}exitRule(t){t.exitNumber&&t.exitNumber(this)}accept(t){return t.visitNumber?t.visitNumber(this):t.visitChildren(this)}}r.NumberContext=L;class P extends a.ParserRuleContext{Backslash(){return this.tryGetToken(d.Backslash,0)}octal_digit(t){return void 0===t?this.getRuleContexts(I):this.getRuleContext(t,I)}D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_octal_char}enterRule(t){t.enterOctal_char&&t.enterOctal_char(this)}exitRule(t){t.exitOctal_char&&t.exitOctal_char(this)}accept(t){return t.visitOctal_char?t.visitOctal_char(this):t.visitChildren(this)}}r.Octal_charContext=P;class I extends a.ParserRuleContext{D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}D4(){return this.tryGetToken(d.D4,0)}D5(){return this.tryGetToken(d.D5,0)}D6(){return this.tryGetToken(d.D6,0)}D7(){return this.tryGetToken(d.D7,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_octal_digit}enterRule(t){t.enterOctal_digit&&t.enterOctal_digit(this)}exitRule(t){t.exitOctal_digit&&t.exitOctal_digit(this)}accept(t){return t.visitOctal_digit?t.visitOctal_digit(this):t.visitChildren(this)}}r.Octal_digitContext=I;class D extends a.ParserRuleContext{digit(t){return void 0===t?this.getRuleContexts(U):this.getRuleContext(t,U)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_digits}enterRule(t){t.enterDigits&&t.enterDigits(this)}exitRule(t){t.exitDigits&&t.exitDigits(this)}accept(t){return t.visitDigits?t.visitDigits(this):t.visitChildren(this)}}r.DigitsContext=D;class U extends a.ParserRuleContext{D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}D4(){return this.tryGetToken(d.D4,0)}D5(){return this.tryGetToken(d.D5,0)}D6(){return this.tryGetToken(d.D6,0)}D7(){return this.tryGetToken(d.D7,0)}D8(){return this.tryGetToken(d.D8,0)}D9(){return this.tryGetToken(d.D9,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_digit}enterRule(t){t.enterDigit&&t.enterDigit(this)}exitRule(t){t.exitDigit&&t.exitDigit(this)}accept(t){return t.visitDigit?t.visitDigit(this):t.visitChildren(this)}}r.DigitContext=U;class M extends a.ParserRuleContext{alpha_nums(){return this.getRuleContext(0,k)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_name}enterRule(t){t.enterName&&t.enterName(this)}exitRule(t){t.exitName&&t.exitName(this)}accept(t){return t.visitName?t.visitName(this):t.visitChildren(this)}}r.NameContext=M;class k extends a.ParserRuleContext{letter(t){return void 0===t?this.getRuleContexts(B):this.getRuleContext(t,B)}Underscore(t){return void 0===t?this.getTokens(d.Underscore):this.getToken(d.Underscore,t)}digit(t){return void 0===t?this.getRuleContexts(U):this.getRuleContext(t,U)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_alpha_nums}enterRule(t){t.enterAlpha_nums&&t.enterAlpha_nums(this)}exitRule(t){t.exitAlpha_nums&&t.exitAlpha_nums(this)}accept(t){return t.visitAlpha_nums?t.visitAlpha_nums(this):t.visitChildren(this)}}r.Alpha_numsContext=k;class F extends a.ParserRuleContext{non_close_paren(t){return void 0===t?this.getRuleContexts(j):this.getRuleContext(t,j)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_close_parens}enterRule(t){t.enterNon_close_parens&&t.enterNon_close_parens(this)}exitRule(t){t.exitNon_close_parens&&t.exitNon_close_parens(this)}accept(t){return t.visitNon_close_parens?t.visitNon_close_parens(this):t.visitChildren(this)}}r.Non_close_parensContext=F;class j extends a.ParserRuleContext{CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_close_paren}enterRule(t){t.enterNon_close_paren&&t.enterNon_close_paren(this)}exitRule(t){t.exitNon_close_paren&&t.exitNon_close_paren(this)}accept(t){return t.visitNon_close_paren?t.visitNon_close_paren(this):t.visitChildren(this)}}r.Non_close_parenContext=j;class B extends a.ParserRuleContext{ALC(){return this.tryGetToken(d.ALC,0)}BLC(){return this.tryGetToken(d.BLC,0)}CLC(){return this.tryGetToken(d.CLC,0)}DLC(){return this.tryGetToken(d.DLC,0)}ELC(){return this.tryGetToken(d.ELC,0)}FLC(){return this.tryGetToken(d.FLC,0)}GLC(){return this.tryGetToken(d.GLC,0)}HLC(){return this.tryGetToken(d.HLC,0)}ILC(){return this.tryGetToken(d.ILC,0)}JLC(){return this.tryGetToken(d.JLC,0)}KLC(){return this.tryGetToken(d.KLC,0)}LLC(){return this.tryGetToken(d.LLC,0)}MLC(){return this.tryGetToken(d.MLC,0)}NLC(){return this.tryGetToken(d.NLC,0)}OLC(){return this.tryGetToken(d.OLC,0)}PLC(){return this.tryGetToken(d.PLC,0)}QLC(){return this.tryGetToken(d.QLC,0)}RLC(){return this.tryGetToken(d.RLC,0)}SLC(){return this.tryGetToken(d.SLC,0)}TLC(){return this.tryGetToken(d.TLC,0)}ULC(){return this.tryGetToken(d.ULC,0)}VLC(){return this.tryGetToken(d.VLC,0)}WLC(){return this.tryGetToken(d.WLC,0)}XLC(){return this.tryGetToken(d.XLC,0)}YLC(){return this.tryGetToken(d.YLC,0)}ZLC(){return this.tryGetToken(d.ZLC,0)}AUC(){return this.tryGetToken(d.AUC,0)}BUC(){return this.tryGetToken(d.BUC,0)}CUC(){return this.tryGetToken(d.CUC,0)}DUC(){return this.tryGetToken(d.DUC,0)}EUC(){return this.tryGetToken(d.EUC,0)}FUC(){return this.tryGetToken(d.FUC,0)}GUC(){return this.tryGetToken(d.GUC,0)}HUC(){return this.tryGetToken(d.HUC,0)}IUC(){return this.tryGetToken(d.IUC,0)}JUC(){return this.tryGetToken(d.JUC,0)}KUC(){return this.tryGetToken(d.KUC,0)}LUC(){return this.tryGetToken(d.LUC,0)}MUC(){return this.tryGetToken(d.MUC,0)}NUC(){return this.tryGetToken(d.NUC,0)}OUC(){return this.tryGetToken(d.OUC,0)}PUC(){return this.tryGetToken(d.PUC,0)}QUC(){return this.tryGetToken(d.QUC,0)}RUC(){return this.tryGetToken(d.RUC,0)}SUC(){return this.tryGetToken(d.SUC,0)}TUC(){return this.tryGetToken(d.TUC,0)}UUC(){return this.tryGetToken(d.UUC,0)}VUC(){return this.tryGetToken(d.VUC,0)}WUC(){return this.tryGetToken(d.WUC,0)}XUC(){return this.tryGetToken(d.XUC,0)}YUC(){return this.tryGetToken(d.YUC,0)}ZUC(){return this.tryGetToken(d.ZUC,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_letter}enterRule(t){t.enterLetter&&t.enterLetter(this)}exitRule(t){t.exitLetter&&t.exitLetter(this)}accept(t){return t.visitLetter?t.visitLetter(this):t.visitChildren(this)}}r.LetterContext=B},{264:264,265:265,267:267,270:270,276:276,278:278,283:283,320:320,365:365}],264:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(265),o=t(270);class s extends o.RecognitionException{constructor(t,e,r,n,o,s){t instanceof i.Parser&&(void 0===e&&(e=t.inputStream),void 0===r&&(r=t.currentToken),void 0===n&&(n=t.currentToken),void 0===s&&(s=t.context)),super(t,e,s),this._deadEndConfigs=o,this._startToken=r,this.setOffendingToken(t,n)}get startToken(){return this._startToken}get deadEndConfigs(){return this._deadEndConfigs}}n([t(252).NotNull],s.prototype,"_startToken",void 0),r.NoViableAltException=s},{252:252,265:265,270:270}],265:[function(t,e,r){(function(e){(function(){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(e){o(e)}}function a(t){try{u(n.throw(t))}catch(e){o(e)}}function u(t){t.done?i(t.value):new r((function(e){e(t.value)})).then(s,a)}u((n=n.apply(t,e||[])).next())}))};Object.defineProperty(r,"__esModule",{value:!0});const s=t(365),a=t(282),u=t(283),l=t(253),c=t(367),h=t(357),p=t(260),d=t(252),f=t(319),y=t(320),m=t(269),g=t(271),v=t(371),T=t(276);class _{constructor(t,e){this.ruleNames=t,this.tokenStream=e}enterEveryRule(t){console.log("enter   "+this.ruleNames[t.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}exitEveryRule(t){console.log("exit    "+this.ruleNames[t.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}visitErrorNode(t){}visitTerminal(t){let e=t.parent.ruleContext,r=t.symbol;console.log("consume "+r+" rule "+this.ruleNames[e.ruleIndex])}}n([d.Override],_.prototype,"enterEveryRule",null),n([d.Override],_.prototype,"exitEveryRule",null),n([d.Override],_.prototype,"visitErrorNode",null),n([d.Override],_.prototype,"visitTerminal",null);class E extends g.Recognizer{constructor(t){super(),this._errHandler=new l.DefaultErrorStrategy,this._precedenceStack=new h.IntegerStack,this._buildParseTrees=!0,this._parseListeners=[],this._syntaxErrors=0,this.matchedEOF=!1,this._precedenceStack.push(0),this.inputStream=t}reset(t){(void 0===t||t)&&this.inputStream.seek(0),this._errHandler.reset(this),this._ctx=void 0,this._syntaxErrors=0,this.matchedEOF=!1,this.isTrace=!1,this._precedenceStack.clear(),this._precedenceStack.push(0);let e=this.interpreter;null!=e&&e.reset()}match(t){let e=this.currentToken;return e.type===t?(t===T.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,e))),e}matchWildcard(){let t=this.currentToken;return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,t))),t}set buildParseTree(t){this._buildParseTrees=t}get buildParseTree(){return this._buildParseTrees}getParseListeners(){return this._parseListeners}addParseListener(t){if(null==t)throw new TypeError("listener cannot be null");this._parseListeners.push(t)}removeParseListener(t){let e=this._parseListeners.findIndex(e=>e===t);-1!==e&&this._parseListeners.splice(e,1)}removeParseListeners(){this._parseListeners.length=0}triggerEnterRuleEvent(){for(let t of this._parseListeners)t.enterEveryRule&&t.enterEveryRule(this._ctx),this._ctx.enterRule(t)}triggerExitRuleEvent(){for(let t=this._parseListeners.length-1;t>=0;t--){let e=this._parseListeners[t];this._ctx.exitRule(e),e.exitEveryRule&&e.exitEveryRule(this._ctx)}}get numberOfSyntaxErrors(){return this._syntaxErrors}get tokenFactory(){return this._input.tokenSource.tokenFactory}getATNWithBypassAlts(){let t=this.serializedATN;if(null==t)throw new Error("The current parser does not support an ATN with bypass alternatives.");let e=E.bypassAltsAtnCache.get(t);if(null==e){let r=new a.ATNDeserializationOptions;r.isGenerateRuleBypassTransitions=!0,e=new u.ATNDeserializer(r).deserialize(s.toCharArray(t)),E.bypassAltsAtnCache.set(t,e)}return e}compileParseTreePattern(e,r,n){return o(this,void 0,void 0,(function*(){if(!n){if(this.inputStream){let t=this.inputStream.tokenSource;t instanceof p.Lexer&&(n=t)}if(!n)throw new Error("Parser can't discover a lexer to use")}let i=n;return new((yield Promise.resolve().then(()=>t(377))).ParseTreePatternMatcher)(i,this).compile(e,r)}))}get errorHandler(){return this._errHandler}set errorHandler(t){this._errHandler=t}get inputStream(){return this._input}set inputStream(t){this.reset(!1),this._input=t}get currentToken(){return this._input.LT(1)}notifyErrorListeners(t,e,r){void 0===e?e=this.currentToken:null===e&&(e=void 0),this._syntaxErrors++;let n=-1,i=-1;null!=e&&(n=e.line,i=e.charPositionInLine);let o=this.getErrorListenerDispatch();o.syntaxError&&o.syntaxError(this,e,n,i,t,r)}consume(){let t=this.currentToken;t.type!==E.EOF&&this.inputStream.consume();let e=0!==this._parseListeners.length;if(this._buildParseTrees||e)if(this._errHandler.inErrorRecoveryMode(this)){let r=this._ctx.addErrorNode(this.createErrorNode(this._ctx,t));if(e)for(let t of this._parseListeners)t.visitErrorNode&&t.visitErrorNode(r)}else{let r=this.createTerminalNode(this._ctx,t);if(this._ctx.addChild(r),e)for(let t of this._parseListeners)t.visitTerminal&&t.visitTerminal(r)}return t}createTerminalNode(t,e){return new v.TerminalNode(e)}createErrorNode(t,e){return new c.ErrorNode(e)}addContextToParseTree(){let t=this._ctx._parent;null!=t&&t.addChild(this._ctx)}enterRule(t,e,r){this.state=e,this._ctx=t,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}enterLeftFactoredRule(t,e,r){if(this.state=e,this._buildParseTrees){let e=this._ctx.getChild(this._ctx.childCount-1);this._ctx.removeLastChild(),e._parent=t,t.addChild(e)}this._ctx=t,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this.matchedEOF?this._ctx._stop=this._input.LT(1):this._ctx._stop=this._input.tryLT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx._parent}enterOuterAlt(t,e){if(t.altNumber=e,this._buildParseTrees&&this._ctx!==t){let e=this._ctx._parent;null!=e&&(e.removeLastChild(),e.addChild(t))}this._ctx=t}get precedence(){return this._precedenceStack.isEmpty?-1:this._precedenceStack.peek()}enterRecursionRule(t,e,r,n){this.state=e,this._precedenceStack.push(n),this._ctx=t,this._ctx._start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(t,e,r){let n=this._ctx;n._parent=t,n.invokingState=e,n._stop=this._input.tryLT(-1),this._ctx=t,this._ctx._start=n._start,this._buildParseTrees&&this._ctx.addChild(n),this.triggerEnterRuleEvent()}unrollRecursionContexts(t){this._precedenceStack.pop(),this._ctx._stop=this._input.tryLT(-1);let e=this._ctx;if(this._parseListeners.length>0)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx._parent;else this._ctx=t;e._parent=t,this._buildParseTrees&&null!=t&&t.addChild(e)}getInvokingContext(t){let e=this._ctx;for(;e&&e.ruleIndex!==t;)e=e._parent;return e}get context(){return this._ctx}set context(t){this._ctx=t}precpred(t,e){return e>=this._precedenceStack.peek()}getErrorListenerDispatch(){return new m.ProxyParserErrorListener(this.getErrorListeners())}inContext(t){return!1}isExpectedToken(t){let e=this.interpreter.atn,r=this._ctx,n=e.states[this.state],i=e.nextTokens(n);if(i.contains(t))return!0;if(!i.contains(T.Token.EPSILON))return!1;for(;null!=r&&r.invokingState>=0&&i.contains(T.Token.EPSILON);){let n=e.states[r.invokingState].transition(0);if((i=e.nextTokens(n.followState)).contains(t))return!0;r=r._parent}return!(!i.contains(T.Token.EPSILON)||t!==T.Token.EOF)}get isMatchedEOF(){return this.matchedEOF}getExpectedTokens(){return this.atn.getExpectedTokens(this.state,this.context)}getExpectedTokensWithinCurrentRule(){let t=this.interpreter.atn,e=t.states[this.state];return t.nextTokens(e)}getRuleIndex(t){let e=this.getRuleIndexMap().get(t);return null!=e?e:-1}get ruleContext(){return this._ctx}getRuleInvocationStack(t=this._ctx){let e=t,r=this.ruleNames,n=[];for(;null!=e;){let t=e.ruleIndex;t<0?n.push("n/a"):n.push(r[t]),e=e._parent}return n}getDFAStrings(){let t=[];for(let e of this._interp.atn.decisionToDFA)t.push(e.toString(this.vocabulary,this.ruleNames));return t}dumpDFA(){let t=!1;for(let r of this._interp.atn.decisionToDFA)r.isEmpty||(t&&console.log(),console.log("Decision "+r.decision+":"),e.stdout.write(r.toString(this.vocabulary,this.ruleNames)),t=!0)}get sourceName(){return this._input.sourceName}get parseInfo(){return Promise.resolve().then(()=>t(329)).then(t=>{let e=this.interpreter;if(e instanceof t.ProfilingATNSimulator)return new f.ParseInfo(e)})}setProfile(e){return o(this,void 0,void 0,(function*(){let r=yield Promise.resolve().then(()=>t(329)),n=this.interpreter;e?n instanceof r.ProfilingATNSimulator||(this.interpreter=new r.ProfilingATNSimulator(this)):n instanceof r.ProfilingATNSimulator&&(this.interpreter=new y.ParserATNSimulator(this.atn,this)),this.interpreter.setPredictionMode(n.getPredictionMode())}))}set isTrace(t){t?(this._tracer?this.removeParseListener(this._tracer):this._tracer=new _(this.ruleNames,this._input),this.addParseListener(this._tracer)):this._tracer&&(this.removeParseListener(this._tracer),this._tracer=void 0)}get isTrace(){return null!=this._tracer}}E.bypassAltsAtnCache=new Map,n([d.NotNull],E.prototype,"_errHandler",void 0),n([d.NotNull],E.prototype,"match",null),n([d.NotNull],E.prototype,"matchWildcard",null),n([d.NotNull],E.prototype,"getParseListeners",null),n([i(0,d.NotNull)],E.prototype,"addParseListener",null),n([d.NotNull],E.prototype,"getATNWithBypassAlts",null),n([d.NotNull,i(0,d.NotNull)],E.prototype,"errorHandler",null),n([d.Override],E.prototype,"inputStream",null),n([d.NotNull],E.prototype,"currentToken",null),n([i(0,d.NotNull)],E.prototype,"enterRule",null),n([d.Override,i(0,d.Nullable)],E.prototype,"precpred",null),n([d.Override],E.prototype,"getErrorListenerDispatch",null),n([d.NotNull],E.prototype,"getExpectedTokens",null),n([d.NotNull],E.prototype,"getExpectedTokensWithinCurrentRule",null),n([d.Override],E.prototype,"parseInfo",null),r.Parser=E}).call(this)}).call(this,t(428))},{252:252,253:253,260:260,269:269,271:271,276:276,282:282,283:283,319:319,320:320,329:329,357:357,365:365,367:367,371:371,377:377,428:428}],267:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(367),o=t(358),s=t(252),a=t(272),u=t(371);class l extends a.RuleContext{constructor(t,e){null==e?super():super(t,e)}static emptyContext(){return l.EMPTY}copyFrom(t){if(this._parent=t._parent,this.invokingState=t.invokingState,this._start=t._start,this._stop=t._stop,t.children){this.children=[];for(let e of t.children)e instanceof i.ErrorNode&&this.addChild(e)}}enterRule(t){}exitRule(t){}addAnyChild(t){return this.children?this.children.push(t):this.children=[t],t}addChild(t){return t instanceof u.TerminalNode?(t.setParent(this),void this.addAnyChild(t)):t instanceof a.RuleContext?void this.addAnyChild(t):(t=new u.TerminalNode(t),this.addAnyChild(t),t.setParent(this),t)}addErrorNode(t){if(t instanceof i.ErrorNode){const e=t;return e.setParent(this),this.addAnyChild(e)}{const e=t;let r=new i.ErrorNode(e);return this.addAnyChild(r),r.setParent(this),r}}removeLastChild(){this.children&&this.children.pop()}get parent(){let t=super.parent;if(void 0===t||t instanceof l)return t;throw new TypeError("Invalid parent type for ParserRuleContext")}getChild(t,e){if(!this.children||t<0||t>=this.children.length)throw new RangeError("index parameter must be between >= 0 and <= number of children.");if(null==e)return this.children[t];let r=this.tryGetChild(t,e);if(void 0===r)throw new Error("The specified node does not exist");return r}tryGetChild(t,e){if(!this.children||t<0||t>=this.children.length)return;let r=-1;for(let n of this.children)if(n instanceof e&&++r===t)return n}getToken(t,e){let r=this.tryGetToken(t,e);if(void 0===r)throw new Error("The specified token does not exist");return r}tryGetToken(t,e){if(!this.children||e<0||e>=this.children.length)return;let r=-1;for(let n of this.children)if(n instanceof u.TerminalNode&&n.symbol.type===t&&++r===e)return n}getTokens(t){let e=[];if(!this.children)return e;for(let r of this.children)r instanceof u.TerminalNode&&r.symbol.type===t&&e.push(r);return e}get ruleContext(){return this}getRuleContext(t,e){return this.getChild(t,e)}tryGetRuleContext(t,e){return this.tryGetChild(t,e)}getRuleContexts(t){let e=[];if(!this.children)return e;for(let r of this.children)r instanceof t&&e.push(r);return e}get childCount(){return this.children?this.children.length:0}get sourceInterval(){return this._start?!this._stop||this._stop.tokenIndex<this._start.tokenIndex?o.Interval.of(this._start.tokenIndex,this._start.tokenIndex-1):o.Interval.of(this._start.tokenIndex,this._stop.tokenIndex):o.Interval.INVALID}get start(){return this._start}get stop(){return this._stop}toInfoString(t){return"ParserRuleContext"+t.getRuleInvocationStack(this).reverse()+"{start="+this._start+", stop="+this._stop+"}"}}l.EMPTY=new l,n([s.Override],l.prototype,"parent",null),n([s.Override],l.prototype,"childCount",null),n([s.Override],l.prototype,"sourceInterval",null),r.ParserRuleContext=l},{252:252,272:272,358:358,367:367,371:371}],270:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RecognitionException=class extends Error{constructor(t,e,r,n){super(n),this._offendingState=-1,this._recognizer=t,this.input=e,this.ctx=r,t&&(this._offendingState=t.state)}get offendingState(){return this._offendingState}setOffendingState(t){this._offendingState=t}get expectedTokens(){if(this._recognizer)return this._recognizer.atn.getExpectedTokens(this._offendingState,this.ctx)}get context(){return this.ctx}get inputStream(){return this.input}getOffendingToken(t){if(!t||t===this._recognizer)return this.offendingToken}setOffendingToken(t,e){t===this._recognizer&&(this.offendingToken=e)}get recognizer(){return this._recognizer}}},{}],276:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(258);var i;(i=r.Token||(r.Token={})).INVALID_TYPE=0,i.EPSILON=-2,i.MIN_USER_TOKEN_TYPE=1,i.EOF=n.IntStream.EOF,i.DEFAULT_CHANNEL=0,i.HIDDEN_CHANNEL=1,i.MIN_USER_CHANNEL_VALUE=2},{258:258}],320:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(343),s=t(288),a=t(350),u=t(352),l=t(279),c=t(280),h=t(281),p=t(284),d=t(286),f=t(290),y=t(353),m=t(295),g=t(299),v=t(346),T=t(356),_=t(358),E=t(258),b=t(252),S=t(317),x=t(264),C=t(362),A=t(267),N=t(326),O=t(327),w=t(328),R=t(332),L=t(333),P=t(334),I=t(335),D=t(336),U=t(276),M=t(278);let k=class t extends p.ATNSimulator{constructor(t,e){super(t),this.predictionMode=w.PredictionMode.LL,this.force_global_context=!1,this.always_try_local_context=!0,this.enable_global_context_dfa=!1,this.optimize_unique_closure=!0,this.optimize_ll1=!0,this.optimize_tail_calls=!0,this.tail_call_preserves_sll=!0,this.treat_sllk1_conflict_as_ambiguity=!1,this.reportAmbiguities=!1,this.userWantsCtxSensitive=!0,this._parser=e}getPredictionMode(){return this.predictionMode}setPredictionMode(t){this.predictionMode=t}reset(){}adaptivePredict(e,r,n,i){void 0===i&&(i=!1);let o,s=this.atn.decisionToDFA[r];if(this.optimize_ll1&&!s.isPrecedenceDfa&&!s.isEmpty){let t=e.LA(1);if(t>=0&&t<=65535){let e=(r<<16>>>0)+t,n=this.atn.LL1Table.get(e);if(null!=n)return n}}this.dfa=s,this.force_global_context?i=!0:this.always_try_local_context||(i=i||s.isContextSensitive),this.userWantsCtxSensitive=i||this.predictionMode!==w.PredictionMode.SLL&&null!=n&&!this.atn.decisionToState[r].sll,null==n&&(n=A.ParserRuleContext.emptyContext()),s.isEmpty||(o=this.getStartState(s,e,n,i)),null==o&&(null==n&&(n=A.ParserRuleContext.emptyContext()),t.debug&&console.log("ATN decision "+s.decision+" exec LA(1)=="+this.getLookaheadName(e)+", outerContext="+n.toString(this._parser)),o=this.computeStartState(s,n,i));let a=e.mark(),u=e.index;try{let r=this.execDFA(s,e,u,o);return t.debug&&console.log("DFA after predictATN: "+s.toString(this._parser.vocabulary,this._parser.ruleNames)),r}finally{this.dfa=void 0,e.seek(u),e.release(a)}}getStartState(t,e,r,n){if(!n){if(t.isPrecedenceDfa){let e=t.getPrecedenceStartState(this._parser.precedence,!1);if(null==e)return;return new D.SimulatorState(r,e,!1,r)}if(null==t.s0)return;return new D.SimulatorState(r,t.s0,!1,r)}if(!this.enable_global_context_dfa)return;let i,o=r;for(i=t.isPrecedenceDfa?t.getPrecedenceStartState(this._parser.precedence,!0):t.s0full;null!=o&&null!=i&&i.isContextSensitive;)o=this.skipTailCalls(o),i=i.getContextTarget(this.getReturnState(o)),o.isEmpty||(o=o.parent);return null!=i?new D.SimulatorState(r,i,n,o):void 0}execDFA(e,r,n,i){let o=i.outerContext;t.dfa_debug&&console.log("DFA decision "+e.decision+" exec LA(1)=="+this.getLookaheadName(r)+", outerContext="+o.toString(this._parser)),t.dfa_debug&&console.log(e.toString(this._parser.vocabulary,this._parser.ruleNames));let s=i.s0,a=r.LA(1),u=i.remainingOuterContext;for(;;){if(t.dfa_debug&&console.log("DFA state "+s.stateNumber+" LA(1)=="+this.getLookaheadName(r)),i.useContext)for(;s.isContextSymbol(a);){let t;if(null!=u&&(u=this.skipTailCalls(u),t=s.getContextTarget(this.getReturnState(u))),null==t){let t=new D.SimulatorState(i.outerContext,s,i.useContext,u);return this.execATN(e,r,n,t)}u=u.parent,s=t}if(this.isAcceptState(s,i.useContext)){null!=s.predicates?t.dfa_debug&&console.log("accept "+s):t.dfa_debug&&console.log("accept; predict "+s.prediction+" in state "+s.stateNumber);break}let l=this.getExistingTargetState(s,a);if(null==l){let l;if(t.dfa_debug&&a>=0&&console.log("no edge for "+this._parser.vocabulary.getDisplayName(a)),t.dfa_debug){let t=_.Interval.of(n,this._parser.inputStream.index);console.log("ATN exec upon "+this._parser.inputStream.getText(t)+" at DFA state "+s.stateNumber)}let c=new D.SimulatorState(o,s,i.useContext,u);return l=this.execATN(e,r,n,c),t.dfa_debug&&console.log("back from DFA update, alt="+l+", dfa=\n"+e.toString(this._parser.vocabulary,this._parser.ruleNames)),t.dfa_debug&&console.log("DFA decision "+e.decision+" predicts "+l),l}if(l===p.ATNSimulator.ERROR){let t=new D.SimulatorState(o,s,i.useContext,u);return this.handleNoViableAlt(r,n,t)}s=l,this.isAcceptState(s,i.useContext)||a===E.IntStream.EOF||(r.consume(),a=r.LA(1))}if(!i.useContext&&null!=s.configs.conflictInfo&&e.atnStartState instanceof g.DecisionState&&!(!this.userWantsCtxSensitive||!s.configs.dipsIntoOuterContext&&s.configs.isExactConflict||this.treat_sllk1_conflict_as_ambiguity&&r.index===n)){let t,a=s.predicates;if(null!=a){let e=r.index;if(e!==n&&r.seek(n),1===(t=this.evalSemanticContext(a,o,!0)).cardinality())return t.nextSetBit(0);e!==n&&r.seek(e)}if(this.reportAmbiguities){let a=new D.SimulatorState(o,s,i.useContext,u);this.reportAttemptingFullContext(e,t,a,n,r.index)}return r.seek(n),this.adaptivePredict(r,e.decision,o,!0)}let l=s.predicates;if(null!=l){let t=r.index;n!==t&&r.seek(n);let i=this.evalSemanticContext(l,o,this.reportAmbiguities&&this.predictionMode===w.PredictionMode.LL_EXACT_AMBIG_DETECTION);switch(i.cardinality()){case 0:throw this.noViableAlt(r,o,s.configs,n);case 1:return i.nextSetBit(0);default:return n!==t&&r.seek(t),this.reportAmbiguity(e,s,n,t,s.configs.isExactConflict,i,s.configs),i.nextSetBit(0)}}return t.dfa_debug&&console.log("DFA decision "+e.decision+" predicts "+s.prediction),s.prediction}isAcceptState(t,e){return!!t.isAcceptState&&(null==t.configs.conflictingAlts||!e||this.predictionMode!==w.PredictionMode.LL_EXACT_AMBIG_DETECTION||t.configs.isExactConflict)}execATN(e,r,n,i){t.debug&&console.log("execATN decision "+e.decision+" exec LA(1)=="+this.getLookaheadName(r));let o=i.outerContext,s=i.useContext,a=r.LA(1),u=i,c=new O.PredictionContextCache;for(;;){let i=this.computeReachSet(e,u,a,c);if(null==i)return this.setDFAEdge(u.s0,r.LA(1),p.ATNSimulator.ERROR),this.handleNoViableAlt(r,n,u);let h=i.s0;if(this.isAcceptState(h,s)){let u=h.configs.conflictingAlts,c=null==u?h.prediction:l.ATN.INVALID_ALT_NUMBER;if(c!==l.ATN.INVALID_ALT_NUMBER){if(this.optimize_ll1&&r.index===n&&!e.isPrecedenceDfa&&i.outerContext===i.remainingOuterContext&&e.decision>=0&&!h.configs.hasSemanticContext&&a>=0&&a<=65535){let t=(e.decision<<16>>>0)+a;this.atn.LL1Table.set(t,c)}s&&this.always_try_local_context&&this.reportContextSensitivity(e,c,i,n,r.index)}c=h.prediction;let p=null!=u&&this.userWantsCtxSensitive;if(p&&(p=!s&&(h.configs.dipsIntoOuterContext||!h.configs.isExactConflict)&&(!this.treat_sllk1_conflict_as_ambiguity||r.index!==n)),h.configs.hasSemanticContext){let t=h.predicates;if(null!=t){let e=r.index;switch(e!==n&&r.seek(n),(u=this.evalSemanticContext(t,o,p||this.reportAmbiguities)).cardinality()){case 0:throw this.noViableAlt(r,o,h.configs,n);case 1:return u.nextSetBit(0)}e!==n&&r.seek(e)}}if(p){t.debug&&console.log("RETRY with outerContext="+o);let s=this.computeStartState(e,o,!0);return this.reportAmbiguities&&this.reportAttemptingFullContext(e,u,i,n,r.index),r.seek(n),this.execATN(e,r,n,s)}return null!=u&&(this.reportAmbiguities&&u.cardinality()>1&&this.reportAmbiguity(e,h,n,r.index,h.configs.isExactConflict,u,h.configs),c=u.nextSetBit(0)),c}u=i,a!==E.IntStream.EOF&&(r.consume(),a=r.LA(1))}}handleNoViableAlt(t,e,r){if(null!=r.s0){let n=new y.BitSet,i=0;for(let t of r.s0.configs)(t.reachesIntoOuterContext||t.state instanceof R.RuleStopState)&&(n.set(t.alt),i=Math.max(i,t.alt));switch(n.cardinality()){case 0:break;case 1:return n.nextSetBit(0);default:if(!r.s0.configs.hasSemanticContext)return n.nextSetBit(0);let o=new h.ATNConfigSet;for(let t of r.s0.configs)(t.reachesIntoOuterContext||t.state instanceof R.RuleStopState)&&o.add(t);let s=this.getPredsForAmbigAlts(n,o,i);if(null!=s){let i=this.getPredicatePredictions(n,s);if(null!=i){let n=t.index;try{t.seek(e);let o=this.evalSemanticContext(i,r.outerContext,!1);if(!o.isEmpty)return o.nextSetBit(0)}finally{t.seek(n)}}}return n.nextSetBit(0)}}throw this.noViableAlt(t,r.outerContext,r.s0.configs,e)}computeReachSet(t,e,r,n){let i=e.useContext,o=e.remainingOuterContext,s=e.s0;if(i)for(;s.isContextSymbol(r);){let t;if(null!=o&&(o=this.skipTailCalls(o),t=s.getContextTarget(this.getReturnState(o))),null==t)break;o=o.parent,s=t}if(this.isAcceptState(s,i))return new D.SimulatorState(e.outerContext,s,i,o);let a=s,u=this.getExistingTargetState(a,r);if(null==u){let e=this.computeTargetState(t,a,o,r,i,n);u=e[0],o=e[1]}return u!==p.ATNSimulator.ERROR?new D.SimulatorState(e.outerContext,u,i,o):void 0}getExistingTargetState(t,e){return t.getTarget(e)}computeTargetState(e,r,n,i,o,s){let a,u,c=r.configs.toArray(),d=new h.ATNConfigSet;do{let e=!o||null!=n;e||(d.isOutermostConfigSet=!0);let r,p=new h.ATNConfigSet;for(let n of c){if(t.debug&&console.log("testing "+this.getTokenName(i)+" at "+n.toString()),n.state instanceof R.RuleStopState){(o&&!n.reachesIntoOuterContext||i===E.IntStream.EOF)&&(null==r&&(r=[]),r.push(n));continue}let e=n.state.numberOfOptimizedTransitions;for(let t=0;t<e;t++){let e=n.state.getOptimizedTransition(t),r=this.getReachableTarget(n,e,i);null!=r&&p.add(n.transform(r,!1),s)}}if(this.optimize_unique_closure&&null==r&&i!==U.Token.EOF&&p.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER){p.isOutermostConfigSet=d.isOutermostConfigSet,d=p;break}let f=!1,y=i===U.Token.EOF;if(this.closure(p,d,f,e,s,y),u=d.dipsIntoOuterContext,i===E.IntStream.EOF&&(d=this.removeAllConfigsNotInRuleStopState(d,s)),!(null==r||o&&w.PredictionMode.hasConfigInRuleStopState(d)))for(let t of r)d.add(t,s);if(o&&u){d.clear(),n=n,n=this.skipTailCalls(n);let t=this.getReturnState(n);if(null==a&&(a=new T.IntegerList),n=n.isEmpty?void 0:n.parent,a.add(t),t!==N.PredictionContext.EMPTY_FULL_STATE_KEY)for(let e=0;e<c.length;e++)c[e]=c[e].appendContext(t,s)}}while(o&&u);return d.isEmpty?(this.setDFAEdge(r,i,p.ATNSimulator.ERROR),[p.ATNSimulator.ERROR,n]):[this.addDFAEdge(e,r,i,a,d,s),n]}removeAllConfigsNotInRuleStopState(t,e){if(w.PredictionMode.allConfigsInRuleStopStates(t))return t;let r=new h.ATNConfigSet;for(let n of t)n.state instanceof R.RuleStopState&&r.add(n,e);return r}computeStartState(t,e,r){let n=t.isPrecedenceDfa?t.getPrecedenceStartState(this._parser.precedence,r):r?t.s0full:t.s0;if(null!=n){if(!r)return new D.SimulatorState(e,n,r,e);n.setContextSensitive(this.atn)}t.decision;let i=t.atnStartState,o=0,s=e,a=r?N.PredictionContext.EMPTY_FULL:N.PredictionContext.EMPTY_LOCAL,u=new O.PredictionContextCache;if(r){if(!this.enable_global_context_dfa)for(;null!=s;)s.isEmpty?(o=N.PredictionContext.EMPTY_FULL_STATE_KEY,s=void 0):(o=this.getReturnState(s),a=a.appendSingleContext(o,u),s=s.parent);for(;null!=n&&n.isContextSensitive&&null!=s;){let t;if((s=this.skipTailCalls(s)).isEmpty?(t=n.getContextTarget(N.PredictionContext.EMPTY_FULL_STATE_KEY),o=N.PredictionContext.EMPTY_FULL_STATE_KEY,s=void 0):(o=this.getReturnState(s),t=n.getContextTarget(o),a=a.appendSingleContext(o,u),s=s.parent),null==t)break;n=t}}if(null!=n&&!n.isContextSensitive)return new D.SimulatorState(e,n,r,s);let l=new h.ATNConfigSet;for(;;){let p=new h.ATNConfigSet,d=i.numberOfTransitions;for(let t=0;t<d;t++){let e=i.transition(t).target;p.add(c.ATNConfig.create(e,t+1,a))}let f=null!=s;f||(l.isOutermostConfigSet=!0);let y=!0;this.closure(p,l,y,f,u,!1);let m,g=l.dipsIntoOuterContext;if(r&&!this.enable_global_context_dfa){n=this.addDFAState(t,l,u);break}if(null==n?t.isPrecedenceDfa?(l=this.applyPrecedenceFilter(l,e,u),m=this.addDFAState(t,l,u),t.setPrecedenceStartState(this._parser.precedence,r,m)):(m=this.addDFAState(t,l,u),r?t.s0full?m=t.s0full:t.s0full=m:t.s0?m=t.s0:t.s0=m):(t.isPrecedenceDfa&&(l=this.applyPrecedenceFilter(l,e,u)),m=this.addDFAState(t,l,u),n.setContextTarget(o,m)),n=m,!r||!g)break;m.setContextSensitive(this.atn),s=s,l.clear(),s=this.skipTailCalls(s);let v=this.getReturnState(s);s=s.isEmpty?void 0:s.parent,v!==N.PredictionContext.EMPTY_FULL_STATE_KEY&&(a=a.appendSingleContext(v,u)),o=v}return new D.SimulatorState(e,n,r,s)}applyPrecedenceFilter(t,e,r){let n=new Map,i=new h.ATNConfigSet;for(let o of t){if(1!==o.alt)continue;let t=o.semanticContext.evalPrecedence(this._parser,e);null!=t&&(n.set(o.state.stateNumber,o.context),t!==o.semanticContext?i.add(o.transform(o.state,!1,t),r):i.add(o,r))}for(let o of t)if(1!==o.alt){if(!o.isPrecedenceFilterSuppressed){let t=n.get(o.state.stateNumber);if(null!=t&&t.equals(o.context))continue}i.add(o,r)}return i}getReachableTarget(t,e,r){if(e.matches(r,0,this.atn.maxTokenType))return e.target}predicateDFAState(e,r,n){let i=this.getConflictingAltsFromConfigSet(r);if(!i)throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");t.debug&&console.log("predicateDFAState "+e);let o,s=this.getPredsForAmbigAlts(i,r,n);return null!=s&&(o=this.getPredicatePredictions(i,s),e.predicates=o),o}getPredsForAmbigAlts(e,r,n){let i=new Array(n+1),o=i.length;for(let t of r)e.get(t.alt)&&(i[t.alt]=P.SemanticContext.or(i[t.alt],t.semanticContext));let s=0;for(let t=0;t<o;t++)null==i[t]?i[t]=P.SemanticContext.NONE:i[t]!==P.SemanticContext.NONE&&s++;let a=i;return 0===s&&(a=void 0),t.debug&&console.log("getPredsForAmbigAlts result "+(a?u.Arrays.toString(a):"undefined")),a}getPredicatePredictions(t,e){let r=[],n=!1;for(let i=1;i<e.length;i++){let o=e[i];null!=t&&t.get(i)&&o===P.SemanticContext.NONE?r.push(new v.DFAState.PredPrediction(o,i)):o!==P.SemanticContext.NONE&&(n=!0,r.push(new v.DFAState.PredPrediction(o,i)))}if(n)return r}evalSemanticContext(e,r,n){let i=new y.BitSet;for(let o of e){if(o.pred===P.SemanticContext.NONE){if(i.set(o.alt),!n)break;continue}let e=this.evalSemanticContextImpl(o.pred,r,o.alt);if((t.debug||t.dfa_debug)&&console.log("eval pred "+o+"="+e),e&&((t.debug||t.dfa_debug)&&console.log("PREDICT "+o.alt),i.set(o.alt),!n))break}return i}evalSemanticContextImpl(t,e,r){return t.eval(this._parser,e)}closure(t,e,r,n,i,o){null==i&&(i=O.PredictionContextCache.UNCACHED);let s=t,u=new a.Array2DHashSet(C.ObjectEqualityComparator.INSTANCE);for(;s.size>0;){let t=new h.ATNConfigSet;for(let a of s)this.closureImpl(a,e,t,u,r,n,i,0,o);s=t}}closureImpl(e,r,n,i,o,a,u,l,h){if(t.debug&&console.log("closure("+e.toString(this._parser,!0)+")"),e.state instanceof R.RuleStopState)if(e.context.isEmpty){if(!a)return void r.add(e,u);t.debug&&console.log("FALLING off rule "+this.getRuleName(e.state.ruleIndex)),e.context===N.PredictionContext.EMPTY_FULL?e=e.transform(e.state,!1,N.PredictionContext.EMPTY_LOCAL):!e.reachesIntoOuterContext&&N.PredictionContext.isEmptyLocal(e.context)&&r.add(e,u)}else{let t=e.context.hasEmpty,s=e.context.size-(t?1:0);for(let p=0;p<s;p++){let t=e.context.getParent(p),s=this.atn.states[e.context.getReturnState(p)],d=c.ATNConfig.create(s,e.alt,t,e.semanticContext);d.outerContextDepth=e.outerContextDepth,d.isPrecedenceFilterSuppressed=e.isPrecedenceFilterSuppressed,this.closureImpl(d,r,n,i,o,a,u,l-1,h)}if(!t||!a)return;e=e.transform(e.state,!1,N.PredictionContext.EMPTY_LOCAL)}let p=e.state;p.onlyHasEpsilonTransitions||(r.add(e,u),t.debug&&console.log("added config "+r));for(let c=0;c<p.numberOfOptimizedTransitions;c++){if(0===c&&p.stateType===d.ATNStateType.STAR_LOOP_ENTRY&&p.precedenceRuleDecision&&!e.context.hasEmpty){let t=p,r=!0;for(let n=0;n<e.context.size;n++)if(!t.precedenceLoopbackStates.get(e.context.getReturnState(n))){r=!1;break}if(r)continue}let f=p.getOptimizedTransition(c),y=!(f instanceof s.ActionTransition)&&o,m=this.getEpsilonTarget(e,f,y,0===l,u,h);if(null!=m){if(f instanceof L.RuleTransition&&null!=n&&!o){n.add(m,u);continue}let s=l;if(e.state instanceof R.RuleStopState){if(null!=this.dfa&&this.dfa.isPrecedenceDfa&&f.outermostPrecedenceReturn===this.dfa.atnStartState.ruleIndex&&(m.isPrecedenceFilterSuppressed=!0),m.outerContextDepth=m.outerContextDepth+1,!i.add(m))continue;s--,t.debug&&console.log("dips into outer ctx: "+m)}else if(f instanceof L.RuleTransition)!this.optimize_tail_calls||!f.optimizedTailCall||this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)?s>=0&&s++:0===s&&(s--,!this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)&&(m.outerContextDepth=m.outerContextDepth+1));else if(!f.isEpsilon&&!i.add(m))continue;this.closureImpl(m,r,n,i,y,a,u,s,h)}}}getRuleName(t){return null!=this._parser&&t>=0?this._parser.ruleNames[t]:"<rule "+t+">"}getEpsilonTarget(t,e,r,n,i,o){switch(e.serializationType){case 3:return this.ruleTransition(t,e,i);case 10:return this.precedenceTransition(t,e,r,n);case 4:return this.predTransition(t,e,r,n);case 6:return this.actionTransition(t,e);case 1:return t.transform(e.target,!1);case 5:case 2:case 7:return o&&e.matches(U.Token.EOF,0,1)?t.transform(e.target,!1):void 0;default:return}}actionTransition(e,r){return t.debug&&console.log("ACTION edge "+r.ruleIndex+":"+r.actionIndex),e.transform(r.target,!1)}precedenceTransition(e,r,n,i){let o;if(t.debug&&(console.log("PRED (collectPredicates="+n+") "+r.precedence+">=_p, ctx dependent=true"),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),n&&i){let t=P.SemanticContext.and(e.semanticContext,r.predicate);o=e.transform(r.target,!1,t)}else o=e.transform(r.target,!1);return t.debug&&console.log("config from pred transition="+o),o}predTransition(e,r,n,i){let o;if(t.debug&&(console.log("PRED (collectPredicates="+n+") "+r.ruleIndex+":"+r.predIndex+", ctx dependent="+r.isCtxDependent),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),n&&(!r.isCtxDependent||r.isCtxDependent&&i)){let t=P.SemanticContext.and(e.semanticContext,r.predicate);o=e.transform(r.target,!1,t)}else o=e.transform(r.target,!1);return t.debug&&console.log("config from pred transition="+o),o}ruleTransition(e,r,n){t.debug&&console.log("CALL rule "+this.getRuleName(r.target.ruleIndex)+", ctx="+e.context);let i,o=r.followState;return i=!this.optimize_tail_calls||!r.optimizedTailCall||this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)?null!=n?n.getChild(e.context,o.stateNumber):e.context.getChild(o.stateNumber):e.context,e.transform(r.target,!1,i)}isConflicted(e,r){if(e.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER||e.size<=1)return;let n=e.toArray();n.sort(t.STATE_ALT_SORT_COMPARATOR);let i=!e.dipsIntoOuterContext,o=new y.BitSet,s=n[0].alt;o.set(s);let a,u=n[0].state.nonStopStateNumber;for(let t of n){let e=t.state.nonStopStateNumber;if(e!==u){if(t.alt!==s)return;u=e}}if(i){u=n[0].state.nonStopStateNumber,a=new y.BitSet;let t=s;for(let r of n){if(r.state.nonStopStateNumber!==u)break;let e=r.alt;a.set(e),t=e}u=n[0].state.nonStopStateNumber;let e=s;for(let r of n){let n=r.state.nonStopStateNumber,o=r.alt;if(n!==u){if(e!==t){i=!1;break}u=n,e=s}else if(o!==e){if(o!==a.nextSetBit(e+1)){i=!1;break}e=o}}}u=n[0].state.nonStopStateNumber;let c=0,h=0,p=n[0].context;for(let t=1;t<n.length;t++){let e=n[t];if(e.alt!==s)break;if(e.state.nonStopStateNumber!==u)break;h=t,p=r.join(p,n[t].context)}for(let t=h+1;t<n.length;t++){let e=n[t],a=e.state;if(o.set(e.alt),a.nonStopStateNumber!==u){u=a.nonStopStateNumber,c=t,h=t,p=e.context;for(let t=c+1;t<n.length;t++){let e=n[t];if(e.alt!==s)break;if(e.state.nonStopStateNumber!==u)break;h=t,p=r.join(p,e.context)}t=h;continue}let l=e.context,d=e.alt,f=t;for(let t=f+1;t<n.length;t++){let e=n[t];if(e.alt!==d)break;if(e.state.nonStopStateNumber!==u)break;f=t,l=r.join(l,e.context)}t=f;let y=r.join(p,l);if(!p.equals(y))return;i=i&&p.equals(l)}return new m.ConflictInfo(o,i)}getConflictingAltsFromConfigSet(t){let e=t.conflictingAlts;return null==e&&t.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER&&(e=new y.BitSet).set(t.uniqueAlt),e}getTokenName(t){if(t===U.Token.EOF)return"EOF";let e=(null!=this._parser?this._parser.vocabulary:M.VocabularyImpl.EMPTY_VOCABULARY).getDisplayName(t);return e===String(t)?e:e+"<"+t+">"}getLookaheadName(t){return this.getTokenName(t.LA(1))}dumpDeadEndConfigs(t){console.log("dead end configs: ");let e=t.deadEndConfigs;if(e)for(let r of e){let t="no edges";if(r.state.numberOfOptimizedTransitions>0){let e=r.state.getOptimizedTransition(0);e instanceof f.AtomTransition?t="Atom "+this.getTokenName(e._label):e instanceof I.SetTransition&&(t=(e instanceof S.NotSetTransition?"~":"")+"Set "+e.set.toString())}console.log(r.toString(this._parser,!0)+":"+t)}}noViableAlt(t,e,r,n){return new x.NoViableAltException(this._parser,t,t.get(n),t.LT(1),r,e)}getUniqueAlt(t){let e=l.ATN.INVALID_ALT_NUMBER;for(let r of t)if(e===l.ATN.INVALID_ALT_NUMBER)e=r.alt;else if(r.alt!==e)return l.ATN.INVALID_ALT_NUMBER;return e}configWithAltAtStopState(t,e){for(let r of t)if(r.alt===e&&r.state instanceof R.RuleStopState)return!0;return!1}addDFAEdge(e,r,n,i,o,s){let a=r,u=this.addDFAState(e,o,s);if(null!=i)for(let t of i.toArray()){if(t===N.PredictionContext.EMPTY_FULL_STATE_KEY&&a.configs.isOutermostConfigSet)continue;a.setContextSensitive(this.atn),a.setContextSymbol(n);let r=a.getContextTarget(t);null==r?(r=this.addDFAContextState(e,a.configs,t,s),a.setContextTarget(t,r),a=r):a=r}return t.debug&&console.log("EDGE "+a+" -> "+u+" upon "+this.getTokenName(n)),this.setDFAEdge(a,n,u),t.debug&&console.log("DFA=\n"+e.toString(null!=this._parser?this._parser.vocabulary:M.VocabularyImpl.EMPTY_VOCABULARY,null!=this._parser?this._parser.ruleNames:void 0)),u}setDFAEdge(t,e,r){null!=t&&t.setTarget(e,r)}addDFAContextState(t,e,r,n){if(r!==N.PredictionContext.EMPTY_FULL_STATE_KEY){let i=new h.ATNConfigSet;for(let t of e)i.add(t.appendContext(r,n));return this.addDFAState(t,i,n)}return(e=e.clone(!0)).isOutermostConfigSet=!0,this.addDFAState(t,e,n)}addDFAState(e,r,n){let i=this.enable_global_context_dfa||!r.isOutermostConfigSet;if(i){r.isReadOnly||r.optimizeConfigs(this);let t=this.createDFAState(e,r),n=e.states.get(t);if(null!=n)return n}r.isReadOnly||null==r.conflictInfo&&(r.conflictInfo=this.isConflicted(r,n));let s=this.createDFAState(e,r.clone(!0)),a=this.atn.getDecisionState(e.decision),u=this.getUniqueAlt(r);if(u!==l.ATN.INVALID_ALT_NUMBER)s.acceptStateInfo=new o.AcceptStateInfo(u);else if(null!=r.conflictingAlts){let t=r.conflictingAlts;t&&(s.acceptStateInfo=new o.AcceptStateInfo(t.nextSetBit(0)))}if(s.isAcceptState&&r.hasSemanticContext&&this.predicateDFAState(s,r,a.numberOfTransitions),!i)return s;let c=e.addState(s);return t.debug&&c===s&&console.log("adding new DFA state: "+s),c}createDFAState(t,e){return new v.DFAState(e)}reportAttemptingFullContext(e,r,n,i,o){if(t.debug||t.retry_debug){let t=_.Interval.of(i,o);console.log("reportAttemptingFullContext decision="+e.decision+":"+n.s0.configs+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportAttemptingFullContext&&t.reportAttemptingFullContext(this._parser,e,i,o,r,n)}}reportContextSensitivity(e,r,n,i,o){if(t.debug||t.retry_debug){let t=_.Interval.of(i,o);console.log("reportContextSensitivity decision="+e.decision+":"+n.s0.configs+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportContextSensitivity&&t.reportContextSensitivity(this._parser,e,i,o,r,n)}}reportAmbiguity(e,r,n,i,o,s,a){if(t.debug||t.retry_debug){let t=_.Interval.of(n,i);console.log("reportAmbiguity "+s+":"+a+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportAmbiguity&&t.reportAmbiguity(this._parser,e,n,i,o,s,a)}}getReturnState(t){return t.isEmpty?N.PredictionContext.EMPTY_FULL_STATE_KEY:this.atn.states[t.invokingState].transition(0).followState.stateNumber}skipTailCalls(t){if(!this.optimize_tail_calls)return t;for(;!t.isEmpty&&this.atn.states[t.invokingState].transition(0).tailCall;)t=t.parent;return t}get parser(){return this._parser}};k.debug=!1,k.dfa_debug=!1,k.retry_debug=!1,k.STATE_ALT_SORT_COMPARATOR=(t,e)=>{let r=t.state.nonStopStateNumber-e.state.nonStopStateNumber;return 0!==r||0!=(r=t.alt-e.alt)?r:0},n([b.NotNull],k.prototype,"predictionMode",void 0),n([b.NotNull],k.prototype,"getPredictionMode",null),n([i(0,b.NotNull)],k.prototype,"setPredictionMode",null),n([b.Override],k.prototype,"reset",null),n([i(0,b.NotNull)],k.prototype,"adaptivePredict",null),n([i(0,b.NotNull),i(1,b.NotNull),i(2,b.NotNull)],k.prototype,"getStartState",null),n([i(0,b.NotNull),i(1,b.NotNull),i(3,b.NotNull)],k.prototype,"execDFA",null),n([i(0,b.NotNull),i(1,b.NotNull),i(3,b.NotNull)],k.prototype,"execATN",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"handleNoViableAlt",null),n([i(0,b.NotNull)],k.prototype,"getExistingTargetState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"computeTargetState",null),n([b.NotNull,i(0,b.NotNull)],k.prototype,"removeAllConfigsNotInRuleStopState",null),n([b.NotNull],k.prototype,"computeStartState",null),n([b.NotNull,i(0,b.NotNull)],k.prototype,"applyPrecedenceFilter",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getReachableTarget",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getPredsForAmbigAlts",null),n([i(0,b.NotNull)],k.prototype,"evalSemanticContext",null),n([i(0,b.NotNull)],k.prototype,"evalSemanticContextImpl",null),n([i(1,b.NotNull),i(4,b.Nullable)],k.prototype,"closure",null),n([i(0,b.NotNull),i(1,b.NotNull),i(2,b.Nullable),i(3,b.NotNull),i(6,b.NotNull)],k.prototype,"closureImpl",null),n([b.NotNull],k.prototype,"getRuleName",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getEpsilonTarget",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"actionTransition",null),n([b.Nullable,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"precedenceTransition",null),n([b.Nullable,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"predTransition",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(2,b.Nullable)],k.prototype,"ruleTransition",null),n([i(0,b.NotNull)],k.prototype,"isConflicted",null),n([b.NotNull],k.prototype,"getTokenName",null),n([i(0,b.NotNull)],k.prototype,"dumpDeadEndConfigs",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(2,b.NotNull)],k.prototype,"noViableAlt",null),n([i(0,b.NotNull)],k.prototype,"getUniqueAlt",null),n([i(0,b.NotNull)],k.prototype,"configWithAltAtStopState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(4,b.NotNull)],k.prototype,"addDFAEdge",null),n([i(0,b.Nullable),i(2,b.Nullable)],k.prototype,"setDFAEdge",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"addDFAContextState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"addDFAState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"createDFAState",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"reportAttemptingFullContext",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"reportContextSensitivity",null),n([i(0,b.NotNull),i(5,b.NotNull),i(6,b.NotNull)],k.prototype,"reportAmbiguity",null),k=n([i(0,b.NotNull)],k),r.ParserATNSimulator=k},{252:252,258:258,264:264,267:267,276:276,278:278,279:279,280:280,281:281,284:284,286:286,288:288,290:290,295:295,299:299,317:317,326:326,327:327,328:328,332:332,333:333,334:334,335:335,336:336,343:343,346:346,350:350,352:352,353:353,356:356,358:358,362:362}],203:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n extends Array{static wrap(t){if(t instanceof n)return t;{const e=new n;return e.push(t),e}}getValue(t){if(0!==this.length)for(const e of Array.from(this).reverse())if(void 0!==e.getValue(t))return e.getValue(t)}setValue(t,e){throw new Error(`Can't set value to ${t}, stacked memory is read-only`)}version(){return"0"}}r.StackedMemory=n},{}],205:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(348),o=t(373),s=t(167),a=t(179),u=t(192),l=t(208),c=n(t(207)),h=t(210),p=t(196);class d{constructor(t){this.ExpressionTransformer=class extends o.AbstractParseTreeVisitor{constructor(t){super(),this.escapeRegex=new RegExp(/\\[^\r\n]?/g),this._lookupFunction=void 0,this.transform=t=>this.visit(t),this.visitParenthesisExp=t=>this.visit(t.expression()),this.defaultResult=()=>new s.Constant(""),this.makeExpression=(t,...e)=>{if(!this._lookupFunction(t))throw new Error(t+" does not have an evaluator, it's not a built-in function or a custom function.");return a.Expression.makeExpression(t,this._lookupFunction(t),...e)},this._lookupFunction=t}visitUnaryOpExp(t){const e=t.getChild(0).text,r=this.visit(t.expression());return e===u.ExpressionType.Subtract||e===u.ExpressionType.Add?this.makeExpression(e,new s.Constant(0),r):this.makeExpression(e,r)}visitBinaryOpExp(t){const e=t.getChild(1).text,r=this.visit(t.expression(0)),n=this.visit(t.expression(1));return this.makeExpression(e,r,n)}visitTripleOpExp(t){const e=this.visit(t.expression(0)),r=this.visit(t.expression(1)),n=this.visit(t.expression(2));return this.makeExpression(u.ExpressionType.If,e,r,n)}visitFuncInvokeExp(t){const e=this.processArgsList(t.argsList());let r=t.primaryExpression().text;return void 0!==t.NON()&&(r+=t.NON().text),this.makeExpression(r,...e)}visitIdAtom(t){const e=t.text;return"false"===e?new s.Constant(!1):"true"===e?new s.Constant(!0):"null"===e?new s.Constant(null):"undefined"===e?new s.Constant(void 0):this.makeExpression(u.ExpressionType.Accessor,new s.Constant(e))}visitIndexAccessExp(t){const e=this.visit(t.expression()),r=this.visit(t.primaryExpression());return this.makeExpression(u.ExpressionType.Element,r,e)}visitMemberAccessExp(t){const e=t.IDENTIFIER().text,r=this.visit(t.primaryExpression());return this.makeExpression(u.ExpressionType.Accessor,new s.Constant(e),r)}visitNumericAtom(t){const e=parseFloat(t.text);if(p.FunctionUtils.isNumber(e))return new s.Constant(e);throw new Error(t.text+" is not a number.")}visitArrayCreationExp(t){const e=this.processArgsList(t.argsList());return this.makeExpression(u.ExpressionType.CreateArray,...e)}visitStringAtom(t){let e=t.text;if(e.startsWith("'")&&e.endsWith("'"))e=e.substr(1,e.length-2).replace(/\\'/g,"'");else{if(!e.startsWith('"')||!e.endsWith('"'))throw new Error("Invalid string "+e);e=e.substr(1,e.length-2).replace(/\\"/g,'"')}return new s.Constant(this.evalEscape(e))}visitJsonCreationExp(t){let e=this.makeExpression(u.ExpressionType.Json,new s.Constant("{}"));if(t.keyValuePairList())for(const r of t.keyValuePairList().keyValuePair()){let t="";const n=r.key().children[0];n instanceof o.TerminalNode&&(t=n.symbol.type===c.ExpressionAntlrParser.IDENTIFIER?n.text:n.text.substring(1,n.text.length-1)),e=this.makeExpression(u.ExpressionType.SetProperty,e,new s.Constant(t),this.visit(r.expression()))}return e}visitStringInterpolationAtom(t){const e=[new s.Constant("")];for(const r of t.stringInterpolation().children)if(r instanceof o.TerminalNode)switch(r.symbol.type){case c.ExpressionAntlrParser.TEMPLATE:{const t=this.trimExpression(r.text);e.push(a.Expression.parse(t,this._lookupFunction));break}case c.ExpressionAntlrParser.ESCAPE_CHARACTER:e.push(new s.Constant(r.text.replace(/\\`/g,"`").replace(/\\\$/g,"$")))}else e.push(new s.Constant(r.text));return this.makeExpression(u.ExpressionType.Concat,...e)}processArgsList(t){const e=[];if(!t)return e;for(const r of t.children)if(r instanceof c.LambdaContext){const t=this.makeExpression(u.ExpressionType.Accessor,new s.Constant(r.IDENTIFIER().text)),n=this.visit(r.expression());e.push(t),e.push(n)}else r instanceof c.ExpressionContext&&e.push(this.visit(r));return e}trimExpression(t){let e=t.trim();return e.startsWith("$")&&(e=e.substr(1)),(e=e.trim()).startsWith("{")&&e.endsWith("}")&&(e=e.substr(1,e.length-2)),e.trim()}evalEscape(t){const e={"\\r":"\r","\\n":"\n","\\t":"\t","\\\\":"\\"};return t.replace(this.escapeRegex,t=>t in e?e[t]:t)}},this.EvaluatorLookup=t||a.Expression.lookup}static antlrParse(t){if(d.expressionDict.has(t))return d.expressionDict.get(t);const e=new i.ANTLRInputStream(t),r=new l.ExpressionAntlrLexer(e);r.removeErrorListeners();const n=new i.CommonTokenStream(r),o=new l.ExpressionAntlrParser(n);let s;o.removeErrorListeners(),o.addErrorListener(h.ParseErrorListener.Instance),o.buildParseTree=!0;const a=o.file();return void 0!==a&&(s=a.expression()),d.expressionDict.set(t,s),s}parse(t){return null==t||""===t?new s.Constant(""):new this.ExpressionTransformer(this.EvaluatorLookup).transform(d.antlrParse(t))}}d.expressionDict=new Map,r.ExpressionParser=d},{167:167,179:179,192:192,196:196,207:207,208:208,210:210,348:348,373:373}],210:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){throw Error(`syntax error at line ${r}:${n} Invalid expression format.`)}}n.Instance=new n,r.ParseErrorListener=n},{}],208:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(206)),n(t(207))},{206:206,207:207}],207:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(283),s=t(256),a=t(264),u=t(265),l=t(267),c=t(320),h=t(270),p=t(276),d=t(278),f=n(t(365));class y extends u.Parser{constructor(t){super(t),this._interp=new c.ParserATNSimulator(y._ATN,this)}get vocabulary(){return y.VOCABULARY}get grammarFileName(){return"ExpressionAntlrParser.g4"}get ruleNames(){return y.ruleNames}get serializedATN(){return y._serializedATN}file(){let t=new m(this._ctx,this.state);this.enterRule(t,0,y.RULE_file);try{this.enterOuterAlt(t,1),this.state=20,this.expression(0),this.state=21,this.match(y.EOF)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}expression(t){void 0===t&&(t=0);let e,r=this._ctx,n=this.state,o=new g(this._ctx,n),u=o;this.enterRecursionRule(o,2,y.RULE_expression,t);try{let t;switch(this.enterOuterAlt(o,1),this.state=27,this._errHandler.sync(this),this._input.LA(1)){case y.PLUS:case y.SUBSTRACT:case y.NON:o=new v(o),this._ctx=o,u=o,this.state=24,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=25,this.expression(12);break;case y.STRING_INTERPOLATION_START:case y.OPEN_BRACKET:case y.OPEN_SQUARE_BRACKET:case y.OPEN_CURLY_BRACKET:case y.NUMBER:case y.IDENTIFIER:case y.STRING:o=new E(o),this._ctx=o,u=o,this.state=26,this.primaryExpression(0);break;default:throw new a.NoViableAltException(this)}for(this._ctx._stop=this._input.tryLT(-1),this.state=64,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,2,this._ctx);2!==t&&t!==i.ATN.INVALID_ALT_NUMBER;){if(1===t)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),u=o,this.state=62,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,1,this._ctx)){case 1:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=29,!this.precpred(this._ctx,11))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 11)");this.state=30,this.match(y.XOR),this.state=31,this.expression(11);break;case 2:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=32,!this.precpred(this._ctx,10))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 10)");this.state=33,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.ASTERISK|1<<y.SLASH|1<<y.PERCENT))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=34,this.expression(11);break;case 3:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=35,!this.precpred(this._ctx,9))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 9)");this.state=36,(e=this._input.LA(1))!==y.PLUS&&e!==y.SUBSTRACT?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=37,this.expression(10);break;case 4:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=38,!this.precpred(this._ctx,8))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 8)");this.state=39,(e=this._input.LA(1))!==y.DOUBLE_EQUAL&&e!==y.NOT_EQUAL?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=40,this.expression(9);break;case 5:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=41,!this.precpred(this._ctx,7))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 7)");this.state=42,this.match(y.SINGLE_AND),this.state=43,this.expression(8);break;case 6:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=44,!this.precpred(this._ctx,6))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 6)");this.state=45,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.LESS_THAN|1<<y.MORE_THAN|1<<y.LESS_OR_EQUAl|1<<y.MORE_OR_EQUAL))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=46,this.expression(7);break;case 7:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=47,!this.precpred(this._ctx,5))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 5)");this.state=48,this.match(y.DOUBLE_AND),this.state=49,this.expression(6);break;case 8:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=50,!this.precpred(this._ctx,4))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 4)");this.state=51,this.match(y.DOUBLE_VERTICAL_CYLINDER),this.state=52,this.expression(5);break;case 9:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=53,!this.precpred(this._ctx,3))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 3)");this.state=54,this.match(y.NULL_COALESCE),this.state=55,this.expression(4);break;case 10:if(o=new _(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=56,!this.precpred(this._ctx,2))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 2)");this.state=57,this.match(y.QUESTION_MARK),this.state=58,this.expression(0),this.state=59,this.match(y.COLON),this.state=60,this.expression(3)}this.state=66,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,2,this._ctx)}}catch(l){if(!(l instanceof h.RecognitionException))throw l;o.exception=l,this._errHandler.reportError(this,l),this._errHandler.recover(this,l)}finally{this.unrollRecursionContexts(r)}return o}primaryExpression(t){void 0===t&&(t=0);let e,r=this._ctx,n=this.state,o=new b(this._ctx,n),u=o;this.enterRecursionRule(o,4,y.RULE_primaryExpression,t);try{let t;switch(this.enterOuterAlt(o,1),this.state=86,this._errHandler.sync(this),this._input.LA(1)){case y.OPEN_BRACKET:o=new S(o),this._ctx=o,u=o,this.state=68,this.match(y.OPEN_BRACKET),this.state=69,this.expression(0),this.state=70,this.match(y.CLOSE_BRACKET);break;case y.OPEN_SQUARE_BRACKET:o=new x(o),this._ctx=o,u=o,this.state=72,this.match(y.OPEN_SQUARE_BRACKET),this.state=74,this._errHandler.sync(this),(0==(-32&(e=this._input.LA(1)))&&0!=(1<<e&(1<<y.STRING_INTERPOLATION_START|1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON|1<<y.OPEN_BRACKET|1<<y.OPEN_SQUARE_BRACKET|1<<y.OPEN_CURLY_BRACKET|1<<y.NUMBER))||e===y.IDENTIFIER||e===y.STRING)&&(this.state=73,this.argsList()),this.state=76,this.match(y.CLOSE_SQUARE_BRACKET);break;case y.OPEN_CURLY_BRACKET:o=new C(o),this._ctx=o,u=o,this.state=77,this.match(y.OPEN_CURLY_BRACKET),this.state=79,this._errHandler.sync(this),(e=this._input.LA(1))!==y.IDENTIFIER&&e!==y.STRING||(this.state=78,this.keyValuePairList()),this.state=81,this.match(y.CLOSE_CURLY_BRACKET);break;case y.NUMBER:o=new A(o),this._ctx=o,u=o,this.state=82,this.match(y.NUMBER);break;case y.STRING:o=new N(o),this._ctx=o,u=o,this.state=83,this.match(y.STRING);break;case y.IDENTIFIER:o=new O(o),this._ctx=o,u=o,this.state=84,this.match(y.IDENTIFIER);break;case y.STRING_INTERPOLATION_START:o=new w(o),this._ctx=o,u=o,this.state=85,this.stringInterpolation();break;default:throw new a.NoViableAltException(this)}for(this._ctx._stop=this._input.tryLT(-1),this.state=107,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,9,this._ctx);2!==t&&t!==i.ATN.INVALID_ALT_NUMBER;){if(1===t)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),u=o,this.state=105,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,8,this._ctx)){case 1:if(o=new R(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=88,!this.precpred(this._ctx,3))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 3)");this.state=89,this.match(y.DOT),this.state=90,this.match(y.IDENTIFIER);break;case 2:if(o=new L(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=91,!this.precpred(this._ctx,2))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 2)");this.state=93,this._errHandler.sync(this),(e=this._input.LA(1))===y.NON&&(this.state=92,this.match(y.NON)),this.state=95,this.match(y.OPEN_BRACKET),this.state=97,this._errHandler.sync(this),(0==(-32&(e=this._input.LA(1)))&&0!=(1<<e&(1<<y.STRING_INTERPOLATION_START|1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON|1<<y.OPEN_BRACKET|1<<y.OPEN_SQUARE_BRACKET|1<<y.OPEN_CURLY_BRACKET|1<<y.NUMBER))||e===y.IDENTIFIER||e===y.STRING)&&(this.state=96,this.argsList()),this.state=99,this.match(y.CLOSE_BRACKET);break;case 3:if(o=new P(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=100,!this.precpred(this._ctx,1))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 1)");this.state=101,this.match(y.OPEN_SQUARE_BRACKET),this.state=102,this.expression(0),this.state=103,this.match(y.CLOSE_SQUARE_BRACKET)}this.state=109,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,9,this._ctx)}}catch(l){if(!(l instanceof h.RecognitionException))throw l;o.exception=l,this._errHandler.reportError(this,l),this._errHandler.recover(this,l)}finally{this.unrollRecursionContexts(r)}return o}stringInterpolation(){let t,e=new I(this._ctx,this.state);this.enterRule(e,6,y.RULE_stringInterpolation);try{for(this.enterOuterAlt(e,1),this.state=110,this.match(y.STRING_INTERPOLATION_START),this.state=116,this._errHandler.sync(this),t=this._input.LA(1);0==(t-36&-32)&&0!=(1<<t-36&(1<<y.TEMPLATE-36|1<<y.ESCAPE_CHARACTER-36|1<<y.TEXT_CONTENT-36));){switch(this.state=114,this._errHandler.sync(this),this._input.LA(1)){case y.ESCAPE_CHARACTER:this.state=111,this.match(y.ESCAPE_CHARACTER);break;case y.TEMPLATE:this.state=112,this.match(y.TEMPLATE);break;case y.TEXT_CONTENT:this.state=113,this.textContent();break;default:throw new a.NoViableAltException(this)}this.state=118,this._errHandler.sync(this),t=this._input.LA(1)}this.state=119,this.match(y.STRING_INTERPOLATION_START)}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}textContent(){let t=new D(this._ctx,this.state);this.enterRule(t,8,y.RULE_textContent);try{let e;this.enterOuterAlt(t,1),this.state=122,this._errHandler.sync(this),e=1;do{switch(e){case 1:this.state=121,this.match(y.TEXT_CONTENT);break;default:throw new a.NoViableAltException(this)}this.state=124,this._errHandler.sync(this),e=this.interpreter.adaptivePredict(this._input,12,this._ctx)}while(2!==e&&e!==i.ATN.INVALID_ALT_NUMBER)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}argsList(){let t,e=new U(this._ctx,this.state);this.enterRule(e,10,y.RULE_argsList);try{switch(this.enterOuterAlt(e,1),this.state=128,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,13,this._ctx)){case 1:this.state=126,this.lambda();break;case 2:this.state=127,this.expression(0)}for(this.state=137,this._errHandler.sync(this),t=this._input.LA(1);t===y.COMMA;){switch(this.state=130,this.match(y.COMMA),this.state=133,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,14,this._ctx)){case 1:this.state=131,this.lambda();break;case 2:this.state=132,this.expression(0)}this.state=139,this._errHandler.sync(this),t=this._input.LA(1)}}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}lambda(){let t=new M(this._ctx,this.state);this.enterRule(t,12,y.RULE_lambda);try{this.enterOuterAlt(t,1),this.state=140,this.match(y.IDENTIFIER),this.state=141,this.match(y.ARROW),this.state=142,this.expression(0)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}keyValuePairList(){let t,e=new k(this._ctx,this.state);this.enterRule(e,14,y.RULE_keyValuePairList);try{for(this.enterOuterAlt(e,1),this.state=144,this.keyValuePair(),this.state=149,this._errHandler.sync(this),t=this._input.LA(1);t===y.COMMA;)this.state=145,this.match(y.COMMA),this.state=146,this.keyValuePair(),this.state=151,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}keyValuePair(){let t=new F(this._ctx,this.state);this.enterRule(t,16,y.RULE_keyValuePair);try{this.enterOuterAlt(t,1),this.state=152,this.key(),this.state=153,this.match(y.COLON),this.state=154,this.expression(0)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}key(){let t,e=new j(this._ctx,this.state);this.enterRule(e,18,y.RULE_key);try{this.enterOuterAlt(e,1),this.state=156,(t=this._input.LA(1))!==y.IDENTIFIER&&t!==y.STRING?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}sempred(t,e,r){switch(e){case 1:return this.expression_sempred(t,r);case 2:return this.primaryExpression_sempred(t,r)}return!0}expression_sempred(t,e){switch(e){case 0:return this.precpred(this._ctx,11);case 1:return this.precpred(this._ctx,10);case 2:return this.precpred(this._ctx,9);case 3:return this.precpred(this._ctx,8);case 4:return this.precpred(this._ctx,7);case 5:return this.precpred(this._ctx,6);case 6:return this.precpred(this._ctx,5);case 7:return this.precpred(this._ctx,4);case 8:return this.precpred(this._ctx,3);case 9:return this.precpred(this._ctx,2)}return!0}primaryExpression_sempred(t,e){switch(e){case 10:return this.precpred(this._ctx,3);case 11:return this.precpred(this._ctx,2);case 12:return this.precpred(this._ctx,1)}return!0}static get _ATN(){return y.__ATN||(y.__ATN=(new o.ATNDeserializer).deserialize(f.toCharArray(y._serializedATN))),y.__ATN}}y.STRING_INTERPOLATION_START=1,y.PLUS=2,y.SUBSTRACT=3,y.NON=4,y.XOR=5,y.ASTERISK=6,y.SLASH=7,y.PERCENT=8,y.DOUBLE_EQUAL=9,y.NOT_EQUAL=10,y.SINGLE_AND=11,y.DOUBLE_AND=12,y.DOUBLE_VERTICAL_CYLINDER=13,y.LESS_THAN=14,y.MORE_THAN=15,y.LESS_OR_EQUAl=16,y.MORE_OR_EQUAL=17,y.OPEN_BRACKET=18,y.CLOSE_BRACKET=19,y.DOT=20,y.OPEN_SQUARE_BRACKET=21,y.CLOSE_SQUARE_BRACKET=22,y.OPEN_CURLY_BRACKET=23,y.CLOSE_CURLY_BRACKET=24,y.COMMA=25,y.COLON=26,y.ARROW=27,y.NULL_COALESCE=28,y.QUESTION_MARK=29,y.NUMBER=30,y.WHITESPACE=31,y.IDENTIFIER=32,y.NEWLINE=33,y.STRING=34,y.INVALID_TOKEN_DEFAULT_MODE=35,y.TEMPLATE=36,y.ESCAPE_CHARACTER=37,y.TEXT_CONTENT=38,y.RULE_file=0,y.RULE_expression=1,y.RULE_primaryExpression=2,y.RULE_stringInterpolation=3,y.RULE_textContent=4,y.RULE_argsList=5,y.RULE_lambda=6,y.RULE_keyValuePairList=7,y.RULE_keyValuePair=8,y.RULE_key=9,y.ruleNames=["file","expression","primaryExpression","stringInterpolation","textContent","argsList","lambda","keyValuePairList","keyValuePair","key"],y._LITERAL_NAMES=[void 0,void 0,"'+'","'-'","'!'","'^'","'*'","'/'","'%'","'=='",void 0,"'&'","'&&'","'||'","'<'","'>'","'<='","'>='","'('","')'","'.'","'['","']'","'{'","'}'","','","':'","'=>'","'??'","'?'"],y._SYMBOLIC_NAMES=[void 0,"STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],y.VOCABULARY=new d.VocabularyImpl(y._LITERAL_NAMES,y._SYMBOLIC_NAMES,[]),y._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x03(\xa1\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\x1e\n\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03A\n\x03\f\x03\x0e\x03D\v\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04M\n\x04\x03\x04\x03\x04\x03\x04\x05\x04R\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04Y\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04`\n\x04\x03\x04\x03\x04\x05\x04d\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04l\n\x04\f\x04\x0e\x04o\v\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05u\n\x05\f\x05\x0e\x05x\v\x05\x03\x05\x03\x05\x03\x06\x06\x06}\n\x06\r\x06\x0e\x06~\x03\x07\x03\x07\x05\x07\x83\n\x07\x03\x07\x03\x07\x03\x07\x05\x07\x88\n\x07\x07\x07\x8a\n\x07\f\x07\x0e\x07\x8d\v\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x07\t\x96\n\t\f\t\x0e\t\x99\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x02\x02\x04\x04\x06\f\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0e\x02\x10\x02\x12\x02\x14\x02\x02\b\x03\x02\x04\x06\x03\x02\b\n\x03\x02\x04\x05\x03\x02\v\f\x03\x02\x10\x13\x04\x02""$$\x02\xb6\x02\x16\x03\x02\x02\x02\x04\x1d\x03\x02\x02\x02\x06X\x03\x02\x02\x02\bp\x03\x02\x02\x02\n|\x03\x02\x02\x02\f\x82\x03\x02\x02\x02\x0e\x8e\x03\x02\x02\x02\x10\x92\x03\x02\x02\x02\x12\x9a\x03\x02\x02\x02\x14\x9e\x03\x02\x02\x02\x16\x17\x05\x04\x03\x02\x17\x18\x07\x02\x02\x03\x18\x03\x03\x02\x02\x02\x19\x1a\b\x03\x01\x02\x1a\x1b\t\x02\x02\x02\x1b\x1e\x05\x04\x03\x0e\x1c\x1e\x05\x06\x04\x02\x1d\x19\x03\x02\x02\x02\x1d\x1c\x03\x02\x02\x02\x1eB\x03\x02\x02\x02\x1f \f\r\x02\x02 !\x07\x07\x02\x02!A\x05\x04\x03\r"#\f\f\x02\x02#$\t\x03\x02\x02$A\x05\x04\x03\r%&\f\v\x02\x02&\'\t\x04\x02\x02\'A\x05\x04\x03\f()\f\n\x02\x02)*\t\x05\x02\x02*A\x05\x04\x03\v+,\f\t\x02\x02,-\x07\r\x02\x02-A\x05\x04\x03\n./\f\b\x02\x02/0\t\x06\x02\x020A\x05\x04\x03\t12\f\x07\x02\x0223\x07\x0e\x02\x023A\x05\x04\x03\b45\f\x06\x02\x0256\x07\x0f\x02\x026A\x05\x04\x03\x0778\f\x05\x02\x0289\x07\x1e\x02\x029A\x05\x04\x03\x06:;\f\x04\x02\x02;<\x07\x1f\x02\x02<=\x05\x04\x03\x02=>\x07\x1c\x02\x02>?\x05\x04\x03\x05?A\x03\x02\x02\x02@\x1f\x03\x02\x02\x02@"\x03\x02\x02\x02@%\x03\x02\x02\x02@(\x03\x02\x02\x02@+\x03\x02\x02\x02@.\x03\x02\x02\x02@1\x03\x02\x02\x02@4\x03\x02\x02\x02@7\x03\x02\x02\x02@:\x03\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x05\x03\x02\x02\x02DB\x03\x02\x02\x02EF\b\x04\x01\x02FG\x07\x14\x02\x02GH\x05\x04\x03\x02HI\x07\x15\x02\x02IY\x03\x02\x02\x02JL\x07\x17\x02\x02KM\x05\f\x07\x02LK\x03\x02\x02\x02LM\x03\x02\x02\x02MN\x03\x02\x02\x02NY\x07\x18\x02\x02OQ\x07\x19\x02\x02PR\x05\x10\t\x02QP\x03\x02\x02\x02QR\x03\x02\x02\x02RS\x03\x02\x02\x02SY\x07\x1a\x02\x02TY\x07 \x02\x02UY\x07$\x02\x02VY\x07"\x02\x02WY\x05\b\x05\x02XE\x03\x02\x02\x02XJ\x03\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02\x02XU\x03\x02\x02\x02XV\x03\x02\x02\x02XW\x03\x02\x02\x02Ym\x03\x02\x02\x02Z[\f\x05\x02\x02[\\\x07\x16\x02\x02\\l\x07"\x02\x02]_\f\x04\x02\x02^`\x07\x06\x02\x02_^\x03\x02\x02\x02_`\x03\x02\x02\x02`a\x03\x02\x02\x02ac\x07\x14\x02\x02bd\x05\f\x07\x02cb\x03\x02\x02\x02cd\x03\x02\x02\x02de\x03\x02\x02\x02el\x07\x15\x02\x02fg\f\x03\x02\x02gh\x07\x17\x02\x02hi\x05\x04\x03\x02ij\x07\x18\x02\x02jl\x03\x02\x02\x02kZ\x03\x02\x02\x02k]\x03\x02\x02\x02kf\x03\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02n\x07\x03\x02\x02\x02om\x03\x02\x02\x02pv\x07\x03\x02\x02qu\x07\'\x02\x02ru\x07&\x02\x02su\x05\n\x06\x02tq\x03\x02\x02\x02tr\x03\x02\x02\x02ts\x03\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03\x02\x02\x02xv\x03\x02\x02\x02yz\x07\x03\x02\x02z\t\x03\x02\x02\x02{}\x07(\x02\x02|{\x03\x02\x02\x02}~\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7f\x03\x02\x02\x02\x7f\v\x03\x02\x02\x02\x80\x83\x05\x0e\b\x02\x81\x83\x05\x04\x03\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83\x8b\x03\x02\x02\x02\x84\x87\x07\x1b\x02\x02\x85\x88\x05\x0e\b\x02\x86\x88\x05\x04\x03\x02\x87\x85\x03\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8a\x03\x02\x02\x02\x89\x84\x03\x02\x02\x02\x8a\x8d\x03\x02\x02\x02\x8b\x89\x03\x02\x02\x02\x8b\x8c\x03\x02\x02\x02\x8c\r\x03\x02\x02\x02\x8d\x8b\x03\x02\x02\x02\x8e\x8f\x07"\x02\x02\x8f\x90\x07\x1d\x02\x02\x90\x91\x05\x04\x03\x02\x91\x0f\x03\x02\x02\x02\x92\x97\x05\x12\n\x02\x93\x94\x07\x1b\x02\x02\x94\x96\x05\x12\n\x02\x95\x93\x03\x02\x02\x02\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x11\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9a\x9b\x05\x14\v\x02\x9b\x9c\x07\x1c\x02\x02\x9c\x9d\x05\x04\x03\x02\x9d\x13\x03\x02\x02\x02\x9e\x9f\t\x07\x02\x02\x9f\x15\x03\x02\x02\x02\x13\x1d@BLQX_ckmtv~\x82\x87\x8b\x97',r.ExpressionAntlrParser=y;class m extends l.ParserRuleContext{expression(){return this.getRuleContext(0,g)}EOF(){return this.getToken(y.EOF,0)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_file}enterRule(t){t.enterFile&&t.enterFile(this)}exitRule(t){t.exitFile&&t.exitFile(this)}accept(t){return t.visitFile?t.visitFile(this):t.visitChildren(this)}}r.FileContext=m;class g extends l.ParserRuleContext{constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_expression}copyFrom(t){super.copyFrom(t)}}r.ExpressionContext=g;class v extends g{expression(){return this.getRuleContext(0,g)}NON(){return this.tryGetToken(y.NON,0)}SUBSTRACT(){return this.tryGetToken(y.SUBSTRACT,0)}PLUS(){return this.tryGetToken(y.PLUS,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterUnaryOpExp&&t.enterUnaryOpExp(this)}exitRule(t){t.exitUnaryOpExp&&t.exitUnaryOpExp(this)}accept(t){return t.visitUnaryOpExp?t.visitUnaryOpExp(this):t.visitChildren(this)}}r.UnaryOpExpContext=v;class T extends g{expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}XOR(){return this.tryGetToken(y.XOR,0)}ASTERISK(){return this.tryGetToken(y.ASTERISK,0)}SLASH(){return this.tryGetToken(y.SLASH,0)}PERCENT(){return this.tryGetToken(y.PERCENT,0)}PLUS(){return this.tryGetToken(y.PLUS,0)}SUBSTRACT(){return this.tryGetToken(y.SUBSTRACT,0)}DOUBLE_EQUAL(){return this.tryGetToken(y.DOUBLE_EQUAL,0)}NOT_EQUAL(){return this.tryGetToken(y.NOT_EQUAL,0)}SINGLE_AND(){return this.tryGetToken(y.SINGLE_AND,0)}LESS_THAN(){return this.tryGetToken(y.LESS_THAN,0)}LESS_OR_EQUAl(){return this.tryGetToken(y.LESS_OR_EQUAl,0)}MORE_THAN(){return this.tryGetToken(y.MORE_THAN,0)}MORE_OR_EQUAL(){return this.tryGetToken(y.MORE_OR_EQUAL,0)}DOUBLE_AND(){return this.tryGetToken(y.DOUBLE_AND,0)}DOUBLE_VERTICAL_CYLINDER(){return this.tryGetToken(y.DOUBLE_VERTICAL_CYLINDER,0)}NULL_COALESCE(){return this.tryGetToken(y.NULL_COALESCE,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterBinaryOpExp&&t.enterBinaryOpExp(this)}exitRule(t){t.exitBinaryOpExp&&t.exitBinaryOpExp(this)}accept(t){return t.visitBinaryOpExp?t.visitBinaryOpExp(this):t.visitChildren(this)}}r.BinaryOpExpContext=T;class _ extends g{expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}QUESTION_MARK(){return this.getToken(y.QUESTION_MARK,0)}COLON(){return this.getToken(y.COLON,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterTripleOpExp&&t.enterTripleOpExp(this)}exitRule(t){t.exitTripleOpExp&&t.exitTripleOpExp(this)}accept(t){return t.visitTripleOpExp?t.visitTripleOpExp(this):t.visitChildren(this)}}r.TripleOpExpContext=_;class E extends g{primaryExpression(){return this.getRuleContext(0,b)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterPrimaryExp&&t.enterPrimaryExp(this)}exitRule(t){t.exitPrimaryExp&&t.exitPrimaryExp(this)}accept(t){return t.visitPrimaryExp?t.visitPrimaryExp(this):t.visitChildren(this)}}r.PrimaryExpContext=E;class b extends l.ParserRuleContext{constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_primaryExpression}copyFrom(t){super.copyFrom(t)}}r.PrimaryExpressionContext=b;class S extends b{OPEN_BRACKET(){return this.getToken(y.OPEN_BRACKET,0)}expression(){return this.getRuleContext(0,g)}CLOSE_BRACKET(){return this.getToken(y.CLOSE_BRACKET,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterParenthesisExp&&t.enterParenthesisExp(this)}exitRule(t){t.exitParenthesisExp&&t.exitParenthesisExp(this)}accept(t){return t.visitParenthesisExp?t.visitParenthesisExp(this):t.visitChildren(this)}}r.ParenthesisExpContext=S;class x extends b{OPEN_SQUARE_BRACKET(){return this.getToken(y.OPEN_SQUARE_BRACKET,0)}CLOSE_SQUARE_BRACKET(){return this.getToken(y.CLOSE_SQUARE_BRACKET,0)}argsList(){return this.tryGetRuleContext(0,U)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterArrayCreationExp&&t.enterArrayCreationExp(this)}exitRule(t){t.exitArrayCreationExp&&t.exitArrayCreationExp(this)}accept(t){return t.visitArrayCreationExp?t.visitArrayCreationExp(this):t.visitChildren(this)}}r.ArrayCreationExpContext=x;class C extends b{OPEN_CURLY_BRACKET(){return this.getToken(y.OPEN_CURLY_BRACKET,0)}CLOSE_CURLY_BRACKET(){return this.getToken(y.CLOSE_CURLY_BRACKET,0)}keyValuePairList(){return this.tryGetRuleContext(0,k)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterJsonCreationExp&&t.enterJsonCreationExp(this)}exitRule(t){t.exitJsonCreationExp&&t.exitJsonCreationExp(this)}accept(t){return t.visitJsonCreationExp?t.visitJsonCreationExp(this):t.visitChildren(this)}}r.JsonCreationExpContext=C;class A extends b{NUMBER(){return this.getToken(y.NUMBER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterNumericAtom&&t.enterNumericAtom(this)}exitRule(t){t.exitNumericAtom&&t.exitNumericAtom(this)}accept(t){return t.visitNumericAtom?t.visitNumericAtom(this):t.visitChildren(this)}}r.NumericAtomContext=A;class N extends b{STRING(){return this.getToken(y.STRING,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterStringAtom&&t.enterStringAtom(this)}exitRule(t){t.exitStringAtom&&t.exitStringAtom(this)}accept(t){return t.visitStringAtom?t.visitStringAtom(this):t.visitChildren(this)}}r.StringAtomContext=N;class O extends b{IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterIdAtom&&t.enterIdAtom(this)}exitRule(t){t.exitIdAtom&&t.exitIdAtom(this)}accept(t){return t.visitIdAtom?t.visitIdAtom(this):t.visitChildren(this)}}r.IdAtomContext=O;class w extends b{stringInterpolation(){return this.getRuleContext(0,I)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterStringInterpolationAtom&&t.enterStringInterpolationAtom(this)}exitRule(t){t.exitStringInterpolationAtom&&t.exitStringInterpolationAtom(this)}accept(t){return t.visitStringInterpolationAtom?t.visitStringInterpolationAtom(this):t.visitChildren(this)}}r.StringInterpolationAtomContext=w;class R extends b{primaryExpression(){return this.getRuleContext(0,b)}DOT(){return this.getToken(y.DOT,0)}IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterMemberAccessExp&&t.enterMemberAccessExp(this)}exitRule(t){t.exitMemberAccessExp&&t.exitMemberAccessExp(this)}accept(t){return t.visitMemberAccessExp?t.visitMemberAccessExp(this):t.visitChildren(this)}}r.MemberAccessExpContext=R;class L extends b{primaryExpression(){return this.getRuleContext(0,b)}OPEN_BRACKET(){return this.getToken(y.OPEN_BRACKET,0)}CLOSE_BRACKET(){return this.getToken(y.CLOSE_BRACKET,0)}NON(){return this.tryGetToken(y.NON,0)}argsList(){return this.tryGetRuleContext(0,U)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterFuncInvokeExp&&t.enterFuncInvokeExp(this)}exitRule(t){t.exitFuncInvokeExp&&t.exitFuncInvokeExp(this)}accept(t){return t.visitFuncInvokeExp?t.visitFuncInvokeExp(this):t.visitChildren(this)}}r.FuncInvokeExpContext=L;class P extends b{primaryExpression(){return this.getRuleContext(0,b)}OPEN_SQUARE_BRACKET(){return this.getToken(y.OPEN_SQUARE_BRACKET,0)}expression(){return this.getRuleContext(0,g)}CLOSE_SQUARE_BRACKET(){return this.getToken(y.CLOSE_SQUARE_BRACKET,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterIndexAccessExp&&t.enterIndexAccessExp(this)}exitRule(t){t.exitIndexAccessExp&&t.exitIndexAccessExp(this)}accept(t){return t.visitIndexAccessExp?t.visitIndexAccessExp(this):t.visitChildren(this)}}r.IndexAccessExpContext=P;class I extends l.ParserRuleContext{STRING_INTERPOLATION_START(t){return void 0===t?this.getTokens(y.STRING_INTERPOLATION_START):this.getToken(y.STRING_INTERPOLATION_START,t)}ESCAPE_CHARACTER(t){return void 0===t?this.getTokens(y.ESCAPE_CHARACTER):this.getToken(y.ESCAPE_CHARACTER,t)}TEMPLATE(t){return void 0===t?this.getTokens(y.TEMPLATE):this.getToken(y.TEMPLATE,t)}textContent(t){return void 0===t?this.getRuleContexts(D):this.getRuleContext(t,D)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_stringInterpolation}enterRule(t){t.enterStringInterpolation&&t.enterStringInterpolation(this)}exitRule(t){t.exitStringInterpolation&&t.exitStringInterpolation(this)}accept(t){return t.visitStringInterpolation?t.visitStringInterpolation(this):t.visitChildren(this)}}r.StringInterpolationContext=I;class D extends l.ParserRuleContext{TEXT_CONTENT(t){return void 0===t?this.getTokens(y.TEXT_CONTENT):this.getToken(y.TEXT_CONTENT,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_textContent}enterRule(t){t.enterTextContent&&t.enterTextContent(this)}exitRule(t){t.exitTextContent&&t.exitTextContent(this)}accept(t){return t.visitTextContent?t.visitTextContent(this):t.visitChildren(this)}}r.TextContentContext=D;class U extends l.ParserRuleContext{lambda(t){return void 0===t?this.getRuleContexts(M):this.getRuleContext(t,M)}expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}COMMA(t){return void 0===t?this.getTokens(y.COMMA):this.getToken(y.COMMA,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_argsList}enterRule(t){t.enterArgsList&&t.enterArgsList(this)}exitRule(t){t.exitArgsList&&t.exitArgsList(this)}accept(t){return t.visitArgsList?t.visitArgsList(this):t.visitChildren(this)}}r.ArgsListContext=U;class M extends l.ParserRuleContext{IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}ARROW(){return this.getToken(y.ARROW,0)}expression(){return this.getRuleContext(0,g)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_lambda}enterRule(t){t.enterLambda&&t.enterLambda(this)}exitRule(t){t.exitLambda&&t.exitLambda(this)}accept(t){return t.visitLambda?t.visitLambda(this):t.visitChildren(this)}}r.LambdaContext=M;class k extends l.ParserRuleContext{keyValuePair(t){return void 0===t?this.getRuleContexts(F):this.getRuleContext(t,F)}COMMA(t){return void 0===t?this.getTokens(y.COMMA):this.getToken(y.COMMA,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_keyValuePairList}enterRule(t){t.enterKeyValuePairList&&t.enterKeyValuePairList(this)}exitRule(t){t.exitKeyValuePairList&&t.exitKeyValuePairList(this)}accept(t){return t.visitKeyValuePairList?t.visitKeyValuePairList(this):t.visitChildren(this)}}r.KeyValuePairListContext=k;class F extends l.ParserRuleContext{key(){return this.getRuleContext(0,j)}COLON(){return this.getToken(y.COLON,0)}expression(){return this.getRuleContext(0,g)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_keyValuePair}enterRule(t){t.enterKeyValuePair&&t.enterKeyValuePair(this)}exitRule(t){t.exitKeyValuePair&&t.exitKeyValuePair(this)}accept(t){return t.visitKeyValuePair?t.visitKeyValuePair(this):t.visitChildren(this)}}r.KeyValuePairContext=F;class j extends l.ParserRuleContext{IDENTIFIER(){return this.tryGetToken(y.IDENTIFIER,0)}STRING(){return this.tryGetToken(y.STRING,0)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_key}enterRule(t){t.enterKey&&t.enterKey(this)}exitRule(t){t.exitKey&&t.exitKey(this)}accept(t){return t.visitKey?t.visitKey(this):t.visitChildren(this)}}r.KeyContext=j},{256:256,264:264,265:265,267:267,270:270,276:276,278:278,279:279,283:283,320:320,365:365}],373:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(366)),n(t(367)),n(t(368)),n(t(369)),n(t(370)),n(t(371)),n(t(372))},{366:366,367:367,368:368,369:369,370:370,371:371,372:372}],206:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(260),s=t(304),a=t(278),u=n(t(365));class l extends o.Lexer{constructor(t){super(t),this.ignoreWS=!0,this._interp=new s.LexerATNSimulator(l._ATN,this)}get vocabulary(){return l.VOCABULARY}get grammarFileName(){return"ExpressionAntlrLexer.g4"}get ruleNames(){return l.ruleNames}get serializedATN(){return l._serializedATN}get channelNames(){return l.channelNames}get modeNames(){return l.modeNames}action(t,e,r){switch(e){case 3:this.STRING_INTERPOLATION_START_action(t,r);break;case 38:this.STRING_INTERPOLATION_END_action(t,r)}}STRING_INTERPOLATION_START_action(t,e){switch(e){case 0:this.ignoreWS=!1}}STRING_INTERPOLATION_END_action(t,e){switch(e){case 1:this.ignoreWS=!0}}sempred(t,e,r){switch(e){case 33:return this.WHITESPACE_sempred(t,r)}return!0}WHITESPACE_sempred(t,e){switch(e){case 0:return this.ignoreWS}return!0}static get _ATN(){return l.__ATN||(l.__ATN=(new i.ATNDeserializer).deserialize(u.toCharArray(l._serializedATN))),l.__ATN}}l.STRING_INTERPOLATION_START=1,l.PLUS=2,l.SUBSTRACT=3,l.NON=4,l.XOR=5,l.ASTERISK=6,l.SLASH=7,l.PERCENT=8,l.DOUBLE_EQUAL=9,l.NOT_EQUAL=10,l.SINGLE_AND=11,l.DOUBLE_AND=12,l.DOUBLE_VERTICAL_CYLINDER=13,l.LESS_THAN=14,l.MORE_THAN=15,l.LESS_OR_EQUAl=16,l.MORE_OR_EQUAL=17,l.OPEN_BRACKET=18,l.CLOSE_BRACKET=19,l.DOT=20,l.OPEN_SQUARE_BRACKET=21,l.CLOSE_SQUARE_BRACKET=22,l.OPEN_CURLY_BRACKET=23,l.CLOSE_CURLY_BRACKET=24,l.COMMA=25,l.COLON=26,l.ARROW=27,l.NULL_COALESCE=28,l.QUESTION_MARK=29,l.NUMBER=30,l.WHITESPACE=31,l.IDENTIFIER=32,l.NEWLINE=33,l.STRING=34,l.INVALID_TOKEN_DEFAULT_MODE=35,l.TEMPLATE=36,l.ESCAPE_CHARACTER=37,l.TEXT_CONTENT=38,l.STRING_INTERPOLATION_MODE=1,l.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],l.modeNames=["DEFAULT_MODE","STRING_INTERPOLATION_MODE"],l.ruleNames=["LETTER","DIGIT","OBJECT_DEFINITION","STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","STRING_INTERPOLATION_END","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],l._LITERAL_NAMES=[void 0,void 0,"'+'","'-'","'!'","'^'","'*'","'/'","'%'","'=='",void 0,"'&'","'&&'","'||'","'<'","'>'","'<='","'>='","'('","')'","'.'","'['","']'","'{'","'}'","','","':'","'=>'","'??'","'?'"],l._SYMBOLIC_NAMES=[void 0,"STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],l.VOCABULARY=new a.VocabularyImpl(l._LITERAL_NAMES,l._SYMBOLIC_NAMES,[]),l._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02(\u010f\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04a\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04g\n\x04\r\x04\x0e\x04h\x07\x04k\n\x04\f\x04\x0e\x04n\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x05\x0e\x8c\n\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03 \x03 \x03 \x03!\x03!\x03"\x06"\xbb\n"\r"\x0e"\xbc\x03"\x03"\x06"\xc1\n"\r"\x0e"\xc2\x05"\xc5\n"\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x05$\xd1\n$\x03$\x03$\x03$\x07$\xd6\n$\f$\x0e$\xd9\v$\x03%\x05%\xdc\n%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x07&\xe6\n&\f&\x0e&\xe9\v&\x03&\x03&\x03&\x03&\x03&\x07&\xf0\n&\f&\x0e&\xf3\v&\x03&\x05&\xf6\n&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x06)\u0105\n)\r)\x0e)\u0106\x03)\x03)\x03*\x03*\x03*\x03+\x03+\x04\xe7\xf1\x02\x02,\x04\x02\x02\x06\x02\x02\b\x02\x02\n\x02\x03\f\x02\x04\x0e\x02\x05\x10\x02\x06\x12\x02\x07\x14\x02\b\x16\x02\t\x18\x02\n\x1a\x02\v\x1c\x02\f\x1e\x02\r \x02\x0e"\x02\x0f$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02\x14.\x02\x150\x02\x162\x02\x174\x02\x186\x02\x198\x02\x1a:\x02\x1b<\x02\x1c>\x02\x1d@\x02\x1eB\x02\x1fD\x02 F\x02!H\x02"J\x02#L\x02$N\x02%P\x02\x02R\x02&T\x02\'V\x02(\x04\x02\x03\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0f\x0f$$))bb}}\x7f\x7f\x06\x02\v\v""\xa2\xa2\uff01\uff01\x05\x02%%BBaa\x04\x02))^^\x03\x02))\x04\x02$$^^\x03\x02$$\x04\x02&&bb\x02\u0123\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0e\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1a\x03\x02\x02\x02\x02\x1c\x03\x02\x02\x02\x02\x1e\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02"\x03\x02\x02\x02\x02$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x02L\x03\x02\x02\x02\x02N\x03\x02\x02\x02\x03P\x03\x02\x02\x02\x03R\x03\x02\x02\x02\x03T\x03\x02\x02\x02\x03V\x03\x02\x02\x02\x04X\x03\x02\x02\x02\x06Z\x03\x02\x02\x02\b\\\x03\x02\x02\x02\nq\x03\x02\x02\x02\fv\x03\x02\x02\x02\x0ex\x03\x02\x02\x02\x10z\x03\x02\x02\x02\x12|\x03\x02\x02\x02\x14~\x03\x02\x02\x02\x16\x80\x03\x02\x02\x02\x18\x82\x03\x02\x02\x02\x1a\x84\x03\x02\x02\x02\x1c\x8b\x03\x02\x02\x02\x1e\x8d\x03\x02\x02\x02 \x8f\x03\x02\x02\x02"\x92\x03\x02\x02\x02$\x95\x03\x02\x02\x02&\x97\x03\x02\x02\x02(\x99\x03\x02\x02\x02*\x9c\x03\x02\x02\x02,\x9f\x03\x02\x02\x02.\xa1\x03\x02\x02\x020\xa3\x03\x02\x02\x022\xa5\x03\x02\x02\x024\xa7\x03\x02\x02\x026\xa9\x03\x02\x02\x028\xab\x03\x02\x02\x02:\xad\x03\x02\x02\x02<\xaf\x03\x02\x02\x02>\xb1\x03\x02\x02\x02@\xb4\x03\x02\x02\x02B\xb7\x03\x02\x02\x02D\xba\x03\x02\x02\x02F\xc6\x03\x02\x02\x02H\xd0\x03\x02\x02\x02J\xdb\x03\x02\x02\x02L\xf5\x03\x02\x02\x02N\xf7\x03\x02\x02\x02P\xf9\x03\x02\x02\x02R\xff\x03\x02\x02\x02T\u010a\x03\x02\x02\x02V\u010d\x03\x02\x02\x02XY\t\x02\x02\x02Y\x05\x03\x02\x02\x02Z[\t\x03\x02\x02[\x07\x03\x02\x02\x02\\l\x07}\x02\x02]k\x05F#\x02^a\x05H$\x02_a\x05L&\x02`^\x03\x02\x02\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02bf\x07<\x02\x02cg\x05L&\x02dg\n\x04\x02\x02eg\x05\b\x04\x02fc\x03\x02\x02\x02fd\x03\x02\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02ik\x03\x02\x02\x02j]\x03\x02\x02\x02j`\x03\x02\x02\x02kn\x03\x02\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02nl\x03\x02\x02\x02op\x07\x7f\x02\x02p\t\x03\x02\x02\x02qr\x07b\x02\x02rs\b\x05\x02\x02st\x03\x02\x02\x02tu\b\x05\x03\x02u\v\x03\x02\x02\x02vw\x07-\x02\x02w\r\x03\x02\x02\x02xy\x07/\x02\x02y\x0f\x03\x02\x02\x02z{\x07#\x02\x02{\x11\x03\x02\x02\x02|}\x07`\x02\x02}\x13\x03\x02\x02\x02~\x7f\x07,\x02\x02\x7f\x15\x03\x02\x02\x02\x80\x81\x071\x02\x02\x81\x17\x03\x02\x02\x02\x82\x83\x07\'\x02\x02\x83\x19\x03\x02\x02\x02\x84\x85\x07?\x02\x02\x85\x86\x07?\x02\x02\x86\x1b\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88\x8c\x07?\x02\x02\x89\x8a\x07>\x02\x02\x8a\x8c\x07@\x02\x02\x8b\x87\x03\x02\x02\x02\x8b\x89\x03\x02\x02\x02\x8c\x1d\x03\x02\x02\x02\x8d\x8e\x07(\x02\x02\x8e\x1f\x03\x02\x02\x02\x8f\x90\x07(\x02\x02\x90\x91\x07(\x02\x02\x91!\x03\x02\x02\x02\x92\x93\x07~\x02\x02\x93\x94\x07~\x02\x02\x94#\x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96%\x03\x02\x02\x02\x97\x98\x07@\x02\x02\x98\'\x03\x02\x02\x02\x99\x9a\x07>\x02\x02\x9a\x9b\x07?\x02\x02\x9b)\x03\x02\x02\x02\x9c\x9d\x07@\x02\x02\x9d\x9e\x07?\x02\x02\x9e+\x03\x02\x02\x02\x9f\xa0\x07*\x02\x02\xa0-\x03\x02\x02\x02\xa1\xa2\x07+\x02\x02\xa2/\x03\x02\x02\x02\xa3\xa4\x070\x02\x02\xa41\x03\x02\x02\x02\xa5\xa6\x07]\x02\x02\xa63\x03\x02\x02\x02\xa7\xa8\x07_\x02\x02\xa85\x03\x02\x02\x02\xa9\xaa\x07}\x02\x02\xaa7\x03\x02\x02\x02\xab\xac\x07\x7f\x02\x02\xac9\x03\x02\x02\x02\xad\xae\x07.\x02\x02\xae;\x03\x02\x02\x02\xaf\xb0\x07<\x02\x02\xb0=\x03\x02\x02\x02\xb1\xb2\x07?\x02\x02\xb2\xb3\x07@\x02\x02\xb3?\x03\x02\x02\x02\xb4\xb5\x07A\x02\x02\xb5\xb6\x07A\x02\x02\xb6A\x03\x02\x02\x02\xb7\xb8\x07A\x02\x02\xb8C\x03\x02\x02\x02\xb9\xbb\x05\x06\x03\x02\xba\xb9\x03\x02\x02\x02\xbb\xbc\x03\x02\x02\x02\xbc\xba\x03\x02\x02\x02\xbc\xbd\x03\x02\x02\x02\xbd\xc4\x03\x02\x02\x02\xbe\xc0\x070\x02\x02\xbf\xc1\x05\x06\x03\x02\xc0\xbf\x03\x02\x02\x02\xc1\xc2\x03\x02\x02\x02\xc2\xc0\x03\x02\x02\x02\xc2\xc3\x03\x02\x02\x02\xc3\xc5\x03\x02\x02\x02\xc4\xbe\x03\x02\x02\x02\xc4\xc5\x03\x02\x02\x02\xc5E\x03\x02\x02\x02\xc6\xc7\t\x05\x02\x02\xc7\xc8\x06#\x02\x02\xc8\xc9\x03\x02\x02\x02\xc9\xca\b#\x04\x02\xcaG\x03\x02\x02\x02\xcb\xd1\x05\x04\x02\x02\xcc\xd1\t\x06\x02\x02\xcd\xce\x07B\x02\x02\xce\xd1\x07B\x02\x02\xcf\xd1\x04&\'\x02\xd0\xcb\x03\x02\x02\x02\xd0\xcc\x03\x02\x02\x02\xd0\xcd\x03\x02\x02\x02\xd0\xcf\x03\x02\x02\x02\xd1\xd7\x03\x02\x02\x02\xd2\xd6\x05\x04\x02\x02\xd3\xd6\x05\x06\x03\x02\xd4\xd6\x07a\x02\x02\xd5\xd2\x03\x02\x02\x02\xd5\xd3\x03\x02\x02\x02\xd5\xd4\x03\x02\x02\x02\xd6\xd9\x03\x02\x02\x02\xd7\xd5\x03\x02\x02\x02\xd7\xd8\x03\x02\x02\x02\xd8I\x03\x02\x02\x02\xd9\xd7\x03\x02\x02\x02\xda\xdc\x07\x0f\x02\x02\xdb\xda\x03\x02\x02\x02\xdb\xdc\x03\x02\x02\x02\xdc\xdd\x03\x02\x02\x02\xdd\xde\x07\f\x02\x02\xde\xdf\x03\x02\x02\x02\xdf\xe0\b%\x04\x02\xe0K\x03\x02\x02\x02\xe1\xe7\x07)\x02\x02\xe2\xe3\x07^\x02\x02\xe3\xe6\t\x07\x02\x02\xe4\xe6\n\b\x02\x02\xe5\xe2\x03\x02\x02\x02\xe5\xe4\x03\x02\x02\x02\xe6\xe9\x03\x02\x02\x02\xe7\xe8\x03\x02\x02\x02\xe7\xe5\x03\x02\x02\x02\xe8\xea\x03\x02\x02\x02\xe9\xe7\x03\x02\x02\x02\xea\xf6\x07)\x02\x02\xeb\xf1\x07$\x02\x02\xec\xed\x07^\x02\x02\xed\xf0\t\t\x02\x02\xee\xf0\n\n\x02\x02\xef\xec\x03\x02\x02\x02\xef\xee\x03\x02\x02\x02\xf0\xf3\x03\x02\x02\x02\xf1\xf2\x03\x02\x02\x02\xf1\xef\x03\x02\x02\x02\xf2\xf4\x03\x02\x02\x02\xf3\xf1\x03\x02\x02\x02\xf4\xf6\x07$\x02\x02\xf5\xe1\x03\x02\x02\x02\xf5\xeb\x03\x02\x02\x02\xf6M\x03\x02\x02\x02\xf7\xf8\v\x02\x02\x02\xf8O\x03\x02\x02\x02\xf9\xfa\x07b\x02\x02\xfa\xfb\b(\x05\x02\xfb\xfc\x03\x02\x02\x02\xfc\xfd\b(\x06\x02\xfd\xfe\b(\x07\x02\xfeQ\x03\x02\x02\x02\xff\u0100\x07&\x02\x02\u0100\u0104\x07}\x02\x02\u0101\u0105\x05L&\x02\u0102\u0105\x05\b\x04\x02\u0103\u0105\n\x04\x02\x02\u0104\u0101\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u0109\x07\x7f\x02\x02\u0109S\x03\x02\x02\x02\u010a\u010b\x07^\x02\x02\u010b\u010c\t\v\x02\x02\u010cU\x03\x02\x02\x02\u010d\u010e\v\x02\x02\x02\u010eW\x03\x02\x02\x02\x18\x02\x03`fhjl\x8b\xbc\xc2\xc4\xd0\xd5\xd7\xdb\xe5\xe7\xef\xf1\xf5\u0104\u0106\b\x03\x05\x02\x07\x03\x02\b\x02\x02\x03(\x03\t\x03\x02\x06\x02\x02',r.ExpressionAntlrLexer=l},{260:260,278:278,283:283,304:304,365:365}],256:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270),s=t(252),a=t(325);let u=class t extends o.RecognitionException{constructor(e,r,n){super(e,e.inputStream,e.context,t.formatMessage(r,n));let i=e.interpreter.atn.states[e.state].transition(0);i instanceof a.PredicateTransition?(this._ruleIndex=i.ruleIndex,this._predicateIndex=i.predIndex):(this._ruleIndex=0,this._predicateIndex=0),this._predicate=r,super.setOffendingToken(e,e.currentToken)}get ruleIndex(){return this._ruleIndex}get predicateIndex(){return this._predicateIndex}get predicate(){return this._predicate}static formatMessage(t,e){return e||`failed predicate: {${t}}?`}};n([s.NotNull],u,"formatMessage",null),u=n([i(0,s.NotNull)],u),r.FailedPredicateException=u},{252:252,270:270,325:325}],279:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(344),a=t(359),u=t(302),l=t(303),c=t(252),h=t(362),p=t(326),d=t(276);let f=class{constructor(t,e){this.states=[],this.decisionToState=[],this.modeNameToStartState=new Map,this.modeToStartState=[],this.contextCache=new o.Array2DHashMap(h.ObjectEqualityComparator.INSTANCE),this.decisionToDFA=[],this.modeToDFA=[],this.LL1Table=new Map,this.grammarType=t,this.maxTokenType=e}clearDFA(){this.decisionToDFA=new Array(this.decisionToState.length);for(let t=0;t<this.decisionToDFA.length;t++)this.decisionToDFA[t]=new s.DFA(this.decisionToState[t],t);this.modeToDFA=new Array(this.modeToStartState.length);for(let t=0;t<this.modeToDFA.length;t++)this.modeToDFA[t]=new s.DFA(this.modeToStartState[t]);this.contextCache.clear(),this.LL1Table.clear()}get contextCacheSize(){return this.contextCache.size}getCachedContext(t){return p.PredictionContext.getCachedContext(t,this.contextCache,new p.PredictionContext.IdentityHashMap)}getDecisionToDFA(){return this.decisionToDFA}nextTokens(t,e){return e?new l.LL1Analyzer(this).LOOK(t,e):(t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokens(t,p.PredictionContext.EMPTY_LOCAL),t.nextTokenWithinRule.setReadonly(!0)),t.nextTokenWithinRule)}addState(t){t.atn=this,t.stateNumber=this.states.length,this.states.push(t)}removeState(t){let e=new u.InvalidState;e.atn=this,e.stateNumber=t.stateNumber,this.states[t.stateNumber]=e}defineMode(t,e){this.modeNameToStartState.set(t,e),this.modeToStartState.push(e),this.modeToDFA.push(new s.DFA(e)),this.defineDecisionState(e)}defineDecisionState(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,this.decisionToDFA.push(new s.DFA(t,t.decision)),t.decision}getDecisionState(t){if(this.decisionToState.length>0)return this.decisionToState[t]}get numberOfDecisions(){return this.decisionToState.length}getExpectedTokens(t,e){if(t<0||t>=this.states.length)throw new RangeError("Invalid state number.");let r=e,n=this.states[t],i=this.nextTokens(n);if(!i.contains(d.Token.EPSILON))return i;let o=new a.IntervalSet;for(o.addAll(i),o.remove(d.Token.EPSILON);null!=r&&r.invokingState>=0&&i.contains(d.Token.EPSILON);){let t=this.states[r.invokingState].transition(0);i=this.nextTokens(t.followState),o.addAll(i),o.remove(d.Token.EPSILON),r=r._parent}return i.contains(d.Token.EPSILON)&&o.add(d.Token.EOF),o}};n([c.NotNull],f.prototype,"states",void 0),n([c.NotNull],f.prototype,"decisionToState",void 0),n([c.NotNull],f.prototype,"modeNameToStartState",void 0),n([c.NotNull],f.prototype,"modeToStartState",void 0),n([c.NotNull],f.prototype,"decisionToDFA",void 0),n([c.NotNull],f.prototype,"modeToDFA",void 0),n([c.NotNull],f.prototype,"nextTokens",null),n([i(0,c.NotNull)],f.prototype,"removeState",null),n([i(0,c.NotNull),i(1,c.NotNull)],f.prototype,"defineMode",null),n([i(0,c.NotNull)],f.prototype,"defineDecisionState",null),n([c.NotNull],f.prototype,"getExpectedTokens",null),f=n([i(0,c.NotNull)],f),r.ATN=f,function(t){t.INVALID_ALT_NUMBER=0}(f=r.ATN||(r.ATN={})),r.ATN=f},{252:252,276:276,302:302,303:303,326:326,344:344,349:349,359:359,362:362}],211:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Util=class{static trim(t,e){return void 0!==e?t.replace(new RegExp("".concat("^\\",e,"+|\\",e,"+$"),"g"),""):t.trim()}}},{}],215:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(192),o=t(219);class s extends n.Expression{constructor(t){if(super(i.ExpressionType.And,void 0),this.anyBindings=new Map,this.subsumed=!1,t)if(Array.isArray(t)){const e=t;this.children=e}else if(t instanceof s){const e=t;this.children=[...e.children];for(const[t,r]of e.anyBindings.entries())this.anyBindings.set(t,r)}else if(t instanceof n.Expression){const e=t;this.children.push(e)}}toString(t=[],e=0){t.push(" ".repeat(e)),this.subsumed&&t.push("*"),t.push("(");let r=!0;for(const n of this.children)r?r=!1:t.push(" && "),t.push(n.toString());return t.push(")"),this._ignored&&(t.push(" ignored("),t.push(this._ignored.toString()),t.push(")")),this.anyBindings.forEach((e,r)=>{t.push(` ${r}->${e}`)}),t.join("")}relationship(t,e){let r=o.RelationshipType.incomparable,n=this,i=n.children.length,s=t,a=s.children.length,u=!1;if(a<i){s=this,n=t;const e=a;a=i,i=e,u=!0}if(0===i)r=0===a?o.RelationshipType.equal:o.RelationshipType.generalizes;else{for(const t of n.children){let n=o.RelationshipType.incomparable;for(const r of s.children)if((n=this._relationship(t,r,e))!==o.RelationshipType.incomparable)break;if(n===o.RelationshipType.incomparable){r=o.RelationshipType.incomparable;break}if(r===o.RelationshipType.incomparable&&(r=n),r===o.RelationshipType.equal){if(n!==o.RelationshipType.generalizes&&(n!==o.RelationshipType.specializes||i!==a)&&n!==o.RelationshipType.equal)break;r=n}else if(r!=n)break}if(i!==a)switch(r){case o.RelationshipType.equal:case o.RelationshipType.generalizes:r=o.RelationshipType.generalizes;break;default:r=o.RelationshipType.incomparable}r=this._bindingRelationship(r,n,s)}return this._swap(r,u)}matches(t,e){let r=!1;if(t.deepEquals(this)&&(r=!0,this._ignored)){const{value:t,error:n}=this._ignored.tryEvaluate(e);r=!n&&t}return r}splitIgnores(){const t=[],e=[];for(let r=0;r<this.children.length;r++){const n=this.children[r];n.type===i.ExpressionType.Ignore?e.push(n):t.push(n)}this.children=t,e.length>0&&(this._ignored=n.Expression.andExpression(...e))}_bindingRelationship(t,e,r){if(t===o.RelationshipType.equal){let n=!1,i=e.anyBindings,s=r.anyBindings;e.anyBindings.size>r.anyBindings.size&&(i=r.anyBindings,s=e.anyBindings,n=!0);for(const[e,r]of i.entries()){let n=!1;for(const[t,i]of s.entries())if(e===t&&r===i){n=!0;break}n||(t=o.RelationshipType.incomparable)}t===o.RelationshipType.equal&&i.size<s.size&&(t=o.RelationshipType.specializes),t=this._swap(t,n)}return t}_swap(t,e){let r=t;if(e)switch(t){case o.RelationshipType.specializes:r=o.RelationshipType.generalizes;break;case o.RelationshipType.generalizes:r=o.RelationshipType.specializes}return r}_relationship(t,e,r){o.RelationshipType.incomparable;let n,s=t,a=e;return t.type===i.ExpressionType.Not&&e.type===i.ExpressionType.Not&&(s=t.children[0],a=e.children[0]),s.type===e.type&&(n=r[s.type]),n?n.relationship(s,a):t.deepEquals(e)?o.RelationshipType.equal:o.RelationshipType.incomparable}}r.Clause=s},{179:179,192:192,219:219}],219:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.RelationshipType||(r.RelationshipType={})).specializes="specializes",n.equal="equal",n.generalizes="generalizes",n.incomparable="incomparable"},{}],218:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.QuantifierType||(r.QuantifierType={})).all="all",n.any="any",r.Quantifier=class{constructor(t,e,r){this.variable=t,this.type=e,this.bindings=r}toString(){return`${this.type} ${this.variable} ${this.bindings.length}`}}},{}],217:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(215),i=t(219);var o;!function(t){t.none="none",t.found="found",t.added="added",t.removed="removed",t.inserted="inserted"}(o||(o={})),r.Node=class{constructor(t,e,r){this._allTriggers=[],this._triggers=[],this._specializations=[],this.clause=new n.Clause(t),this.tree=e,r&&(this._allTriggers.push(r),this._triggers.push(r))}get triggers(){return this._triggers}get allTriggers(){return this._allTriggers}get specializations(){return this._specializations}toString(t=[],e=0){return this.clause.toString(t,e)}relationship(t){return this.clause.relationship(t.clause,this.tree.comparers)}matches(t){const e=new Set;return this._matches(t,e,new Map),Array.from(e)}addNode(t){return this._addNode(t,new Map)===o.added}removeTrigger(t){return this._removeTrigger(t,new Set)}_addNode(t,e){if(e.has(this))return o.none;let r=o.none;const n=t.triggers[0];switch(this.relationship(t)){case i.RelationshipType.equal:const s=void 0!==this._allTriggers.find(t=>null!=n.action&&n.action===t.action);if(r=o.found,!s){this._allTriggers.push(n);let t=!0;for(let e=0;e<this._triggers.length;){const r=this._triggers[e],o=n.relationship(r,this.tree.comparers);if(o===i.RelationshipType.generalizes){t=!1;break}o===i.RelationshipType.specializes?this._triggers.splice(e,1):++e}t&&this._triggers.push(n),r=o.added}break;case i.RelationshipType.incomparable:for(const r of this._specializations)r._addNode(t,e);break;case i.RelationshipType.specializes:t._addSpecialization(this),r=o.inserted;break;case i.RelationshipType.generalizes:let a,u=!1;for(let n=0;n<this._specializations.length;n++){const i=this._specializations[n],s=i._addNode(t,e);s!=o.none&&(u=!0,s===o.inserted?(a||(a=[]),a.push(i),r=o.added):r=s)}if(a){for(const t of a){const e=this._specializations.findIndex(e=>e===t);e>=0&&this._specializations.splice(e,1)}this._specializations.push(t)}u||(this._specializations.push(t),r=o.added)}return e.set(this,r),r}_matches(t,e,r){let n=r.get(this);if(n)return!0;n=!1;for(const i of this._specializations)i._matches(t,e,r)&&(n=!0);if(!n){const{value:r,error:i}=this.clause.tryEvaluate(t);if(!i&&r)for(const o of this.triggers)o.matches(this.clause,t)&&(e.add(o),n=!0)}return r.set(this,n),n}_removeTrigger(t,e){if(e.has(this))return!1;e.add(this);let r=!1;const n=this._allTriggers.findIndex(e=>e===t);if(n>=0){this._allTriggers.splice(n,1),r=!0;const e=this._triggers.findIndex(e=>e===t);if(e>=0){this._triggers.splice(e,1);for(const t of this._allTriggers){let e=!0;for(const r of this._triggers){const n=t.relationship(r,this.tree.comparers);if(n===i.RelationshipType.equal||n===i.RelationshipType.generalizes){e=!1;break}}e&&this._triggers.push(t)}}}let o;for(let i=0;i<this._specializations.length;i++){const n=this._specializations[i];n._removeTrigger(t,e)&&(r=!0),0===n.triggers.length&&(o||(o=[]),o.push(n))}if(o)for(const s of o){const t=this._specializations.findIndex(t=>t===s);if(t>=0){this._specializations.splice(t,1);for(const t of s.specializations){let e=!0;for(const r of this._specializations)if(r.relationship(t)===i.RelationshipType.generalizes){e=!1;break}e&&this._specializations.push(t)}}}return r}_addSpecialization(t){let e,r=!1,n=!1;for(let o=0;o<this._specializations.length;o++){const r=this._specializations[o],s=t.relationship(r);if(s===i.RelationshipType.equal){n=!0;break}if(s===i.RelationshipType.generalizes)e||(e=[]),e.push(r);else if(s===i.RelationshipType.specializes){n=!0;break}}if(!n){if(e)for(const r of e){const e=this._specializations.findIndex(t=>t===r);e>=0&&(t._addSpecialization(this._specializations[e]),this._specializations.splice(e,1))}this._specializations.push(t),r=!0}return r}}},{215:215,219:219}],220:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(215),i=t(167),o=t(179),s=t(192),a=t(218),u=t(219),l=(t,e=!1)=>{let r=t;const n=t.evaluator.negation;switch(t.type){case s.ExpressionType.And:case s.ExpressionType.Or:const i=t.children.map(t=>l(t,e));r=1===i.length?i[0]:o.Expression.makeExpression(t.type===s.ExpressionType.And?e?s.ExpressionType.Or:s.ExpressionType.And:e?s.ExpressionType.And:s.ExpressionType.Or,void 0,...i);break;case s.ExpressionType.Not:r=l(t.children[0],!e);break;default:e&&(r=n?t.type===n.type?o.Expression.makeExpression(void 0,n,...t.children.map(t=>l(t,!0))):o.Expression.makeExpression(void 0,n,...t.children):o.Expression.makeExpression(s.ExpressionType.Not,void 0,t))}return r};r.Trigger=class{constructor(t,e,r,...n){if(this._tree=t,this.action=r,this.originalExpression=e,this._quantifiers=n,e){const t=l(e);this._clauses=this._generateClauses(t),this._removeDuplicatedPredicates(),this._optimizeClauses(),this._expandQuantifiers(),this._removeDuplicates(),this._markSubsumedClauses(),this._splitIgnores()}else this._clauses=[]}get clauses(){return this._clauses}relationship(t,e){const r=this._relationship(this,t,e),n=this._relationship(t,this,e);return r===u.RelationshipType.equal?n===u.RelationshipType.equal?u.RelationshipType.equal:u.RelationshipType.specializes:r===u.RelationshipType.specializes?u.RelationshipType.specializes:n===u.RelationshipType.equal||n===u.RelationshipType.specializes?u.RelationshipType.generalizes:u.RelationshipType.incomparable}matches(t,e){return void 0!==this.clauses.find(r=>r.matches(t,e))}toString(t=[],e=0){if(t.push(" ".repeat(e)),this._clauses.length>0){let r=!0;for(const n of this._clauses)r?r=!1:(t.push("\n"),t.push(" ".repeat(e)),t.push("|| ")),t.push(n.toString())}else t.push("<Empty>");return t.join("")}_relationship(t,e,r){let n=u.RelationshipType.incomparable;for(const i of t.clauses)if(!i.subsumed){let t=u.RelationshipType.incomparable;for(const n of e.clauses)if(!n.subsumed){const e=i.relationship(n,r);if(e===u.RelationshipType.equal||e===u.RelationshipType.specializes){t=e;break}}if(t===u.RelationshipType.incomparable){n=u.RelationshipType.incomparable;break}t===u.RelationshipType.equal?n===u.RelationshipType.incomparable&&(n=t):t===u.RelationshipType.specializes&&(n=t)}return n}_generateClauses(t){switch(t.type){case s.ExpressionType.And:let e=[],r=!0;for(let i=0;i<t.children.length;i++){const o=t.children[i],s=this._generateClauses(o);if(0===s.length){e=[];break}if(r)e.push(...s),r=!1;else{const t=[];for(const r of e)for(const e of s){const i=[];i.push(...r.children),i.push(...e.children),t.push(new n.Clause(i))}e=t}}return e;case s.ExpressionType.Or:const o=[];for(let n=0;n<t.children.length;n++){const e=t.children[n];o.push(...this._generateClauses(e))}return o;case s.ExpressionType.Optional:return[new n.Clause,...this._generateClauses(t.children[0])];default:return t instanceof i.Constant&&"boolean"==typeof t.value?t.value?[new n.Clause]:[]:[new n.Clause(t)]}}_removeDuplicatedPredicates(){for(let t=0;t<this._clauses.length;++t){const e=this._clauses[t],r=[];for(let t=0;t<e.children.length;++t){const n=e.children[t];let i=!1;for(let r=t+1;r<e.children.length;++r)if(n.deepEquals(e.children[r])){i=!0;break}i||r.push(n)}this._clauses[t]=new n.Clause(r)}}_markSubsumedClauses(){for(let t=0;t<this._clauses.length;++t){const e=this._clauses[t];if(!e.subsumed)for(let r=t+1;r<this._clauses.length;++r){const t=this._clauses[r];if(!t.subsumed){const n=e.relationship(t,this._tree.comparers);if(n===u.RelationshipType.equal)this._clauses.splice(r,1),--r;else{if(n===u.RelationshipType.specializes){e.subsumed=!0;break}n===u.RelationshipType.generalizes&&(t.subsumed=!0)}}}}}_splitIgnores(){for(let t=0;t<this._clauses.length;t++)this._clauses[t].splitIgnores()}_optimizeClauses(){this._clauses.forEach(t=>{this._tree.optimizers.forEach(e=>{e.optimize(t)})})}_expandQuantifiers(){if(this._quantifiers&&this._quantifiers.length>0)for(let t=0;t<this._quantifiers.length;t++){const e=this._quantifiers[t],r=[];for(let t=0;t<this._clauses.length;t++){const n=this._clauses[t];r.push(...this._expandQuantifiersWithClause(e,n))}this._clauses=r}}_expandQuantifiersWithClause(t,e){const r=[];if(t.type===a.QuantifierType.all){const i=[];if(t.bindings.length>0)for(let r=0;r<e.children.length;r++){const n=e.children[r];for(let e=0;e<t.bindings.length;e++){const r=t.bindings[e],{expression:o,changed:s}=this._substituteVariable(t.variable,r,n);if(i.push(o),!s)break}}else for(let r=0;r<e.children.length;r++){const n=e.children[r],{changed:o}=this._substituteVariable(t.variable,"",n);o||i.push(n)}r.push(new n.Clause(i))}else if(t.bindings.length>0){let i=!1;for(let o=0;o<t.bindings.length;o++){const s=t.bindings[o],a=new n.Clause(e),u=[];for(let r=0;r<e.children.length;r++){const n=e.children[r],{expression:o,changed:a}=this._substituteVariable(t.variable,s,n);i=i||a,u.push(o)}if(i&&a.anyBindings.set(t.variable,s),a.children=[...u],r.push(a),!i)break}}else{let n=!1;for(let r=0;r<e.children.length;r++){const i=e.children[r],{changed:o}=this._substituteVariable(t.variable,"",i);if(o){n=!0;break}}n||r.push(e)}return r}_substituteVariable(t,e,r){let n=r,a=!1;if(r.type===s.ExpressionType.Accessor&&1===r.children.length&&r.children[0]instanceof i.Constant&&"string"==typeof r.children[0].value&&r.children[0].value===t)n=o.Expression.makeExpression(s.ExpressionType.Accessor,void 0,new i.Constant(e)),a=!0;else{const i=[];for(let n=0;n<r.children.length;n++){const o=r.children[n],{expression:s,changed:u}=this._substituteVariable(t,e,o);i.push(s),a=a||u}a&&(n=new o.Expression(void 0,r.evaluator,...i))}return{expression:n,changed:a}}_removeDuplicates(){for(const t of this._clauses){const e=[...t.children];for(let t=0;t<e.length;++t){const r=e[t];for(let n=t+1;n<e.length;){const t=e[n];r.deepEquals(t)?e.splice(n,1):++n}}t.children=[...e]}}}},{167:167,179:179,192:192,215:215,218:218,219:219}],221:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(215),o=t(217),s=t(219),a=t(220);r.TriggerTree=class{constructor(){this.optimizers=[],this.comparers={},this.totalTriggers=0,this.root=new o.Node(new i.Clause,this)}toString(){return`TriggerTree with ${this.totalTriggers} triggers`}addTrigger(t,e,...r){const i="string"==typeof t?n.Expression.parse(t):t,s=new a.Trigger(this,i,e,...r);let u=!1;if(s.clauses.length)for(const n of s.clauses){const t=new o.Node(n,this,s);this.root.addNode(t)&&(u=!0)}return u&&++this.totalTriggers,s}removeTrigger(t){const e=this.root.removeTrigger(t);return e&&--this.totalTriggers,e}treeToString(t=0){const e=[];return this._treeToString(e,this.root,t),e.join("")}matches(t){return this.root.matches(t)}verifyTree(){return this._verifyTree(this.root,new Set)}_verifyTree(t,e){let r;if(!e.has(t)){e.add(t);for(let n=0;!r&&n<t.specializations.length;++n){const i=t.specializations[n];if(t.relationship(i)!==s.RelationshipType.generalizes)r=t;else{this._verifyTree(t.specializations[n],e);for(let e=n+1;e<t.specializations.length;++e){const n=t.specializations[e];if(i.relationship(n)!==s.RelationshipType.incomparable){r=t;break}}}}}return r}_treeToString(t,e,r){e.toString(t,r),t.push(` [${e.triggers.length}]`),t.push("\n");for(const n of e.specializations)this._treeToString(t,n,r+2)}}},{179:179,215:215,217:217,219:219,220:220}],225:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0,r.default="00000000-0000-0000-0000-000000000000"},{}],234:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(228)),i=o(t(230));function o(t){return t&&t.__esModule?t:{default:t}}r.default=function(t,e,r){const o=(t=t||{}).random||(t.rng||n.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){r=r||0;for(let t=0;t<16;++t)e[r+t]=o[t];return e}return(0,i.default)(o)}},{228:228,230:230}],237:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};r.default=function(t){if(!(0,i.default)(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}},{236:236}],230:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};const o=[];for(let s=0;s<256;++s)o.push((s+256).toString(16).substr(1));r.default=function(t,e=0){const r=(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase();if(!(0,i.default)(r))throw TypeError("Stringified UUID is invalid");return r}},{236:236}],226:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};r.default=function(t){if(!(0,i.default)(t))throw TypeError("Invalid UUID");let e;const r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r}},{236:236}],231:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(228)),i=o(t(230));function o(t){return t&&t.__esModule?t:{default:t}}let s,a,u=0,l=0;r.default=function(t,e,r){let o=e&&r||0;const c=e||new Array(16);let h=(t=t||{}).node||s,p=void 0!==t.clockseq?t.clockseq:a;if(null==h||null==p){const e=t.random||(t.rng||n.default)();null==h&&(h=s=[1|e[0],e[1],e[2],e[3],e[4],e[5]]),null==p&&(p=a=16383&(e[6]<<8|e[7]))}let d=void 0!==t.msecs?t.msecs:Date.now(),f=void 0!==t.nsecs?t.nsecs:l+1;const y=d-u+(f-l)/1e4;if(y<0&&void 0===t.clockseq&&(p=p+1&16383),(y<0||d>u)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");u=d,l=f,a=p;const m=(1e4*(268435455&(d+=122192928e5))+f)%4294967296;c[o++]=m>>>24&255,c[o++]=m>>>16&255,c[o++]=m>>>8&255,c[o++]=255&m;const g=d/4294967296*1e4&268435455;c[o++]=g>>>8&255,c[o++]=255&g,c[o++]=g>>>24&15|16,c[o++]=g>>>16&255,c[o++]=p>>>8|128,c[o++]=255&p;for(let n=0;n<6;++n)c[o+n]=h[n];return e||(0,i.default)(c)}},{228:228,230:230}],235:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(233)),i=o(t(229));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,n.default)("v5",80,i.default);r.default=s},{229:229,233:233}],236:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(227))&&n.__esModule?n:{default:n};r.default=function(t){return"string"==typeof t&&i.default.test(t)}},{227:227}],232:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(233)),i=o(t(224));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,n.default)("v3",48,i.default);r.default=s},{224:224,233:233}],224:[function(t,e,r){"use strict";function n(t){return 14+(t+64>>>9<<4)+1}function i(t,e){const r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function o(t,e,r,n,o,s){return i((a=i(i(e,t),i(n,s)))<<(u=o)|a>>>32-u,r);var a,u}function s(t,e,r,n,i,s,a){return o(e&r|~e&n,t,e,i,s,a)}function a(t,e,r,n,i,s,a){return o(e&n|r&~n,t,e,i,s,a)}function u(t,e,r,n,i,s,a){return o(e^r^n,t,e,i,s,a)}function l(t,e,r,n,i,s,a){return o(r^(e|~n),t,e,i,s,a)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(t){if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){const e=[],r=32*t.length;for(let n=0;n<r;n+=8){const r=t[n>>5]>>>n%32&255,i=parseInt("0123456789abcdef".charAt(r>>>4&15)+"0123456789abcdef".charAt(15&r),16);e.push(i)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[n(e)-1]=e;let r=1732584193,o=-271733879,c=-1732584194,h=271733878;for(let n=0;n<t.length;n+=16){const e=r,p=o,d=c,f=h;r=s(r,o,c,h,t[n],7,-680876936),h=s(h,r,o,c,t[n+1],12,-389564586),c=s(c,h,r,o,t[n+2],17,606105819),o=s(o,c,h,r,t[n+3],22,-1044525330),r=s(r,o,c,h,t[n+4],7,-176418897),h=s(h,r,o,c,t[n+5],12,1200080426),c=s(c,h,r,o,t[n+6],17,-1473231341),o=s(o,c,h,r,t[n+7],22,-45705983),r=s(r,o,c,h,t[n+8],7,1770035416),h=s(h,r,o,c,t[n+9],12,-1958414417),c=s(c,h,r,o,t[n+10],17,-42063),o=s(o,c,h,r,t[n+11],22,-1990404162),r=s(r,o,c,h,t[n+12],7,1804603682),h=s(h,r,o,c,t[n+13],12,-40341101),c=s(c,h,r,o,t[n+14],17,-1502002290),o=s(o,c,h,r,t[n+15],22,1236535329),r=a(r,o,c,h,t[n+1],5,-165796510),h=a(h,r,o,c,t[n+6],9,-1069501632),c=a(c,h,r,o,t[n+11],14,643717713),o=a(o,c,h,r,t[n],20,-373897302),r=a(r,o,c,h,t[n+5],5,-701558691),h=a(h,r,o,c,t[n+10],9,38016083),c=a(c,h,r,o,t[n+15],14,-660478335),o=a(o,c,h,r,t[n+4],20,-405537848),r=a(r,o,c,h,t[n+9],5,568446438),h=a(h,r,o,c,t[n+14],9,-1019803690),c=a(c,h,r,o,t[n+3],14,-187363961),o=a(o,c,h,r,t[n+8],20,1163531501),r=a(r,o,c,h,t[n+13],5,-1444681467),h=a(h,r,o,c,t[n+2],9,-51403784),c=a(c,h,r,o,t[n+7],14,1735328473),o=a(o,c,h,r,t[n+12],20,-1926607734),r=u(r,o,c,h,t[n+5],4,-378558),h=u(h,r,o,c,t[n+8],11,-2022574463),c=u(c,h,r,o,t[n+11],16,1839030562),o=u(o,c,h,r,t[n+14],23,-35309556),r=u(r,o,c,h,t[n+1],4,-1530992060),h=u(h,r,o,c,t[n+4],11,1272893353),c=u(c,h,r,o,t[n+7],16,-155497632),o=u(o,c,h,r,t[n+10],23,-1094730640),r=u(r,o,c,h,t[n+13],4,681279174),h=u(h,r,o,c,t[n],11,-358537222),c=u(c,h,r,o,t[n+3],16,-722521979),o=u(o,c,h,r,t[n+6],23,76029189),r=u(r,o,c,h,t[n+9],4,-640364487),h=u(h,r,o,c,t[n+12],11,-421815835),c=u(c,h,r,o,t[n+15],16,530742520),o=u(o,c,h,r,t[n+2],23,-995338651),r=l(r,o,c,h,t[n],6,-198630844),h=l(h,r,o,c,t[n+7],10,1126891415),c=l(c,h,r,o,t[n+14],15,-1416354905),o=l(o,c,h,r,t[n+5],21,-57434055),r=l(r,o,c,h,t[n+12],6,1700485571),h=l(h,r,o,c,t[n+3],10,-1894986606),c=l(c,h,r,o,t[n+10],15,-1051523),o=l(o,c,h,r,t[n+1],21,-2054922799),r=l(r,o,c,h,t[n+8],6,1873313359),h=l(h,r,o,c,t[n+15],10,-30611744),c=l(c,h,r,o,t[n+6],15,-1560198380),o=l(o,c,h,r,t[n+13],21,1309151649),r=l(r,o,c,h,t[n+4],6,-145523070),h=l(h,r,o,c,t[n+11],10,-1120210379),c=l(c,h,r,o,t[n+2],15,718787259),o=l(o,c,h,r,t[n+9],21,-343485551),r=i(r,e),o=i(o,p),c=i(c,d),h=i(h,f)}return[r,o,c,h]}(function(t){if(0===t.length)return[];const e=8*t.length,r=new Uint32Array(n(e));for(let n=0;n<e;n+=8)r[n>>5]|=(255&t[n/8])<<n%32;return r}(t),8*t.length))}},{}],227:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0,r.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},{}],228:[function(t,e,r){"use strict";let n;Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)};const i=new Uint8Array(16)},{}],229:[function(t,e,r){"use strict";function n(t,e,r,n){switch(t){case 0:return e&r^~e&n;case 1:return e^r^n;case 2:return e&r^e&n^r&n;case 3:return e^r^n}}function i(t,e){return t<<e|t>>>32-e}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(t){const e=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);const o=t.length/4+2,s=Math.ceil(o/16),a=new Array(s);for(let n=0;n<s;++n){const e=new Uint32Array(16);for(let r=0;r<16;++r)e[r]=t[64*n+4*r]<<24|t[64*n+4*r+1]<<16|t[64*n+4*r+2]<<8|t[64*n+4*r+3];a[n]=e}a[s-1][14]=8*(t.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(t.length-1)&4294967295;for(let u=0;u<s;++u){const t=new Uint32Array(80);for(let e=0;e<16;++e)t[e]=a[u][e];for(let e=16;e<80;++e)t[e]=i(t[e-3]^t[e-8]^t[e-14]^t[e-16],1);let o=r[0],s=r[1],l=r[2],c=r[3],h=r[4];for(let r=0;r<80;++r){const a=Math.floor(r/20),u=i(o,5)+n(a,s,l,c)+h+e[a]+t[r]>>>0;h=c,c=l,l=i(s,30)>>>0,s=o,o=u}r[0]=r[0]+o>>>0,r[1]=r[1]+s>>>0,r[2]=r[2]+l>>>0,r[3]=r[3]+c>>>0,r[4]=r[4]+h>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}},{}],233:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t,e,r){function o(t,o,s,a){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));const e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof o&&(o=(0,i.default)(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+t.length);if(u.set(o),u.set(t,o.length),(u=r(u))[6]=15&u[6]|e,u[8]=63&u[8]|128,s){a=a||0;for(let t=0;t<16;++t)s[a+t]=u[t];return s}return(0,n.default)(u)}try{o.name=t}catch(u){}return o.DNS=s,o.URL=a,o},r.URL=r.DNS=void 0;var n=o(t(230)),i=o(t(226));function o(t){return t&&t.__esModule?t:{default:t}}const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";r.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";r.URL=a},{226:226,230:230}],240:[function(t,e,r){r.entityMap={lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"\xc0",Aacute:"\xc1",Acirc:"\xc2",Atilde:"\xc3",Auml:"\xc4",Aring:"\xc5",AElig:"\xc6",Ccedil:"\xc7",Egrave:"\xc8",Eacute:"\xc9",Ecirc:"\xca",Euml:"\xcb",Igrave:"\xcc",Iacute:"\xcd",Icirc:"\xce",Iuml:"\xcf",ETH:"\xd0",Ntilde:"\xd1",Ograve:"\xd2",Oacute:"\xd3",Ocirc:"\xd4",Otilde:"\xd5",Ouml:"\xd6",Oslash:"\xd8",Ugrave:"\xd9",Uacute:"\xda",Ucirc:"\xdb",Uuml:"\xdc",Yacute:"\xdd",THORN:"\xde",szlig:"\xdf",agrave:"\xe0",aacute:"\xe1",acirc:"\xe2",atilde:"\xe3",auml:"\xe4",aring:"\xe5",aelig:"\xe6",ccedil:"\xe7",egrave:"\xe8",eacute:"\xe9",ecirc:"\xea",euml:"\xeb",igrave:"\xec",iacute:"\xed",icirc:"\xee",iuml:"\xef",eth:"\xf0",ntilde:"\xf1",ograve:"\xf2",oacute:"\xf3",ocirc:"\xf4",otilde:"\xf5",ouml:"\xf6",oslash:"\xf8",ugrave:"\xf9",uacute:"\xfa",ucirc:"\xfb",uuml:"\xfc",yacute:"\xfd",thorn:"\xfe",yuml:"\xff",nbsp:"\xa0",iexcl:"\xa1",cent:"\xa2",pound:"\xa3",curren:"\xa4",yen:"\xa5",brvbar:"\xa6",sect:"\xa7",uml:"\xa8",copy:"\xa9",ordf:"\xaa",laquo:"\xab",not:"\xac",shy:"\xad\xad",reg:"\xae",macr:"\xaf",deg:"\xb0",plusmn:"\xb1",sup2:"\xb2",sup3:"\xb3",acute:"\xb4",micro:"\xb5",para:"\xb6",middot:"\xb7",cedil:"\xb8",sup1:"\xb9",ordm:"\xba",raquo:"\xbb",frac14:"\xbc",frac12:"\xbd",frac34:"\xbe",iquest:"\xbf",times:"\xd7",divide:"\xf7",forall:"\u2200",part:"\u2202",exist:"\u2203",empty:"\u2205",nabla:"\u2207",isin:"\u2208",notin:"\u2209",ni:"\u220b",prod:"\u220f",sum:"\u2211",minus:"\u2212",lowast:"\u2217",radic:"\u221a",prop:"\u221d",infin:"\u221e",ang:"\u2220",and:"\u2227",or:"\u2228",cap:"\u2229",cup:"\u222a",int:"\u222b",there4:"\u2234",sim:"\u223c",cong:"\u2245",asymp:"\u2248",ne:"\u2260",equiv:"\u2261",le:"\u2264",ge:"\u2265",sub:"\u2282",sup:"\u2283",nsub:"\u2284",sube:"\u2286",supe:"\u2287",oplus:"\u2295",otimes:"\u2297",perp:"\u22a5",sdot:"\u22c5",Alpha:"\u0391",Beta:"\u0392",Gamma:"\u0393",Delta:"\u0394",Epsilon:"\u0395",Zeta:"\u0396",Eta:"\u0397",Theta:"\u0398",Iota:"\u0399",Kappa:"\u039a",Lambda:"\u039b",Mu:"\u039c",Nu:"\u039d",Xi:"\u039e",Omicron:"\u039f",Pi:"\u03a0",Rho:"\u03a1",Sigma:"\u03a3",Tau:"\u03a4",Upsilon:"\u03a5",Phi:"\u03a6",Chi:"\u03a7",Psi:"\u03a8",Omega:"\u03a9",alpha:"\u03b1",beta:"\u03b2",gamma:"\u03b3",delta:"\u03b4",epsilon:"\u03b5",zeta:"\u03b6",eta:"\u03b7",theta:"\u03b8",iota:"\u03b9",kappa:"\u03ba",lambda:"\u03bb",mu:"\u03bc",nu:"\u03bd",xi:"\u03be",omicron:"\u03bf",pi:"\u03c0",rho:"\u03c1",sigmaf:"\u03c2",sigma:"\u03c3",tau:"\u03c4",upsilon:"\u03c5",phi:"\u03c6",chi:"\u03c7",psi:"\u03c8",omega:"\u03c9",thetasym:"\u03d1",upsih:"\u03d2",piv:"\u03d6",OElig:"\u0152",oelig:"\u0153",Scaron:"\u0160",scaron:"\u0161",Yuml:"\u0178",fnof:"\u0192",circ:"\u02c6",tilde:"\u02dc",ensp:"\u2002",emsp:"\u2003",thinsp:"\u2009",zwnj:"\u200c",zwj:"\u200d",lrm:"\u200e",rlm:"\u200f",ndash:"\u2013",mdash:"\u2014",lsquo:"\u2018",rsquo:"\u2019",sbquo:"\u201a",ldquo:"\u201c",rdquo:"\u201d",bdquo:"\u201e",dagger:"\u2020",Dagger:"\u2021",bull:"\u2022",hellip:"\u2026",permil:"\u2030",prime:"\u2032",Prime:"\u2033",lsaquo:"\u2039",rsaquo:"\u203a",oline:"\u203e",euro:"\u20ac",trade:"\u2122",larr:"\u2190",uarr:"\u2191",rarr:"\u2192",darr:"\u2193",harr:"\u2194",crarr:"\u21b5",lceil:"\u2308",rceil:"\u2309",lfloor:"\u230a",rfloor:"\u230b",loz:"\u25ca",spades:"\u2660",clubs:"\u2663",hearts:"\u2665",diams:"\u2666"}},{}],241:[function(t,e,r){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,i=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),o=new RegExp("^"+n.source+i.source+"*(?::"+n.source+i.source+"*)?$");function s(t,e){this.message=t,this.locator=e,Error.captureStackTrace&&Error.captureStackTrace(this,s)}function a(){}function u(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function l(t,e,r,n,i,o){function s(t,e,n){t in r.attributeNames&&o.fatalError("Attribute "+t+" redefined"),r.addValue(t,e,n)}for(var a,u=++e,l=0;;){var c=t.charAt(u);switch(c){case"=":if(1===l)a=t.slice(e,u),l=3;else{if(2!==l)throw new Error("attribute equal must after attrName");l=3}break;case"'":case'"':if(3===l||1===l){if(1===l&&(o.warning('attribute value must after "="'),a=t.slice(e,u)),e=u+1,!((u=t.indexOf(c,e))>0))throw new Error("attribute value no end '"+c+"' match");s(a,h=t.slice(e,u).replace(/&#?\w+;/g,i),e-1),l=5}else{if(4!=l)throw new Error('attribute value must after "="');s(a,h=t.slice(e,u).replace(/&#?\w+;/g,i),e),o.warning('attribute "'+a+'" missed start quot('+c+")!!"),e=u+1,l=5}break;case"/":switch(l){case 0:r.setTagName(t.slice(e,u));case 5:case 6:case 7:l=7,r.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),0==l&&r.setTagName(t.slice(e,u)),u;case">":switch(l){case 0:r.setTagName(t.slice(e,u));case 5:case 6:case 7:break;case 4:case 1:"/"===(h=t.slice(e,u)).slice(-1)&&(r.closed=!0,h=h.slice(0,-1));case 2:2===l&&(h=a),4==l?(o.warning('attribute "'+h+'" missed quot(")!'),s(a,h.replace(/&#?\w+;/g,i),e)):("http://www.w3.org/1999/xhtml"===n[""]&&h.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+h+'" missed value!! "'+h+'" instead!!'),s(h,h,e));break;case 3:throw new Error("attribute value missed!!")}return u;case"\x80":c=" ";default:if(c<=" ")switch(l){case 0:r.setTagName(t.slice(e,u)),l=6;break;case 1:a=t.slice(e,u),l=2;break;case 4:var h=t.slice(e,u).replace(/&#?\w+;/g,i);o.warning('attribute "'+h+'" missed quot(")!!'),s(a,h,e);case 5:l=6}else switch(l){case 2:r.tagName,"http://www.w3.org/1999/xhtml"===n[""]&&a.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+a+'" missed value!! "'+a+'" instead2!!'),s(a,a,e),e=u,l=1;break;case 5:o.warning('attribute space is required"'+a+'"!!');case 6:l=1,e=u;break;case 3:l=4,e=u;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}u++}}function c(t,e,r){for(var n=t.tagName,i=null,o=t.length;o--;){var s=t[o],a=s.qName,u=s.value;if((p=a.indexOf(":"))>0)var l=s.prefix=a.slice(0,p),c=a.slice(p+1),h="xmlns"===l&&c;else c=a,l=null,h="xmlns"===a&&"";s.localName=c,!1!==h&&(null==i&&(i={},d(r,r={})),r[h]=i[h]=u,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(h,u))}for(o=t.length;o--;)(l=(s=t[o]).prefix)&&("xml"===l&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(s.uri=r[l||""]));var p;(p=n.indexOf(":"))>0?(l=t.prefix=n.slice(0,p),c=t.localName=n.slice(p+1)):(l=null,c=t.localName=n);var f=t.uri=r[l||""];if(e.startElement(f,c,n,t),!t.closed)return t.currentNSMap=r,t.localNSMap=i,!0;if(e.endElement(f,c,n),i)for(l in i)e.endPrefixMapping(l)}function h(t,e,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var o=t.indexOf("</"+r+">",e),s=t.substring(e+1,o);if(/[&<]/.test(s))return/^script$/i.test(r)?(i.characters(s,0,s.length),o):(s=s.replace(/&#?\w+;/g,n),i.characters(s,0,s.length),o)}return e+1}function p(t,e,r,n){var i=n[r];return null==i&&((i=t.lastIndexOf("</"+r+">"))<e&&(i=t.lastIndexOf("</"+r)),n[r]=i),i<e}function d(t,e){for(var r in t)e[r]=t[r]}function f(t,e,r,n){switch(t.charAt(e+2)){case"-":return"-"===t.charAt(e+3)?(i=t.indexOf("--\x3e",e+4))>e?(r.comment(t,e+4,i-e-4),i+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==t.substr(e+3,6)){var i=t.indexOf("]]>",e+9);return r.startCDATA(),r.characters(t,e+9,i-e-9),r.endCDATA(),i+3}var o=function(t,e){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=e,i.exec(t);r=i.exec(t);)if(n.push(r),r[1])return n}(t,e),s=o.length;if(s>1&&/!doctype/i.test(o[0][0])){var a=o[1][0],u=!1,l=!1;s>3&&(/^public$/i.test(o[2][0])?(u=o[3][0],l=s>4&&o[4][0]):/^system$/i.test(o[2][0])&&(l=o[3][0]));var c=o[s-1];return r.startDTD(a,u,l),r.endDTD(),c.index+c[0].length}}return-1}function y(t,e,r){var n=t.indexOf("?>",e);if(n){var i=t.substring(e,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return i?(i[0].length,r.processingInstruction(i[1],i[2]),n+2):-1}return-1}function m(){this.attributeNames={}}s.prototype=new Error,s.prototype.name=s.name,a.prototype={parse:function(t,e,r){var n=this.domBuilder;n.startDocument(),d(e,e={}),function(t,e,r,n,i){function o(t){var e=t.slice(1,-1);return e in r?r[e]:"#"===e.charAt(0)?function(t){if(t>65535){var e=55296+((t-=65536)>>10),r=56320+(1023&t);return String.fromCharCode(e,r)}return String.fromCharCode(t)}(parseInt(e.substr(1).replace("x","0x"))):(i.error("entity not found:"+t),t)}function a(e){if(e>S){var r=t.substring(S,e).replace(/&#?\w+;/g,o);_&&d(S),n.characters(r,0,e-S),S=e}}function d(e,r){for(;e>=v&&(r=T.exec(t));)g=r.index,v=g+r[0].length,_.lineNumber++;_.columnNumber=e-g+1}for(var g=0,v=0,T=/.*(?:\r\n?|\n)|.*$/g,_=n.locator,E=[{currentNSMap:e}],b={},S=0;;){try{var x=t.indexOf("<",S);if(x<0){if(!t.substr(S).match(/^\s*$/)){var C=n.doc,A=C.createTextNode(t.substr(S));C.appendChild(A),n.currentElement=A}return}switch(x>S&&a(x),t.charAt(x+1)){case"/":var N=t.indexOf(">",x+3),O=t.substring(x+2,N),w=E.pop();N<0?(O=t.substring(x+2).replace(/[\s<].*/,""),i.error("end tag name: "+O+" is not complete:"+w.tagName),N=x+1+O.length):O.match(/\s</)&&(O=O.replace(/[\s<].*/,""),i.error("end tag name: "+O+" maybe not complete"),N=x+1+O.length);var R=w.localNSMap,L=w.tagName==O;if(L||w.tagName&&w.tagName.toLowerCase()==O.toLowerCase()){if(n.endElement(w.uri,w.localName,O),R)for(var P in R)n.endPrefixMapping(P);L||i.fatalError("end tag name: "+O+" is not match the current start tagName:"+w.tagName)}else E.push(w);N++;break;case"?":_&&d(x),N=y(t,x,n);break;case"!":_&&d(x),N=f(t,x,n,i);break;default:_&&d(x);var I=new m,D=E[E.length-1].currentNSMap,U=(N=l(t,x,I,D,o,i),I.length);if(!I.closed&&p(t,N,I.tagName,b)&&(I.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),_&&U){for(var M=u(_,{}),k=0;k<U;k++){var F=I[k];d(F.offset),F.locator=u(_,{})}n.locator=M,c(I,n,D)&&E.push(I),n.locator=_}else c(I,n,D)&&E.push(I);"http://www.w3.org/1999/xhtml"!==I.uri||I.closed?N++:N=h(t,N,I.tagName,o,n)}}catch(j){if(j instanceof s)throw j;i.error("element parse error: "+j),N=-1}N>S?S=N:a(Math.max(x,S)+1)}}(t,e,r,n,this.errorHandler),n.endDocument()}},m.prototype={setTagName:function(t){if(!o.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},addValue:function(t,e,r){if(!o.test(t))throw new Error("invalid attribute:"+t);this.attributeNames[t]=this.length,this[this.length++]={qName:t,value:e,offset:r}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}},r.XMLReader=a,r.ParseError=s},{}],239:[function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r]}function i(t,e){var r=t.prototype;if(!(r instanceof e)){function i(){}i.prototype=e.prototype,n(r,i=new i),t.prototype=r=i}r.constructor!=t&&("function"!=typeof t&&console.error("unknow Class:"+t),r.constructor=t)}var o={},s=o.ELEMENT_NODE=1,a=o.ATTRIBUTE_NODE=2,u=o.TEXT_NODE=3,l=o.CDATA_SECTION_NODE=4,c=o.ENTITY_REFERENCE_NODE=5,h=o.ENTITY_NODE=6,p=o.PROCESSING_INSTRUCTION_NODE=7,d=o.COMMENT_NODE=8,f=o.DOCUMENT_NODE=9,y=o.DOCUMENT_TYPE_NODE=10,m=o.DOCUMENT_FRAGMENT_NODE=11,g=o.NOTATION_NODE=12,v={},T={},_=(v.INDEX_SIZE_ERR=(T[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),E=(v.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),v.NOT_FOUND_ERR=(T[8]="Not found",8)),b=(v.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));function S(t,e){if(e instanceof Error)var r=e;else r=this,Error.call(this,T[t]),this.message=T[t],Error.captureStackTrace&&Error.captureStackTrace(this,S);return r.code=t,e&&(this.message=this.message+": "+e),r}function x(){}function C(t,e){this._node=t,this._refresh=e,A(this)}function A(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var r=t._refresh(t._node);rt(t,"length",r.length),n(r,t),t._inc=e}}function N(){}function O(t,e){for(var r=t.length;r--;)if(t[r]===e)return r}function w(t,e,r,n){if(n?e[O(e,n)]=r:e[e.length++]=r,t){r.ownerElement=t;var i=t.ownerDocument;i&&(n&&M(i,t,n),function(t,e,r){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&(e._nsMap[r.prefix?r.localName:""]=r.value)}(i,t,r))}}function R(t,e,r){var n=O(e,r);if(!(n>=0))throw S(E,new Error(t.tagName+"@"+r));for(var i=e.length-1;n<i;)e[n]=e[++n];if(e.length=i,t){var o=t.ownerDocument;o&&(M(o,t,r),r.ownerElement=null)}}function L(t){if(this._features={},t)for(var e in t)this._features=t[e]}function P(){}function I(t){return("<"==t?"&lt;":">"==t&&"&gt;")||"&"==t&&"&amp;"||'"'==t&&"&quot;"||"&#"+t.charCodeAt()+";"}function D(t,e){if(e(t))return!0;if(t=t.firstChild)do{if(D(t,e))return!0}while(t=t.nextSibling)}function U(){}function M(t,e,r,n){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&delete e._nsMap[r.prefix?r.localName:""]}function k(t,e,r){if(t&&t._inc){t._inc++;var n=e.childNodes;if(r)n[n.length++]=r;else{for(var i=e.firstChild,o=0;i;)n[o++]=i,i=i.nextSibling;n.length=o}}}function F(t,e){var r=e.previousSibling,n=e.nextSibling;return r?r.nextSibling=n:t.firstChild=n,n?n.previousSibling=r:t.lastChild=r,k(t.ownerDocument,t),e}function j(t,e,r){var n=e.parentNode;if(n&&n.removeChild(e),e.nodeType===m){var i=e.firstChild;if(null==i)return e;var o=e.lastChild}else i=o=e;var s=r?r.previousSibling:t.lastChild;i.previousSibling=s,o.nextSibling=r,s?s.nextSibling=i:t.firstChild=i,null==r?t.lastChild=o:r.previousSibling=o;do{i.parentNode=t}while(i!==o&&(i=i.nextSibling));return k(t.ownerDocument||t,t),e.nodeType==m&&(e.firstChild=e.lastChild=null),e}function B(){this._nsMap={}}function H(){}function G(){}function z(){}function W(){}function V(){}function $(){}function q(){}function Y(){}function K(){}function X(){}function Q(){}function Z(){}function J(t,e){var r=[],n=9==this.nodeType&&this.documentElement||this,i=n.prefix,o=n.namespaceURI;if(o&&null==i&&null==(i=n.lookupPrefix(o)))var s=[{namespace:o,prefix:null}];return et(this,r,t,e,s),r.join("")}function tt(t,e,r){var n=t.prefix||"",i=t.namespaceURI;if(!n&&!i)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=r.length;o--;){var s=r[o];if(s.prefix==n)return s.namespace!=i}return!0}function et(t,e,r,n,i){if(n){if(!(t=n(t)))return;if("string"==typeof t)return void e.push(t)}switch(t.nodeType){case s:i||(i=[]),i.length;var o=t.attributes,h=o.length,g=t.firstChild,v=t.tagName;r="http://www.w3.org/1999/xhtml"===t.namespaceURI||r,e.push("<",v);for(var T=0;T<h;T++)"xmlns"==(_=o.item(T)).prefix?i.push({prefix:_.localName,namespace:_.value}):"xmlns"==_.nodeName&&i.push({prefix:"",namespace:_.value});for(T=0;T<h;T++){var _;if(tt(_=o.item(T),0,i)){var E=_.prefix||"",b=_.namespaceURI,S=E?" xmlns:"+E:" xmlns";e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})}et(_,e,r,n,i)}if(tt(t,0,i)&&(E=t.prefix||"",b=t.namespaceURI,S=E?" xmlns:"+E:" xmlns",e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})),g||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(v)){if(e.push(">"),r&&/^script$/i.test(v))for(;g;)g.data?e.push(g.data):et(g,e,r,n,i),g=g.nextSibling;else for(;g;)et(g,e,r,n,i),g=g.nextSibling;e.push("</",v,">")}else e.push("/>");return;case f:case m:for(g=t.firstChild;g;)et(g,e,r,n,i),g=g.nextSibling;return;case a:return e.push(" ",t.name,'="',t.value.replace(/[&"]/g,I),'"');case u:return e.push(t.data.replace(/[<&]/g,I).replace(/]]>/g,"]]&gt;"));case l:return e.push("<![CDATA[",t.data,"]]>");case d:return e.push("\x3c!--",t.data,"--\x3e");case y:var x=t.publicId,C=t.systemId;if(e.push("<!DOCTYPE ",t.name),x)e.push(" PUBLIC ",x),C&&"."!=C&&e.push(" ",C),e.push(">");else if(C&&"."!=C)e.push(" SYSTEM ",C,">");else{var A=t.internalSubset;A&&e.push(" [",A,"]"),e.push(">")}return;case p:return e.push("<?",t.target," ",t.data,"?>");case c:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function rt(t,e,r){t[e]=r}v.INVALID_STATE_ERR=(T[11]="Invalid state",11),v.SYNTAX_ERR=(T[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),v.NAMESPACE_ERR=(T[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(T[15]="Invalid access",15),S.prototype=Error.prototype,n(v,S),x.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var r=[],n=0;n<this.length;n++)et(this[n],r,t,e);return r.join("")}},C.prototype.item=function(t){return A(this),this[t]},i(C,x),N.prototype={length:0,item:x.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var r=this[e];if(r.nodeName==t)return r}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new S(b);var r=this.getNamedItem(t.nodeName);return w(this._ownerElement,this,t,r),r},setNamedItemNS:function(t){var e,r=t.ownerElement;if(r&&r!=this._ownerElement)throw new S(b);return e=this.getNamedItemNS(t.namespaceURI,t.localName),w(this._ownerElement,this,t,e),e},removeNamedItem:function(t){var e=this.getNamedItem(t);return R(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var r=this.getNamedItemNS(t,e);return R(this._ownerElement,this,r),r},getNamedItemNS:function(t,e){for(var r=this.length;r--;){var n=this[r];if(n.localName==e&&n.namespaceURI==t)return n}return null}},L.prototype={hasFeature:function(t,e){var r=this._features[t.toLowerCase()];return!(!r||e&&!(e in r))},createDocument:function(t,e,r){var n=new U;if(n.implementation=this,n.childNodes=new x,n.doctype=r,r&&n.appendChild(r),e){var i=n.createElementNS(t,e);n.appendChild(i)}return n},createDocumentType:function(t,e,r){var n=new $;return n.name=t,n.nodeName=t,n.publicId=e,n.systemId=r,n}},P.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return j(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return F(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(t){return function t(e,r,n){var i=new r.constructor;for(var o in r){var u=r[o];"object"!=typeof u&&u!=i[o]&&(i[o]=u)}switch(r.childNodes&&(i.childNodes=new x),i.ownerDocument=e,i.nodeType){case s:var l=r.attributes,c=i.attributes=new N,h=l.length;c._ownerElement=i;for(var p=0;p<h;p++)i.setAttributeNode(t(e,l.item(p),!0));break;case a:n=!0}if(n)for(var d=r.firstChild;d;)i.appendChild(t(e,d,n)),d=d.nextSibling;return i}(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==u&&t.nodeType==u?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var r=e._nsMap;if(r)for(var n in r)if(r[n]==t)return n;e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var r=e._nsMap;if(r&&t in r)return r[t];e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){return null==this.lookupPrefix(t)}},n(o,P),n(o,P.prototype),U.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==m){for(var r=t.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,e),r=n}return t}return null==this.documentElement&&t.nodeType==s&&(this.documentElement=t),j(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),F(this,t)},importNode:function(t,e){return function t(e,r,n){var i;switch(r.nodeType){case s:(i=r.cloneNode(!1)).ownerDocument=e;case m:break;case a:n=!0}if(i||(i=r.cloneNode(!1)),i.ownerDocument=e,i.parentNode=null,n)for(var o=r.firstChild;o;)i.appendChild(t(e,o,n)),o=o.nextSibling;return i}(this,t,e)},getElementById:function(t){var e=null;return D(this.documentElement,(function(r){if(r.nodeType==s&&r.getAttribute("id")==t)return e=r,!0})),e},getElementsByClassName:function(t){var e=new RegExp("(^|\\s)"+t+"(\\s|$)");return new C(this,(function(t){var r=[];return D(t.documentElement,(function(n){n!==t&&n.nodeType==s&&e.test(n.getAttribute("class"))&&r.push(n)})),r}))},createElement:function(t){var e=new B;return e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new x,(e.attributes=new N)._ownerElement=e,e},createDocumentFragment:function(){var t=new X;return t.ownerDocument=this,t.childNodes=new x,t},createTextNode:function(t){var e=new z;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new W;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new V;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var r=new Q;return r.ownerDocument=this,r.tagName=r.target=t,r.nodeValue=r.data=e,r},createAttribute:function(t){var e=new H;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new K;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var r=new B,n=e.split(":"),i=r.attributes=new N;return r.childNodes=new x,r.ownerDocument=this,r.nodeName=e,r.tagName=e,r.namespaceURI=t,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,i._ownerElement=r,r},createAttributeNS:function(t,e){var r=new H,n=e.split(":");return r.ownerDocument=this,r.nodeName=e,r.name=e,r.namespaceURI=t,r.specified=!0,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,r}},i(U,P),B.prototype={nodeType:s,hasAttribute:function(t){return null!=this.getAttributeNode(t)},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var r=this.ownerDocument.createAttribute(t);r.value=r.nodeValue=""+e,this.setAttributeNode(r)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===m?this.insertBefore(t,null):function(t,e){var r=e.parentNode;if(r){var n=t.lastChild;r.removeChild(e),n=t.lastChild}return n=t.lastChild,e.parentNode=t,e.previousSibling=n,e.nextSibling=null,n?n.nextSibling=e:t.firstChild=e,t.lastChild=e,k(t.ownerDocument,t,e),e}(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);r&&this.removeAttributeNode(r)},hasAttributeNS:function(t,e){return null!=this.getAttributeNodeNS(t,e)},getAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);return r&&r.value||""},setAttributeNS:function(t,e,r){var n=this.ownerDocument.createAttributeNS(t,e);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new C(this,(function(e){var r=[];return D(e,(function(n){n===e||n.nodeType!=s||"*"!==t&&n.tagName!=t||r.push(n)})),r}))},getElementsByTagNameNS:function(t,e){return new C(this,(function(r){var n=[];return D(r,(function(i){i===r||i.nodeType!==s||"*"!==t&&i.namespaceURI!==t||"*"!==e&&i.localName!=e||n.push(i)})),n}))}},U.prototype.getElementsByTagName=B.prototype.getElementsByTagName,U.prototype.getElementsByTagNameNS=B.prototype.getElementsByTagNameNS,i(B,P),H.prototype.nodeType=a,i(H,P),G.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error(T[_])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,r){r=this.data.substring(0,t)+r+this.data.substring(t+e),this.nodeValue=this.data=r,this.length=r.length}},i(G,P),z.prototype={nodeName:"#text",nodeType:u,splitText:function(t){var e=this.data,r=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},i(z,G),W.prototype={nodeName:"#comment",nodeType:d},i(W,G),V.prototype={nodeName:"#cdata-section",nodeType:l},i(V,G),$.prototype.nodeType=y,i($,P),q.prototype.nodeType=g,i(q,P),Y.prototype.nodeType=h,i(Y,P),K.prototype.nodeType=c,i(K,P),X.prototype.nodeName="#document-fragment",X.prototype.nodeType=m,i(X,P),Q.prototype.nodeType=p,i(Q,P),Z.prototype.serializeToString=function(t,e,r){return J.call(t,e,r)},P.prototype.toString=J;try{Object.defineProperty&&(Object.defineProperty(C.prototype,"length",{get:function(){return A(this),this.$$length}}),Object.defineProperty(P.prototype,"textContent",{get:function(){return function t(e){switch(e.nodeType){case s:case m:var r=[];for(e=e.firstChild;e;)7!==e.nodeType&&8!==e.nodeType&&r.push(t(e)),e=e.nextSibling;return r.join("");default:return e.nodeValue}}(this)},set:function(t){switch(this.nodeType){case s:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),rt=function(t,e,r){t["$$"+e]=r})}catch(nt){}},{}],242:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(258);class s{constructor(t){this.p=0,this.data=t,this.n=t.length}reset(){this.p=0}consume(){if(this.p>=this.n)throw new Error("cannot consume EOF");this.p<this.n&&this.p++}LA(t){return 0===t?0:t<0&&(t++,this.p+t-1<0)||this.p+t-1>=this.n?o.IntStream.EOF:this.data.charCodeAt(this.p+t-1)}LT(t){return this.LA(t)}get index(){return this.p}get size(){return this.n}mark(){return-1}release(t){}seek(t){if(t<=this.p)this.p=t;else for(t=Math.min(t,this.n);this.p<t;)this.consume()}getText(t){let e=t.a,r=t.b;r>=this.n&&(r=this.n-1);let n=r-e+1;return e>=this.n?"":this.data.substr(e,n)}get sourceName(){return this.name?this.name:o.IntStream.UNKNOWN_SOURCE_NAME}toString(){return this.data}}n([i.Override],s.prototype,"consume",null),n([i.Override],s.prototype,"LA",null),n([i.Override],s.prototype,"index",null),n([i.Override],s.prototype,"size",null),n([i.Override],s.prototype,"mark",null),n([i.Override],s.prototype,"release",null),n([i.Override],s.prototype,"seek",null),n([i.Override],s.prototype,"getText",null),n([i.Override],s.prototype,"sourceName",null),n([i.Override],s.prototype,"toString",null),r.ANTLRInputStream=s},{252:252,258:258}],258:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.IntStream||(r.IntStream={})).EOF=-1,n.UNKNOWN_SOURCE_NAME="<unknown>"},{}],252:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.NotNull=function(t,e,r){},r.Nullable=function(t,e,r){},r.Override=function(t,e,r){},r.SuppressWarnings=function(t){return(t,e,r)=>{}}},{}],243:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(253),o=t(257),s=t(252),a=t(363);class u extends i.DefaultErrorStrategy{recover(t,e){for(let r=t.context;r;r=r.parent)r.exception=e;throw new a.ParseCancellationException(e)}recoverInline(t){let e=new o.InputMismatchException(t);for(let r=t.context;r;r=r.parent)r.exception=e;throw new a.ParseCancellationException(e)}sync(t){}}n([s.Override],u.prototype,"recover",null),n([s.Override],u.prototype,"recoverInline",null),n([s.Override],u.prototype,"sync",null),r.BailErrorStrategy=u},{252:252,253:253,257:257,363:363}],253:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(285),s=t(286),a=t(256),u=t(257),l=t(359),c=t(264),h=t(326),p=t(276),d=t(252);class f{constructor(){this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.nextTokensState=o.ATNState.INVALID_STATE_NUMBER}reset(t){this.endErrorCondition(t)}beginErrorCondition(t){this.errorRecoveryMode=!0}inErrorRecoveryMode(t){return this.errorRecoveryMode}endErrorCondition(t){this.errorRecoveryMode=!1,this.lastErrorStates=void 0,this.lastErrorIndex=-1}reportMatch(t){this.endErrorCondition(t)}reportError(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof c.NoViableAltException?this.reportNoViableAlternative(t,e):e instanceof u.InputMismatchException?this.reportInputMismatch(t,e):e instanceof a.FailedPredicateException?this.reportFailedPredicate(t,e):(console.error("unknown recognition error type: "+e),this.notifyErrorListeners(t,e.toString(),e)))}notifyErrorListeners(t,e,r){let n=r.getOffendingToken(t);void 0===n&&(n=null),t.notifyErrorListeners(e,n,r)}recover(t,e){this.lastErrorIndex===t.inputStream.index&&this.lastErrorStates&&this.lastErrorStates.contains(t.state)&&t.consume(),this.lastErrorIndex=t.inputStream.index,this.lastErrorStates||(this.lastErrorStates=new l.IntervalSet),this.lastErrorStates.add(t.state);let r=this.getErrorRecoverySet(t);this.consumeUntil(t,r)}sync(t){let e=t.interpreter.atn.states[t.state];if(this.inErrorRecoveryMode(t))return;let r=t.inputStream.LA(1),n=t.atn.nextTokens(e);if(n.contains(r))return this.nextTokensContext=void 0,void(this.nextTokensState=o.ATNState.INVALID_STATE_NUMBER);if(n.contains(p.Token.EPSILON))void 0===this.nextTokensContext&&(this.nextTokensContext=t.context,this.nextTokensState=t.state);else switch(e.stateType){case s.ATNStateType.BLOCK_START:case s.ATNStateType.STAR_BLOCK_START:case s.ATNStateType.PLUS_BLOCK_START:case s.ATNStateType.STAR_LOOP_ENTRY:if(this.singleTokenDeletion(t))return;throw new u.InputMismatchException(t);case s.ATNStateType.PLUS_LOOP_BACK:case s.ATNStateType.STAR_LOOP_BACK:this.reportUnwantedToken(t);let e=t.getExpectedTokens().or(this.getErrorRecoverySet(t));this.consumeUntil(t,e)}}reportNoViableAlternative(t,e){let r,n=t.inputStream;r=n?e.startToken.type===p.Token.EOF?"<EOF>":n.getTextFromRange(e.startToken,e.getOffendingToken()):"<unknown input>";let i="no viable alternative at input "+this.escapeWSAndQuote(r);this.notifyErrorListeners(t,i,e)}reportInputMismatch(t,e){let r=e.expectedTokens,n=r?r.toStringVocabulary(t.vocabulary):"",i="mismatched input "+this.getTokenErrorDisplay(e.getOffendingToken(t))+" expecting "+n;this.notifyErrorListeners(t,i,e)}reportFailedPredicate(t,e){let r="rule "+t.ruleNames[t.context.ruleIndex]+" "+e.message;this.notifyErrorListeners(t,r,e)}reportUnwantedToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);let e=t.currentToken,r="extraneous input "+this.getTokenErrorDisplay(e)+" expecting "+this.getExpectedTokens(t).toStringVocabulary(t.vocabulary);t.notifyErrorListeners(r,e,void 0)}reportMissingToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);let e=t.currentToken,r="missing "+this.getExpectedTokens(t).toStringVocabulary(t.vocabulary)+" at "+this.getTokenErrorDisplay(e);t.notifyErrorListeners(r,e,void 0)}recoverInline(t){let e=this.singleTokenDeletion(t);if(e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw void 0===this.nextTokensContext?new u.InputMismatchException(t):new u.InputMismatchException(t,this.nextTokensState,this.nextTokensContext)}singleTokenInsertion(t){let e=t.inputStream.LA(1),r=t.interpreter.atn.states[t.state].transition(0).target,n=t.interpreter.atn;return!!n.nextTokens(r,h.PredictionContext.fromRuleContext(n,t.context)).contains(e)&&(this.reportMissingToken(t),!0)}singleTokenDeletion(t){let e=t.inputStream.LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();let e=t.currentToken;return this.reportMatch(t),e}}getMissingSymbol(t){let e,r=t.currentToken,n=this.getExpectedTokens(t),i=p.Token.INVALID_TYPE;n.isNil||(i=n.minElement),e=i===p.Token.EOF?"<missing EOF>":"<missing "+t.vocabulary.getDisplayName(i)+">";let o=r,s=t.inputStream.tryLT(-1);return o.type===p.Token.EOF&&null!=s&&(o=s),this.constructToken(t.inputStream.tokenSource,i,e,o)}constructToken(t,e,r,n){let i=t.tokenFactory,o=n.tokenSource,s=o?o.inputStream:void 0;return i.create({source:t,stream:s},e,r,p.Token.DEFAULT_CHANNEL,-1,-1,n.line,n.charPositionInLine)}getExpectedTokens(t){return t.getExpectedTokens()}getTokenErrorDisplay(t){if(!t)return"<no token>";let e=this.getSymbolText(t);return e||(e=this.getSymbolType(t)===p.Token.EOF?"<EOF>":`<${this.getSymbolType(t)}>`),this.escapeWSAndQuote(e)}getSymbolText(t){return t.text}getSymbolType(t){return t.type}escapeWSAndQuote(t){return"'"+(t=(t=(t=t.replace("\n","\\n")).replace("\r","\\r")).replace("\t","\\t"))+"'"}getErrorRecoverySet(t){let e=t.interpreter.atn,r=t.context,n=new l.IntervalSet;for(;r&&r.invokingState>=0;){let t=e.states[r.invokingState].transition(0),i=e.nextTokens(t.followState);n.addAll(i),r=r._parent}return n.remove(p.Token.EPSILON),n}consumeUntil(t,e){let r=t.inputStream.LA(1);for(;r!==p.Token.EOF&&!e.contains(r);)t.consume(),r=t.inputStream.LA(1)}}n([d.Override],f.prototype,"reset",null),n([i(0,d.NotNull)],f.prototype,"beginErrorCondition",null),n([d.Override],f.prototype,"inErrorRecoveryMode",null),n([i(0,d.NotNull)],f.prototype,"endErrorCondition",null),n([d.Override],f.prototype,"reportMatch",null),n([d.Override],f.prototype,"reportError",null),n([i(0,d.NotNull)],f.prototype,"notifyErrorListeners",null),n([d.Override],f.prototype,"recover",null),n([d.Override],f.prototype,"sync",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportNoViableAlternative",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportInputMismatch",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportFailedPredicate",null),n([i(0,d.NotNull)],f.prototype,"reportUnwantedToken",null),n([i(0,d.NotNull)],f.prototype,"reportMissingToken",null),n([d.Override],f.prototype,"recoverInline",null),n([i(0,d.NotNull)],f.prototype,"singleTokenInsertion",null),n([i(0,d.NotNull)],f.prototype,"singleTokenDeletion",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getMissingSymbol",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getExpectedTokens",null),n([i(0,d.NotNull)],f.prototype,"getSymbolText",null),n([i(0,d.NotNull)],f.prototype,"getSymbolType",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"escapeWSAndQuote",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getErrorRecoverySet",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"consumeUntil",null),r.DefaultErrorStrategy=f},{252:252,256:256,257:257,264:264,276:276,285:285,286:286,326:326,359:359}],257:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270);let s=class extends o.RecognitionException{constructor(t,e,r){void 0===r&&(r=t.context),super(t,t.inputStream,r),void 0!==e&&this.setOffendingState(e),this.setOffendingToken(t,t.currentToken)}};s=n([i(0,t(252).NotNull)],s),r.InputMismatchException=s},{252:252,270:270}],363:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.ParseCancellationException=class extends Error{constructor(t){super(t.message),this.cause=t,this.stack=t.stack}getCause(){return this.cause}}},{}],244:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(248),s=t(358),a=t(260),u=t(252),l=t(276);let c=class{constructor(t){if(this.tokens=[],this.p=-1,this.fetchedEOF=!1,null==t)throw new Error("tokenSource cannot be null");this._tokenSource=t}get tokenSource(){return this._tokenSource}set tokenSource(t){this._tokenSource=t,this.tokens.length=0,this.p=-1,this.fetchedEOF=!1}get index(){return this.p}mark(){return 0}release(t){}seek(t){this.lazyInit(),this.p=this.adjustSeekIndex(t)}get size(){return this.tokens.length}consume(){let t;if(!(t=this.p>=0&&(this.fetchedEOF?this.p<this.tokens.length-1:this.p<this.tokens.length))&&this.LA(1)===l.Token.EOF)throw new Error("cannot consume EOF");this.sync(this.p+1)&&(this.p=this.adjustSeekIndex(this.p+1))}sync(t){let e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e}fetch(t){if(this.fetchedEOF)return 0;for(let e=0;e<t;e++){let t=this.tokenSource.nextToken();if(this.isWritableToken(t)&&(t.tokenIndex=this.tokens.length),this.tokens.push(t),t.type===l.Token.EOF)return this.fetchedEOF=!0,e+1}return t}get(t){if(t<0||t>=this.tokens.length)throw new RangeError("token index "+t+" out of range 0.."+(this.tokens.length-1));return this.tokens[t]}getRange(t,e){if(t<0||e<0)return[];this.lazyInit();let r=new Array;e>=this.tokens.length&&(e=this.tokens.length-1);for(let n=t;n<=e;n++){let t=this.tokens[n];if(t.type===l.Token.EOF)break;r.push(t)}return r}LA(t){let e=this.LT(t);return e?e.type:l.Token.INVALID_TYPE}tryLB(t){if(!(this.p-t<0))return this.tokens[this.p-t]}LT(t){let e=this.tryLT(t);if(void 0===e)throw new RangeError("requested lookback index out of range");return e}tryLT(t){if(this.lazyInit(),0===t)throw new RangeError("0 is not a valid lookahead index");if(t<0)return this.tryLB(-t);let e=this.p+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]}adjustSeekIndex(t){return t}lazyInit(){-1===this.p&&this.setup()}setup(){this.sync(0),this.p=this.adjustSeekIndex(0)}getTokens(t,e,r){if(this.lazyInit(),void 0===t)return this.tokens;if(void 0===e&&(e=this.tokens.length-1),t<0||e>=this.tokens.length||e<0||t>=this.tokens.length)throw new RangeError("start "+t+" or stop "+e+" not in 0.."+(this.tokens.length-1));if(t>e)return[];if(void 0===r)return this.tokens.slice(t,e+1);"number"==typeof r&&(r=(new Set).add(r));let n=r,i=this.tokens.slice(t,e+1);return i.filter(t=>n.has(t.type))}nextTokenOnChannel(t,e){if(this.sync(t),t>=this.size)return this.size-1;let r=this.tokens[t];for(;r.channel!==e;){if(r.type===l.Token.EOF)return t;t++,this.sync(t),r=this.tokens[t]}return t}previousTokenOnChannel(t,e){if(this.sync(t),t>=this.size)return this.size-1;for(;t>=0;){let r=this.tokens[t];if(r.type===l.Token.EOF||r.channel===e)return t;t--}return t}getHiddenTokensToRight(t,e=-1){if(this.lazyInit(),t<0||t>=this.tokens.length)throw new RangeError(t+" not in 0.."+(this.tokens.length-1));let r,n=this.nextTokenOnChannel(t+1,a.Lexer.DEFAULT_TOKEN_CHANNEL),i=t+1;return r=-1===n?this.size-1:n,this.filterForChannel(i,r,e)}getHiddenTokensToLeft(t,e=-1){if(this.lazyInit(),t<0||t>=this.tokens.length)throw new RangeError(t+" not in 0.."+(this.tokens.length-1));if(0===t)return[];let r=this.previousTokenOnChannel(t-1,a.Lexer.DEFAULT_TOKEN_CHANNEL);if(r===t-1)return[];let n=r+1,i=t-1;return this.filterForChannel(n,i,e)}filterForChannel(t,e,r){let n=new Array;for(let i=t;i<=e;i++){let t=this.tokens[i];-1===r?t.channel!==a.Lexer.DEFAULT_TOKEN_CHANNEL&&n.push(t):t.channel===r&&n.push(t)}return n}get sourceName(){return this.tokenSource.sourceName}getText(t){void 0===t?t=s.Interval.of(0,this.size-1):t instanceof s.Interval||(t=t.sourceInterval);let e=t.a,r=t.b;if(e<0||r<0)return"";this.fill(),r>=this.tokens.length&&(r=this.tokens.length-1);let n="";for(let i=e;i<=r;i++){let t=this.tokens[i];if(t.type===l.Token.EOF)break;n+=t.text}return n.toString()}getTextFromRange(t,e){return this.isToken(t)&&this.isToken(e)?this.getText(s.Interval.of(t.tokenIndex,e.tokenIndex)):""}fill(){for(this.lazyInit();;)if(this.fetch(1e3)<1e3)return}isWritableToken(t){return t instanceof o.CommonToken}isToken(t){return t instanceof o.CommonToken}};n([u.NotNull],c.prototype,"_tokenSource",void 0),n([u.Override],c.prototype,"tokenSource",null),n([u.Override],c.prototype,"index",null),n([u.Override],c.prototype,"mark",null),n([u.Override],c.prototype,"release",null),n([u.Override],c.prototype,"seek",null),n([u.Override],c.prototype,"size",null),n([u.Override],c.prototype,"consume",null),n([u.Override],c.prototype,"get",null),n([u.Override],c.prototype,"LA",null),n([u.NotNull,u.Override],c.prototype,"LT",null),n([u.Override],c.prototype,"sourceName",null),n([u.NotNull,u.Override],c.prototype,"getText",null),n([u.NotNull,u.Override],c.prototype,"getTextFromRange",null),c=n([i(0,u.NotNull)],c),r.BufferedTokenStream=c},{248:248,252:252,260:260,276:276,358:358}],248:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(358),s=t(252),a=t(276);let u=class t{constructor(e,r,n=t.EMPTY_SOURCE,i=a.Token.DEFAULT_CHANNEL,o=0,s=0){this._line=0,this._charPositionInLine=-1,this._channel=a.Token.DEFAULT_CHANNEL,this.index=-1,this._text=r,this._type=e,this.source=n,this._channel=i,this.start=o,this.stop=s,null!=n.source&&(this._line=n.source.line,this._charPositionInLine=n.source.charPositionInLine)}static fromToken(e){let r=new t(e.type,void 0,t.EMPTY_SOURCE,e.channel,e.startIndex,e.stopIndex);return r._line=e.line,r.index=e.tokenIndex,r._charPositionInLine=e.charPositionInLine,e instanceof t?(r._text=e.text,r.source=e.source):(r._text=e.text,r.source={source:e.tokenSource,stream:e.inputStream}),r}get type(){return this._type}set type(t){this._type=t}get line(){return this._line}set line(t){this._line=t}get text(){if(null!=this._text)return this._text;let t=this.inputStream;if(null==t)return;let e=t.size;return this.start<e&&this.stop<e?t.getText(o.Interval.of(this.start,this.stop)):"<EOF>"}set text(t){this._text=t}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(t){this._charPositionInLine=t}get channel(){return this._channel}set channel(t){this._channel=t}get startIndex(){return this.start}set startIndex(t){this.start=t}get stopIndex(){return this.stop}set stopIndex(t){this.stop=t}get tokenIndex(){return this.index}set tokenIndex(t){this.index=t}get tokenSource(){return this.source.source}get inputStream(){return this.source.stream}toString(t){let e="";this._channel>0&&(e=",channel="+this._channel);let r=this.text;r=null!=r?(r=(r=r.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"):"<no text>";let n=String(this._type);return t&&(n=t.vocabulary.getDisplayName(this._type)),"[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+r+"',<"+n+">"+e+","+this._line+":"+this.charPositionInLine+"]"}};u.EMPTY_SOURCE={source:void 0,stream:void 0},n([s.NotNull],u.prototype,"source",void 0),n([s.Override],u.prototype,"type",null),n([s.Override],u.prototype,"line",null),n([s.Override],u.prototype,"text",null),n([s.Override],u.prototype,"charPositionInLine",null),n([s.Override],u.prototype,"channel",null),n([s.Override],u.prototype,"startIndex",null),n([s.Override],u.prototype,"stopIndex",null),n([s.Override],u.prototype,"tokenIndex",null),n([s.Override],u.prototype,"tokenSource",null),n([s.Override],u.prototype,"inputStream",null),n([s.Override],u.prototype,"toString",null),n([i(0,s.NotNull)],u,"fromToken",null),u=n([i(2,s.NotNull)],u),r.CommonToken=u},{252:252,276:276,358:358}],358:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{constructor(t,e){this.a=t,this.b=e}static get INVALID(){return o._INVALID}static of(t,e){return t!==e||t<0||t>1e3?new o(t,e):(null==o.cache[t]&&(o.cache[t]=new o(t,t)),o.cache[t])}get length(){return this.b<this.a?0:this.b-this.a+1}equals(t){return t===this||t instanceof o&&this.a===t.a&&this.b===t.b}hashCode(){let t=23;return 31*(t=31*t+this.a)+this.b}startsBeforeDisjoint(t){return this.a<t.a&&this.b<t.a}startsBeforeNonDisjoint(t){return this.a<=t.a&&this.b>=t.a}startsAfter(t){return this.a>t.a}startsAfterDisjoint(t){return this.a>t.b}startsAfterNonDisjoint(t){return this.a>t.a&&this.a<=t.b}disjoint(t){return this.startsBeforeDisjoint(t)||this.startsAfterDisjoint(t)}adjacent(t){return this.a===t.b+1||this.b===t.a-1}properlyContains(t){return t.a>=this.a&&t.b<=this.b}union(t){return o.of(Math.min(this.a,t.a),Math.max(this.b,t.b))}intersection(t){return o.of(Math.max(this.a,t.a),Math.min(this.b,t.b))}differenceNotProperlyContained(t){let e;return t.startsBeforeNonDisjoint(this)?e=o.of(Math.max(this.a,t.b+1),this.b):t.startsAfterNonDisjoint(this)&&(e=o.of(this.a,t.a-1)),e}toString(){return this.a+".."+this.b}}o._INVALID=new o(-1,-2),o.cache=new Array(1001),n([i.Override],o.prototype,"equals",null),n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"toString",null),r.Interval=o},{252:252}],245:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(246),i=t(247),o=t(258);(r.CharStreams||(r.CharStreams={})).fromString=function(t,e){void 0!==e&&0!==e.length||(e=o.IntStream.UNKNOWN_SOURCE_NAME);let r=n.CodePointBuffer.builder(t.length),s=new Uint16Array(t.length);for(let n=0;n<t.length;n++)s[n]=t.charCodeAt(n);return r.append(s),i.CodePointCharStream.fromBuffer(r.build(),e)}},{246:246,247:247,258:258}],246:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(354);class i{constructor(t,e){this.buffer=t,this._position=0,this._size=e}static withArray(t){return new i(t,t.length)}get position(){return this._position}set position(t){if(t<0||t>this._size)throw new RangeError;this._position=t}get remaining(){return this._size-this.position}get(t){return this.buffer[t]}array(){return this.buffer.slice(0,this._size)}static builder(t){return new i.Builder(t)}}r.CodePointBuffer=i,function(t){let e;!function(t){t[t.BYTE=0]="BYTE",t[t.CHAR=1]="CHAR",t[t.INT=2]="INT"}(e||(e={}));class r{constructor(t){this.type=0,this.buffer=new Uint8Array(t),this.prevHighSurrogate=-1,this.position=0}build(){return new t(this.buffer,this.position)}static roundUpToNextPowerOfTwo(t){let e=32-Math.clz32(t-1);return Math.pow(2,e)}ensureRemaining(t){switch(this.type){case 0:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Uint8Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}break;case 1:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Uint16Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}break;case 2:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Int32Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}}}append(t){this.ensureRemaining(t.length),this.appendArray(t)}appendArray(t){switch(this.type){case 0:this.appendArrayByte(t);break;case 1:this.appendArrayChar(t);break;case 2:this.appendArrayInt(t)}}appendArrayByte(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let a=e[r];if(!(a<=255))return t=t.subarray(r,i),this.position=s,n.isHighSurrogate(a)?(this.byteToIntBuffer(t.length),void this.appendArrayInt(t)):(this.byteToCharBuffer(t.length),void this.appendArrayChar(t));o[s]=a,r++,s++}this.position=s}appendArrayChar(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let a=e[r];if(n.isHighSurrogate(a))return t=t.subarray(r,i),this.position=s,this.charToIntBuffer(t.length),void this.appendArrayInt(t);o[s]=a,r++,s++}this.position=s}appendArrayInt(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let t=e[r];r++,-1!==this.prevHighSurrogate?n.isLowSurrogate(t)?(o[s]=String.fromCharCode(this.prevHighSurrogate,t).codePointAt(0),s++,this.prevHighSurrogate=-1):(o[s]=this.prevHighSurrogate,s++,n.isHighSurrogate(t)?this.prevHighSurrogate=t:(o[s]=t,s++,this.prevHighSurrogate=-1)):n.isHighSurrogate(t)?this.prevHighSurrogate=t:(o[s]=t,s++)}-1!==this.prevHighSurrogate&&(o[s]=this.prevHighSurrogate,s++),this.position=s}byteToCharBuffer(t){let e=new Uint16Array(Math.max(this.position+t,this.buffer.length>>1));e.set(this.buffer.subarray(0,this.position),0),this.type=1,this.buffer=e}byteToIntBuffer(t){let e=new Int32Array(Math.max(this.position+t,this.buffer.length>>2));e.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=e}charToIntBuffer(t){let e=new Int32Array(Math.max(this.position+t,this.buffer.length>>1));e.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=e}}t.Builder=r}(i=r.CodePointBuffer||(r.CodePointBuffer={}))},{354:354}],247:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(258),o=t(358),s=t(252);class a{constructor(t,e,r,n){this._array=t,this._size=r,this._name=n,this._position=0}get internalStorage(){return this._array}static fromBuffer(t,e){return void 0!==e&&0!==e.length||(e=i.IntStream.UNKNOWN_SOURCE_NAME),new a(t.array(),t.position,t.remaining,e)}consume(){if(this._size-this._position==0)throw new RangeError("cannot consume EOF");this._position++}get index(){return this._position}get size(){return this._size}mark(){return-1}release(t){}seek(t){this._position=t}get sourceName(){return this._name}toString(){return this.getText(o.Interval.of(0,this.size-1))}LA(t){let e;switch(Math.sign(t)){case-1:return(e=this.index+t)<0?i.IntStream.EOF:this._array[e];case 0:return 0;case 1:return(e=this.index+t-1)>=this.size?i.IntStream.EOF:this._array[e]}throw new RangeError("Not reached")}getText(t){const e=Math.min(t.a,this.size),r=Math.min(t.b-t.a+1,this.size-e);return this._array instanceof Int32Array?String.fromCodePoint(...Array.from(this._array.subarray(e,e+r))):String.fromCharCode(...Array.from(this._array.subarray(e,e+r)))}}n([s.Override],a.prototype,"consume",null),n([s.Override],a.prototype,"index",null),n([s.Override],a.prototype,"size",null),n([s.Override],a.prototype,"mark",null),n([s.Override],a.prototype,"release",null),n([s.Override],a.prototype,"seek",null),n([s.Override],a.prototype,"sourceName",null),n([s.Override],a.prototype,"toString",null),n([s.Override],a.prototype,"LA",null),n([s.Override],a.prototype,"getText",null),r.CodePointCharStream=a},{252:252,258:258,358:358}],354:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.isHighSurrogate=function(t){return t>=55296&&t<=56319},r.isLowSurrogate=function(t){return t>=56320&&t<=57343}},{}],249:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(248),o=t(358),s=t(252);class a{constructor(t=!1){this.copyText=t}create(t,e,r,n,s,a,u,l){let c=new i.CommonToken(e,r,t,n,s,a);return c.line=u,c.charPositionInLine=l,null==r&&this.copyText&&null!=t.stream&&(c.text=t.stream.getText(o.Interval.of(s,a))),c}createSimple(t,e){return new i.CommonToken(t,e)}}n([s.Override],a.prototype,"create",null),n([s.Override],a.prototype,"createSimple",null),r.CommonTokenFactory=a,function(t){t.DEFAULT=new t}(a=r.CommonTokenFactory||(r.CommonTokenFactory={}))},{248:248,252:252,358:358}],250:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(244),s=t(252),a=t(276);let u=class extends o.BufferedTokenStream{constructor(t,e=a.Token.DEFAULT_CHANNEL){super(t),this.channel=e}adjustSeekIndex(t){return this.nextTokenOnChannel(t,this.channel)}tryLB(t){if(this.p-t<0)return;let e=this.p,r=1;for(;r<=t&&e>0;)e=this.previousTokenOnChannel(e-1,this.channel),r++;return e<0?void 0:this.tokens[e]}tryLT(t){if(this.lazyInit(),0===t)throw new RangeError("0 is not a valid lookahead index");if(t<0)return this.tryLB(-t);let e=this.p,r=1;for(;r<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),r++;return this.tokens[e]}getNumberOfOnChannelTokens(){let t=0;this.fill();for(let e of this.tokens)if(e.channel===this.channel&&t++,e.type===a.Token.EOF)break;return t}};n([s.Override],u.prototype,"adjustSeekIndex",null),n([s.Override],u.prototype,"tryLB",null),n([s.Override],u.prototype,"tryLT",null),u=n([i(0,s.NotNull)],u),r.CommonTokenStream=u},{244:244,252:252,276:276}],251:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){console.error(`line ${r}:${n} ${i}`)}}n.INSTANCE=new n,r.ConsoleErrorListener=n},{}],286:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.ATNStateType||(r.ATNStateType={}))[n.INVALID_TYPE=0]="INVALID_TYPE",n[n.BASIC=1]="BASIC",n[n.RULE_START=2]="RULE_START",n[n.BLOCK_START=3]="BLOCK_START",n[n.PLUS_BLOCK_START=4]="PLUS_BLOCK_START",n[n.STAR_BLOCK_START=5]="STAR_BLOCK_START",n[n.TOKEN_START=6]="TOKEN_START",n[n.RULE_STOP=7]="RULE_STOP",n[n.BLOCK_END=8]="BLOCK_END",n[n.STAR_LOOP_BACK=9]="STAR_LOOP_BACK",n[n.STAR_LOOP_ENTRY=10]="STAR_LOOP_ENTRY",n[n.PLUS_LOOP_BACK=11]="PLUS_LOOP_BACK",n[n.LOOP_END=12]="LOOP_END"},{}],285:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{constructor(){this.stateNumber=o.INVALID_STATE_NUMBER,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.optimizedTransitions=this.transitions}getStateNumber(){return this.stateNumber}get nonStopStateNumber(){return this.getStateNumber()}hashCode(){return this.stateNumber}equals(t){return t instanceof o&&this.stateNumber===t.stateNumber}get isNonGreedyExitState(){return!1}toString(){return String(this.stateNumber)}getTransitions(){return this.transitions.slice(0)}get numberOfTransitions(){return this.transitions.length}addTransition(t,e){if(0===this.transitions.length)this.epsilonOnlyTransitions=t.isEpsilon;else if(this.epsilonOnlyTransitions!==t.isEpsilon)throw this.epsilonOnlyTransitions=!1,new Error("ATN state "+this.stateNumber+" has both epsilon and non-epsilon transitions.");this.transitions.splice(void 0!==e?e:this.transitions.length,0,t)}transition(t){return this.transitions[t]}setTransition(t,e){this.transitions[t]=e}removeTransition(t){return this.transitions.splice(t,1)[0]}get onlyHasEpsilonTransitions(){return this.epsilonOnlyTransitions}setRuleIndex(t){this.ruleIndex=t}get isOptimized(){return this.optimizedTransitions!==this.transitions}get numberOfOptimizedTransitions(){return this.optimizedTransitions.length}getOptimizedTransition(t){return this.optimizedTransitions[t]}addOptimizedTransition(t){this.isOptimized||(this.optimizedTransitions=new Array),this.optimizedTransitions.push(t)}setOptimizedTransition(t,e){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions[t]=e}removeOptimizedTransition(t){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions.splice(t,1)}}n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"equals",null),n([i.Override],o.prototype,"toString",null),r.ATNState=o,function(t){t.INVALID_STATE_NUMBER=-1}(o=r.ATNState||(r.ATNState={}))},{252:252}],359:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(351),s=t(356),a=t(358),u=t(260),l=t(361),c=t(252),h=t(276);class p{constructor(t){this.readonly=!1,this._intervals=null!=t?t.slice(0):[]}static get COMPLETE_CHAR_SET(){return void 0===p._COMPLETE_CHAR_SET&&(p._COMPLETE_CHAR_SET=p.of(u.Lexer.MIN_CHAR_VALUE,u.Lexer.MAX_CHAR_VALUE),p._COMPLETE_CHAR_SET.setReadonly(!0)),p._COMPLETE_CHAR_SET}static get EMPTY_SET(){return null==p._EMPTY_SET&&(p._EMPTY_SET=new p,p._EMPTY_SET.setReadonly(!0)),p._EMPTY_SET}static of(t,e=t){let r=new p;return r.add(t,e),r}clear(){if(this.readonly)throw new Error("can't alter readonly IntervalSet");this._intervals.length=0}add(t,e=t){this.addRange(a.Interval.of(t,e))}addRange(t){if(this.readonly)throw new Error("can't alter readonly IntervalSet");if(!(t.b<t.a)){for(let e=0;e<this._intervals.length;e++){let r=this._intervals[e];if(t.equals(r))return;if(t.adjacent(r)||!t.disjoint(r)){let n=t.union(r);for(this._intervals[e]=n;e<this._intervals.length-1;){e++;let t=this._intervals[e];if(!n.adjacent(t)&&n.disjoint(t))break;this._intervals.splice(e,1),e--,this._intervals[e]=n.union(t)}return}if(t.startsBeforeDisjoint(r))return void this._intervals.splice(e,0,t)}this._intervals.push(t)}}static or(t){let e=new p;for(let r of t)e.addAll(r);return e}addAll(t){if(null==t)return this;if(t instanceof p){let e=t,r=e._intervals.length;for(let t=0;t<r;t++){let r=e._intervals[t];this.add(r.a,r.b)}}else for(let e of t.toArray())this.add(e);return this}complementRange(t,e){return this.complement(p.of(t,e))}complement(t){if(t.isNil)return p.EMPTY_SET;let e;return t instanceof p?e=t:(e=new p).addAll(t),e.subtract(this)}subtract(t){if(null==t||t.isNil)return new p(this._intervals);if(t instanceof p)return p.subtract(this,t);let e=new p;return e.addAll(t),p.subtract(this,e)}static subtract(t,e){if(t.isNil)return new p;let r=new p(t._intervals);if(e.isNil)return r;let n=0,i=0;for(;n<r._intervals.length&&i<e._intervals.length;){let t,o,s=r._intervals[n],u=e._intervals[i];if(u.b<s.a)i++;else if(u.a>s.b)n++;else if(u.a>s.a&&(t=new a.Interval(s.a,u.a-1)),u.b<s.b&&(o=new a.Interval(u.b+1,s.b)),t){if(o){r._intervals[n]=t,r._intervals.splice(n+1,0,o),n++,i++;continue}r._intervals[n]=t,n++}else o?(r._intervals[n]=o,i++):r._intervals.splice(n,1)}return r}or(t){let e=new p;return e.addAll(this),e.addAll(t),e}and(t){if(t.isNil)return new p;let e,r=this._intervals,n=t._intervals,i=r.length,o=n.length,s=0,a=0;for(;s<i&&a<o;){let t=r[s],i=n[a];t.startsBeforeDisjoint(i)?s++:i.startsBeforeDisjoint(t)?a++:t.properlyContains(i)?(e||(e=new p),e.addRange(t.intersection(i)),a++):i.properlyContains(t)?(e||(e=new p),e.addRange(t.intersection(i)),s++):t.disjoint(i)||(e||(e=new p),e.addRange(t.intersection(i)),t.startsAfterNonDisjoint(i)?a++:i.startsAfterNonDisjoint(t)&&s++)}return e||new p}contains(t){let e=0,r=this._intervals.length-1;for(;e<=r;){let n=e+r>>1,i=this._intervals[n],o=i.a;if(i.b<t)e=n+1;else{if(!(o>t))return!0;r=n-1}}return!1}get isNil(){return null==this._intervals||0===this._intervals.length}get maxElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[this._intervals.length-1].b}get minElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[0].a}get intervals(){return this._intervals}hashCode(){let t=l.MurmurHash.initialize();for(let e of this._intervals)t=l.MurmurHash.update(t,e.a),t=l.MurmurHash.update(t,e.b);return l.MurmurHash.finish(t,2*this._intervals.length)}equals(t){return null!=t&&t instanceof p&&o.ArrayEqualityComparator.INSTANCE.equals(this._intervals,t._intervals)}toString(t=!1){let e="";if(null==this._intervals||0===this._intervals.length)return"{}";this.size>1&&(e+="{");let r=!0;for(let n of this._intervals){r?r=!1:e+=", ";let i=n.a,o=n.b;i===o?i===h.Token.EOF?e+="<EOF>":e+=t?"'"+String.fromCodePoint(i)+"'":i:e+=t?"'"+String.fromCodePoint(i)+"'..'"+String.fromCodePoint(o)+"'":i+".."+o}return this.size>1&&(e+="}"),e}toStringVocabulary(t){if(null==this._intervals||0===this._intervals.length)return"{}";let e="";this.size>1&&(e+="{");let r=!0;for(let n of this._intervals){r?r=!1:e+=", ";let i=n.a,o=n.b;if(i===o)e+=this.elementName(t,i);else for(let r=i;r<=o;r++)r>i&&(e+=", "),e+=this.elementName(t,r)}return this.size>1&&(e+="}"),e}elementName(t,e){return e===h.Token.EOF?"<EOF>":e===h.Token.EPSILON?"<EPSILON>":t.getDisplayName(e)}get size(){let t=0,e=this._intervals.length;if(1===e){let t=this._intervals[0];return t.b-t.a+1}for(let r=0;r<e;r++){let e=this._intervals[r];t+=e.b-e.a+1}return t}toIntegerList(){let t=new s.IntegerList(this.size),e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;for(let r=n;r<=i;r++)t.add(r)}return t}toSet(){let t=new Set;for(let e of this._intervals){let r=e.a,n=e.b;for(let e=r;e<=n;e++)t.add(e)}return t}toArray(){let t=new Array,e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;for(let r=n;r<=i;r++)t.push(r)}return t}remove(t){if(this.readonly)throw new Error("can't alter readonly IntervalSet");let e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;if(t<n)break;if(t===n&&t===i){this._intervals.splice(r,1);break}if(t===n){this._intervals[r]=a.Interval.of(e.a+1,e.b);break}if(t===i){this._intervals[r]=a.Interval.of(e.a,e.b-1);break}if(t>n&&t<i){let n=e.b;this._intervals[r]=a.Interval.of(e.a,t-1),this.add(t+1,n)}}}get isReadonly(){return this.readonly}setReadonly(t){if(this.readonly&&!t)throw new Error("can't alter readonly IntervalSet");this.readonly=t}}n([c.Override],p.prototype,"addAll",null),n([c.Override],p.prototype,"complement",null),n([c.Override],p.prototype,"subtract",null),n([c.Override],p.prototype,"or",null),n([c.Override],p.prototype,"and",null),n([c.Override],p.prototype,"contains",null),n([c.Override],p.prototype,"isNil",null),n([c.Override],p.prototype,"hashCode",null),n([c.Override],p.prototype,"equals",null),n([i(0,c.NotNull)],p.prototype,"toStringVocabulary",null),n([c.NotNull,i(0,c.NotNull)],p.prototype,"elementName",null),n([c.Override],p.prototype,"size",null),n([c.Override],p.prototype,"remove",null),n([c.NotNull],p,"of",null),n([c.NotNull],p,"subtract",null),r.IntervalSet=p},{252:252,260:260,276:276,351:351,356:356,358:358,361:361}],326:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(350),a=t(352),u=t(361),l=t(252),c=t(327);class h{constructor(t){this.cachedHashCode=t}static calculateEmptyHashCode(){let t=u.MurmurHash.initialize(1);return u.MurmurHash.finish(t,0)}static calculateSingleHashCode(t,e){let r=u.MurmurHash.initialize(1);return r=u.MurmurHash.update(r,t),r=u.MurmurHash.update(r,e),u.MurmurHash.finish(r,2)}static calculateHashCode(t,e){let r=u.MurmurHash.initialize(1);for(let n of t)r=u.MurmurHash.update(r,n);for(let n of e)r=u.MurmurHash.update(r,n);return u.MurmurHash.finish(r,2*t.length)}static fromRuleContext(t,e,r=!0){if(e.isEmpty)return r?h.EMPTY_FULL:h.EMPTY_LOCAL;let n;n=e._parent?h.fromRuleContext(t,e._parent,r):r?h.EMPTY_FULL:h.EMPTY_LOCAL;let i=t.states[e.invokingState].transition(0);return n.getChild(i.followState.stateNumber)}static addEmptyContext(t){return t.addEmptyContext()}static removeEmptyContext(t){return t.removeEmptyContext()}static join(t,e,r=c.PredictionContextCache.UNCACHED){if(t===e)return t;if(t.isEmpty)return h.isEmptyLocal(t)?t:h.addEmptyContext(e);if(e.isEmpty)return h.isEmptyLocal(e)?e:h.addEmptyContext(t);let n=t.size,i=e.size;if(1===n&&1===i&&t.getReturnState(0)===e.getReturnState(0)){let n=r.join(t.getParent(0),e.getParent(0));return n===t.getParent(0)?t:n===e.getParent(0)?e:n.getChild(t.getReturnState(0))}let o=0,s=new Array(n+i),a=new Array(s.length),u=0,l=0,p=!0,y=!0;for(;u<n&&l<i;)t.getReturnState(u)===e.getReturnState(l)?(s[o]=r.join(t.getParent(u),e.getParent(l)),a[o]=t.getReturnState(u),p=p&&s[o]===t.getParent(u),y=y&&s[o]===e.getParent(l),u++,l++):t.getReturnState(u)<e.getReturnState(l)?(s[o]=t.getParent(u),a[o]=t.getReturnState(u),y=!1,u++):(s[o]=e.getParent(l),a[o]=e.getReturnState(l),p=!1,l++),o++;for(;u<n;)s[o]=t.getParent(u),a[o]=t.getReturnState(u),u++,y=!1,o++;for(;l<i;)s[o]=e.getParent(l),a[o]=e.getReturnState(l),l++,p=!1,o++;return p?t:y?e:(o<s.length&&(s=s.slice(0,o),a=a.slice(0,o)),0===s.length?h.EMPTY_FULL:1===s.length?new f(s[0],a[0]):new d(s,a))}static isEmptyLocal(t){return t===h.EMPTY_LOCAL}static getCachedContext(t,e,r){if(t.isEmpty)return t;let n=r.get(t);if(n)return n;if(n=e.get(t))return r.put(t,n),n;let i,o=!1,s=new Array(t.size);for(let a=0;a<s.length;a++){let n=h.getCachedContext(t.getParent(a),e,r);if(o||n!==t.getParent(a)){if(!o){s=new Array(t.size);for(let e=0;e<t.size;e++)s[e]=t.getParent(e);o=!0}s[a]=n}}if(!o)return n=e.putIfAbsent(t,t),r.put(t,null!=n?n:t),t;if(1===s.length)i=new f(s[0],t.getReturnState(0));else{let e=new Array(t.size);for(let r=0;r<t.size;r++)e[r]=t.getReturnState(r);i=new d(s,e,t.hashCode())}return n=e.putIfAbsent(i,i),r.put(i,n||i),r.put(t,n||i),i}appendSingleContext(t,e){return this.appendContext(h.EMPTY_FULL.getChild(t),e)}getChild(t){return new f(this,t)}hashCode(){return this.cachedHashCode}toStrings(t,e,r=h.EMPTY_FULL){let n=[];t:for(let i=0;;i++){let o=0,s=!0,a=this,u=e,l="";for(l+="[";!a.isEmpty&&a!==r;){let e=0;if(a.size>0){let t=1;for(;1<<t>>>0<a.size;)t++;if(e=i>>o&(1<<t>>>0)-1,s=s&&e>=a.size-1,e>=a.size)continue t;o+=t}if(t){l.length>1&&(l+=" ");let e=t.atn.states[u];l+=t.ruleNames[e.ruleIndex]}else a.getReturnState(e)!==h.EMPTY_FULL_STATE_KEY&&(a.isEmpty||(l.length>1&&(l+=" "),l+=a.getReturnState(e)));u=a.getReturnState(e),a=a.getParent(e)}if(l+="]",n.push(l),s)break}return n}}n([l.Override],h.prototype,"hashCode",null),n([i(0,l.NotNull),i(1,l.NotNull),i(2,l.NotNull)],h,"join",null),n([i(0,l.NotNull),i(1,l.NotNull),i(2,l.NotNull)],h,"getCachedContext",null),r.PredictionContext=h;class p extends h{constructor(t){super(h.calculateEmptyHashCode()),this.fullContext=t}get isFullContext(){return this.fullContext}addEmptyContext(){return this}removeEmptyContext(){throw new Error("Cannot remove the empty context from itself.")}getParent(t){throw new Error("index out of bounds")}getReturnState(t){throw new Error("index out of bounds")}findReturnState(t){return-1}get size(){return 0}appendSingleContext(t,e){return e.getChild(this,t)}appendContext(t,e){return t}get isEmpty(){return!0}get hasEmpty(){return!0}equals(t){return this===t}toStrings(t,e,r){return["[]"]}}n([l.Override],p.prototype,"addEmptyContext",null),n([l.Override],p.prototype,"removeEmptyContext",null),n([l.Override],p.prototype,"getParent",null),n([l.Override],p.prototype,"getReturnState",null),n([l.Override],p.prototype,"findReturnState",null),n([l.Override],p.prototype,"size",null),n([l.Override],p.prototype,"appendSingleContext",null),n([l.Override],p.prototype,"appendContext",null),n([l.Override],p.prototype,"isEmpty",null),n([l.Override],p.prototype,"hasEmpty",null),n([l.Override],p.prototype,"equals",null),n([l.Override],p.prototype,"toStrings",null);let d=class t extends h{constructor(t,e,r){super(r||h.calculateHashCode(t,e)),this.parents=t,this.returnStates=e}getParent(t){return this.parents[t]}getReturnState(t){return this.returnStates[t]}findReturnState(t){return a.Arrays.binarySearch(this.returnStates,t)}get size(){return this.returnStates.length}get isEmpty(){return!1}get hasEmpty(){return this.returnStates[this.returnStates.length-1]===h.EMPTY_FULL_STATE_KEY}addEmptyContext(){if(this.hasEmpty)return this;let e=this.parents.slice(0),r=this.returnStates.slice(0);return e.push(h.EMPTY_FULL),r.push(h.EMPTY_FULL_STATE_KEY),new t(e,r)}removeEmptyContext(){if(!this.hasEmpty)return this;if(2===this.returnStates.length)return new f(this.parents[0],this.returnStates[0]);{let e=this.parents.slice(0,this.parents.length-1),r=this.returnStates.slice(0,this.returnStates.length-1);return new t(e,r)}}appendContext(e,r){return t.appendContextImpl(this,e,new h.IdentityHashMap)}static appendContextImpl(e,r,n){if(r.isEmpty){if(h.isEmptyLocal(r)){if(e.hasEmpty)return h.EMPTY_LOCAL;throw new Error("what to do here?")}return e}if(1!==r.size)throw new Error("Appending a tree suffix is not yet supported.");let i=n.get(e);if(!i){if(e.isEmpty)i=r;else{let o=e.size;e.hasEmpty&&o--;let s=new Array(o),a=new Array(o);for(let t=0;t<o;t++)a[t]=e.getReturnState(t);for(let i=0;i<o;i++)s[i]=t.appendContextImpl(e.getParent(i),r,n);i=1===s.length?new f(s[0],a[0]):new t(s,a),e.hasEmpty&&(i=h.join(i,r))}n.put(e,i)}return i}equals(e){if(this===e)return!0;if(!(e instanceof t))return!1;if(this.hashCode()!==e.hashCode())return!1;let r=e;return this.equalsImpl(r,new s.Array2DHashSet)}equalsImpl(t,e){let r=[],n=[];for(r.push(this),n.push(t);;){let t=r.pop(),i=n.pop();if(!t||!i)break;let o=new c.PredictionContextCache.IdentityCommutativePredictionContextOperands(t,i);if(!e.add(o))continue;let s=o.x.size;if(0!==s){if(s!==o.y.size)return!1;for(let t=0;t<s;t++){if(o.x.getReturnState(t)!==o.y.getReturnState(t))return!1;let e=o.x.getParent(t),i=o.y.getParent(t);if(e.hashCode()!==i.hashCode())return!1;e!==i&&(r.push(e),n.push(i))}}else if(!o.x.equals(o.y))return!1}return!0}};n([l.NotNull],d.prototype,"parents",void 0),n([l.NotNull],d.prototype,"returnStates",void 0),n([l.Override],d.prototype,"getParent",null),n([l.Override],d.prototype,"getReturnState",null),n([l.Override],d.prototype,"findReturnState",null),n([l.Override],d.prototype,"size",null),n([l.Override],d.prototype,"isEmpty",null),n([l.Override],d.prototype,"hasEmpty",null),n([l.Override],d.prototype,"addEmptyContext",null),n([l.Override],d.prototype,"removeEmptyContext",null),n([l.Override],d.prototype,"appendContext",null),n([l.Override],d.prototype,"equals",null),d=n([i(0,l.NotNull)],d);let f=class t extends h{constructor(t,e){super(h.calculateSingleHashCode(t,e)),this.parent=t,this.returnState=e}getParent(t){return this.parent}getReturnState(t){return this.returnState}findReturnState(t){return this.returnState===t?0:-1}get size(){return 1}get isEmpty(){return!1}get hasEmpty(){return!1}appendContext(t,e){return e.getChild(this.parent.appendContext(t,e),this.returnState)}addEmptyContext(){let t=[this.parent,h.EMPTY_FULL],e=[this.returnState,h.EMPTY_FULL_STATE_KEY];return new d(t,e)}removeEmptyContext(){return this}equals(e){if(e===this)return!0;if(!(e instanceof t))return!1;let r=e;return this.hashCode()===r.hashCode()&&this.returnState===r.returnState&&this.parent.equals(r.parent)}};n([l.NotNull],f.prototype,"parent",void 0),n([l.Override],f.prototype,"getParent",null),n([l.Override],f.prototype,"getReturnState",null),n([l.Override],f.prototype,"findReturnState",null),n([l.Override],f.prototype,"size",null),n([l.Override],f.prototype,"isEmpty",null),n([l.Override],f.prototype,"hasEmpty",null),n([l.Override],f.prototype,"appendContext",null),n([l.Override],f.prototype,"addEmptyContext",null),n([l.Override],f.prototype,"removeEmptyContext",null),n([l.Override],f.prototype,"equals",null),f=n([i(0,l.NotNull)],f),function(t){t.EMPTY_LOCAL=new p(!1),t.EMPTY_FULL=new p(!0),t.EMPTY_LOCAL_STATE_KEY=-2147483648,t.EMPTY_FULL_STATE_KEY=2147483647,t.IdentityHashMap=class extends o.Array2DHashMap{constructor(){super(e.INSTANCE)}};class e{IdentityEqualityComparator(){}hashCode(t){return t.hashCode()}equals(t,e){return t===e}}e.INSTANCE=new e,n([l.Override],e.prototype,"hashCode",null),n([l.Override],e.prototype,"equals",null),t.IdentityEqualityComparator=e}(h=r.PredictionContext||(r.PredictionContext={}))},{252:252,327:327,349:349,350:350,352:352,361:361}],254:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.Dependents||(r.Dependents={}))[n.SELF=0]="SELF",n[n.PARENTS=1]="PARENTS",n[n.CHILDREN=2]="CHILDREN",n[n.ANCESTORS=3]="ANCESTORS",n[n.DESCENDANTS=4]="DESCENDANTS",n[n.SIBLINGS=5]="SIBLINGS",n[n.PRECEEDING_SIBLINGS=6]="PRECEEDING_SIBLINGS",n[n.FOLLOWING_SIBLINGS=7]="FOLLOWING_SIBLINGS",n[n.PRECEEDING=8]="PRECEEDING",n[n.FOLLOWING=9]="FOLLOWING"},{}],255:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(353),s=t(252),a=t(358);class u{constructor(t=!0){this.exactOnly=t,this.exactOnly=t}syntaxError(t,e,r,n,i,o){}reportAmbiguity(t,e,r,n,i,o,s){if(this.exactOnly&&!i)return;let u=`reportAmbiguity d=${this.getDecisionDescription(t,e)}: ambigAlts=${this.getConflictingAlts(o,s)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(u)}reportAttemptingFullContext(t,e,r,n,i,o){let s=`reportAttemptingFullContext d=${this.getDecisionDescription(t,e)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(s)}reportContextSensitivity(t,e,r,n,i,o){let s=`reportContextSensitivity d=${this.getDecisionDescription(t,e)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(s)}getDecisionDescription(t,e){let r=e.decision,n=e.atnStartState.ruleIndex,i=t.ruleNames;if(n<0||n>=i.length)return r.toString();let o=i[n];return o?`${r} (${o})`:r.toString()}getConflictingAlts(t,e){if(null!=t)return t;let r=new o.BitSet;for(let n of e)r.set(n.alt);return r}}n([s.Override],u.prototype,"syntaxError",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(6,s.NotNull)],u.prototype,"reportAmbiguity",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(5,s.NotNull)],u.prototype,"reportAttemptingFullContext",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(5,s.NotNull)],u.prototype,"reportContextSensitivity",null),n([i(0,s.NotNull),i(1,s.NotNull)],u.prototype,"getDecisionDescription",null),n([s.NotNull,i(1,s.NotNull)],u.prototype,"getConflictingAlts",null),r.DiagnosticErrorListener=u},{252:252,353:353,358:358}],353:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(451),i=t(361),o=new Uint16Array(0);function s(t){return t>>>4}function a(t){return 16*t}function u(t){let e=1;for(let r=0;r<16;r++){if(0!=(t&e))return r;e=e<<1>>>0}throw new RangeError("No specified bit found")}function l(t){let e=32768;for(let r=15;r>=0;r--){if(0!=(t&e))return r;e>>>=1}throw new RangeError("No specified bit found")}function c(t,e){return(t&=15)==(e&=15)?1<<t>>>0:65535>>>15-e^65535>>>16-t}const h=new Uint8Array(65536);for(let f=0;f<16;f++){const t=1<<f>>>0;let e=0;for(;e<h.length;){e+=t;for(let r=0;r<t;r++)h[e]++,e++}}class p{constructor(t){if(t)if("number"==typeof t){if(t<0)throw new RangeError("nbits cannot be negative");this.data=new Uint16Array(s(t-1)+1)}else if(t instanceof p)this.data=t.data.slice(0);else{let e=-1;for(let r of t)e<r&&(e=r);this.data=new Uint16Array(s(e-1)+1);for(let r of t)this.set(r)}else this.data=o}and(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length);let i=-1;for(let o=0;o<n;o++)0!=(e[o]&=r[o])&&(i=o);-1===i&&(this.data=o),i<e.length-1&&(this.data=e.slice(0,i+1))}andNot(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length);let i=-1;for(let o=0;o<n;o++)0!=(e[o]&=65535^r[o])&&(i=o);-1===i&&(this.data=o),i<e.length-1&&(this.data=e.slice(0,i+1))}cardinality(){if(this.isEmpty)return 0;const t=this.data,e=t.length;let r=0;for(let n=0;n<e;n++)r+=h[t[n]];return r}clear(t,e){null==t?this.data.fill(0):null==e?this.set(t,!1):this.set(t,e,!1)}flip(t,e){if(null==e&&(e=t),t<0||e<t)throw new RangeError;let r=s(t);const n=s(e);if(r===n)this.data[r]^=c(t,e);else{for(this.data[r++]^=c(t,15);r<n;)this.data[r++]^=65535;this.data[r++]^=c(0,e)}}get(t,e){if(void 0===e)return!!(this.data[s(t)]&c(t,t));{let r=new p(e+1);for(let n=t;n<=e;n++)r.set(n,this.get(n));return r}}intersects(t){let e=Math.min(this.length(),t.length());if(0===e)return!1;let r=s(e-1);for(let n=0;n<=r;n++)if(0!=(this.data[n]&t.data[n]))return!0;return!1}get isEmpty(){return 0===this.length()}length(){return this.data.length?this.previousSetBit(a(this.data.length)-1)+1:0}nextClearBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);if(n>r)return-1;let i=65535^c(t,15);if(65535==(e[n]|i)){for(n++,i=0;n<r&&65535===e[n];n++);if(n===r)return-1}return a(n)+u(65535^(e[n]|i))}nextSetBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);if(n>r)return-1;let i=c(t,15);if(0==(e[n]&i)){for(n++,i=65535;n<r&&0===e[n];n++);if(n>=r)return-1}return a(n)+u(e[n]&i)}or(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length),i=Math.max(e.length,r.length),s=e.length===i?e:new Uint16Array(i);let a=-1;for(let o=0;o<n;o++)0!=(s[o]=e[o]|r[o])&&(a=o);const u=e.length>r.length?e:r;for(let o=n;o<i;o++)0!==(s[o]=u[o])&&(a=o);-1===a?this.data=o:s.length===a+1?this.data=s:this.data=s.slice(0,a)}previousClearBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);n>=r&&(n=r-1);let i=65535^c(0,t);if(65535==(e[n]|i)){for(i=0,n--;n>=0&&65535===e[n];n--);if(n<0)return-1}return a(n)+l(65535^(e[n]|i))}previousSetBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);n>=r&&(n=r-1);let i=c(0,t);if(0==(e[n]&i)){for(n--,i=65535;n>=0&&0===e[n];n--);if(n<0)return-1}return a(n)+l(e[n]&i)}set(t,e,r){if(void 0===e?(e=t,r=!0):"boolean"==typeof e&&(r=e,e=t),void 0===r&&(r=!0),t<0||t>e)throw new RangeError;let n=s(t),i=s(e);if(r&&i>=this.data.length){let t=new Uint16Array(i+1);this.data.forEach((e,r)=>t[r]=e),this.data=t}else if(!r){if(n>=this.data.length)return;i>=this.data.length&&(i=this.data.length-1,e=16*this.data.length-1)}if(n===i)this._setBits(n,r,c(t,e));else{for(this._setBits(n++,r,c(t,15));n<i;)this.data[n++]=r?65535:0;this._setBits(n,r,c(0,e))}}_setBits(t,e,r){e?this.data[t]|=r:this.data[t]&=65535^r}get size(){return 8*this.data.byteLength}hashCode(){return i.MurmurHash.hashCode(this.data,22)}equals(t){if(t===this)return!0;if(!(t instanceof p))return!1;const e=this.length();if(e!==t.length())return!1;if(0===e)return!0;let r=s(e-1);for(let n=0;n<=r;n++)if(this.data[n]!==t.data[n])return!1;return!0}toString(){let t="{",e=!0;for(let r=this.nextSetBit(0);r>=0;r=this.nextSetBit(r+1))e?e=!1:t+=", ",t+=r;return t+"}"}xor(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length),i=Math.max(e.length,r.length),s=e.length===i?e:new Uint16Array(i);let a=-1;for(let o=0;o<n;o++)0!=(s[o]=e[o]^r[o])&&(a=o);const u=e.length>r.length?e:r;for(let o=n;o<i;o++)0!==(s[o]=u[o])&&(a=o);-1===a?this.data=o:s.length===a+1?this.data=s:this.data=s.slice(0,a+1)}clone(){return new p(this)}[Symbol.iterator](){return new d(this.data)}[n.inspect.custom](){return"BitSet "+this.toString()}}r.BitSet=p;class d{constructor(t){this.data=t,this.index=0,this.mask=65535}next(){for(;this.index<this.data.length;){const t=this.data[this.index]&this.mask;if(0!==t){const e=a(this.index)+u(t);return this.mask=c(e+1,15),{done:!1,value:e}}this.index++,this.mask=65535}return{done:!0,value:-1}}[Symbol.iterator](){return this}}},{361:361,451:451}],325:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(252),a=t(334);let u=class extends o.AbstractPredicateTransition{constructor(t,e,r,n){super(t),this.ruleIndex=e,this.predIndex=r,this.isCtxDependent=n}get serializationType(){return 4}get isEpsilon(){return!0}matches(t,e,r){return!1}get predicate(){return new a.SemanticContext.Predicate(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return"pred_"+this.ruleIndex+":"+this.predIndex}};n([s.Override],u.prototype,"serializationType",null),n([s.Override],u.prototype,"isEpsilon",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.PredicateTransition=u},{252:252,287:287,334:334}],259:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(267);class s extends o.ParserRuleContext{constructor(t,e,r){void 0!==r?super(e,r):super(),this._ruleIndex=t}get ruleIndex(){return this._ruleIndex}}n([i.Override],s.prototype,"ruleIndex",null),r.InterpreterRuleContext=s},{252:252,267:267}],262:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270),s=t(252),a=t(358),u=t(365);let l=class extends o.RecognitionException{constructor(t,e,r,n){super(t,e),this._startIndex=r,this._deadEndConfigs=n}get startIndex(){return this._startIndex}get deadEndConfigs(){return this._deadEndConfigs}get inputStream(){return super.inputStream}toString(){let t="";return this._startIndex>=0&&this._startIndex<this.inputStream.size&&(t=this.inputStream.getText(a.Interval.of(this._startIndex,this._startIndex)),t=u.escapeWhitespace(t,!1)),`LexerNoViableAltException('${t}')`}};n([s.Override],l.prototype,"inputStream",null),n([s.Override],l.prototype,"toString",null),l=n([i(1,s.NotNull)],l),r.LexerNoViableAltException=l},{252:252,270:270,358:358,365:365}],271:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(251),s=t(268),a=t(252),u=t(276),l=t(365);class c{constructor(){this._listeners=[o.ConsoleErrorListener.INSTANCE],this._stateNumber=-1}getTokenTypeMap(){let t=this.vocabulary,e=c.tokenTypeMapCache.get(t);if(null==e){let r=new Map;for(let e=0;e<=this.atn.maxTokenType;e++){let n=t.getLiteralName(e);null!=n&&r.set(n,e);let i=t.getSymbolicName(e);null!=i&&r.set(i,e)}r.set("EOF",u.Token.EOF),e=r,c.tokenTypeMapCache.set(t,e)}return e}getRuleIndexMap(){let t=this.ruleNames;if(null==t)throw new Error("The current recognizer does not provide a list of rule names.");let e=c.ruleIndexMapCache.get(t);return null==e&&(e=l.toMap(t),c.ruleIndexMapCache.set(t,e)),e}getTokenType(t){let e=this.getTokenTypeMap().get(t);return null!=e?e:u.Token.INVALID_TYPE}get serializedATN(){throw new Error("there is no serialized ATN")}get atn(){return this._interp.atn}get interpreter(){return this._interp}set interpreter(t){this._interp=t}get parseInfo(){return Promise.resolve(void 0)}getErrorHeader(t){let e=t.getOffendingToken();return e?"line "+e.line+":"+e.charPositionInLine:""}addErrorListener(t){if(!t)throw new TypeError("listener must not be null");this._listeners.push(t)}removeErrorListener(t){let e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}removeErrorListeners(){this._listeners.length=0}getErrorListeners(){return this._listeners.slice(0)}getErrorListenerDispatch(){return new s.ProxyErrorListener(this.getErrorListeners())}sempred(t,e,r){return!0}precpred(t,e){return!0}action(t,e,r){}get state(){return this._stateNumber}set state(t){this._stateNumber=t}}c.EOF=-1,c.tokenTypeMapCache=new WeakMap,c.ruleIndexMapCache=new WeakMap,n([a.SuppressWarnings("serial"),a.NotNull],c.prototype,"_listeners",void 0),n([a.NotNull],c.prototype,"getTokenTypeMap",null),n([a.NotNull],c.prototype,"getRuleIndexMap",null),n([a.NotNull],c.prototype,"serializedATN",null),n([a.NotNull],c.prototype,"atn",null),n([a.NotNull,i(0,a.NotNull)],c.prototype,"interpreter",null),n([a.NotNull,i(0,a.NotNull)],c.prototype,"getErrorHeader",null),n([i(0,a.NotNull)],c.prototype,"addErrorListener",null),n([i(0,a.NotNull)],c.prototype,"removeErrorListener",null),n([a.NotNull],c.prototype,"getErrorListeners",null),r.Recognizer=c},{251:251,252:252,268:268,276:276,365:365}],357:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(356);r.IntegerStack=class extends n.IntegerList{constructor(t){super(t)}push(t){this.add(t)}pop(){return this.removeAt(this.size-1)}peek(){return this.get(this.size-1)}}},{356:356}],261:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(260),s=t(304),a=t(252),u=t(252);let l=class extends o.Lexer{constructor(t,e,r,n,i,o,a){if(super(a),0!==o.grammarType)throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");this._grammarFileName=t,this._atn=o,this._ruleNames=r.slice(0),this._channelNames=n.slice(0),this._modeNames=i.slice(0),this._vocabulary=e,this._interp=new s.LexerATNSimulator(o,this)}get atn(){return this._atn}get grammarFileName(){return this._grammarFileName}get ruleNames(){return this._ruleNames}get channelNames(){return this._channelNames}get modeNames(){return this._modeNames}get vocabulary(){return this._vocabulary}};n([a.NotNull],l.prototype,"_vocabulary",void 0),n([u.Override],l.prototype,"atn",null),n([u.Override],l.prototype,"grammarFileName",null),n([u.Override],l.prototype,"ruleNames",null),n([u.Override],l.prototype,"channelNames",null),n([u.Override],l.prototype,"modeNames",null),n([u.Override],l.prototype,"vocabulary",null),l=n([i(1,a.NotNull)],l),r.LexerInterpreter=l},{252:252,260:260,304:304}],263:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(249),s=t(252),a=t(276);let u=class{constructor(t,e){if(this.i=0,this._factory=o.CommonTokenFactory.DEFAULT,null==t)throw new Error("tokens cannot be null");this.tokens=t,this._sourceName=e}get charPositionInLine(){if(this.i<this.tokens.length)return this.tokens[this.i].charPositionInLine;if(null!=this.eofToken)return this.eofToken.charPositionInLine;if(this.tokens.length>0){let t=this.tokens[this.tokens.length-1],e=t.text;if(null!=e){let t=e.lastIndexOf("\n");if(t>=0)return e.length-t-1}return t.charPositionInLine+t.stopIndex-t.startIndex+1}return 0}nextToken(){if(this.i>=this.tokens.length){if(null==this.eofToken){let t=-1;if(this.tokens.length>0){let e=this.tokens[this.tokens.length-1].stopIndex;-1!==e&&(t=e+1)}let e=Math.max(-1,t-1);this.eofToken=this._factory.create({source:this,stream:this.inputStream},a.Token.EOF,"EOF",a.Token.DEFAULT_CHANNEL,t,e,this.line,this.charPositionInLine)}return this.eofToken}let t=this.tokens[this.i];return this.i===this.tokens.length-1&&t.type===a.Token.EOF&&(this.eofToken=t),this.i++,t}get line(){if(this.i<this.tokens.length)return this.tokens[this.i].line;if(null!=this.eofToken)return this.eofToken.line;if(this.tokens.length>0){let t=this.tokens[this.tokens.length-1],e=t.line,r=t.text;if(null!=r)for(let n=0;n<r.length;n++)"\n"===r.charAt(n)&&e++;return e}return 1}get inputStream(){return this.i<this.tokens.length?this.tokens[this.i].inputStream:null!=this.eofToken?this.eofToken.inputStream:this.tokens.length>0?this.tokens[this.tokens.length-1].inputStream:void 0}get sourceName(){if(this._sourceName)return this._sourceName;let t=this.inputStream;return null!=t?t.sourceName:"List"}set tokenFactory(t){this._factory=t}get tokenFactory(){return this._factory}};n([s.Override],u.prototype,"charPositionInLine",null),n([s.Override],u.prototype,"nextToken",null),n([s.Override],u.prototype,"line",null),n([s.Override],u.prototype,"inputStream",null),n([s.Override],u.prototype,"sourceName",null),n([s.Override,s.NotNull,i(0,s.NotNull)],u.prototype,"tokenFactory",null),u=n([i(0,s.NotNull)],u),r.ListTokenSource=u},{249:249,252:252,276:276}],269:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(268),o=t(252);class s extends i.ProxyErrorListener{constructor(t){super(t)}reportAmbiguity(t,e,r,n,i,o,s){this.getDelegates().forEach(a=>{a.reportAmbiguity&&a.reportAmbiguity(t,e,r,n,i,o,s)})}reportAttemptingFullContext(t,e,r,n,i,o){this.getDelegates().forEach(s=>{s.reportAttemptingFullContext&&s.reportAttemptingFullContext(t,e,r,n,i,o)})}reportContextSensitivity(t,e,r,n,i,o){this.getDelegates().forEach(s=>{s.reportContextSensitivity&&s.reportContextSensitivity(t,e,r,n,i,o)})}}n([o.Override],s.prototype,"reportAmbiguity",null),n([o.Override],s.prototype,"reportAttemptingFullContext",null),n([o.Override],s.prototype,"reportContextSensitivity",null),r.ProxyParserErrorListener=s},{252:252,268:268}],428:[function(t,e,r){var n,i,o=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(t){i=a}}();var l,c=[],h=!1,p=-1;function d(){h&&l&&(h=!1,l.length?c=l.concat(c):p=-1,c.length&&f())}function f(){if(!h){var t=u(d);h=!0;for(var e=c.length;e;){for(l=c,c=[];++p<e;)l&&l[p].run();p=-1,e=c.length}l=null,h=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||h||u(f)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],282:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.readOnly=!1,t?(this.verifyATN=t.verifyATN,this.generateRuleBypassTransitions=t.generateRuleBypassTransitions,this.optimize=t.optimize):(this.verifyATN=!0,this.generateRuleBypassTransitions=!1,this.optimize=!0)}static get defaultOptions(){return null==i._defaultOptions&&(i._defaultOptions=new i,i._defaultOptions.makeReadOnly()),i._defaultOptions}get isReadOnly(){return this.readOnly}makeReadOnly(){this.readOnly=!0}get isVerifyATN(){return this.verifyATN}set isVerifyATN(t){this.throwIfReadOnly(),this.verifyATN=t}get isGenerateRuleBypassTransitions(){return this.generateRuleBypassTransitions}set isGenerateRuleBypassTransitions(t){this.throwIfReadOnly(),this.generateRuleBypassTransitions=t}get isOptimize(){return this.optimize}set isOptimize(t){this.throwIfReadOnly(),this.optimize=t}throwIfReadOnly(){if(this.isReadOnly)throw new Error("The object is read only.")}}n([t(252).NotNull],i,"defaultOptions",null),r.ATNDeserializationOptions=i},{252:252}],319:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t){this.atnSimulator=t}getDecisionInfo(){return this.atnSimulator.getDecisionInfo()}getLLDecisions(){let t=this.atnSimulator.getDecisionInfo(),e=[];for(let r=0;r<t.length;r++)t[r].LL_Fallback>0&&e.push(r);return e}getTotalTimeInPrediction(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.timeInPrediction;return e}getTotalSLLLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_TotalLook;return e}getTotalLLLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.LL_TotalLook;return e}getTotalSLLATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_ATNTransitions;return e}getTotalLLATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.LL_ATNTransitions;return e}getTotalATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_ATNTransitions,e+=r.LL_ATNTransitions;return e}getDFASize(t){if(t)return this.atnSimulator.atn.decisionToDFA[t].states.size;{let t=0,e=this.atnSimulator.atn.decisionToDFA;for(let r=0;r<e.length;r++)t+=this.getDFASize(r);return t}}};n([o.NotNull],s.prototype,"getDecisionInfo",null),n([o.NotNull],s.prototype,"getLLDecisions",null),s=n([i(0,o.NotNull)],s),r.ParseInfo=s},{252:252}],367:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(371);class s extends o.TerminalNode{constructor(t){super(t)}accept(t){return t.visitErrorNode(this)}}n([i.Override],s.prototype,"accept",null),r.ErrorNode=s},{252:252,371:371}],371:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(358),o=t(252),s=t(276);class a{constructor(t){this._symbol=t}getChild(t){throw new RangeError("Terminal Node has no children.")}get symbol(){return this._symbol}get parent(){return this._parent}setParent(t){this._parent=t}get payload(){return this._symbol}get sourceInterval(){let t=this._symbol.tokenIndex;return new i.Interval(t,t)}get childCount(){return 0}accept(t){return t.visitTerminal(this)}get text(){return this._symbol.text||""}toStringTree(t){return this.toString()}toString(){return this._symbol.type===s.Token.EOF?"<EOF>":this._symbol.text||""}}n([o.Override],a.prototype,"getChild",null),n([o.Override],a.prototype,"parent",null),n([o.Override],a.prototype,"setParent",null),n([o.Override],a.prototype,"payload",null),n([o.Override],a.prototype,"sourceInterval",null),n([o.Override],a.prototype,"childCount",null),n([o.Override],a.prototype,"accept",null),n([o.Override],a.prototype,"text",null),n([o.Override],a.prototype,"toStringTree",null),n([o.Override],a.prototype,"toString",null),r.TerminalNode=a},{252:252,276:276,358:358}],329:[function(t,e,r){(function(e){(function(){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(289),s=t(279),a=t(284),u=t(296),l=t(298),c=t(301),h=t(252),p=t(315),d=t(320),f=t(324),y=t(334),m=t(336);class g extends d.ParserATNSimulator{constructor(t){super(t.interpreter.atn,t),this._startIndex=0,this._sllStopIndex=0,this._llStopIndex=0,this.currentDecision=0,this.conflictingAltResolvedBySLL=0,this.optimize_ll1=!1,this.reportAmbiguities=!0,this.numDecisions=this.atn.decisionToState.length,this.decisions=[];for(let e=0;e<this.numDecisions;e++)this.decisions.push(new l.DecisionInfo(e))}adaptivePredict(t,r,n,i){if(void 0!==i)return super.adaptivePredict(t,r,n,i);try{this._input=t,this._startIndex=t.index,this._sllStopIndex=this._startIndex-1,this._llStopIndex=-1,this.currentDecision=r,this.currentState=void 0,this.conflictingAltResolvedBySLL=s.ATN.INVALID_ALT_NUMBER;let i=e.hrtime(),o=super.adaptivePredict(t,r,n),a=e.hrtime(),u=1e9*(a[0]-i[0]);0===u?u=a[1]-i[1]:u+=1e9-i[1]+a[1],this.decisions[r].timeInPrediction+=u,this.decisions[r].invocations++;let l=this._sllStopIndex-this._startIndex+1;if(this.decisions[r].SLL_TotalLook+=l,this.decisions[r].SLL_MinLook=0===this.decisions[r].SLL_MinLook?l:Math.min(this.decisions[r].SLL_MinLook,l),l>this.decisions[r].SLL_MaxLook&&(this.decisions[r].SLL_MaxLook=l,this.decisions[r].SLL_MaxLookEvent=new p.LookaheadEventInfo(r,void 0,o,t,this._startIndex,this._sllStopIndex,!1)),this._llStopIndex>=0){let e=this._llStopIndex-this._startIndex+1;this.decisions[r].LL_TotalLook+=e,this.decisions[r].LL_MinLook=0===this.decisions[r].LL_MinLook?e:Math.min(this.decisions[r].LL_MinLook,e),e>this.decisions[r].LL_MaxLook&&(this.decisions[r].LL_MaxLook=e,this.decisions[r].LL_MaxLookEvent=new p.LookaheadEventInfo(r,void 0,o,t,this._startIndex,this._llStopIndex,!0))}return o}finally{this._input=void 0,this.currentDecision=-1}}getStartState(t,e,r,n){let i=super.getStartState(t,e,r,n);return this.currentState=i,i}computeStartState(t,e,r){let n=super.computeStartState(t,e,r);return this.currentState=n,n}computeReachSet(t,e,r,n){if(void 0===this._input)throw new Error("Invalid state");let i=super.computeReachSet(t,e,r,n);return null==i&&this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,e,this._input,this._startIndex,this._input.index)),this.currentState=i,i}getExistingTargetState(t,e){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");this.currentState.useContext?this._llStopIndex=this._input.index:this._sllStopIndex=this._input.index;let r=super.getExistingTargetState(t,e);if(null!=r&&(this.currentState=new m.SimulatorState(this.currentState.outerContext,r,this.currentState.useContext,this.currentState.remainingOuterContext),this.currentState.useContext?this.decisions[this.currentDecision].LL_DFATransitions++:this.decisions[this.currentDecision].SLL_DFATransitions++,r===a.ATNSimulator.ERROR)){let e=new m.SimulatorState(this.currentState.outerContext,t,this.currentState.useContext,this.currentState.remainingOuterContext);this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,e,this._input,this._startIndex,this._input.index))}return r}computeTargetState(t,e,r,n,i,o){let s=super.computeTargetState(t,e,r,n,i,o);return i?this.decisions[this.currentDecision].LL_ATNTransitions++:this.decisions[this.currentDecision].SLL_ATNTransitions++,s}evalSemanticContextImpl(t,e,r){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let n=super.evalSemanticContextImpl(t,e,r);if(!(t instanceof y.SemanticContext.PrecedencePredicate)){let e=this._llStopIndex>=0?this._llStopIndex:this._sllStopIndex;this.decisions[this.currentDecision].predicateEvals.push(new f.PredicateEvalInfo(this.currentState,this.currentDecision,this._input,this._startIndex,e,t,n,r))}return n}reportContextSensitivity(t,e,r,n,i){if(void 0===this._input)throw new Error("Invalid state");e!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new u.ContextSensitivityInfo(this.currentDecision,r,this._input,n,i)),super.reportContextSensitivity(t,e,r,n,i)}reportAttemptingFullContext(t,e,r,n,i){this.conflictingAltResolvedBySLL=null!=e?e.nextSetBit(0):r.s0.configs.getRepresentedAlternatives().nextSetBit(0),this.decisions[this.currentDecision].LL_Fallback++,super.reportAttemptingFullContext(t,e,r,n,i)}reportAmbiguity(t,e,r,n,i,a,l){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let c;c=null!=a?a.nextSetBit(0):l.getRepresentedAlternatives().nextSetBit(0),this.conflictingAltResolvedBySLL!==s.ATN.INVALID_ALT_NUMBER&&c!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new u.ContextSensitivityInfo(this.currentDecision,this.currentState,this._input,r,n)),this.decisions[this.currentDecision].ambiguities.push(new o.AmbiguityInfo(this.currentDecision,this.currentState,a,this._input,r,n)),super.reportAmbiguity(t,e,r,n,i,a,l)}getDecisionInfo(){return this.decisions}getCurrentState(){return this.currentState}}n([h.Override,i(0,h.NotNull)],g.prototype,"adaptivePredict",null),n([h.Override],g.prototype,"getStartState",null),n([h.Override],g.prototype,"computeStartState",null),n([h.Override],g.prototype,"computeReachSet",null),n([h.Override],g.prototype,"getExistingTargetState",null),n([h.Override],g.prototype,"computeTargetState",null),n([h.Override],g.prototype,"evalSemanticContextImpl",null),n([h.Override],g.prototype,"reportContextSensitivity",null),n([h.Override],g.prototype,"reportAttemptingFullContext",null),n([h.Override,i(0,h.NotNull),i(5,h.NotNull),i(6,h.NotNull)],g.prototype,"reportAmbiguity",null),r.ProfilingATNSimulator=g}).call(this)}).call(this,t(428))},{252:252,279:279,284:284,289:289,296:296,298:298,301:301,315:315,320:320,324:324,334:334,336:336,428:428}],377:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(243),s=t(245),a=t(250),u=t(263),l=t(360),c=t(252),h=t(363),p=t(266),d=t(267),f=t(375),y=t(376),m=t(270),g=t(370),v=t(378),T=t(379),_=t(371),E=t(380),b=t(276),S=t(381);class x{constructor(t,e){this.start="<",this.stop=">",this.escape="\\",this.escapeRE=/\\/g,this._lexer=t,this._parser=e}setDelimiters(t,e,r){if(!t)throw new Error("start cannot be null or empty");if(!e)throw new Error("stop cannot be null or empty");this.start=t,this.stop=e,this.escape=r,this.escapeRE=new RegExp(r.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g")}matches(t,e,r=0){if("string"==typeof e){let n=this.compile(e,r);return this.matches(t,n)}{let r=new l.MultiMap;return!this.matchImpl(t,e.patternTree,r)}}match(t,e,r=0){if("string"==typeof e){let n=this.compile(e,r);return this.match(t,n)}{let r=new l.MultiMap,n=this.matchImpl(t,e.patternTree,r);return new f.ParseTreeMatch(t,e,r,n)}}compile(t,e){let r=this.tokenize(t),n=new u.ListTokenSource(r),i=new a.CommonTokenStream(n);const s=this._parser;let l,c=new p.ParserInterpreter(s.grammarFileName,s.vocabulary,s.ruleNames,s.getATNWithBypassAlts(),i);try{c.errorHandler=new o.BailErrorStrategy,l=c.parse(e)}catch(d){throw d instanceof h.ParseCancellationException?d.getCause():d instanceof m.RecognitionException?d:d instanceof Error?new x.CannotInvokeStartRule(d):d}if(i.LA(1)!==b.Token.EOF)throw new x.StartRuleDoesNotConsumeFullPattern;return new y.ParseTreePattern(this,t,e,l)}get lexer(){return this._lexer}get parser(){return this._parser}matchImpl(t,e,r){if(!t)throw new TypeError("tree cannot be null");if(!e)throw new TypeError("patternTree cannot be null");if(t instanceof _.TerminalNode&&e instanceof _.TerminalNode){let n;if(t.symbol.type===e.symbol.type)if(e.symbol instanceof S.TokenTagToken){let n=e.symbol;r.map(n.tokenName,t);const i=n.label;i&&r.map(i,t)}else t.text===e.text||n||(n=t);else n||(n=t);return n}if(t instanceof d.ParserRuleContext&&e instanceof d.ParserRuleContext){let n,i=this.getRuleTagToken(e);if(i){if(t.ruleContext.ruleIndex===e.ruleContext.ruleIndex){r.map(i.ruleName,t);const e=i.label;e&&r.map(e,t)}else n||(n=t);return n}if(t.childCount!==e.childCount)return n||(n=t),n;let o=t.childCount;for(let s=0;s<o;s++){let n=this.matchImpl(t.getChild(s),e.getChild(s),r);if(n)return n}return n}return t}getRuleTagToken(t){if(t instanceof g.RuleNode&&1===t.childCount&&t.getChild(0)instanceof _.TerminalNode){let e=t.getChild(0);if(e.symbol instanceof v.RuleTagToken)return e.symbol}}tokenize(t){let e=this.split(t),r=[];for(let n of e)if(n instanceof T.TagChunk){let e=n;const i=e.tag.substr(0,1);if(i===i.toUpperCase()){let n=this._parser.getTokenType(e.tag);if(n===b.Token.INVALID_TYPE)throw new Error("Unknown token "+e.tag+" in pattern: "+t);let i=new S.TokenTagToken(e.tag,n,e.label);r.push(i)}else{if(i!==i.toLowerCase())throw new Error("invalid tag: "+e.tag+" in pattern: "+t);{let n=this._parser.getRuleIndex(e.tag);if(-1===n)throw new Error("Unknown rule "+e.tag+" in pattern: "+t);let i=this._parser.getATNWithBypassAlts().ruleToTokenType[n];r.push(new v.RuleTagToken(e.tag,i,e.label))}}}else{let t=n;this._lexer.inputStream=s.CharStreams.fromString(t.text);let e=this._lexer.nextToken();for(;e.type!==b.Token.EOF;)r.push(e),e=this._lexer.nextToken()}return r}split(t){let e=0,r=t.length,n=[],i=[],o=[];for(;e<r;)e===t.indexOf(this.escape+this.start,e)?e+=this.escape.length+this.start.length:e===t.indexOf(this.escape+this.stop,e)?e+=this.escape.length+this.stop.length:e===t.indexOf(this.start,e)?(i.push(e),e+=this.start.length):e===t.indexOf(this.stop,e)?(o.push(e),e+=this.stop.length):e++;if(i.length>o.length)throw new Error("unterminated tag in pattern: "+t);if(i.length<o.length)throw new Error("missing start tag in pattern: "+t);let s=i.length;for(let a=0;a<s;a++)if(i[a]>=o[a])throw new Error("tag delimiters out of order in pattern: "+t);if(0===s){let e=t.substring(0,r);n.push(new E.TextChunk(e))}if(s>0&&i[0]>0){let e=t.substring(0,i[0]);n.push(new E.TextChunk(e))}for(let a=0;a<s;a++){let e,r=t.substring(i[a]+this.start.length,o[a]),u=r,l=r.indexOf(":");if(l>=0&&(e=r.substring(0,l),u=r.substring(l+1,r.length)),n.push(new T.TagChunk(u,e)),a+1<s){let e=t.substring(o[a]+this.stop.length,i[a+1]);n.push(new E.TextChunk(e))}}if(s>0){let e=o[s-1]+this.stop.length;if(e<r){let i=t.substring(e,r);n.push(new E.TextChunk(i))}}for(let a=0;a<n.length;a++){let t=n[a];if(t instanceof E.TextChunk){let e=t.text.replace(this.escapeRE,"");e.length<t.text.length&&(n[a]=new E.TextChunk(e))}}return n}}n([c.NotNull,i(1,c.NotNull)],x.prototype,"match",null),n([c.NotNull],x.prototype,"lexer",null),n([c.NotNull],x.prototype,"parser",null),n([i(0,c.NotNull),i(1,c.NotNull),i(2,c.NotNull)],x.prototype,"matchImpl",null),r.ParseTreePatternMatcher=x,function(t){t.CannotInvokeStartRule=class extends Error{constructor(t){super("CannotInvokeStartRule: "+t),this.error=t}},t.StartRuleDoesNotConsumeFullPattern=class extends Error{constructor(){super("StartRuleDoesNotConsumeFullPattern")}}}(x=r.ParseTreePatternMatcher||(r.ParseTreePatternMatcher={}))},{243:243,245:245,250:250,252:252,263:263,266:266,267:267,270:270,276:276,360:360,363:363,370:370,371:371,375:375,376:376,378:378,379:379,380:380,381:381}],266:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(285),s=t(286),a=t(353),u=t(256),l=t(257),c=t(259),h=t(316),p=t(252),d=t(252),f=t(265),y=t(320),m=t(270),g=t(338),v=t(276);let T=class t extends f.Parser{constructor(e,r,n,i,o){if(super(e instanceof t?e.inputStream:o),this._parentContextStack=[],this.overrideDecision=-1,this.overrideDecisionInputIndex=-1,this.overrideDecisionAlt=-1,this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0,e instanceof t){let t=e;this._grammarFileName=t._grammarFileName,this._atn=t._atn,this.pushRecursionContextStates=t.pushRecursionContextStates,this._ruleNames=t._ruleNames,this._vocabulary=t._vocabulary,this.interpreter=new y.ParserATNSimulator(this._atn,this)}else{r=r,n=n,i=i,this._grammarFileName=e,this._atn=i,this._ruleNames=n.slice(0),this._vocabulary=r,this.pushRecursionContextStates=new a.BitSet(i.states.length);for(let t of i.states)t instanceof g.StarLoopEntryState&&t.precedenceRuleDecision&&this.pushRecursionContextStates.set(t.stateNumber);this.interpreter=new y.ParserATNSimulator(i,this)}}reset(t){void 0===t?super.reset():super.reset(t),this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0}get atn(){return this._atn}get vocabulary(){return this._vocabulary}get ruleNames(){return this._ruleNames}get grammarFileName(){return this._grammarFileName}parse(t){let e=this._atn.ruleToStartState[t];for(this._rootContext=this.createInterpreterRuleContext(void 0,o.ATNState.INVALID_STATE_NUMBER,t),e.isPrecedenceRule?this.enterRecursionRule(this._rootContext,e.stateNumber,t,0):this.enterRule(this._rootContext,e.stateNumber,t);;){let t=this.atnState;switch(t.stateType){case s.ATNStateType.RULE_STOP:if(this._ctx.isEmpty){if(e.isPrecedenceRule){let t=this._ctx,e=this._parentContextStack.pop();return this.unrollRecursionContexts(e[0]),t}return this.exitRule(),this._rootContext}this.visitRuleStopState(t);break;default:try{this.visitState(t)}catch(r){if(!(r instanceof m.RecognitionException))throw r;this.state=this._atn.ruleToStopState[t.ruleIndex].stateNumber,this.context.exception=r,this.errorHandler.reportError(this,r),this.recover(r)}}}}enterRecursionRule(t,e,r,n){this._parentContextStack.push([this._ctx,t.invokingState]),super.enterRecursionRule(t,e,r,n)}get atnState(){return this._atn.states[this.state]}visitState(t){let e=1;t.numberOfTransitions>1&&(e=this.visitDecisionState(t));let r=t.transition(e-1);switch(r.serializationType){case 1:if(this.pushRecursionContextStates.get(t.stateNumber)&&!(r.target instanceof h.LoopEndState)){let e=this._parentContextStack[this._parentContextStack.length-1],r=this.createInterpreterRuleContext(e[0],e[1],this._ctx.ruleIndex);this.pushNewRecursionContext(r,this._atn.ruleToStartState[t.ruleIndex].stateNumber,this._ctx.ruleIndex)}break;case 5:this.match(r._label);break;case 2:case 7:case 8:r.matches(this._input.LA(1),v.Token.MIN_USER_TOKEN_TYPE,65535)||this.recoverInline(),this.matchWildcard();break;case 9:this.matchWildcard();break;case 3:let e=r.target,n=e.ruleIndex,i=this.createInterpreterRuleContext(this._ctx,t.stateNumber,n);e.isPrecedenceRule?this.enterRecursionRule(i,e.stateNumber,n,r.precedence):this.enterRule(i,r.target.stateNumber,n);break;case 4:let o=r;if(!this.sempred(this._ctx,o.ruleIndex,o.predIndex))throw new u.FailedPredicateException(this);break;case 6:let s=r;this.action(this._ctx,s.ruleIndex,s.actionIndex);break;case 10:if(!this.precpred(this._ctx,r.precedence)){let t=r.precedence;throw new u.FailedPredicateException(this,`precpred(_ctx, ${t})`)}break;default:throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.")}this.state=r.target.stateNumber}visitDecisionState(t){let e;this.errorHandler.sync(this);let r=t.decision;return r!==this.overrideDecision||this._input.index!==this.overrideDecisionInputIndex||this.overrideDecisionReached?e=this.interpreter.adaptivePredict(this._input,r,this._ctx):(e=this.overrideDecisionAlt,this.overrideDecisionReached=!0),e}createInterpreterRuleContext(t,e,r){return new c.InterpreterRuleContext(r,t,e)}visitRuleStopState(t){if(this._atn.ruleToStartState[t.ruleIndex].isPrecedenceRule){let t=this._parentContextStack.pop();this.unrollRecursionContexts(t[0]),this.state=t[1]}else this.exitRule();let e=this._atn.states[this.state].transition(0);this.state=e.followState.stateNumber}addDecisionOverride(t,e,r){this.overrideDecision=t,this.overrideDecisionInputIndex=e,this.overrideDecisionAlt=r}get overrideDecisionRoot(){return this._overrideDecisionRoot}recover(t){let e=this._input.index;if(this.errorHandler.recover(this,t),this._input.index===e){let e=t.getOffendingToken();if(!e)throw new Error("Expected exception to have an offending token");let r=e.tokenSource,n={source:r,stream:void 0!==r?r.inputStream:void 0};if(t instanceof l.InputMismatchException){let r=t.expectedTokens;if(void 0===r)throw new Error("Expected the exception to provide expected tokens");let i=v.Token.INVALID_TYPE;r.isNil||(i=r.minElement);let o=this.tokenFactory.create(n,i,e.text,v.Token.DEFAULT_CHANNEL,-1,-1,e.line,e.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,o))}else{e.tokenSource;let t=this.tokenFactory.create(n,v.Token.INVALID_TYPE,e.text,v.Token.DEFAULT_CHANNEL,-1,-1,e.line,e.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,t))}}}recoverInline(){return this._errHandler.recoverInline(this)}get rootContext(){return this._rootContext}};n([p.NotNull],T.prototype,"_vocabulary",void 0),n([d.Override],T.prototype,"reset",null),n([d.Override],T.prototype,"atn",null),n([d.Override],T.prototype,"vocabulary",null),n([d.Override],T.prototype,"ruleNames",null),n([d.Override],T.prototype,"grammarFileName",null),n([d.Override],T.prototype,"enterRecursionRule",null),T=n([i(1,p.NotNull)],T),r.ParserInterpreter=T},{252:252,256:256,257:257,259:259,265:265,270:270,276:276,285:285,286:286,316:316,320:320,338:338,353:353}],316:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.LOOP_END}}n([t(252).Override],s.prototype,"stateType",null),r.LoopEndState=s},{252:252,285:285,286:286}],338:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(353),s=t(299);class a extends s.DecisionState{constructor(){super(...arguments),this.precedenceRuleDecision=!1,this.precedenceLoopbackStates=new o.BitSet}get stateType(){return i.ATNStateType.STAR_LOOP_ENTRY}}n([t(252).Override],a.prototype,"stateType",null),r.StarLoopEntryState=a},{252:252,286:286,299:299,353:353}],272:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(271),s=t(370),a=t(358),u=t(252),l=t(372),c=t(267);class h extends s.RuleNode{constructor(t,e){super(),this._parent=t,this.invokingState=null!=e?e:-1}static getChildContext(t,e){return new h(t,e)}depth(){let t=0,e=this;for(;e;)e=e._parent,t++;return t}get isEmpty(){return-1===this.invokingState}get sourceInterval(){return a.Interval.INVALID}get ruleContext(){return this}get parent(){return this._parent}setParent(t){this._parent=t}get payload(){return this}get text(){if(0===this.childCount)return"";let t="";for(let e=0;e<this.childCount;e++)t+=this.getChild(e).text;return t.toString()}get ruleIndex(){return-1}get altNumber(){return i.ATN.INVALID_ALT_NUMBER}set altNumber(t){}getChild(t){throw new RangeError("i must be greater than or equal to 0 and less than childCount")}get childCount(){return 0}accept(t){return t.visitChildren(this)}toStringTree(t){return l.Trees.toStringTree(this,t)}toString(t,e){const r=t instanceof o.Recognizer?t.ruleNames:t;e=e||c.ParserRuleContext.emptyContext();let n="",i=this;for(n+="[";i&&i!==e;){if(r){let t=i.ruleIndex;n+=t>=0&&t<r.length?r[t]:t.toString()}else i.isEmpty||(n+=i.invokingState);!i._parent||!r&&i._parent.isEmpty||(n+=" "),i=i._parent}return(n+="]").toString()}}n([u.Override],h.prototype,"sourceInterval",null),n([u.Override],h.prototype,"ruleContext",null),n([u.Override],h.prototype,"parent",null),n([u.Override],h.prototype,"setParent",null),n([u.Override],h.prototype,"payload",null),n([u.Override],h.prototype,"text",null),n([u.Override],h.prototype,"getChild",null),n([u.Override],h.prototype,"childCount",null),n([u.Override],h.prototype,"accept",null),n([u.Override],h.prototype,"toStringTree",null),r.RuleContext=h},{252:252,267:267,271:271,279:279,358:358,370:370,372:372}],268:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);class s{constructor(t){if(this.delegates=t,!t)throw new Error("Invalid delegates")}getDelegates(){return this.delegates}syntaxError(t,e,r,n,i,o){this.delegates.forEach(s=>{s.syntaxError&&s.syntaxError(t,e,r,n,i,o)})}}n([o.Override,i(0,o.NotNull),i(4,o.NotNull)],s.prototype,"syntaxError",null),r.ProxyErrorListener=s},{252:252}],370:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleNode=class{}},{}],372:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(279),s=t(248),a=t(367),u=t(252),l=t(265),c=t(267),h=t(370),p=t(371),d=t(276),f=t(365);class y{static toStringTree(t,e){let r;r=e instanceof l.Parser?e.ruleNames:e;let n=f.escapeWhitespace(this.getNodeText(t,r),!1);if(0===t.childCount)return n;let i="";i+="(",i+=n=f.escapeWhitespace(this.getNodeText(t,r),!1),i+=" ";for(let o=0;o<t.childCount;o++)o>0&&(i+=" "),i+=this.toStringTree(t.getChild(o),r);return i+")"}static getNodeText(t,e){let r;if(e instanceof l.Parser)r=e.ruleNames;else{if(!e){let e=t.payload;return"string"==typeof e.text?e.text:t.payload.toString()}r=e}if(t instanceof h.RuleNode){let e=t.ruleContext,n=r[e.ruleIndex],i=e.altNumber;return i!==o.ATN.INVALID_ALT_NUMBER?n+":"+i:n}if(t instanceof a.ErrorNode)return t.toString();if(t instanceof p.TerminalNode)return t.symbol.text||"";throw new TypeError("Unexpected node type")}static getChildren(t){let e=[];for(let r=0;r<t.childCount;r++)e.push(t.getChild(r));return e}static getAncestors(t){let e=[],r=t.parent;for(;r;)e.unshift(r),r=r.parent;return e}static isAncestorOf(t,e){if(!t||!e||!t.parent)return!1;let r=e.parent;for(;r;){if(t===r)return!0;r=r.parent}return!1}static findAllTokenNodes(t,e){return y.findAllNodes(t,e,!0)}static findAllRuleNodes(t,e){return y.findAllNodes(t,e,!1)}static findAllNodes(t,e,r){let n=[];return y._findAllNodes(t,e,r,n),n}static _findAllNodes(t,e,r,n){r&&t instanceof p.TerminalNode?t.symbol.type===e&&n.push(t):!r&&t instanceof c.ParserRuleContext&&t.ruleIndex===e&&n.push(t);for(let i=0;i<t.childCount;i++)y._findAllNodes(t.getChild(i),e,r,n)}static getDescendants(t){let e=[];return function t(r){e.push(r);const n=r.childCount;for(let e=0;e<n;e++)t(r.getChild(e))}(t),e}static getRootOfSubtreeEnclosingRegion(t,e,r){let n=t.childCount;for(let i=0;i<n;i++){let n=t.getChild(i),o=y.getRootOfSubtreeEnclosingRegion(n,e,r);if(o)return o}if(t instanceof c.ParserRuleContext){let n=t.stop;if(e>=t.start.tokenIndex&&(null==n||r<=n.tokenIndex))return t}}static stripChildrenOutOfRange(t,e,r,n){if(!t)return;let i=t.childCount;for(let o=0;o<i;o++){let i=t.getChild(o),a=i.sourceInterval;if(i instanceof c.ParserRuleContext&&(a.b<r||a.a>n)&&y.isAncestorOf(i,e)){let e=new s.CommonToken(d.Token.INVALID_TYPE,"...");t.children[o]=new p.TerminalNode(e)}}}static findNodeSuchThat(t,e){if(e(t))return t;let r=t.childCount;for(let n=0;n<r;n++){let r=y.findNodeSuchThat(t.getChild(n),e);if(void 0!==r)return r}}}n([i(0,u.NotNull)],y,"toStringTree",null),n([u.NotNull,i(0,u.NotNull)],y,"getAncestors",null),n([i(0,u.NotNull)],y,"getRootOfSubtreeEnclosingRegion",null),r.Trees=y},{248:248,252:252,265:265,267:267,276:276,279:279,365:365,367:367,370:370,371:371}],273:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(252),s=t(267);class a extends s.ParserRuleContext{constructor(t,e){void 0!==e?super(t,e):super(),this._altNumber=i.ATN.INVALID_ALT_NUMBER}get altNumber(){return this._altNumber}set altNumber(t){this._altNumber=t}}n([o.Override],a.prototype,"altNumber",null),r.RuleContextWithAltNum=a},{252:252,267:267,279:279}],274:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleDependency=function(t){return(t,e,r)=>{}}},{}],275:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleVersion=function(t){return(t,e,r)=>{}}},{}],277:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(358),o=t(252),s=t(276);class a{constructor(t){this.tokens=t,this.programs=new Map,this.programs.set(a.DEFAULT_PROGRAM_NAME,[]),this.lastRewriteTokenIndexes=new Map}getTokenStream(){return this.tokens}rollback(t,e=a.DEFAULT_PROGRAM_NAME){let r=this.programs.get(e);null!=r&&this.programs.set(e,r.slice(a.MIN_TOKEN_INDEX,t))}deleteProgram(t=a.DEFAULT_PROGRAM_NAME){this.rollback(a.MIN_TOKEN_INDEX,t)}insertAfter(t,e,r=a.DEFAULT_PROGRAM_NAME){let n;n="number"==typeof t?t:t.tokenIndex;let i=new c(this.tokens,n,e),o=this.getProgram(r);i.instructionIndex=o.length,o.push(i)}insertBefore(t,e,r=a.DEFAULT_PROGRAM_NAME){let n;n="number"==typeof t?t:t.tokenIndex;let i=new l(this.tokens,n,e),o=this.getProgram(r);i.instructionIndex=o.length,o.push(i)}replaceSingle(t,e){this.replace(t,t,e)}replace(t,e,r,n=a.DEFAULT_PROGRAM_NAME){if("number"!=typeof t&&(t=t.tokenIndex),"number"!=typeof e&&(e=e.tokenIndex),t>e||t<0||e<0||e>=this.tokens.size)throw new RangeError(`replace: range invalid: ${t}..${e}(size=${this.tokens.size})`);let i=new h(this.tokens,t,e,r),o=this.getProgram(n);i.instructionIndex=o.length,o.push(i)}delete(t,e,r=a.DEFAULT_PROGRAM_NAME){void 0===e&&(e=t),this.replace(t,e,"",r)}getLastRewriteTokenIndex(t=a.DEFAULT_PROGRAM_NAME){let e=this.lastRewriteTokenIndexes.get(t);return null==e?-1:e}setLastRewriteTokenIndex(t,e){this.lastRewriteTokenIndexes.set(t,e)}getProgram(t){let e=this.programs.get(t);return null==e&&(e=this.initializeProgram(t)),e}initializeProgram(t){let e=[];return this.programs.set(t,e),e}getText(t,e=a.DEFAULT_PROGRAM_NAME){let r;r=t instanceof i.Interval?t:i.Interval.of(0,this.tokens.size-1),"string"==typeof t&&(e=t);let n=this.programs.get(e),o=r.a,u=r.b;if(u>this.tokens.size-1&&(u=this.tokens.size-1),o<0&&(o=0),null==n||0===n.length)return this.tokens.getText(r);let l=[],c=this.reduceToSingleOperationPerIndex(n),h=o;for(;h<=u&&h<this.tokens.size;){let t=c.get(h);c.delete(h);let e=this.tokens.get(h);null==t?(e.type!==s.Token.EOF&&l.push(String(e.text)),h++):h=t.execute(l)}if(u===this.tokens.size-1)for(let i of c.values())i.index>=this.tokens.size-1&&l.push(i.text.toString());return l.join("")}reduceToSingleOperationPerIndex(t){for(let r=0;r<t.length;r++){let e=t[r];if(null==e)continue;if(!(e instanceof h))continue;let n=e,i=this.getKindOfOps(t,l,r);for(let r of i)r.index===n.index?(t[r.instructionIndex]=void 0,n.text=r.text.toString()+(null!=n.text?n.text.toString():"")):r.index>n.index&&r.index<=n.lastIndex&&(t[r.instructionIndex]=void 0);let o=this.getKindOfOps(t,h,r);for(let r of o){if(r.index>=n.index&&r.lastIndex<=n.lastIndex){t[r.instructionIndex]=void 0;continue}let e=r.lastIndex<n.index||r.index>n.lastIndex;if(null!=r.text||null!=n.text||e){if(!e)throw new Error(`replace op boundaries of ${n} overlap with previous ${r}`)}else t[r.instructionIndex]=void 0,n.index=Math.min(r.index,n.index),n.lastIndex=Math.max(r.lastIndex,n.lastIndex)}}for(let r=0;r<t.length;r++){let e=t[r];if(null==e)continue;if(!(e instanceof l))continue;let n=e,i=this.getKindOfOps(t,l,r);for(let r of i)r.index===n.index&&(r instanceof c?(n.text=this.catOpText(r.text,n.text),t[r.instructionIndex]=void 0):r instanceof l&&(n.text=this.catOpText(n.text,r.text),t[r.instructionIndex]=void 0));let o=this.getKindOfOps(t,h,r);for(let s of o)if(n.index!==s.index){if(n.index>=s.index&&n.index<=s.lastIndex)throw new Error(`insert op ${n} within boundaries of previous ${s}`)}else s.text=this.catOpText(n.text,s.text),t[r]=void 0}let e=new Map;for(let r of t)if(null!=r){if(null!=e.get(r.index))throw new Error("should only be one op per index");e.set(r.index,r)}return e}catOpText(t,e){let r="",n="";return null!=t&&(r=t.toString()),null!=e&&(n=e.toString()),r+n}getKindOfOps(t,e,r){let n=[];for(let i=0;i<r&&i<t.length;i++){let r=t[i];null!=r&&r instanceof e&&n.push(r)}return n}}a.DEFAULT_PROGRAM_NAME="default",a.PROGRAM_INIT_SIZE=100,a.MIN_TOKEN_INDEX=0,r.TokenStreamRewriter=a;class u{constructor(t,e,r){this.tokens=t,this.index=e,this.text=void 0===r?"":r}execute(t){return this.index}toString(){let t=this.constructor.name,e=t.indexOf("$");return"<"+(t=t.substring(e+1,t.length))+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}n([o.Override],u.prototype,"toString",null),r.RewriteOperation=u;class l extends u{constructor(t,e,r){super(t,e,r)}execute(t){return t.push(this.text.toString()),this.tokens.get(this.index).type!==s.Token.EOF&&t.push(String(this.tokens.get(this.index).text)),this.index+1}}n([o.Override],l.prototype,"execute",null);class c extends l{constructor(t,e,r){super(t,e+1,r)}}class h extends u{constructor(t,e,r,n){super(t,e,n),this.lastIndex=r}execute(t){return null!=this.text&&t.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}n([o.Override],h.prototype,"execute",null),n([o.Override],h.prototype,"toString",null)},{252:252,276:276,358:358}],349:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(350);class i{constructor(t){this.keyComparator=t}hashCode(t){return this.keyComparator.hashCode(t.key)}equals(t,e){return this.keyComparator.equals(t.key,e.key)}}class o{constructor(t){this.backingStore=t instanceof o?new n.Array2DHashSet(t.backingStore):new n.Array2DHashSet(new i(t))}clear(){this.backingStore.clear()}containsKey(t){return this.backingStore.contains({key:t})}get(t){let e=this.backingStore.get({key:t});if(e)return e.value}get isEmpty(){return this.backingStore.isEmpty}put(t,e){let r,n=this.backingStore.get({key:t,value:e});return n?(r=n.value,n.value=e):this.backingStore.add({key:t,value:e}),r}putIfAbsent(t,e){let r,n=this.backingStore.get({key:t,value:e});return n?r=n.value:this.backingStore.add({key:t,value:e}),r}get size(){return this.backingStore.size}hashCode(){return this.backingStore.hashCode()}equals(t){return t instanceof o&&this.backingStore.equals(t.backingStore)}}r.Array2DHashMap=o},{350:350}],344:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(350),s=t(281),a=t(345),u=t(346),l=t(347),c=t(252),h=t(362),p=t(338),d=t(278);let f=class{constructor(t,e=0){if(this.states=new o.Array2DHashSet(h.ObjectEqualityComparator.INSTANCE),this.nextStateNumber=0,!t.atn)throw new Error("The ATNState must be associated with an ATN");this.atnStartState=t,this.atn=t.atn,this.decision=e;let r=!1;t instanceof p.StarLoopEntryState&&t.precedenceRuleDecision&&(r=!0,this.s0=new u.DFAState(new s.ATNConfigSet),this.s0full=new u.DFAState(new s.ATNConfigSet)),this.precedenceDfa=r}get isPrecedenceDfa(){return this.precedenceDfa}getPrecedenceStartState(t,e){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");return e?this.s0full.getTarget(t):this.s0.getTarget(t)}setPrecedenceStartState(t,e,r){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");t<0||(e?this.s0full.setTarget(t,r):this.s0.setTarget(t,r))}get isEmpty(){return this.isPrecedenceDfa?0===this.s0.getEdgeMap().size&&0===this.s0full.getEdgeMap().size:null==this.s0&&null==this.s0full}get isContextSensitive(){return this.isPrecedenceDfa?this.s0full.getEdgeMap().size>0:null!=this.s0full}addState(t){return t.stateNumber=this.nextStateNumber++,this.states.getOrAdd(t)}toString(t,e){if(t||(t=d.VocabularyImpl.EMPTY_VOCABULARY),!this.s0)return"";let r;return(r=e?new a.DFASerializer(this,t,e,this.atnStartState.atn):new a.DFASerializer(this,t)).toString()}toLexerString(){return this.s0?new l.LexerDFASerializer(this).toString():""}};n([c.NotNull],f.prototype,"states",void 0),n([c.NotNull],f.prototype,"atnStartState",void 0),n([c.NotNull],f.prototype,"atn",void 0),f=n([i(0,c.NotNull)],f),r.DFA=f},{252:252,278:278,281:281,338:338,345:345,346:346,347:347,350:350,362:362}],302:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(292);class s extends o.BasicState{get stateType(){return i.ATNStateType.INVALID_TYPE}}n([t(252).Override],s.prototype,"stateType",null),r.InvalidState=s},{252:252,286:286,292:292}],362:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{hashCode(t){return null==t?0:t.hashCode()}equals(t,e){return null==t?null==e:t.equals(e)}}o.INSTANCE=new o,n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"equals",null),r.ObjectEqualityComparator=o},{252:252}],303:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(350),a=t(280),u=t(353),l=t(359),c=t(252),h=t(317),p=t(362),d=t(326),f=t(332),y=t(333),m=t(276),g=t(342);let v=class t{constructor(t){this.atn=t}getDecisionLookahead(e){if(null==e)return;let r=new Array(e.numberOfTransitions);for(let n=0;n<e.numberOfTransitions;n++){let i=new l.IntervalSet;r[n]=i;let o=new s.Array2DHashSet(p.ObjectEqualityComparator.INSTANCE),a=!1;this._LOOK(e.transition(n).target,void 0,d.PredictionContext.EMPTY_LOCAL,i,o,new u.BitSet,a,!1),(0===i.size||i.contains(t.HIT_PRED))&&(i=void 0,r[n]=i)}return r}LOOK(t,e,r){if(void 0===r){if(null==t.atn)throw new Error("Illegal state");r=t.atn.ruleToStopState[t.ruleIndex]}else null===r&&(r=void 0);let n=new l.IntervalSet;return this._LOOK(t,r,e,n,new s.Array2DHashSet,new u.BitSet,!0,!0),n}_LOOK(e,r,n,i,s,u,c,p){let v=a.ATNConfig.create(e,0,n);if(!s.add(v))return;if(e===r){if(d.PredictionContext.isEmptyLocal(n))return void i.add(m.Token.EPSILON);if(n.isEmpty)return void(p&&i.add(m.Token.EOF))}if(e instanceof f.RuleStopState){if(n.isEmpty&&!d.PredictionContext.isEmptyLocal(n))return void(p&&i.add(m.Token.EOF));let t=u.get(e.ruleIndex);try{u.clear(e.ruleIndex);for(let t=0;t<n.size;t++){if(n.getReturnState(t)===d.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let e=this.atn.states[n.getReturnState(t)];this._LOOK(e,r,n.getParent(t),i,s,u,c,p)}}finally{t&&u.set(e.ruleIndex)}}let T=e.numberOfTransitions;for(let a=0;a<T;a++){let d=e.transition(a);if(d instanceof y.RuleTransition){if(u.get(d.ruleIndex))continue;let t=n.getChild(d.followState.stateNumber);try{u.set(d.ruleIndex),this._LOOK(d.target,r,t,i,s,u,c,p)}finally{u.clear(d.ruleIndex)}}else if(d instanceof o.AbstractPredicateTransition)c?this._LOOK(d.target,r,n,i,s,u,c,p):i.add(t.HIT_PRED);else if(d.isEpsilon)this._LOOK(d.target,r,n,i,s,u,c,p);else if(d instanceof g.WildcardTransition)i.addAll(l.IntervalSet.of(m.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType));else{let t=d.label;null!=t&&(d instanceof h.NotSetTransition&&(t=t.complement(l.IntervalSet.of(m.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType))),i.addAll(t))}}}};v.HIT_PRED=m.Token.INVALID_TYPE,n([c.NotNull],v.prototype,"atn",void 0),n([c.NotNull,i(0,c.NotNull),i(1,c.NotNull)],v.prototype,"LOOK",null),n([i(0,c.NotNull),i(2,c.NotNull),i(3,c.NotNull),i(4,c.NotNull),i(5,c.NotNull)],v.prototype,"_LOOK",null),v=n([i(0,c.NotNull)],v),r.LL1Analyzer=v},{252:252,276:276,280:280,287:287,317:317,326:326,332:332,333:333,342:342,350:350,353:353,359:359,362:362}],280:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(299),a=t(361),u=t(252),l=t(362),c=t(326),h=t(334);let p=class t{constructor(t,e,r){"number"==typeof e?(this._state=t,this.altAndOuterContextDepth=e,this._context=r):(this._state=t,this.altAndOuterContextDepth=e.altAndOuterContextDepth,this._context=r)}static create(e,r,n,i=h.SemanticContext.NONE,o){return i!==h.SemanticContext.NONE?null!=o?new y(o,i,e,r,n,!1):new d(i,e,r,n):null!=o?new f(o,e,r,n,!1):new t(e,r,n)}get state(){return this._state}get alt(){return 16777215&this.altAndOuterContextDepth}get context(){return this._context}set context(t){this._context=t}get reachesIntoOuterContext(){return 0!==this.outerContextDepth}get outerContextDepth(){return this.altAndOuterContextDepth>>>24&127}set outerContextDepth(t){t=Math.min(t,127),this.altAndOuterContextDepth=t<<24|(-2130706433&this.altAndOuterContextDepth)>>>0}get lexerActionExecutor(){}get semanticContext(){return h.SemanticContext.NONE}get hasPassedThroughNonGreedyDecision(){return!1}clone(){return this.transform(this.state,!1)}transform(t,e,r){return null==r?this.transformImpl(t,this._context,this.semanticContext,e,this.lexerActionExecutor):r instanceof c.PredictionContext?this.transformImpl(t,r,this.semanticContext,e,this.lexerActionExecutor):r instanceof h.SemanticContext?this.transformImpl(t,this._context,r,e,this.lexerActionExecutor):this.transformImpl(t,this._context,this.semanticContext,e,r)}transformImpl(e,r,n,i,o){let s=i&&t.checkNonGreedyDecision(this,e);return n!==h.SemanticContext.NONE?null!=o||s?new y(o,n,e,this,r,s):new d(n,e,this,r):null!=o||s?new f(o,e,this,r,s):new t(e,this,r)}static checkNonGreedyDecision(t,e){return t.hasPassedThroughNonGreedyDecision||e instanceof s.DecisionState&&e.nonGreedy}appendContext(t,e){if("number"==typeof t){let r=this.context.appendSingleContext(t,e);return this.transform(this.state,!1,r)}{let r=this.context.appendContext(t,e);return this.transform(this.state,!1,r)}}contains(t){if(this.state.stateNumber!==t.state.stateNumber||this.alt!==t.alt||!this.semanticContext.equals(t.semanticContext))return!1;let e=[],r=[];for(e.push(this.context),r.push(t.context);;){let t=e.pop(),n=r.pop();if(!t||!n)break;if(t===n)return!0;if(t.size<n.size)return!1;if(n.isEmpty)return t.hasEmpty;for(let i=0;i<n.size;i++){let o=t.findReturnState(n.getReturnState(i));if(o<0)return!1;e.push(t.getParent(o)),r.push(n.getParent(i))}}return!1}get isPrecedenceFilterSuppressed(){return 0!=(2147483648&this.altAndOuterContextDepth)}set isPrecedenceFilterSuppressed(t){t?this.altAndOuterContextDepth|=2147483648:this.altAndOuterContextDepth&=2147483647}equals(e){return this===e||e instanceof t&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&this.reachesIntoOuterContext===e.reachesIntoOuterContext&&this.context.equals(e.context)&&this.semanticContext.equals(e.semanticContext)&&this.isPrecedenceFilterSuppressed===e.isPrecedenceFilterSuppressed&&this.hasPassedThroughNonGreedyDecision===e.hasPassedThroughNonGreedyDecision&&l.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor,e.lexerActionExecutor)}hashCode(){let t=a.MurmurHash.initialize(7);return t=a.MurmurHash.update(t,this.state.stateNumber),t=a.MurmurHash.update(t,this.alt),t=a.MurmurHash.update(t,this.reachesIntoOuterContext?1:0),t=a.MurmurHash.update(t,this.context),t=a.MurmurHash.update(t,this.semanticContext),t=a.MurmurHash.update(t,this.hasPassedThroughNonGreedyDecision?1:0),t=a.MurmurHash.update(t,this.lexerActionExecutor),a.MurmurHash.finish(t,7)}toDotString(){let t="";t+="digraph G {\n",t+="rankdir=LR;\n";let e=new o.Array2DHashMap(c.PredictionContext.IdentityEqualityComparator.INSTANCE),r=[];function n(t){let n=e.size,i=e.putIfAbsent(t,n);return null!=i?i:(r.push(t),n)}for(r.push(this.context),e.put(this.context,0);;){let e=r.pop();if(!e)break;for(let r=0;r<e.size;r++)t+="  s"+n(e),t+="->",t+="s"+n(e.getParent(r)),t+='[label="'+e.getReturnState(r)+'"];\n'}return(t+="}\n").toString()}toString(t,e,r){null==r&&(r=null!=e),null==e&&(e=!0);let n,i="";n=r?this.context.toStrings(t,this.state.stateNumber):["?"];let o=!0;for(let s of n)o?o=!1:i+=", ",i+="(",i+=this.state,e&&(i+=",",i+=this.alt),this.context&&(i+=",",i+=s),this.semanticContext!==h.SemanticContext.NONE&&(i+=",",i+=this.semanticContext),this.reachesIntoOuterContext&&(i+=",up="+this.outerContextDepth),i+=")";return i.toString()}};n([u.NotNull],p.prototype,"_state",void 0),n([u.NotNull],p.prototype,"_context",void 0),n([u.NotNull],p.prototype,"state",null),n([u.NotNull,i(0,u.NotNull)],p.prototype,"context",null),n([u.NotNull],p.prototype,"semanticContext",null),n([u.Override],p.prototype,"clone",null),n([i(0,u.NotNull),i(2,u.NotNull)],p.prototype,"transformImpl",null),n([u.Override],p.prototype,"equals",null),n([u.Override],p.prototype,"hashCode",null),n([i(0,u.NotNull),i(3,u.NotNull)],p,"create",null),p=n([i(0,u.NotNull),i(2,u.NotNull)],p),r.ATNConfig=p;let d=class extends p{constructor(t,e,r,n){super(e,r,n),this._semanticContext=t}get semanticContext(){return this._semanticContext}};n([u.NotNull],d.prototype,"_semanticContext",void 0),n([u.Override],d.prototype,"semanticContext",null),d=n([i(1,u.NotNull),i(2,u.NotNull)],d);let f=class extends p{constructor(t,e,r,n,i){if("number"==typeof r)super(e,r,n);else if(super(e,r,n),r.semanticContext!==h.SemanticContext.NONE)throw new Error("Not supported");this._lexerActionExecutor=t,this.passedThroughNonGreedyDecision=i}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};n([u.Override],f.prototype,"lexerActionExecutor",null),n([u.Override],f.prototype,"hasPassedThroughNonGreedyDecision",null),f=n([i(1,u.NotNull),i(2,u.NotNull)],f);let y=class extends d{constructor(t,e,r,n,i,o){super(e,r,n,i),this._lexerActionExecutor=t,this.passedThroughNonGreedyDecision=o}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};n([u.Override],y.prototype,"lexerActionExecutor",null),n([u.Override],y.prototype,"hasPassedThroughNonGreedyDecision",null),y=n([i(1,u.NotNull),i(2,u.NotNull)],y)},{252:252,299:299,326:326,334:334,349:349,361:361,362:362}],299:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(285);r.DecisionState=class extends n.ATNState{constructor(){super(...arguments),this.decision=-1,this.nonGreedy=!1,this.sll=!1}}},{285:285}],361:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(t){function e(t=0){return t}function r(t,e){null==e?e=0:"string"==typeof e?e=function(t){let e=t.length;if(0===e)return 0;let r=0;for(let n=0;n<e;n++){r=(r<<5>>>0)-r+t.charCodeAt(n),r|=0}return r}(e):"object"==typeof e&&(e=e.hashCode());let r=e;return r=(r=Math.imul(r,3432918353))<<15|r>>>17,t=(t^=r=Math.imul(r,461845907))<<13|t>>>19,4294967295&Math.imul(t,5)+3864292196}function n(t,e){return t^=4*e,t^=t>>>16,t=Math.imul(t,2246822507),t^=t>>>13,(t=Math.imul(t,3266489909))^t>>>16}t.initialize=e,t.update=r,t.finish=n,t.hashCode=function(t,i=0){let o=e(i),s=0;for(let e of t)o=r(o,e),s++;return n(o,s)}}(r.MurmurHash||(r.MurmurHash={}))},{}],334:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(350),s=t(351),a=t(361),u=t(252),l=t(362),c=t(365);class h{static get NONE(){return void 0===h._NONE&&(h._NONE=new h.Predicate),h._NONE}evalPrecedence(t,e){return this}static and(t,e){if(!t||t===h.NONE)return e;if(e===h.NONE)return t;let r=new h.AND(t,e);return 1===r.opnds.length?r.opnds[0]:r}static or(t,e){if(!t)return e;if(t===h.NONE||e===h.NONE)return h.NONE;let r=new h.OR(t,e);return 1===r.opnds.length?r.opnds[0]:r}}r.SemanticContext=h,function(t){function e(e){let r=[];for(let n=0;n<e.length;n++){let i=e[n];i instanceof t.PrecedencePredicate&&(r.push(i),e.splice(n,1),n--)}return r}class r extends t{constructor(t=-1,e=-1,r=!1){super(),this.ruleIndex=t,this.predIndex=e,this.isCtxDependent=r}eval(t,e){let r=this.isCtxDependent?e:void 0;return t.sempred(r,this.ruleIndex,this.predIndex)}hashCode(){let t=a.MurmurHash.initialize();return t=a.MurmurHash.update(t,this.ruleIndex),t=a.MurmurHash.update(t,this.predIndex),t=a.MurmurHash.update(t,this.isCtxDependent?1:0),a.MurmurHash.finish(t,3)}equals(t){return t instanceof r&&(this===t||this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent)}toString(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}n([u.Override],r.prototype,"eval",null),n([u.Override],r.prototype,"hashCode",null),n([u.Override],r.prototype,"equals",null),n([u.Override],r.prototype,"toString",null),t.Predicate=r;class h extends t{constructor(t){super(),this.precedence=t}eval(t,e){return t.precpred(e,this.precedence)}evalPrecedence(e,r){return e.precpred(r,this.precedence)?t.NONE:void 0}compareTo(t){return this.precedence-t.precedence}hashCode(){let t=1;return 31*t+this.precedence}equals(t){return t instanceof h&&(this===t||this.precedence===t.precedence)}toString(){return"{"+this.precedence+">=prec}?"}}n([u.Override],h.prototype,"eval",null),n([u.Override],h.prototype,"evalPrecedence",null),n([u.Override],h.prototype,"compareTo",null),n([u.Override],h.prototype,"hashCode",null),n([u.Override],h.prototype,"equals",null),n([u.Override],h.prototype,"toString",null),t.PrecedencePredicate=h;class p extends t{}t.Operator=p;let d=class r extends p{constructor(t,n){super();let i=new o.Array2DHashSet(l.ObjectEqualityComparator.INSTANCE);t instanceof r?i.addAll(t.opnds):i.add(t),n instanceof r?i.addAll(n.opnds):i.add(n),this.opnds=i.toArray();let s=function(t){let e;for(let r of t)void 0!==e?e.compareTo(r)>0&&(e=r):e=r;return e}(e(this.opnds));s&&this.opnds.push(s)}get operands(){return this.opnds}equals(t){return this===t||t instanceof r&&s.ArrayEqualityComparator.INSTANCE.equals(this.opnds,t.opnds)}hashCode(){return a.MurmurHash.hashCode(this.opnds,40363613)}eval(t,e){for(let r of this.opnds)if(!r.eval(t,e))return!1;return!0}evalPrecedence(e,r){let n=!1,i=[];for(let s of this.opnds){let o=s.evalPrecedence(e,r);if(n=n||o!==s,null==o)return;o!==t.NONE&&i.push(o)}if(!n)return this;if(0===i.length)return t.NONE;let o=i[0];for(let s=1;s<i.length;s++)o=t.and(o,i[s]);return o}toString(){return c.join(this.opnds,"&&")}};n([u.Override],d.prototype,"operands",null),n([u.Override],d.prototype,"equals",null),n([u.Override],d.prototype,"hashCode",null),n([u.Override],d.prototype,"eval",null),n([u.Override],d.prototype,"evalPrecedence",null),n([u.Override],d.prototype,"toString",null),d=n([i(0,u.NotNull),i(1,u.NotNull)],d),t.AND=d;let f=class r extends p{constructor(t,n){super();let i=new o.Array2DHashSet(l.ObjectEqualityComparator.INSTANCE);t instanceof r?i.addAll(t.opnds):i.add(t),n instanceof r?i.addAll(n.opnds):i.add(n),this.opnds=i.toArray();let s=function(t){let e;for(let r of t)void 0!==e?e.compareTo(r)<0&&(e=r):e=r;return e}(e(this.opnds));s&&this.opnds.push(s)}get operands(){return this.opnds}equals(t){return this===t||t instanceof r&&s.ArrayEqualityComparator.INSTANCE.equals(this.opnds,t.opnds)}hashCode(){return a.MurmurHash.hashCode(this.opnds,486279973)}eval(t,e){for(let r of this.opnds)if(r.eval(t,e))return!0;return!1}evalPrecedence(e,r){let n=!1,i=[];for(let s of this.opnds){let o=s.evalPrecedence(e,r);if(n=n||o!==s,o===t.NONE)return t.NONE;o&&i.push(o)}if(!n)return this;if(0===i.length)return;let o=i[0];for(let s=1;s<i.length;s++)o=t.or(o,i[s]);return o}toString(){return c.join(this.opnds,"||")}};n([u.Override],f.prototype,"operands",null),n([u.Override],f.prototype,"equals",null),n([u.Override],f.prototype,"hashCode",null),n([u.Override],f.prototype,"eval",null),n([u.Override],f.prototype,"evalPrecedence",null),n([u.Override],f.prototype,"toString",null),f=n([i(0,u.NotNull),i(1,u.NotNull)],f),t.OR=f}(h=r.SemanticContext||(r.SemanticContext={}))},{252:252,350:350,351:351,361:361,362:362,365:365}],281:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(349),o=t(350),s=t(351),a=t(279),u=t(280),l=t(353),c=t(252),h=t(362),p=t(326),d=t(327),f=t(334),y=t(365);class m{hashCode(t){return t.state^t.alt}equals(t,e){return t.state===e.state&&t.alt===e.alt}}function g(t){return t?new i.Array2DHashMap(t):new i.Array2DHashMap(m.INSTANCE)}m.INSTANCE=new m;class v{constructor(t,e){this._uniqueAlt=0,this._hasSemanticContext=!1,this._dipsIntoOuterContext=!1,this.outermostConfigSet=!1,this.cachedHashCode=-1,t?(e?(this.mergedConfigs=void 0,this.unmerged=void 0):t.isReadOnly?(this.mergedConfigs=g(),this.unmerged=[]):(this.mergedConfigs=g(t.mergedConfigs),this.unmerged=t.unmerged.slice(0)),this.configs=t.configs.slice(0),this._dipsIntoOuterContext=t._dipsIntoOuterContext,this._hasSemanticContext=t._hasSemanticContext,this.outermostConfigSet=t.outermostConfigSet,!e&&t.isReadOnly||(this._uniqueAlt=t._uniqueAlt,this._conflictInfo=t._conflictInfo)):(this.mergedConfigs=g(),this.unmerged=[],this.configs=[],this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER)}getRepresentedAlternatives(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts.clone();let t=new l.BitSet;for(let e of this)t.set(e.alt);return t}get isReadOnly(){return null==this.mergedConfigs}get isOutermostConfigSet(){return this.outermostConfigSet}set isOutermostConfigSet(t){if(this.outermostConfigSet&&!t)throw new Error("IllegalStateException");this.outermostConfigSet=t}getStates(){let t=new o.Array2DHashSet(h.ObjectEqualityComparator.INSTANCE);for(let e of this.configs)t.add(e.state);return t}optimizeConfigs(t){if(0!==this.configs.length)for(let e of this.configs)e.context=t.atn.getCachedContext(e.context)}clone(t){let e=new v(this,t);return!t&&this.isReadOnly&&e.addAll(this.configs),e}get size(){return this.configs.length}get isEmpty(){return 0===this.configs.length}contains(t){if(!(t instanceof u.ATNConfig))return!1;if(this.mergedConfigs&&this.unmerged){let e=t,r=this.getKey(e),n=this.mergedConfigs.get(r);if(null!=n&&this.canMerge(e,r,n))return n.contains(e);for(let i of this.unmerged)if(i.contains(t))return!0}else for(let e of this.configs)if(e.contains(t))return!0;return!1}*[Symbol.iterator](){yield*this.configs}toArray(){return this.configs}add(t,e){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");let r;null==e&&(e=d.PredictionContextCache.UNCACHED);let n=this.getKey(t),i=this.mergedConfigs.get(n);if(r=null==i,null!=i&&this.canMerge(t,n,i)){i.outerContextDepth=Math.max(i.outerContextDepth,t.outerContextDepth),t.isPrecedenceFilterSuppressed&&(i.isPrecedenceFilterSuppressed=!0);let r=p.PredictionContext.join(i.context,t.context,e);return this.updatePropertiesForMergedConfig(t),i.context!==r&&(i.context=r,!0)}for(let o=0;o<this.unmerged.length;o++){let i=this.unmerged[o];if(this.canMerge(t,n,i)){i.outerContextDepth=Math.max(i.outerContextDepth,t.outerContextDepth),t.isPrecedenceFilterSuppressed&&(i.isPrecedenceFilterSuppressed=!0);let s=p.PredictionContext.join(i.context,t.context,e);return this.updatePropertiesForMergedConfig(t),i.context!==s&&(i.context=s,r&&(this.mergedConfigs.put(n,i),this.unmerged.splice(o,1)),!0)}}return this.configs.push(t),r?this.mergedConfigs.put(n,t):this.unmerged.push(t),this.updatePropertiesForAddedConfig(t),!0}updatePropertiesForMergedConfig(t){this._dipsIntoOuterContext=this._dipsIntoOuterContext||t.reachesIntoOuterContext}updatePropertiesForAddedConfig(t){1===this.configs.length?this._uniqueAlt=t.alt:this._uniqueAlt!==t.alt&&(this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER),this._hasSemanticContext=this._hasSemanticContext||!f.SemanticContext.NONE.equals(t.semanticContext),this._dipsIntoOuterContext=this._dipsIntoOuterContext||t.reachesIntoOuterContext}canMerge(t,e,r){return t.state.stateNumber===r.state.stateNumber&&e.alt===r.alt&&t.semanticContext.equals(r.semanticContext)}getKey(t){return{state:t.state.stateNumber,alt:t.alt}}containsAll(t){for(let e of t){if(!(e instanceof u.ATNConfig))return!1;if(!this.contains(e))return!1}return!0}addAll(t,e){this.ensureWritable();let r=!1;for(let n of t)this.add(n,e)&&(r=!0);return r}clear(){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");this.mergedConfigs.clear(),this.unmerged.length=0,this.configs.length=0,this._dipsIntoOuterContext=!1,this._hasSemanticContext=!1,this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER,this._conflictInfo=void 0}equals(t){return this===t||t instanceof v&&this.outermostConfigSet===t.outermostConfigSet&&y.equals(this._conflictInfo,t._conflictInfo)&&s.ArrayEqualityComparator.INSTANCE.equals(this.configs,t.configs)}hashCode(){if(this.isReadOnly&&-1!==this.cachedHashCode)return this.cachedHashCode;let t=1;return t=5*(t=5*t^(this.outermostConfigSet?1:0))^s.ArrayEqualityComparator.INSTANCE.hashCode(this.configs),this.isReadOnly&&(this.cachedHashCode=t),t}toString(t){null==t&&(t=!1);let e="",r=this.configs.slice(0);r.sort((t,e)=>t.alt!==e.alt?t.alt-e.alt:t.state.stateNumber!==e.state.stateNumber?t.state.stateNumber-e.state.stateNumber:t.semanticContext.toString().localeCompare(e.semanticContext.toString())),e+="[";for(let n=0;n<r.length;n++)n>0&&(e+=", "),e+=r[n].toString(void 0,!0,t);return e+="]",this._hasSemanticContext&&(e+=",hasSemanticContext="+this._hasSemanticContext),this._uniqueAlt!==a.ATN.INVALID_ALT_NUMBER&&(e+=",uniqueAlt="+this._uniqueAlt),null!=this._conflictInfo&&(e+=",conflictingAlts="+this._conflictInfo.conflictedAlts,this._conflictInfo.isExact||(e+="*")),this._dipsIntoOuterContext&&(e+=",dipsIntoOuterContext"),e.toString()}get uniqueAlt(){return this._uniqueAlt}get hasSemanticContext(){return this._hasSemanticContext}set hasSemanticContext(t){this.ensureWritable(),this._hasSemanticContext=t}get conflictInfo(){return this._conflictInfo}set conflictInfo(t){this.ensureWritable(),this._conflictInfo=t}get conflictingAlts(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts}get isExactConflict(){return null!=this._conflictInfo&&this._conflictInfo.isExact}get dipsIntoOuterContext(){return this._dipsIntoOuterContext}get(t){return this.configs[t]}ensureWritable(){if(this.isReadOnly)throw new Error("This ATNConfigSet is read only.")}}n([c.NotNull],v.prototype,"getRepresentedAlternatives",null),n([c.Override],v.prototype,"size",null),n([c.Override],v.prototype,"isEmpty",null),n([c.Override],v.prototype,"contains",null),n([c.Override],v.prototype,Symbol.iterator,null),n([c.Override],v.prototype,"toArray",null),n([c.Override],v.prototype,"containsAll",null),n([c.Override],v.prototype,"clear",null),n([c.Override],v.prototype,"equals",null),n([c.Override],v.prototype,"hashCode",null),r.ATNConfigSet=v},{252:252,279:279,280:280,326:326,327:327,334:334,349:349,350:350,351:351,353:353,362:362,365:365}],350:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(355),s=t(252),a=t(361);class u{constructor(t,e=16){if(this.n=0,this.threshold=Math.floor(12),t instanceof u){this.comparator=t.comparator,this.buckets=t.buckets.slice(0);for(let t=0;t<this.buckets.length;t++){let e=this.buckets[t];e&&(this.buckets[t]=e.slice(0))}this.n=t.n,this.threshold=t.threshold}else this.comparator=t||o.DefaultEqualityComparator.INSTANCE,this.buckets=this.createBuckets(e)}getOrAdd(t){return this.n>this.threshold&&this.expand(),this.getOrAddImpl(t)}getOrAddImpl(t){let e=this.getBucket(t),r=this.buckets[e];if(!r)return r=[t],this.buckets[e]=r,this.n++,t;for(let n of r)if(this.comparator.equals(n,t))return n;return r.push(t),this.n++,t}get(t){if(null==t)return t;let e=this.getBucket(t),r=this.buckets[e];if(r)for(let n of r)if(this.comparator.equals(n,t))return n}getBucket(t){return this.comparator.hashCode(t)&this.buckets.length-1}hashCode(){let t=a.MurmurHash.initialize();for(let e of this.buckets)if(null!=e)for(let r of e){if(null==r)break;t=a.MurmurHash.update(t,this.comparator.hashCode(r))}return a.MurmurHash.finish(t,this.size)}equals(t){return t===this||t instanceof u&&(t.size===this.size&&this.containsAll(t))}expand(){let t=this.buckets,e=2*this.buckets.length,r=this.createBuckets(e);this.buckets=r,this.threshold=Math.floor(.75*e),this.size;for(let n of t)if(n)for(let t of n){let e=this.getBucket(t),r=this.buckets[e];r||(r=[],this.buckets[e]=r),r.push(t)}}add(t){return this.getOrAdd(t)===t}get size(){return this.n}get isEmpty(){return 0===this.n}contains(t){return this.containsFast(this.asElementType(t))}containsFast(t){return null!=t&&null!=this.get(t)}*[Symbol.iterator](){yield*this.toArray()}toArray(){const t=new Array(this.size);let e=0;for(let r of this.buckets)if(null!=r)for(let n of r){if(null==n)break;t[e++]=n}return t}containsAll(t){if(t instanceof u){let e=t;for(let t of e.buckets)if(null!=t)for(let e of t){if(null==e)break;if(!this.containsFast(this.asElementType(e)))return!1}}else for(let e of t)if(!this.containsFast(this.asElementType(e)))return!1;return!0}addAll(t){let e=!1;for(let r of t)this.getOrAdd(r)!==r&&(e=!0);return e}clear(){this.buckets=this.createBuckets(16),this.n=0,this.threshold=Math.floor(12)}toString(){if(0===this.size)return"{}";let t="{",e=!0;for(let r of this.buckets)if(null!=r)for(let n of r){if(null==n)break;e?e=!1:t+=", ",t+=n.toString()}return t+"}"}toTableString(){let t="";for(let e of this.buckets){if(null==e){t+="null\n";continue}t+="[";let r=!0;for(let n of e)r?r=!1:t+=" ",t+=null==n?"_":n.toString();t+="]\n"}return t}asElementType(t){return t}createBuckets(t){return new Array(t)}}n([s.NotNull],u.prototype,"comparator",void 0),n([s.Override],u.prototype,"hashCode",null),n([s.Override],u.prototype,"equals",null),n([s.Override],u.prototype,"add",null),n([s.Override],u.prototype,"size",null),n([s.Override],u.prototype,"isEmpty",null),n([s.Override],u.prototype,"contains",null),n([i(0,s.Nullable)],u.prototype,"containsFast",null),n([s.Override],u.prototype,Symbol.iterator,null),n([s.Override],u.prototype,"toArray",null),n([s.Override],u.prototype,"containsAll",null),n([s.Override],u.prototype,"addAll",null),n([s.Override],u.prototype,"clear",null),n([s.Override],u.prototype,"toString",null),n([s.SuppressWarnings("unchecked")],u.prototype,"asElementType",null),n([s.SuppressWarnings("unchecked")],u.prototype,"createBuckets",null),r.Array2DHashSet=u},{252:252,355:355,361:361}],351:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(361),s=t(362);class a{hashCode(t){return null==t?0:o.MurmurHash.hashCode(t,0)}equals(t,e){if(null==t)return null==e;if(null==e)return!1;if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(!s.ObjectEqualityComparator.INSTANCE.equals(t[r],e[r]))return!1;return!0}}a.INSTANCE=new a,n([i.Override],a.prototype,"hashCode",null),n([i.Override],a.prototype,"equals",null),r.ArrayEqualityComparator=a},{252:252,361:361,362:362}],327:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(349),o=t(252),s=t(362),a=t(326);class u{constructor(t=!0){this.contexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.childContexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.joinContexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.enableCache=t}getAsCached(t){if(!this.enableCache)return t;let e=this.contexts.get(t);return e||(e=t,this.contexts.put(t,t)),e}getChild(t,e){if(!this.enableCache)return t.getChild(e);let r=new u.PredictionContextAndInt(t,e),n=this.childContexts.get(r);return n||(n=t.getChild(e),n=this.getAsCached(n),this.childContexts.put(r,n)),n}join(t,e){if(!this.enableCache)return a.PredictionContext.join(t,e,this);let r=new u.IdentityCommutativePredictionContextOperands(t,e),n=this.joinContexts.get(r);return n||(n=a.PredictionContext.join(t,e,this),n=this.getAsCached(n),this.joinContexts.put(r,n),n)}}u.UNCACHED=new u(!1),r.PredictionContextCache=u,function(t){class e{constructor(t,e){this.obj=t,this.value=e}equals(t){if(!(t instanceof e))return!1;if(t===this)return!0;let r=t;return this.value===r.value&&(this.obj===r.obj||null!=this.obj&&this.obj.equals(r.obj))}hashCode(){let t=5;return 7*(t=7*t+(null!=this.obj?this.obj.hashCode():0))+this.value}}n([o.Override],e.prototype,"equals",null),n([o.Override],e.prototype,"hashCode",null),t.PredictionContextAndInt=e;class r{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}equals(t){if(!(t instanceof r))return!1;if(this===t)return!0;let e=t;return this._x===e._x&&this._y===e._y||this._x===e._y&&this._y===e._x}hashCode(){return this._x.hashCode()^this._y.hashCode()}}n([o.Override],r.prototype,"equals",null),n([o.Override],r.prototype,"hashCode",null),t.IdentityCommutativePredictionContextOperands=r}(u=r.PredictionContextCache||(r.PredictionContextCache={}))},{252:252,326:326,349:349,362:362}],291:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.BasicBlockStartState=s},{252:252,286:286,294:294}],292:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.BASIC}}n([t(252).Override],s.prototype,"stateType",null),r.BasicState=s},{252:252,285:285,286:286}],293:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.BLOCK_END}}n([t(252).Override],s.prototype,"stateType",null),r.BlockEndState=s},{252:252,285:285,286:286}],294:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(299);r.BlockStartState=class extends n.DecisionState{}},{299:299}],300:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e=-1){super(t),this._outermostPrecedenceReturn=e}get outermostPrecedenceReturn(){return this._outermostPrecedenceReturn}get serializationType(){return 1}get isEpsilon(){return!0}matches(t,e,r){return!1}toString(){return"epsilon"}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),n([o.Override,o.NotNull],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.EpsilonTransition=a},{252:252,341:341}],306:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._channel=t}get channel(){return this._channel}get actionType(){return 0}get isPositionDependent(){return!1}execute(t){t.channel=this._channel}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._channel),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._channel===t._channel}toString(){return`channel(${this._channel})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerChannelAction=a},{252:252,361:361}],307:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t,e){this._ruleIndex=t,this._actionIndex=e}get ruleIndex(){return this._ruleIndex}get actionIndex(){return this._actionIndex}get actionType(){return 1}get isPositionDependent(){return!0}execute(t){t.action(void 0,this._ruleIndex,this._actionIndex)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._ruleIndex),t=o.MurmurHash.update(t,this._actionIndex),o.MurmurHash.finish(t,3)}equals(t){return t===this||t instanceof a&&this._ruleIndex===t._ruleIndex&&this._actionIndex===t._actionIndex}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),r.LexerCustomAction=a},{252:252,361:361}],309:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._mode=t}get mode(){return this._mode}get actionType(){return 2}get isPositionDependent(){return!1}execute(t){t.mode(this._mode)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._mode),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._mode===t._mode}toString(){return`mode(${this._mode})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerModeAction=a},{252:252,361:361}],310:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 3}get isPositionDependent(){return!1}execute(t){t.more()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"more"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerMoreAction=a,function(t){t.INSTANCE=new t}(a=r.LexerMoreAction||(r.LexerMoreAction={}))},{252:252,361:361}],311:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 4}get isPositionDependent(){return!1}execute(t){t.popMode()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"popMode"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerPopModeAction=a,function(t){t.INSTANCE=new t}(a=r.LexerPopModeAction||(r.LexerPopModeAction={}))},{252:252,361:361}],312:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._mode=t}get mode(){return this._mode}get actionType(){return 5}get isPositionDependent(){return!1}execute(t){t.pushMode(this._mode)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._mode),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._mode===t._mode}toString(){return`pushMode(${this._mode})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerPushModeAction=a},{252:252,361:361}],313:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 6}get isPositionDependent(){return!1}execute(t){t.skip()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"skip"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerSkipAction=a,function(t){t.INSTANCE=new t}(a=r.LexerSkipAction||(r.LexerSkipAction={}))},{252:252,361:361}],314:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._type=t}get type(){return this._type}get actionType(){return 7}get isPositionDependent(){return!1}execute(t){t.type=this._type}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._type),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._type===t._type}toString(){return`type(${this._type})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerTypeAction=a},{252:252,361:361}],317:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(335);let a=class extends s.SetTransition{constructor(t,e){super(t,e)}get serializationType(){return 8}matches(t,e,r){return t>=e&&t<=r&&!super.matches(t,e,r)}toString(){return"~"+super.toString()}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"matches",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull),i(1,o.Nullable)],a),r.NotSetTransition=a},{252:252,335:335}],321:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.PLUS_BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.PlusBlockStartState=s},{252:252,286:286,294:294}],322:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(299);class s extends o.DecisionState{get stateType(){return i.ATNStateType.PLUS_LOOP_BACK}}n([t(252).Override],s.prototype,"stateType",null),r.PlusLoopbackState=s},{252:252,286:286,299:299}],323:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(252),a=t(334);let u=class extends o.AbstractPredicateTransition{constructor(t,e){super(t),this.precedence=e}get serializationType(){return 10}get isEpsilon(){return!0}matches(t,e,r){return!1}get predicate(){return new a.SemanticContext.PrecedencePredicate(this.precedence)}toString(){return this.precedence+" >= _p"}};n([s.Override],u.prototype,"serializationType",null),n([s.Override],u.prototype,"isEpsilon",null),n([s.Override],u.prototype,"matches",null),n([s.Override],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.PrecedencePredicateTransition=u},{252:252,287:287,334:334}],330:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(341);let u=class extends a.Transition{constructor(t,e,r){super(t),this.from=e,this.to=r}get serializationType(){return 2}get label(){return o.IntervalSet.of(this.from,this.to)}matches(t,e,r){return t>=this.from&&t<=this.to}toString(){return"'"+String.fromCodePoint(this.from)+"'..'"+String.fromCodePoint(this.to)+"'"}};n([s.Override],u.prototype,"serializationType",null),n([s.Override,s.NotNull],u.prototype,"label",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.RangeTransition=u},{252:252,341:341,359:359}],331:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{constructor(){super(...arguments),this.isPrecedenceRule=!1,this.leftFactored=!1}get stateType(){return o.ATNStateType.RULE_START}}n([t(252).Override],s.prototype,"stateType",null),r.RuleStartState=s},{252:252,285:285,286:286}],332:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286),s=t(252);class a extends i.ATNState{get nonStopStateNumber(){return-1}get stateType(){return o.ATNStateType.RULE_STOP}}n([s.Override],a.prototype,"nonStopStateNumber",null),n([s.Override],a.prototype,"stateType",null),r.RuleStopState=a},{252:252,285:285,286:286}],333:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e,r,n){super(t),this.tailCall=!1,this.optimizedTailCall=!1,this.ruleIndex=e,this.precedence=r,this.followState=n}get serializationType(){return 3}get isEpsilon(){return!0}matches(t,e,r){return!1}};n([o.NotNull],a.prototype,"followState",void 0),n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),a=n([i(0,o.NotNull),i(3,o.NotNull)],a),r.RuleTransition=a},{252:252,341:341}],335:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(276),u=t(341);let l=class extends u.Transition{constructor(t,e){super(t),null==e&&(e=o.IntervalSet.of(a.Token.INVALID_TYPE)),this.set=e}get serializationType(){return 7}get label(){return this.set}matches(t,e,r){return this.set.contains(t)}toString(){return this.set.toString()}};n([s.NotNull],l.prototype,"set",void 0),n([s.Override],l.prototype,"serializationType",null),n([s.Override,s.NotNull],l.prototype,"label",null),n([s.Override],l.prototype,"matches",null),n([s.Override,s.NotNull],l.prototype,"toString",null),l=n([i(0,s.NotNull),i(1,s.Nullable)],l),r.SetTransition=l},{252:252,276:276,341:341,359:359}],337:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.STAR_BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.StarBlockStartState=s},{252:252,286:286,294:294}],339:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get loopEntryState(){return this.transition(0).target}get stateType(){return o.ATNStateType.STAR_LOOP_BACK}}n([t(252).Override],s.prototype,"stateType",null),r.StarLoopbackState=s},{252:252,285:285,286:286}],340:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(299);class s extends o.DecisionState{get stateType(){return i.ATNStateType.TOKEN_START}}n([t(252).Override],s.prototype,"stateType",null),r.TokensStartState=s},{252:252,286:286,299:299}],364:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(361);class i{constructor(t,e,r,n){this.data=new Uint32Array(4),this.data[0]=t,this.data[1]=e,this.data[2]=r,this.data[3]=n}static fromString(t){if(!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(t))throw new Error("Incorrectly formatted UUID");let e=t.split("-"),r=parseInt(e[0],16),n=(parseInt(e[1],16)<<16>>>0)+parseInt(e[2],16),o=(parseInt(e[3],16)<<16>>>0)+parseInt(e[4].substr(0,4),16),s=parseInt(e[4].substr(-8),16);return new i(r,n,o,s)}hashCode(){return n.MurmurHash.hashCode([this.data[0],this.data[1],this.data[2],this.data[3]])}equals(t){return t===this||t instanceof i&&this.data[0]===t.data[0]&&this.data[1]===t.data[1]&&this.data[2]===t.data[2]&&this.data[3]===t.data[3]}toString(){return("00000000"+this.data[0].toString(16)).substr(-8)+"-"+("0000"+(this.data[1]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[1].toString(16)).substr(-4)+"-"+("0000"+(this.data[2]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[2].toString(16)).substr(-4)+("00000000"+this.data[3].toString(16)).substr(-8)}}r.UUID=i},{361:361}],342:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t){super(t)}get serializationType(){return 9}matches(t,e,r){return t>=e&&t<=r}toString(){return"."}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"matches",null),n([o.Override,o.NotNull],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.WildcardTransition=a},{252:252,341:341}],288:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e,r=-1,n=!1){super(t),this.ruleIndex=e,this.actionIndex=r,this.isCtxDependent=n}get serializationType(){return 6}get isEpsilon(){return!0}matches(t,e,r){return!1}toString(){return"action_"+this.ruleIndex+":"+this.actionIndex}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.ActionTransition=a},{252:252,341:341}],290:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(341);let u=class extends a.Transition{constructor(t,e){super(t),this._label=e}get serializationType(){return 5}get label(){return o.IntervalSet.of(this._label)}matches(t,e,r){return this._label===t}toString(){return String(this.label)}};n([s.Override],u.prototype,"serializationType",null),n([s.Override,s.NotNull],u.prototype,"label",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.AtomTransition=u},{252:252,341:341,359:359}],284:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(281),s=t(346),a=t(252),u=t(326);let l=class t{constructor(t){this.atn=t}static get ERROR(){return t._ERROR||(t._ERROR=new s.DFAState(new o.ATNConfigSet),t._ERROR.stateNumber=u.PredictionContext.EMPTY_FULL_STATE_KEY),t._ERROR}clearDFA(){this.atn.clearDFA()}};n([a.NotNull],l.prototype,"atn",void 0),n([a.NotNull],l,"ERROR",null),l=n([i(0,a.NotNull)],l),r.ATNSimulator=l,l=r.ATNSimulator||(r.ATNSimulator={}),r.ATNSimulator=l},{252:252,281:281,326:326,346:346}],346:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(279),s=t(353),a=t(361),u=t(252),l=t(326);class c{constructor(t){this.stateNumber=-1,this.configs=t,this.edges=new Map,this.contextEdges=new Map}get isContextSensitive(){return!!this.contextSymbols}isContextSymbol(t){return!!this.isContextSensitive&&this.contextSymbols.get(t)}setContextSymbol(t){this.contextSymbols.set(t)}setContextSensitive(t){this.isContextSensitive||this.contextSymbols||(this.contextSymbols=new s.BitSet)}get acceptStateInfo(){return this._acceptStateInfo}set acceptStateInfo(t){this._acceptStateInfo=t}get isAcceptState(){return!!this._acceptStateInfo}get prediction(){return this._acceptStateInfo?this._acceptStateInfo.prediction:o.ATN.INVALID_ALT_NUMBER}get lexerActionExecutor(){if(this._acceptStateInfo)return this._acceptStateInfo.lexerActionExecutor}getTarget(t){return this.edges.get(t)}setTarget(t,e){this.edges.set(t,e)}getEdgeMap(){return this.edges}getContextTarget(t){return t===l.PredictionContext.EMPTY_FULL_STATE_KEY&&(t=-1),this.contextEdges.get(t)}setContextTarget(t,e){if(!this.isContextSensitive)throw new Error("The state is not context sensitive.");t===l.PredictionContext.EMPTY_FULL_STATE_KEY&&(t=-1),this.contextEdges.set(t,e)}getContextEdgeMap(){let t=new Map(this.contextEdges),e=t.get(-1);if(void 0!==e){if(1===t.size){let t=new Map;return t.set(l.PredictionContext.EMPTY_FULL_STATE_KEY,e),t}t.delete(-1),t.set(l.PredictionContext.EMPTY_FULL_STATE_KEY,e)}return t}hashCode(){let t=a.MurmurHash.initialize(7);return t=a.MurmurHash.update(t,this.configs.hashCode()),a.MurmurHash.finish(t,1)}equals(t){if(this===t)return!0;if(!(t instanceof c))return!1;let e=t;return this.configs.equals(e.configs)}toString(){let t="";return t+=this.stateNumber+":"+this.configs,this.isAcceptState&&(t+="=>",this.predicates?t+=this.predicates:t+=this.prediction),t.toString()}}n([u.NotNull],c.prototype,"configs",void 0),n([u.NotNull],c.prototype,"edges",void 0),n([u.NotNull],c.prototype,"contextEdges",void 0),n([u.Override],c.prototype,"hashCode",null),n([u.Override],c.prototype,"equals",null),n([u.Override],c.prototype,"toString",null),r.DFAState=c,function(t){let e=class{constructor(t,e){this.alt=e,this.pred=t}toString(){return"("+this.pred+", "+this.alt+")"}};n([u.NotNull],e.prototype,"pred",void 0),n([u.Override],e.prototype,"toString",null),e=n([i(0,u.NotNull)],e),t.PredPrediction=e}(c=r.DFAState||(r.DFAState={}))},{252:252,279:279,326:326,353:353,361:361}],287:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(341);r.AbstractPredicateTransition=class extends n.Transition{constructor(t){super(t)}}},{341:341}],341:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t){if(null==t)throw new Error("target cannot be null.");this.target=t}get isEpsilon(){return!1}get label(){}};s.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],n([o.NotNull],s.prototype,"target",void 0),s=n([i(0,o.NotNull)],s),r.Transition=s},{252:252}],289:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o){super(t,e,n,i,o,e.useContext),this.ambigAlts=r}get ambiguousAlternatives(){return this.ambigAlts}};n([s.NotNull],a.prototype,"ambigAlts",void 0),n([s.NotNull],a.prototype,"ambiguousAlternatives",null),a=n([i(1,s.NotNull),i(2,s.NotNull),i(3,s.NotNull)],a),r.AmbiguityInfo=a},{252:252,297:297}],297:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t,e,r,n,i,o){this.decision=t,this.fullCtx=o,this.stopIndex=i,this.input=r,this.startIndex=n,this.state=e}};n([o.NotNull],s.prototype,"input",void 0),s=n([i(2,o.NotNull)],s),r.DecisionEventInfo=s},{252:252}],295:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(365);class s{constructor(t,e){this._conflictedAlts=t,this.exact=e}get conflictedAlts(){return this._conflictedAlts}get isExact(){return this.exact}equals(t){return t===this||t instanceof s&&this.isExact===t.isExact&&o.equals(this.conflictedAlts,t.conflictedAlts)}hashCode(){return this.conflictedAlts.hashCode()}}n([i.Override],s.prototype,"equals",null),n([i.Override],s.prototype,"hashCode",null),r.ConflictInfo=s},{252:252,365:365}],296:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i){super(t,e,r,n,i,!0)}};a=n([i(1,s.NotNull),i(2,s.NotNull)],a),r.ContextSensitivityInfo=a},{252:252,297:297}],298:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.invocations=0,this.timeInPrediction=0,this.SLL_TotalLook=0,this.SLL_MinLook=0,this.SLL_MaxLook=0,this.LL_TotalLook=0,this.LL_MinLook=0,this.LL_MaxLook=0,this.contextSensitivities=[],this.errors=[],this.ambiguities=[],this.predicateEvals=[],this.SLL_ATNTransitions=0,this.SLL_DFATransitions=0,this.LL_Fallback=0,this.LL_ATNTransitions=0,this.LL_DFATransitions=0,this.decision=t}toString(){return"{decision="+this.decision+", contextSensitivities="+this.contextSensitivities.length+", errors="+this.errors.length+", ambiguities="+this.ambiguities.length+", SLL_lookahead="+this.SLL_TotalLook+", SLL_ATNTransitions="+this.SLL_ATNTransitions+", SLL_DFATransitions="+this.SLL_DFATransitions+", LL_Fallback="+this.LL_Fallback+", LL_lookahead="+this.LL_TotalLook+", LL_ATNTransitions="+this.LL_ATNTransitions+"}"}}n([t(252).Override],i.prototype,"toString",null),r.DecisionInfo=i},{252:252}],301:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i){super(t,e,r,n,i,e.useContext)}};a=n([i(1,s.NotNull),i(2,s.NotNull)],a),r.ErrorInfo=a},{252:252,297:297}],343:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.AcceptStateInfo=class{constructor(t,e){this._prediction=t,this._lexerActionExecutor=e}get prediction(){return this._prediction}get lexerActionExecutor(){return this._lexerActionExecutor}}},{}],318:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(281),o=t(252);class s extends i.ATNConfigSet{constructor(t,e){null!=t&&null!=e?super(t,e):super()}clone(t){let e=new s(this,t);return!t&&this.isReadOnly&&e.addAll(this),e}getKey(t){return{state:0,alt:t.hashCode()}}canMerge(t,e,r){return t.equals(r)}}n([o.Override],s.prototype,"clone",null),n([o.Override],s.prototype,"getKey",null),n([o.Override],s.prototype,"canMerge",null),r.OrderedATNConfigSet=s},{252:252,281:281}],305:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(351),s=t(308),a=t(361),u=t(252);let l=class t{constructor(t){this._lexerActions=t;let e=a.MurmurHash.initialize();for(let r of t)e=a.MurmurHash.update(e,r);this.cachedHashCode=a.MurmurHash.finish(e,t.length)}static append(e,r){if(!e)return new t([r]);let n=e._lexerActions.slice(0);return n.push(r),new t(n)}fixOffsetBeforeMatch(e){let r;for(let t=0;t<this._lexerActions.length;t++)!this._lexerActions[t].isPositionDependent||this._lexerActions[t]instanceof s.LexerIndexedCustomAction||(r||(r=this._lexerActions.slice(0)),r[t]=new s.LexerIndexedCustomAction(e,this._lexerActions[t]));return r?new t(r):this}get lexerActions(){return this._lexerActions}execute(t,e,r){let n=!1,i=e.index;try{for(let o of this._lexerActions){if(o instanceof s.LexerIndexedCustomAction){let t=o.offset;e.seek(r+t),o=o.action,n=r+t!==i}else o.isPositionDependent&&(e.seek(i),n=!1);o.execute(t)}}finally{n&&e.seek(i)}}hashCode(){return this.cachedHashCode}equals(e){return e===this||e instanceof t&&this.cachedHashCode===e.cachedHashCode&&o.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions,e._lexerActions)}};n([u.NotNull],l.prototype,"_lexerActions",void 0),n([u.NotNull],l.prototype,"lexerActions",null),n([i(0,u.NotNull)],l.prototype,"execute",null),n([u.Override],l.prototype,"hashCode",null),n([u.Override],l.prototype,"equals",null),n([u.NotNull,i(1,u.NotNull)],l,"append",null),l=n([i(0,u.NotNull)],l),r.LexerActionExecutor=l},{252:252,308:308,351:351,361:361}],308:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);let a=class t{constructor(t,e){this._offset=t,this._action=e}get offset(){return this._offset}get action(){return this._action}get actionType(){return this._action.actionType}get isPositionDependent(){return!0}execute(t){this._action.execute(t)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this._offset),t=o.MurmurHash.update(t,this._action),o.MurmurHash.finish(t,2)}equals(e){return e===this||e instanceof t&&this._offset===e._offset&&this._action.equals(e._action)}};n([s.NotNull],a.prototype,"action",null),n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),a=n([i(1,s.NotNull)],a),r.LexerIndexedCustomAction=a},{252:252,361:361}],315:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297);let s=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o,s){super(t,e,n,i,o,s),this.predictedAlt=r}};s=n([i(3,t(252).NotNull)],s),r.LookaheadEventInfo=s},{252:252,297:297}],352:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.Arrays||(r.Arrays={})).binarySearch=function(t,e,r,n){return function(t,e,r,n){let i=e,o=r-1;for(;i<=o;){let e=i+o>>>1,r=t[e];if(r<n)i=e+1;else{if(!(r>n))return e;o=e-1}}return-(i+1)}(t,void 0!==r?r:0,void 0!==n?n:t.length,e)},n.toString=function(t){let e="[",r=!0;for(let n of t)r?r=!1:e+=", ",e+=null===n?"null":void 0===n?"undefined":n;return e+"]"}},{}],336:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(267);let a=class{constructor(t,e,r,n){this.outerContext=null!=t?t:s.ParserRuleContext.emptyContext(),this.s0=e,this.useContext=r,this.remainingOuterContext=n}};a=n([i(1,o.NotNull)],a),r.SimulatorState=a},{252:252,267:267}],356:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(352),o=t(252),s=new Int32Array(0);class a{constructor(t){if(t)if(t instanceof a)this._data=t._data.slice(0),this._size=t._size;else if("number"==typeof t)0===t?(this._data=s,this._size=0):(this._data=new Int32Array(t),this._size=0);else{this._data=s,this._size=0;for(let e of t)this.add(e)}else this._data=s,this._size=0}add(t){this._data.length===this._size&&this.ensureCapacity(this._size+1),this._data[this._size]=t,this._size++}addAll(t){if(Array.isArray(t))this.ensureCapacity(this._size+t.length),this._data.subarray(this._size,this._size+t.length).set(t),this._size+=t.length;else if(t instanceof a)this.ensureCapacity(this._size+t._size),this._data.subarray(this._size,this._size+t.size).set(t._data),this._size+=t._size;else{this.ensureCapacity(this._size+t.size);let e=0;for(let r of t)this._data[this._size+e]=r,e++;this._size+=t.size}}get(t){if(t<0||t>=this._size)throw RangeError();return this._data[t]}contains(t){for(let e=0;e<this._size;e++)if(this._data[e]===t)return!0;return!1}set(t,e){if(t<0||t>=this._size)throw RangeError();let r=this._data[t];return this._data[t]=e,r}removeAt(t){let e=this.get(t);return this._data.copyWithin(t,t+1,this._size),this._data[this._size-1]=0,this._size--,e}removeRange(t,e){if(t<0||e<0||t>this._size||e>this._size)throw RangeError();if(t>e)throw RangeError();this._data.copyWithin(e,t,this._size),this._data.fill(0,this._size-(e-t),this._size),this._size-=e-t}get isEmpty(){return 0===this._size}get size(){return this._size}trimToSize(){this._data.length!==this._size&&(this._data=this._data.slice(0,this._size))}clear(){this._data.fill(0,0,this._size),this._size=0}toArray(){return 0===this._size?[]:Array.from(this._data.subarray(0,this._size))}sort(){this._data.subarray(0,this._size).sort()}equals(t){if(t===this)return!0;if(!(t instanceof a))return!1;if(this._size!==t._size)return!1;for(let e=0;e<this._size;e++)if(this._data[e]!==t._data[e])return!1;return!0}hashCode(){let t=1;for(let e=0;e<this._size;e++)t=31*t+this._data[e];return t}toString(){return this._data.toString()}binarySearch(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this._size),e<0||r<0||e>this._size||r>this._size)throw new RangeError;if(e>r)throw new RangeError;return i.Arrays.binarySearch(this._data,t,e,r)}ensureCapacity(t){if(t<0||t>2147483639)throw new RangeError;let e;for(e=0===this._data.length?4:this._data.length;e<t;)((e*=2)<0||e>2147483639)&&(e=2147483639);let r=new Int32Array(e);r.set(this._data),this._data=r}toCharArray(){let t=new Uint16Array(this._size),e=0,r=!1;for(let n=0;n<this._size;n++){let i=this._data[n];if(i>=0&&i<65536){t[e]=i,e++;continue}if(!r){let e=new Uint16Array(this.charArraySize());e.set(t,0),t=e,r=!0}let o=String.fromCodePoint(i);t[e]=o.charCodeAt(0),t[e+1]=o.charCodeAt(1),e+=2}return t}charArraySize(){let t=0;for(let e=0;e<this._size;e++)t+=this._data[e]>=65536?2:1;return t}}n([o.NotNull],a.prototype,"_data",void 0),n([o.Override],a.prototype,"equals",null),n([o.Override],a.prototype,"hashCode",null),n([o.Override],a.prototype,"toString",null),r.IntegerList=a},{252:252,352:352}],328:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0}),t(349);const i=t(361),o=t(252),s=t(332);var a;(a=r.PredictionMode||(r.PredictionMode={}))[a.SLL=0]="SLL",a[a.LL=1]="LL",a[a.LL_EXACT_AMBIG_DETECTION=2]="LL_EXACT_AMBIG_DETECTION",function(t){class e{AltAndContextConfigEqualityComparator(){}hashCode(t){let e=i.MurmurHash.initialize(7);return e=i.MurmurHash.update(e,t.state.stateNumber),e=i.MurmurHash.update(e,t.context),i.MurmurHash.finish(e,2)}equals(t,e){return t===e||null!=t&&null!=e&&t.state.stateNumber===e.state.stateNumber&&t.context.equals(e.context)}}e.INSTANCE=new e,n([o.Override],e.prototype,"hashCode",null),n([o.Override],e.prototype,"equals",null),t.hasConfigInRuleStopState=function(t){for(let e of t)if(e.state instanceof s.RuleStopState)return!0;return!1},t.allConfigsInRuleStopStates=function(t){for(let e of t)if(!(e.state instanceof s.RuleStopState))return!1;return!0}}(r.PredictionMode||(r.PredictionMode={}))},{252:252,332:332,349:349,361:361}],324:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o,s,a){super(e,t,r,n,i,t.useContext),this.semctx=o,this.evalResult=s,this.predictedAlt=a}};a=n([i(0,s.NotNull),i(2,s.NotNull),i(5,s.NotNull)],a),r.PredicateEvalInfo=a},{252:252,297:297}],345:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(284),o=t(252),s=t(326),a=t(271),u=t(278);class l{constructor(t,e,r,n){e instanceof a.Recognizer?(r=e.ruleNames,n=e.atn,e=e.vocabulary):e||(e=u.VocabularyImpl.EMPTY_VOCABULARY),this.dfa=t,this.vocabulary=e,this.ruleNames=r,this.atn=n}toString(){if(!this.dfa.s0)return"";let t="";if(this.dfa.states){let e=new Array(...this.dfa.states.toArray());e.sort((t,e)=>t.stateNumber-e.stateNumber);for(let r of e){let e=r.getEdgeMap(),n=[...e.keys()].sort((t,e)=>t-e),o=r.getContextEdgeMap(),s=[...o.keys()].sort((t,e)=>t-e);for(let a of n){let n=e.get(a);if((null==n||n===i.ATNSimulator.ERROR)&&!r.isContextSymbol(a))continue;let o=!1;t+=this.getStateString(r)+"-"+this.getEdgeLabel(a)+"->",r.isContextSymbol(a)&&(t+="!",o=!0);let s=n;s&&s.stateNumber!==i.ATNSimulator.ERROR.stateNumber?t+=this.getStateString(s)+"\n":o&&(t+="ctx\n")}if(r.isContextSensitive)for(let i of s)t+=this.getStateString(r)+"-"+this.getContextLabel(i)+"->"+this.getStateString(o.get(i))+"\n"}}let e=t;return 0===e.length?"":e}getContextLabel(t){if(t===s.PredictionContext.EMPTY_FULL_STATE_KEY)return"ctx:EMPTY_FULL";if(t===s.PredictionContext.EMPTY_LOCAL_STATE_KEY)return"ctx:EMPTY_LOCAL";if(this.atn&&t>0&&t<=this.atn.states.length){let e=this.atn.states[t].ruleIndex;if(this.ruleNames&&e>=0&&e<this.ruleNames.length)return"ctx:"+String(t)+"("+this.ruleNames[e]+")"}return"ctx:"+String(t)}getEdgeLabel(t){return this.vocabulary.getDisplayName(t)}getStateString(t){if(t===i.ATNSimulator.ERROR)return"ERROR";let e=t.stateNumber,r="s"+e;if(t.isAcceptState&&(r=t.predicates?":s"+e+"=>"+t.predicates:":s"+e+"=>"+t.prediction),t.isContextSensitive){r+="*";for(let e of t.configs)if(e.reachesIntoOuterContext){r+="*";break}}return r}}n([o.NotNull],l.prototype,"dfa",void 0),n([o.NotNull],l.prototype,"vocabulary",void 0),n([o.Override],l.prototype,"toString",null),r.DFASerializer=l},{252:252,271:271,278:278,284:284,326:326}],347:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(345),s=t(252),a=t(278);let u=class extends o.DFASerializer{constructor(t){super(t,a.VocabularyImpl.EMPTY_VOCABULARY)}getEdgeLabel(t){return"'"+String.fromCodePoint(t)+"'"}};n([s.Override,s.NotNull],u.prototype,"getEdgeLabel",null),u=n([i(0,s.NotNull)],u),r.LexerDFASerializer=u},{252:252,278:278,345:345}],355:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(361),s=t(362);class a{hashCode(t){return null==t?0:"string"==typeof t||"number"==typeof t?o.MurmurHash.hashCode([t]):s.ObjectEqualityComparator.INSTANCE.hashCode(t)}equals(t,e){return null==t?null==e:"string"==typeof t||"number"==typeof t?t===e:s.ObjectEqualityComparator.INSTANCE.equals(t,e)}}a.INSTANCE=new a,n([i.Override],a.prototype,"hashCode",null),n([i.Override],a.prototype,"equals",null),r.DefaultEqualityComparator=a},{252:252,361:361,362:362}],360:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.MultiMap=class extends Map{constructor(){super()}map(t,e){let r=super.get(t);r||(r=[],super.set(t,r)),r.push(e)}getPairs(){let t=[];return this.forEach((e,r)=>{e.forEach(e=>{t.push([r,e])})}),t}}},{}],366:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);class s{visit(t){return t.accept(this)}visitChildren(t){let e=this.defaultResult(),r=t.childCount;for(let n=0;n<r&&this.shouldVisitNextChild(t,e);n++){let r=t.getChild(n).accept(this);e=this.aggregateResult(e,r)}return e}visitTerminal(t){return this.defaultResult()}visitErrorNode(t){return this.defaultResult()}aggregateResult(t,e){return e}shouldVisitNextChild(t,e){return!0}}n([o.Override,i(0,o.NotNull)],s.prototype,"visit",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitChildren",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitTerminal",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitErrorNode",null),n([i(0,o.NotNull)],s.prototype,"shouldVisitNextChild",null),r.AbstractParseTreeVisitor=s},{252:252}],368:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.ParseTreeProperty=class{constructor(t="ParseTreeProperty"){this._symbol=Symbol(t)}get(t){return t[this._symbol]}set(t,e){t[this._symbol]=e}removeFrom(t){let e=t[this._symbol];return delete t[this._symbol],e}}},{}],369:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(367),i=t(371),o=t(370);class s{walk(t,e){let r=[],s=[],a=e,u=0;for(;a;)if(a instanceof n.ErrorNode?t.visitErrorNode&&t.visitErrorNode(a):a instanceof i.TerminalNode?t.visitTerminal&&t.visitTerminal(a):this.enterRule(t,a),a.childCount>0)r.push(a),s.push(u),u=0,a=a.getChild(0);else do{if(a instanceof o.RuleNode&&this.exitRule(t,a),0===r.length){a=void 0,u=0;break}let e=r[r.length-1];if(a=++u<e.childCount?e.getChild(u):void 0)break;a=r.pop(),u=s.pop()}while(a)}enterRule(t,e){let r=e.ruleContext;t.enterEveryRule&&t.enterEveryRule(r),r.enterRule(t)}exitRule(t,e){let r=e.ruleContext;r.exitRule(t),t.exitEveryRule&&t.exitEveryRule(r)}}r.ParseTreeWalker=s,function(t){t.DEFAULT=new t}(s=r.ParseTreeWalker||(r.ParseTreeWalker={}))},{367:367,370:370,371:371}],374:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Chunk=class{}},{}],375:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t,e,r,n){if(!t)throw new Error("tree cannot be null");if(!e)throw new Error("pattern cannot be null");if(!r)throw new Error("labels cannot be null");this._tree=t,this._pattern=e,this._labels=r,this._mismatchedNode=n}get(t){let e=this._labels.get(t);if(e&&0!==e.length)return e[e.length-1]}getAll(t){return this._labels.get(t)||[]}get labels(){return this._labels}get mismatchedNode(){return this._mismatchedNode}get succeeded(){return!this._mismatchedNode}get pattern(){return this._pattern}get tree(){return this._tree}toString(){return`Match ${this.succeeded?"succeeded":"failed"}; found ${this.labels.size} labels`}};n([o.NotNull,i(0,o.NotNull)],s.prototype,"getAll",null),n([o.NotNull],s.prototype,"labels",null),n([o.NotNull],s.prototype,"pattern",null),n([o.NotNull],s.prototype,"tree",null),n([o.Override],s.prototype,"toString",null),s=n([i(0,o.NotNull),i(1,o.NotNull),i(2,o.NotNull)],s),r.ParseTreeMatch=s},{252:252}],376:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(382);let a=class{constructor(t,e,r,n){this._matcher=t,this._patternRuleIndex=r,this._pattern=e,this._patternTree=n}match(t){return this._matcher.match(t,this)}matches(t){return this._matcher.match(t,this).succeeded}findAll(t,e){let r=s.XPath.findAll(t,e,this._matcher.parser),n=[];for(let i of r){let t=this.match(i);t.succeeded&&n.push(t)}return n}get matcher(){return this._matcher}get pattern(){return this._pattern}get patternRuleIndex(){return this._patternRuleIndex}get patternTree(){return this._patternTree}};n([o.NotNull],a.prototype,"_pattern",void 0),n([o.NotNull],a.prototype,"_patternTree",void 0),n([o.NotNull],a.prototype,"_matcher",void 0),n([o.NotNull,i(0,o.NotNull)],a.prototype,"match",null),n([i(0,o.NotNull)],a.prototype,"matches",null),n([o.NotNull,i(0,o.NotNull),i(1,o.NotNull)],a.prototype,"findAll",null),n([o.NotNull],a.prototype,"matcher",null),n([o.NotNull],a.prototype,"pattern",null),n([o.NotNull],a.prototype,"patternTree",null),a=n([i(0,o.NotNull),i(1,o.NotNull),i(3,o.NotNull)],a),r.ParseTreePattern=a},{252:252,382:382}],382:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(245),i=t(250),o=t(262),s=t(267),a=t(276),u=t(384),l=t(385),c=t(386),h=t(387),p=t(388),d=t(389),f=t(390),y=t(391);class m{constructor(t,e){this.parser=t,this.path=e,this.elements=this.split(e)}split(t){let e=new u.XPathLexer(n.CharStreams.fromString(t));e.recover=t=>{throw t},e.removeErrorListeners(),e.addErrorListener(new l.XPathLexerErrorListener);let r=new i.CommonTokenStream(e);try{r.fill()}catch(d){if(d instanceof o.LexerNoViableAltException){let r="Invalid tokens or characters at index "+e.charPositionInLine+" in path '"+t+"' -- "+d.message;throw new RangeError(r)}throw d}let s=r.getTokens(),c=[],h=s.length,p=0;t:for(;p<h;){let t,e=s[p];switch(e.type){case u.XPathLexer.ROOT:case u.XPathLexer.ANYWHERE:let r=e.type===u.XPathLexer.ANYWHERE,n=(t=s[++p]).type===u.XPathLexer.BANG;n&&(t=s[++p]);let i=this.getXPathElement(t,r);i.invert=n,c.push(i),p++;break;case u.XPathLexer.TOKEN_REF:case u.XPathLexer.RULE_REF:case u.XPathLexer.WILDCARD:c.push(this.getXPathElement(e,!1)),p++;break;case a.Token.EOF:break t;default:throw new Error("Unknowth path element "+e)}}return c}getXPathElement(t,e){if(t.type===a.Token.EOF)throw new Error("Missing path element at end of path");let r=t.text;if(null==r)throw new Error("Expected wordToken to have text content.");let n=this.parser.getTokenType(r),i=this.parser.getRuleIndex(r);switch(t.type){case u.XPathLexer.WILDCARD:return e?new f.XPathWildcardAnywhereElement:new y.XPathWildcardElement;case u.XPathLexer.TOKEN_REF:case u.XPathLexer.STRING:if(n===a.Token.INVALID_TYPE)throw new Error(r+" at index "+t.startIndex+" isn't a valid token name");return e?new p.XPathTokenAnywhereElement(r,n):new d.XPathTokenElement(r,n);default:if(-1===i)throw new Error(r+" at index "+t.startIndex+" isn't a valid rule name");return e?new c.XPathRuleAnywhereElement(r,i):new h.XPathRuleElement(r,i)}}static findAll(t,e,r){return new m(r,e).evaluate(t)}evaluate(t){let e=new s.ParserRuleContext;e.addChild(t);let r=new Set([e]),n=0;for(;n<this.elements.length;){let t=new Set;for(let e of r)e.childCount>0&&this.elements[n].evaluate(e).forEach(t.add,t);n++,r=t}return r}}m.WILDCARD="*",m.NOT="!",r.XPath=m},{245:245,250:250,262:262,267:267,276:276,384:384,385:385,386:386,387:387,388:388,389:389,390:390,391:391}],378:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(276);let a=class{constructor(t,e,r){if(null==t||0===t.length)throw new Error("ruleName cannot be null or empty.");this._ruleName=t,this.bypassTokenType=e,this._label=r}get ruleName(){return this._ruleName}get label(){return this._label}get channel(){return s.Token.DEFAULT_CHANNEL}get text(){return null!=this._label?"<"+this._label+":"+this._ruleName+">":"<"+this._ruleName+">"}get type(){return this.bypassTokenType}get line(){return 0}get charPositionInLine(){return-1}get tokenIndex(){return-1}get startIndex(){return-1}get stopIndex(){return-1}get tokenSource(){}get inputStream(){}toString(){return this._ruleName+":"+this.bypassTokenType}};n([o.NotNull],a.prototype,"ruleName",null),n([o.Override],a.prototype,"channel",null),n([o.Override],a.prototype,"text",null),n([o.Override],a.prototype,"type",null),n([o.Override],a.prototype,"line",null),n([o.Override],a.prototype,"charPositionInLine",null),n([o.Override],a.prototype,"tokenIndex",null),n([o.Override],a.prototype,"startIndex",null),n([o.Override],a.prototype,"stopIndex",null),n([o.Override],a.prototype,"tokenSource",null),n([o.Override],a.prototype,"inputStream",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.RuleTagToken=a},{252:252,276:276}],381:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(248),s=t(252);let a=class extends o.CommonToken{constructor(t,e,r){super(e),this._tokenName=t,this._label=r}get tokenName(){return this._tokenName}get label(){return this._label}get text(){return null!=this._label?"<"+this._label+":"+this._tokenName+">":"<"+this._tokenName+">"}toString(){return this._tokenName+":"+this.type}};n([s.NotNull],a.prototype,"_tokenName",void 0),n([s.NotNull],a.prototype,"tokenName",null),n([s.Override],a.prototype,"text",null),n([s.Override],a.prototype,"toString",null),a=n([i(0,s.NotNull)],a),r.TokenTagToken=a},{248:248,252:252}],380:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(374),s=t(252);let a=class extends o.Chunk{constructor(t){if(super(),null==t)throw new Error("text cannot be null");this._text=t}get text(){return this._text}toString(){return"'"+this._text+"'"}};n([s.NotNull],a.prototype,"_text",void 0),n([s.NotNull],a.prototype,"text",null),n([s.Override],a.prototype,"toString",null),a=n([i(0,s.NotNull)],a),r.TextChunk=a},{252:252,374:374}],379:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(374),o=t(252);class s extends i.Chunk{constructor(t,e){if(super(),null==t||0===t.length)throw new Error("tag cannot be null or empty");this._tag=t,this._label=e}get tag(){return this._tag}get label(){return this._label}toString(){return null!=this._label?this._label+":"+this._tag:this._tag}}n([o.NotNull],s.prototype,"tag",null),n([o.Override],s.prototype,"toString",null),r.TagChunk=s},{252:252,374:374}],385:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{syntaxError(t,e,r,n,i,o){}}n([t(252).Override],i.prototype,"syntaxError",null),r.XPathLexerErrorListener=i},{252:252}],384:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(283),i=t(260),o=t(304),s=t(278),a=t(365);class u extends i.Lexer{constructor(t){super(t),this._interp=new o.LexerATNSimulator(u._ATN,this)}get vocabulary(){return u.VOCABULARY}get grammarFileName(){return"XPathLexer.g4"}get ruleNames(){return u.ruleNames}get serializedATN(){return u._serializedATN}get channelNames(){return u.channelNames}get modeNames(){return u.modeNames}action(t,e,r){switch(e){case 4:this.ID_action(t,r)}}ID_action(t,e){switch(e){case 0:let t=this.text;t.charAt(0)===t.charAt(0).toUpperCase()?this.type=u.TOKEN_REF:this.type=u.RULE_REF}}static get _ATN(){return u.__ATN||(u.__ATN=(new n.ATNDeserializer).deserialize(a.toCharArray(u._serializedATN))),u.__ATN}}u.TOKEN_REF=1,u.RULE_REF=2,u.ANYWHERE=3,u.ROOT=4,u.WILDCARD=5,u.BANG=6,u.ID=7,u.STRING=8,u.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],u.modeNames=["DEFAULT_MODE"],u.ruleNames=["ANYWHERE","ROOT","WILDCARD","BANG","ID","NameChar","NameStartChar","STRING"],u._LITERAL_NAMES=[void 0,void 0,void 0,"'//'","'/'","'*'","'!'"],u._SYMBOLIC_NAMES=[void 0,"TOKEN_REF","RULE_REF","ANYWHERE","ROOT","WILDCARD","BANG","ID","STRING"],u.VOCABULARY=new s.VocabularyImpl(u._LITERAL_NAMES,u._SYMBOLIC_NAMES,[]),u._serializedATNSegments=2,u._serializedATNSegment0='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02\n2\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06\x1f\n\x06\f\x06\x0e\x06"\v\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x07\t,\n\t\f\t\x0e\t/\v\t\x03\t\x03\t\x03-\x02\x02\n\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\x02\x0f\x02\x02\x11\x02\n\x03\x02\x02\x04\u02b6\x02\x02\x02\n\x02\x10\x02\x1d\x022\x02;\x02C\x02\\\x02a\x02a\x02c\x02|\x02\x81\x02\xa1\x02\xac\x02\xac\x02\xaf\x02\xaf\x02\xb7\x02\xb7\x02\xbc\x02\xbc\x02\xc2\x02\xd8\x02\xda\x02\xf8\x02\xfa\x02\u02c3\x02\u02c8\x02\u02d3\x02\u02e2\x02\u02e6\x02\u02ee\x02\u02ee\x02\u02f0\x02\u02f0\x02\u0302\x02\u0376\x02\u0378\x02\u0379\x02\u037c\x02\u037f\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038a\x02\u038c\x02\u038e\x02\u038e\x02\u0390\x02\u03a3\x02\u03a5\x02\u03f7\x02\u03f9\x02\u0483\x02\u0485\x02\u0489\x02\u048c\x02\u0531\x02\u0533\x02\u0558\x02\u055b\x02\u055b\x02\u0563\x02\u0589\x02\u0593\x02\u05bf\x02\u05c1\x02\u05c1\x02\u05c3\x02\u05c4\x02\u05c6\x02\u05c7\x02\u05c9\x02\u05c9\x02\u05d2\x02\u05ec\x02\u05f2\x02\u05f4\x02\u0602\x02\u0607\x02\u0612\x02\u061c\x02\u061e\x02\u061e\x02\u0622\x02\u066b\x02\u0670\x02\u06d5\x02\u06d7\x02\u06df\x02\u06e1\x02\u06ea\x02\u06ec\x02\u06fe\x02\u0701\x02\u0701\x02\u0711\x02\u074c\x02\u074f\x02\u07b3\x02\u07c2\x02\u07f7\x02\u07fc\x02\u07fc\x02\u0802\x02\u082f\x02\u0842\x02\u085d\x02\u08a2\x02\u08b6\x02\u08b8\x02\u08bf\x02\u08d6\x02\u0965\x02\u0968\x02\u0971\x02\u0973\x02\u0985\x02\u0987\x02\u098e\x02\u0991\x02\u0992\x02\u0995\x02\u09aa\x02\u09ac\x02\u09b2\x02\u09b4\x02\u09b4\x02\u09b8\x02\u09bb\x02\u09be\x02\u09c6\x02\u09c9\x02\u09ca\x02\u09cd\x02\u09d0\x02\u09d9\x02\u09d9\x02\u09de\x02\u09df\x02\u09e1\x02\u09e5\x02\u09e8\x02\u09f3\x02\u0a03\x02\u0a05\x02\u0a07\x02\u0a0c\x02\u0a11\x02\u0a12\x02\u0a15\x02\u0a2a\x02\u0a2c\x02\u0a32\x02\u0a34\x02\u0a35\x02\u0a37\x02\u0a38\x02\u0a3a\x02\u0a3b\x02\u0a3e\x02\u0a3e\x02\u0a40\x02\u0a44\x02\u0a49\x02\u0a4a\x02\u0a4d\x02\u0a4f\x02\u0a53\x02\u0a53\x02\u0a5b\x02\u0a5e\x02\u0a60\x02\u0a60\x02\u0a68\x02\u0a77\x02\u0a83\x02\u0a85\x02\u0a87\x02\u0a8f\x02\u0a91\x02\u0a93\x02\u0a95\x02\u0aaa\x02\u0aac\x02\u0ab2\x02\u0ab4\x02\u0ab5\x02\u0ab7\x02\u0abb\x02\u0abe\x02\u0ac7\x02\u0ac9\x02\u0acb\x02\u0acd\x02\u0acf\x02\u0ad2\x02\u0ad2\x02\u0ae2\x02\u0ae5\x02\u0ae8\x02\u0af1\x02\u0afb\x02\u0afb\x02\u0b03\x02\u0b05\x02\u0b07\x02\u0b0e\x02\u0b11\x02\u0b12\x02\u0b15\x02\u0b2a\x02\u0b2c\x02\u0b32\x02\u0b34\x02\u0b35\x02\u0b37\x02\u0b3b\x02\u0b3e\x02\u0b46\x02\u0b49\x02\u0b4a\x02\u0b4d\x02\u0b4f\x02\u0b58\x02\u0b59\x02\u0b5e\x02\u0b5f\x02\u0b61\x02\u0b65\x02\u0b68\x02\u0b71\x02\u0b73\x02\u0b73\x02\u0b84\x02\u0b85\x02\u0b87\x02\u0b8c\x02\u0b90\x02\u0b92\x02\u0b94\x02\u0b97\x02\u0b9b\x02\u0b9c\x02\u0b9e\x02\u0b9e\x02\u0ba0\x02\u0ba1\x02\u0ba5\x02\u0ba6\x02\u0baa\x02\u0bac\x02\u0bb0\x02\u0bbb\x02\u0bc0\x02\u0bc4\x02\u0bc8\x02\u0bca\x02\u0bcc\x02\u0bcf\x02\u0bd2\x02\u0bd2\x02\u0bd9\x02\u0bd9\x02\u0be8\x02\u0bf1\x02\u0c02\x02\u0c05\x02\u0c07\x02\u0c0e\x02\u0c10\x02\u0c12\x02\u0c14\x02\u0c2a\x02\u0c2c\x02\u0c3b\x02\u0c3f\x02\u0c46\x02\u0c48\x02\u0c4a\x02\u0c4c\x02\u0c4f\x02\u0c57\x02\u0c58\x02\u0c5a\x02\u0c5c\x02\u0c62\x02\u0c65\x02\u0c68\x02\u0c71\x02\u0c82\x02\u0c85\x02\u0c87\x02\u0c8e\x02\u0c90\x02\u0c92\x02\u0c94\x02\u0caa\x02\u0cac\x02\u0cb5\x02\u0cb7\x02\u0cbb\x02\u0cbe\x02\u0cc6\x02\u0cc8\x02\u0cca\x02\u0ccc\x02\u0ccf\x02\u0cd7\x02\u0cd8\x02\u0ce0\x02\u0ce0\x02\u0ce2\x02\u0ce5\x02\u0ce8\x02\u0cf1\x02\u0cf3\x02\u0cf4\x02\u0d03\x02\u0d05\x02\u0d07\x02\u0d0e\x02\u0d10\x02\u0d12\x02\u0d14\x02\u0d3c\x02\u0d3f\x02\u0d46\x02\u0d48\x02\u0d4a\x02\u0d4c\x02\u0d50\x02\u0d56\x02\u0d59\x02\u0d61\x02\u0d65\x02\u0d68\x02\u0d71\x02\u0d7c\x02\u0d81\x02\u0d84\x02\u0d85\x02\u0d87\x02\u0d98\x02\u0d9c\x02\u0db3\x02\u0db5\x02\u0dbd\x02\u0dbf\x02\u0dbf\x02\u0dc2\x02\u0dc8\x02\u0dcc\x02\u0dcc\x02\u0dd1\x02\u0dd6\x02\u0dd8\x02\u0dd8\x02\u0dda\x02\u0de1\x02\u0de8\x02\u0df1\x02\u0df4\x02\u0df5\x02\u0e03\x02\u0e3c\x02\u0e42\x02\u0e50\x02\u0e52\x02\u0e5b\x02\u0e83\x02\u0e84\x02\u0e86\x02\u0e86\x02\u0e89\x02\u0e8a\x02\u0e8c\x02\u0e8c\x02\u0e8f\x02\u0e8f\x02\u0e96\x02\u0e99\x02\u0e9b\x02\u0ea1\x02\u0ea3\x02\u0ea5\x02\u0ea7\x02\u0ea7\x02\u0ea9\x02\u0ea9\x02\u0eac\x02\u0ead\x02\u0eaf\x02\u0ebb\x02\u0ebd\x02\u0ebf\x02\u0ec2\x02\u0ec6\x02\u0ec8\x02\u0ec8\x02\u0eca\x02\u0ecf\x02\u0ed2\x02\u0edb\x02\u0ede\x02\u0ee1\x02\u0f02\x02\u0f02\x02\u0f1a\x02\u0f1b\x02\u0f22\x02\u0f2b\x02\u0f37\x02\u0f37\x02\u0f39\x02\u0f39\x02\u0f3b\x02\u0f3b\x02\u0f40\x02\u0f49\x02\u0f4b\x02\u0f6e\x02\u0f73\x02\u0f86\x02\u0f88\x02\u0f99\x02\u0f9b\x02\u0fbe\x02\u0fc8\x02\u0fc8\x02\u1002\x02\u104b\x02\u1052\x02\u109f\x02\u10a2\x02\u10c7\x02\u10c9\x02\u10c9\x02\u10cf\x02\u10cf\x02\u10d2\x02\u10fc\x02\u10fe\x02\u124a\x02\u124c\x02\u124f\x02\u1252\x02\u1258\x02\u125a\x02\u125a\x02\u125c\x02\u125f\x02\u1262\x02\u128a\x02\u128c\x02\u128f\x02\u1292\x02\u12b2\x02\u12b4\x02\u12b7\x02\u12ba\x02\u12c0\x02\u12c2\x02\u12c2\x02\u12c4\x02\u12c7\x02\u12ca\x02\u12d8\x02\u12da\x02\u1312\x02\u1314\x02\u1317\x02\u131a\x02\u135c\x02\u135f\x02\u1361\x02\u1382\x02\u1391\x02\u13a2\x02\u13f7\x02\u13fa\x02\u13ff\x02\u1403\x02\u166e\x02\u1671\x02\u1681\x02\u1683\x02\u169c\x02\u16a2\x02\u16ec\x02\u16f0\x02\u16fa\x02\u1702\x02\u170e\x02\u1710\x02\u1716\x02\u1722\x02\u1736\x02\u1742\x02\u1755\x02\u1762\x02\u176e\x02\u1770\x02\u1772\x02\u1774\x02\u1775\x02\u1782\x02\u17d5\x02\u17d9\x02\u17d9\x02\u17de\x02\u17df\x02\u17e2\x02\u17eb\x02\u180d\x02\u1810\x02\u1812\x02\u181b\x02\u1822\x02\u1879\x02\u1882\x02\u18ac\x02\u18b2\x02\u18f7\x02\u1902\x02\u1920\x02\u1922\x02\u192d\x02\u1932\x02\u193d\x02\u1948\x02\u196f\x02\u1972\x02\u1976\x02\u1982\x02\u19ad\x02\u19b2\x02\u19cb\x02\u19d2\x02\u19db\x02\u1a02\x02\u1a1d\x02\u1a22\x02\u1a60\x02\u1a62\x02\u1a7e\x02\u1a81\x02\u1a8b\x02\u1a92\x02\u1a9b\x02\u1aa9\x02\u1aa9\x02\u1ab2\x02\u1abf\x02\u1b02\x02\u1b4d\x02\u1b52\x02\u1b5b\x02\u1b6d\x02\u1b75\x02\u1b82\x02\u1bf5\x02\u1c02\x02\u1c39\x02\u1c42\x02\u1c4b\x02\u1c4f\x02\u1c7f\x02\u1c82\x02\u1c8a\x02\u1cd2\x02\u1cd4\x02\u1cd6\x02\u1cf8\x02\u1cfa\x02\u1cfb\x02\u1d02\x02\u1df7\x02\u1dfd\x02\u1f17\x02\u1f1a\x02\u1f1f\x02\u1f22\x02\u1f47\x02\u1f4a\x02\u1f4f\x02\u1f52\x02\u1f59\x02\u1f5b\x02\u1f5b\x02\u1f5d\x02\u1f5d\x02\u1f5f\x02\u1f5f\x02\u1f61\x02\u1f7f\x02\u1f82\x02\u1fb6\x02\u1fb8\x02\u1fbe\x02\u1fc0\x02\u1fc0\x02\u1fc4\x02\u1fc6\x02\u1fc8\x02\u1fce\x02\u1fd2\x02\u1fd5\x02\u1fd8\x02\u1fdd\x02\u1fe2\x02\u1fee\x02\u1ff4\x02\u1ff6\x02\u1ff8\x02\u1ffe\x02\u200d\x02\u2011\x02\u202c\x02\u2030\x02\u2041\x02\u2042\x02\u2056\x02\u2056\x02\u2062\x02\u2066\x02\u2068\x02\u2071\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209e\x02\u20d2\x02\u20de\x02\u20e3\x02\u20e3\x02\u20e7\x02\u20f2\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210c\x02\u2115\x02\u2117\x02\u2117\x02\u211b\x02\u211f\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212a\x02\u212a\x02\u212c\x02\u212f\x02\u2131\x02\u213b\x02\u213e\x02\u2141\x02\u2147\x02\u214b\x02\u2150\x02\u2150\x02\u2162\x02\u218a\x02\u2c02\x02\u2c30\x02\u2c32\x02\u2c60\x02\u2c62\x02\u2ce6\x02\u2ced\x02\u2cf5\x02\u2d02\x02\u2d27\x02\u2d29\x02\u2d29\x02\u2d2f\x02\u2d2f\x02\u2d32\x02\u2d69\x02\u2d71\x02\u2d71\x02\u2d81\x02\u2d98\x02\u2da2\x02\u2da8\x02\u2daa\x02\u2db0\x02\u2db2\x02\u2db8\x02\u2dba\x02\u2dc0\x02\u2dc2\x02\u2dc8\x02\u2dca\x02\u2dd0\x02\u2dd2\x02\u2dd8\x02\u2dda\x02\u2de0\x02\u2de2\x02\u2e01\x02\u2e31\x02\u2e31\x02\u3007\x02\u3009\x02\u3023\x02\u3031\x02\u3033\x02\u3037\x02\u303a\x02\u303e\x02\u3043\x02\u3098\x02\u309b\x02\u309c\x02\u309f\x02\u30a1\x02\u30a3\x02\u30fc\x02\u30fe\x02\u3101\x02\u3107\x02\u312f\x02\u3133\x02\u3190\x02\u31a2\x02\u31bc\x02\u31f2\x02\u3201\x02\u3402\x02\u4db7\x02\u4e02\x02\u9fd7\x02\ua002\x02\ua48e\x02\ua4d2\x02\ua4ff\x02\ua502\x02\ua60e\x02\ua612\x02\ua62d\x02\ua642\x02\ua671\x02\ua676\x02\ua67f\x02\ua681\x02\ua6f3\x02\ua719\x02\ua721\x02\ua724\x02\ua78a\x02\ua78d\x02\ua7b0\x02\ua7b2\x02\ua7b9\x02\ua7f9\x02\ua829\x02\ua842\x02\ua875\x02\ua882\x02\ua8c7\x02\ua8d2\x02\ua8db\x02\ua8e2\x02\ua8f9\x02\ua8fd\x02\ua8fd\x02\ua8ff\x02\ua8ff\x02\ua902\x02\ua92f\x02\ua932\x02\ua955\x02\ua962\x02\ua97e\x02\ua982\x02\ua9c2\x02\ua9d1\x02\ua9db\x02\ua9e2\x02\uaa00\x02\uaa02\x02\uaa38\x02\uaa42\x02\uaa4f\x02\uaa52\x02\uaa5b\x02\uaa62\x02\uaa78\x02\uaa7c\x02\uaac4\x02\uaadd\x02\uaadf\x02\uaae2\x02\uaaf1\x02\uaaf4\x02\uaaf8\x02\uab03\x02\uab08\x02\uab0b\x02\uab10\x02\uab13\x02\uab18\x02\uab22\x02\uab28\x02\uab2a\x02\uab30\x02\uab32\x02\uab5c\x02\uab5e\x02\uab67\x02\uab72\x02\uabec\x02\uabee\x02\uabef\x02\uabf2\x02\uabfb\x02\uac02\x02\ud7a5\x02\ud7b2\x02\ud7c8\x02\ud7cd\x02\ud7fd\x02\uf902\x02\ufa6f\x02\ufa72\x02\ufadb\x02\ufb02\x02\ufb08\x02\ufb15\x02\ufb19\x02\ufb1f\x02\ufb2a\x02\ufb2c\x02\ufb38\x02\ufb3a\x02\ufb3e\x02\ufb40\x02\ufb40\x02\ufb42\x02\ufb43\x02\ufb45\x02\ufb46\x02\ufb48\x02\ufbb3\x02\ufbd5\x02\ufd3f\x02\ufd52\x02\ufd91\x02\ufd94\x02\ufdc9\x02\ufdf2\x02\ufdfd\x02\ufe02\x02\ufe11\x02\ufe22\x02\ufe31\x02\ufe35\x02\ufe36\x02\ufe4f\x02\ufe51\x02\ufe72\x02\ufe76\x02\ufe78\x02\ufefe\x02\uff01\x02\uff01\x02\uff12\x02\uff1b\x02\uff23\x02\uff3c\x02\uff41\x02\uff41\x02\uff43\x02\uff5c\x02\uff68\x02\uffc0\x02\uffc4\x02\uffc9\x02\uffcc\x02\uffd1\x02\uffd4\x02\uffd9\x02\uffdc\x02\uffde\x02\ufffb\x02\ufffd\x02\x02\x03\r\x03\x0f\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xfc\x03\u0142\x03\u0176\x03\u01ff\x03\u01ff\x03\u0282\x03\u029e\x03\u02a2\x03\u02d2\x03\u02e2\x03\u02e2\x03\u0302\x03\u0321\x03\u0332\x03\u034c\x03\u0352\x03\u037c\x03\u0382\x03\u039f\x03\u03a2\x03\u03c5\x03\u03ca\x03\u03d1\x03\u03d3\x03\u03d7\x03\u0402\x03\u049f\x03\u04a2\x03\u04ab\x03\u04b2\x03\u04d5\x03\u04da\x03\u04fd\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03\u0807\x03\u080a\x03\u080a\x03\u080c\x03\u0837\x03\u0839\x03\u083a\x03\u083e\x03\u083e\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03\u08a0\x03\u08e2\x03\u08f4\x03\u08f6\x03\u08f7\x03\u0902\x03\u0917\x03\u0922\x03\u093b\x03\u0982\x03\u09b9\x03\u09c0\x03\u09c1\x03\u0a02\x03\u0a05\x03\u0a07\x03\u0a08\x03\u0a0e\x03\u0a15\x03\u0a17\x03\u0a19\x03\u0a1b\x03\u0a35\x03\u0a3a\x03\u0a3c\x03\u0a41\x03\u0a41\x03\u0a62\x03\u0a7e\x03\u0a82\x03\u0a9e\x03\u0ac2\x03\u0ac9\x03\u0acb\x03\u0ae8\x03\u0b02\x03\u0b37\x03\u0b42\x03\u0b57\x03\u0b62\x03\u0b74\x03\u0b82\x03\u0b93\x03\u0c02\x03\u0c4a\x03\u0c82\x03\u0cb4\x03\u0cc2\x03\u0cf4\x03\u1002\x03\u1048\x03\u1068\x03\u1071\x03\u1081\x03\u10bc\x03\u10bf\x03\u10bf\x03\u10d2\x03\u10ea\x03\u10f2\x03\u10fb\x03\u1102\x03\u1136\x03\u1138\x03\u1141\x03\u1152\x03\u1175\x03\u1178\x03\u1178\x03\u1182\x03\u11c6\x03\u11cc\x03\u11ce\x03\u11d2\x03\u11dc\x03\u11de\x03\u11de\x03\u1202\x03\u1213\x03\u1215\x03\u1239\x03\u1240\x03\u1240\x03\u1282\x03\u1288\x03\u128a\x03\u128a\x03\u128c\x03\u128f\x03\u1291\x03\u129f\x03\u12a1\x03\u12aa\x03\u12b2\x03\u12ec\x03\u12f2\x03\u12fb\x03\u1302\x03\u1305\x03\u1307\x03\u130e\x03\u1311\x03\u1312\x03\u1315\x03\u132a\x03\u132c\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133b\x03\u133e\x03\u1346\x03\u1349\x03\u134a\x03\u134d\x03\u134f\x03\u1352\x03\u1352\x03\u1359\x03\u1359\x03\u135f\x03\u1365\x03\u1368\x03\u136e\x03\u1372\x03\u1376\x03\u1402\x03\u144c\x03\u1452\x03\u145b\x03\u1482\x03\u14c7\x03\u14c9\x03\u14c9\x03\u14d2\x03\u14db\x03\u1582\x03\u15b7\x03\u15ba\x03\u15c2\x03\u15da\x03\u15df\x03\u1602\x03\u1642\x03\u1646\x03\u1646\x03\u1652\x03\u165b\x03\u1682\x03\u16b9\x03\u16c2\x03\u16cb\x03\u1702\x03\u171b\x03\u171f\x03\u172d\x03\u1732\x03\u173b\x03\u18a2\x03\u18eb\x03\u1901\x03\u1901\x03\u1ac2\x03\u1afa\x03\u1c02\x03\u1c0a\x03\u1c0c\x03\u1c38\x03\u1c3a\x03\u1c42\x03\u1c52\x03\u1c5b\x03\u1c74\x03\u1c91\x03\u1c94\x03\u1ca9\x03\u1cab\x03\u1cb8\x03\u2002\x03\u239b\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6a3a\x03\u6a42\x03\u6a60\x03\u6a62\x03\u6a6b\x03\u6ad2\x03\u6aef\x03\u6af2\x03\u6af6\x03\u6b02\x03\u6b38\x03\u6b42\x03\u6b45\x03\u6b52\x03\u6b5b\x03\u6b65\x03\u6b79\x03\u6b7f\x03\u6b91\x03\u6f02\x03\u6f46\x03\u6f52\x03\u6f80\x03\u6f91\x03\u6fa1\x03\u6fe2\x03\u6fe2\x03\u7002\x03\u87ee\x03\u8802\x03\u8af4\x03\ub002\x03\ub003\x03\ubc02\x03\ubc6c\x03\ubc72\x03\ubc7e\x03\ubc82\x03\ubc8a\x03\ubc92\x03\ubc9b\x03\ubc9f\x03\ubca0\x03\ubca2\x03\ubca5\x03\ud167\x03\ud16b\x03\ud16f\x03\ud184\x03\ud187\x03\ud18d\x03\ud1ac\x03\ud1af\x03\ud244\x03\ud246\x03\ud402\x03\ud456\x03\ud458\x03\ud49e\x03\ud4a0\x03\ud4a1\x03\ud4a4\x03\ud4a4\x03\ud4a7\x03\ud4a8\x03\ud4ab\x03\ud4ae\x03\ud4b0\x03\ud4bb\x03\ud4bd\x03\ud4bd\x03\ud4bf\x03\ud4c5\x03\ud4c7\x03\ud507\x03\ud509\x03\ud50c\x03\ud50f\x03\ud516\x03\ud518\x03\ud51e\x03\ud520\x03\ud53b\x03\ud53d\x03\ud540\x03\ud542\x03\ud546\x03\ud548\x03\ud548\x03\ud54c\x03\ud552\x03\ud554\x03\ud6a7\x03\ud6aa\x03\ud6c2\x03\ud6c4\x03\ud6dc\x03\ud6de\x03\ud6fc\x03\ud6fe\x03\ud716\x03\ud718\x03\ud736\x03\ud738\x03\ud750\x03\ud752\x03\ud770\x03\ud772\x03\ud78a\x03\ud78c\x03\ud7aa\x03\ud7ac\x03\ud7c4\x03\ud7c6\x03\ud7cd\x03\ud7d0\x03\ud801\x03\uda02\x03\uda38\x03\uda3d\x03\uda6e\x03\uda77\x03\uda77\x03\uda86\x03\uda86\x03\uda9d\x03\udaa1\x03\udaa3\x03\udab1\x03\ue002\x03\ue008\x03\ue00a\x03\ue01a\x03\ue01d\x03\ue023\x03\ue025\x03\ue026\x03\ue028\x03\ue02c\x03\ue802\x03\ue8c6\x03\ue8d2\x03\ue8d8\x03\ue902\x03\ue94c\x03\ue952\x03\ue95b\x03\uee02\x03\uee05\x03\uee07\x03\uee21\x03\uee23\x03\uee24\x03\uee26\x03\uee26\x03\uee29\x03\uee29\x03\uee2b\x03\uee34\x03\uee36\x03\uee39\x03\uee3b\x03\uee3b\x03\uee3d\x03\uee3d\x03\uee44\x03\uee44\x03\uee49\x03\uee49\x03\uee4b\x03\uee4b\x03\uee4d\x03\uee4d\x03\uee4f\x03\uee51\x03\uee53\x03\uee54\x03\uee56\x03\uee56\x03\uee59\x03\uee59\x03\uee5b\x03\uee5b\x03\uee5d\x03\uee5d\x03\uee5f\x03\uee5f\x03\uee61\x03\uee61\x03\uee63\x03\uee64\x03\uee66\x03\uee66\x03\uee69\x03\uee6c\x03\uee6e\x03\uee74\x03\uee76\x03\uee79\x03\uee7b\x03\uee7e\x03\uee80\x03\uee80\x03\uee82\x03\uee8b\x03\uee8d\x03\uee9d\x03\ueea3\x03\ueea5\x03\ueea7\x03\ueeab\x03\ueead\x03\ueebd\x03\x02\x04\ua6d8\x04\ua702\x04\ub736\x04\ub742\x04\ub81f\x04\ub822\x04\ucea3\x04\uf802\x04\ufa1f\x04\x03\x10\x03\x10"\x10\x81\x10\u0102\x10\u01f1\x10\u0240\x02C\x02\\\x02c\x02|\x02\xac\x02\xac\x02\xb7\x02\xb7\x02\xbc\x02\xbc\x02\xc2\x02\xd8\x02\xda\x02\xf8\x02\xfa\x02\u02c3\x02\u02c8\x02\u02d3\x02\u02e2\x02\u02e6\x02\u02ee\x02\u02ee\x02\u02f0\x02\u02f0\x02\u0372\x02\u0376\x02\u0378\x02\u0379\x02\u037c\x02\u037f\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038a\x02\u038c\x02\u038e\x02\u038e\x02\u0390\x02\u03a3\x02\u03a5\x02\u03f7\x02\u03f9\x02\u0483\x02\u048c\x02\u0531\x02\u0533\x02\u0558\x02\u055b\x02\u055b\x02\u0563\x02\u0589\x02\u05d2\x02\u05ec\x02\u05f2\x02\u05f4\x02\u0622\x02\u064c\x02\u0670\x02\u0671\x02\u0673\x02\u06d5\x02\u06d7\x02\u06d7\x02\u06e7\x02\u06e8\x02\u06f0\x02\u06f1\x02\u06fc\x02\u06fe\x02\u0701\x02\u0701\x02\u0712\x02\u0712\x02\u0714\x02\u0731\x02\u074f\x02\u07a7\x02\u07b3\x02\u07b3\x02\u07cc\x02\u07ec\x02\u07f6\x02\u07f7\x02\u07fc\x02\u07fc\x02\u0802\x02\u0817\x02\u081c\x02\u081c\x02\u0826\x02\u0826\x02\u082a\x02\u082a\x02\u0842\x02\u085a\x02\u08a2\x02\u08b6\x02\u08b8\x02\u08bf\x02\u0906\x02\u093b\x02\u093f\x02\u093f\x02\u0952\x02\u0952\x02\u095a\x02\u0963\x02\u0973\x02\u0982\x02\u0987\x02\u098e\x02\u0991\x02\u0992\x02\u0995\x02\u09aa\x02\u09ac\x02\u09b2\x02\u09b4\x02\u09b4\x02\u09b8\x02\u09bb\x02\u09bf\x02\u09bf\x02\u09d0\x02\u09d0\x02\u09de\x02\u09df\x02\u09e1\x02\u09e3\x02\u09f2\x02\u09f3\x02\u0a07\x02\u0a0c\x02\u0a11\x02\u0a12\x02\u0a15\x02\u0a2a\x02\u0a2c\x02\u0a32\x02\u0a34\x02\u0a35\x02\u0a37\x02\u0a38\x02\u0a3a\x02\u0a3b\x02\u0a5b\x02\u0a5e\x02\u0a60\x02\u0a60\x02\u0a74\x02\u0a76\x02\u0a87\x02\u0a8f\x02\u0a91\x02\u0a93\x02\u0a95\x02\u0aaa\x02\u0aac\x02\u0ab2\x02\u0ab4\x02\u0ab5\x02\u0ab7\x02\u0abb\x02\u0abf\x02\u0abf\x02\u0ad2\x02\u0ad2\x02\u0ae2\x02\u0ae3\x02\u0afb\x02\u0afb\x02\u0b07\x02\u0b0e\x02\u0b11\x02\u0b12\x02\u0b15\x02\u0b2a\x02\u0b2c\x02\u0b32\x02\u0b34\x02\u0b35\x02\u0b37\x02\u0b3b\x02\u0b3f\x02\u0b3f\x02\u0b5e\x02\u0b5f\x02\u0b61\x02\u0b63\x02\u0b73\x02\u0b73\x02\u0b85\x02\u0b85\x02\u0b87\x02\u0b8c\x02\u0b90\x02\u0b92\x02\u0b94\x02\u0b97\x02\u0b9b\x02\u0b9c\x02\u0b9e\x02\u0b9e\x02\u0ba0\x02\u0ba1\x02\u0ba5\x02\u0ba6\x02\u0baa\x02\u0bac\x02\u0bb0\x02\u0bbb\x02\u0bd2\x02\u0bd2\x02\u0c07\x02\u0c0e\x02\u0c10\x02\u0c12\x02\u0c14\x02\u0c2a\x02\u0c2c\x02\u0c3b\x02\u0c3f\x02\u0c3f\x02\u0c5a\x02\u0c5c\x02\u0c62\x02\u0c63\x02\u0c82\x02\u0c82\x02\u0c87\x02\u0c8e\x02\u0c90\x02\u0c92\x02\u0c94\x02\u0caa\x02\u0cac\x02\u0cb5\x02\u0cb7\x02\u0cbb\x02\u0cbf\x02\u0cbf\x02\u0ce0\x02\u0ce0\x02\u0ce2\x02\u0ce3\x02\u0cf3\x02\u0cf4\x02\u0d07\x02\u0d0e\x02\u0d10\x02\u0d12\x02\u0d14\x02\u0d3c\x02\u0d3f\x02\u0d3f\x02\u0d50\x02\u0d50\x02\u0d56\x02\u0d58\x02\u0d61\x02\u0d63\x02\u0d7c\x02\u0d81\x02\u0d87\x02\u0d98\x02\u0d9c\x02\u0db3\x02\u0db5\x02\u0dbd\x02\u0dbf\x02\u0dbf\x02\u0dc2\x02\u0dc8\x02\u0e03\x02\u0e32\x02\u0e34\x02\u0e35\x02\u0e42\x02\u0e48\x02\u0e83\x02\u0e84\x02\u0e86\x02\u0e86\x02\u0e89\x02\u0e8a\x02\u0e8c\x02\u0e8c\x02\u0e8f\x02\u0e8f\x02\u0e96\x02\u0e99\x02\u0e9b\x02\u0ea1\x02\u0ea3\x02\u0ea5\x02\u0ea7\x02\u0ea7\x02\u0ea9\x02\u0ea9\x02\u0eac\x02\u0ead\x02\u0eaf\x02\u0eb2\x02\u0eb4\x02\u0eb5\x02\u0ebf\x02\u0ebf\x02\u0ec2\x02\u0ec6\x02\u0ec8\x02\u0ec8\x02\u0ede\x02\u0ee1\x02\u0f02\x02\u0f02\x02\u0f42\x02\u0f49\x02\u0f4b\x02\u0f6e\x02\u0f8a\x02\u0f8e\x02\u1002\x02\u102c\x02\u1041\x02\u1041\x02\u1052\x02\u1057\x02\u105c\x02\u105f\x02\u1063\x02\u1063\x02\u1067\x02\u1068\x02\u1070\x02\u1072\x02\u1077\x02\u1083\x02\u1090\x02\u1090\x02\u10a2\x02\u10c7\x02\u10c9\x02\u10c9\x02\u10cf\x02\u10cf\x02\u10d2\x02\u10fc\x02\u10fe\x02\u124a\x02\u124c\x02\u124f\x02\u1252\x02\u1258\x02\u125a\x02\u125a\x02\u125c\x02\u125f\x02\u1262\x02\u128a\x02\u128c\x02\u128f\x02\u1292\x02\u12b2\x02\u12b4\x02\u12b7\x02\u12ba\x02\u12c0\x02\u12c2\x02\u12c2\x02\u12c4\x02\u12c7\x02\u12ca\x02\u12d8\x02\u12da\x02\u1312\x02\u1314\x02\u1317\x02\u131a\x02\u135c\x02\u1382\x02\u1391\x02\u13a2\x02\u13f7\x02\u13fa\x02\u13ff\x02\u1403\x02\u166e\x02\u1671\x02\u1681\x02\u1683\x02\u169c\x02\u16a2\x02\u16ec\x02\u16f0\x02\u16fa\x02\u1702\x02\u170e\x02\u1710\x02\u1713\x02\u1722\x02\u1733\x02\u1742\x02\u1753\x02\u1762\x02\u176e\x02\u1770\x02\u1772\x02\u1782\x02\u17b5\x02\u17d9\x02\u17d9\x02\u17de\x02\u17de\x02\u1822\x02\u1879\x02\u1882\x02\u1886\x02\u1889\x02\u18aa\x02\u18ac\x02\u18ac\x02\u18b2\x02\u18f7\x02\u1902\x02\u1920\x02\u1952\x02\u196f\x02\u1972\x02\u1976\x02\u1982\x02\u19ad\x02\u19b2\x02\u19cb\x02\u1a02\x02\u1a18\x02\u1a22\x02\u1a56\x02\u1aa9\x02\u1aa9\x02\u1b07\x02\u1b35\x02\u1b47\x02\u1b4d\x02\u1b85\x02\u1ba2\x02\u1bb0\x02\u1bb1\x02\u1bbc\x02\u1be7\x02\u1c02\x02\u1c25\x02\u1c4f\x02\u1c51\x02\u1c5c\x02\u1c7f\x02\u1c82\x02\u1c8a\x02\u1ceb\x02\u1cee\x02\u1cf0\x02\u1cf3\x02\u1cf7\x02\u1cf8\x02\u1d02\x02\u1dc1\x02\u1e02\x02\u1f17\x02\u1f1a\x02\u1f1f\x02\u1f22\x02\u1f47\x02\u1f4a\x02\u1f4f\x02\u1f52\x02\u1f59\x02\u1f5b\x02\u1f5b\x02\u1f5d\x02\u1f5d\x02\u1f5f\x02\u1f5f\x02\u1f61\x02\u1f7f\x02\u1f82\x02\u1fb6\x02\u1fb8\x02\u1fbe\x02\u1fc0\x02\u1fc0\x02\u1fc4\x02\u1fc6\x02\u1fc8\x02\u1fce\x02\u1fd2\x02\u1fd5\x02\u1fd8\x02\u1fdd\x02\u1fe2\x02\u1fee\x02\u1ff4\x02\u1ff6\x02\u1ff8\x02\u1ffe\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209e\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210c\x02\u2115\x02\u2117\x02\u2117\x02\u211b\x02\u211f\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212a\x02\u212a\x02\u212c\x02\u212f\x02\u2131\x02\u213b\x02\u213e\x02\u2141\x02\u2147\x02\u214b\x02\u2150\x02\u2150\x02\u2162\x02\u218a\x02\u2c02\x02\u2c30\x02\u2c32\x02\u2c60\x02\u2c62\x02\u2ce6\x02\u2ced\x02\u2cf0\x02\u2cf4\x02\u2cf5\x02\u2d02\x02\u2d27\x02\u2d29\x02\u2d29\x02\u2d2f\x02\u2d2f\x02\u2d32\x02\u2d69\x02\u2d71\x02\u2d71\x02\u2d82\x02\u2d98\x02\u2da2\x02\u2da8\x02\u2daa\x02\u2db0\x02\u2db2\x02\u2db8\x02\u2dba\x02\u2dc0\x02\u2dc2\x02\u2dc8\x02\u2dca\x02\u2dd0\x02\u2dd2\x02\u2dd8\x02\u2dda\x02\u2de0\x02\u2e31\x02\u2e31\x02\u3007\x02\u3009\x02\u3023\x02\u302b\x02\u3033\x02\u3037\x02\u303a\x02\u303e\x02\u3043\x02\u3098\x02\u309f\x02\u30a1\x02\u30a3\x02\u30fc\x02\u30fe\x02\u3101\x02\u3107\x02\u312f\x02\u3133\x02\u3190\x02\u31a2\x02\u31bc\x02\u31f2\x02\u3201\x02\u3402\x02\u4db7\x02\u4e02\x02\u9fd7\x02\ua002\x02\ua48e\x02\ua4d2\x02\ua4ff\x02\ua502\x02\ua60e\x02\ua612\x02\ua621\x02\ua62c\x02\ua62d\x02\ua642\x02\ua670\x02\ua681\x02\ua69f\x02\ua6a2\x02\ua6f1\x02\ua719\x02\ua721\x02\ua724\x02\ua78a\x02\ua78d\x02\ua7b0\x02\ua7b2\x02\ua7b9\x02\ua7f9\x02\ua803\x02\ua805\x02\ua807\x02\ua809\x02\ua80c\x02\ua80e\x02\ua824\x02\ua842\x02\ua875\x02\ua884\x02\ua8b5\x02\ua8f4\x02\ua8f9\x02\ua8fd\x02\ua8fd\x02\ua8ff\x02\ua8ff\x02\ua90c\x02\ua927\x02\ua932\x02\ua948\x02\ua962\x02\ua97e\x02\ua986\x02\ua9b4\x02\ua9d1\x02\ua9d1\x02\ua9e2\x02\ua9e6\x02\ua9e8\x02\ua9f1\x02\ua9fc\x02\uaa00\x02\uaa02\x02\uaa2a\x02\uaa42\x02\uaa44\x02\uaa46\x02\uaa4d\x02\uaa62\x02\uaa78\x02\uaa7c\x02\uaa7c\x02\uaa80\x02\uaab1\x02\uaab3\x02\uaab3\x02\uaab7\x02\uaab8\x02\uaabb\x02\uaabf\x02\uaac2\x02\uaac2\x02\uaac4\x02\uaac4\x02\uaadd\x02\uaadf\x02\uaae2\x02\uaaec\x02\uaaf4\x02\uaaf6\x02\uab03\x02\uab08\x02\uab0b\x02\uab10\x02\uab13\x02\uab18\x02\uab22\x02\uab28\x02\uab2a\x02\uab30\x02\uab32\x02\uab5c\x02\uab5e\x02\uab67\x02\uab72\x02\uabe4\x02\uac02\x02\ud7a5\x02\ud7b2\x02\ud7c8\x02\ud7cd\x02\ud7fd\x02\uf902\x02\ufa6f\x02\ufa72\x02\ufadb\x02\ufb02\x02\ufb08\x02\ufb15\x02\ufb19\x02\ufb1f\x02\ufb1f\x02\ufb21\x02\ufb2a\x02\ufb2c\x02\ufb38\x02\ufb3a\x02\ufb3e\x02\ufb40\x02\ufb40\x02\ufb42\x02\ufb43\x02\ufb45\x02\ufb46\x02\ufb48\x02\ufbb3\x02\ufbd5\x02\ufd3f\x02\ufd52\x02\ufd91\x02\ufd94\x02\ufdc9\x02\ufdf2\x02\ufdfd\x02\ufe72\x02\ufe76\x02\ufe78\x02\ufefe\x02\uff23\x02\uff3c\x02\uff43\x02\uff5c\x02\uff68\x02\uffc0\x02\uffc4\x02\uffc9\x02\uffcc\x02\uffd1\x02\uffd4\x02\uffd9\x02\uffdc\x02\uffde\x02\x02\x03\r\x03\x0f\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xfc\x03\u0142\x03\u0176\x03\u0282\x03\u029e\x03\u02a2\x03\u02d2\x03\u0302\x03\u0321\x03\u0332\x03\u034c\x03\u0352\x03\u0377\x03\u0382\x03\u039f\x03\u03a2\x03\u03c5\x03\u03ca\x03\u03d1\x03\u03d3\x03\u03d7\x03\u0402\x03\u049f\x03\u04b2\x03\u04d5\x03\u04da\x03\u04fd\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03\u0807\x03\u080a\x03\u080a\x03\u080c\x03\u0837\x03\u0839\x03\u083a\x03\u083e\x03\u083e\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03\u08a0\x03\u08e2\x03\u08f4\x03\u08f6\x03\u08f7\x03\u0902\x03\u0917\x03\u0922\x03\u093b\x03\u0982\x03\u09b9\x03\u09c0\x03\u09c1\x03\u0a02\x03\u0a02\x03\u0a12\x03\u0a15\x03\u0a17\x03\u0a19\x03\u0a1b\x03\u0a35\x03\u0a62\x03\u0a7e\x03\u0a82\x03\u0a9e\x03\u0ac2\x03\u0ac9\x03\u0acb\x03\u0ae6\x03\u0b02\x03\u0b37\x03\u0b42\x03\u0b57\x03\u0b62\x03\u0b74\x03\u0b82\x03\u0b93\x03\u0c02\x03\u0c4a\x03\u0c82\x03\u0cb4\x03\u0cc2\x03\u0cf4\x03\u1005\x03\u1039\x03\u1085\x03\u10b1\x03\u10d2\x03\u10ea\x03\u1105\x03\u1128\x03\u1152\x03\u1174\x03\u1178\x03\u1178\x03\u1185\x03\u11b4\x03\u11c3\x03\u11c6\x03\u11dc\x03\u11dc\x03\u11de\x03\u11de\x03\u1202\x03\u1213\x03\u1215\x03\u122d\x03\u1282\x03\u1288\x03\u128a\x03\u128a\x03\u128c\x03\u128f\x03\u1291\x03\u129f\x03\u12a1\x03\u12aa\x03\u12b2\x03\u12e0\x03\u1307\x03\u130e\x03\u1311\x03\u1312\x03\u1315\x03\u132a\x03\u132c\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133b\x03\u133f\x03\u133f\x03\u1352\x03\u1352\x03\u135f\x03\u1363\x03\u1402\x03\u1436\x03\u1449\x03\u144c\x03\u1482\x03\u14b1\x03\u14c6\x03\u14c7\x03\u14c9\x03\u14c9\x03\u1582\x03\u15b0\x03\u15da\x03\u15dd\x03\u1602\x03\u1631\x03\u1646\x03\u1646\x03\u1682\x03\u16ac\x03\u1702\x03\u171b\x03\u18a2\x03\u18e1\x03\u1901\x03\u1901\x03\u1ac2\x03\u1afa\x03\u1c02\x03\u1c0a\x03\u1c0c\x03\u1c30\x03\u1c42\x03\u1c42\x03\u1c74\x03\u1c91\x03\u2002\x03\u239b\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6a3a\x03\u6a42\x03\u6a60\x03\u6ad2\x03\u6aef\x03\u6b02\x03\u6b31\x03\u6b42\x03\u6b45\x03\u6b65\x03\u6b79\x03\u6b7f\x03\u6b91\x03\u6f02\x03\u6f46\x03\u6f52\x03\u6f52\x03\u6f95\x03\u6fa1\x03\u6fe2\x03\u6fe2\x03\u7002\x03\u87ee\x03\u8802\x03\u8af4\x03\ub002\x03\ub003\x03\ubc02\x03\ubc6c\x03\ubc72\x03\ubc7e\x03\ubc82\x03\ubc8a\x03\ubc92\x03\ubc9b\x03\ud402\x03\ud456\x03\ud458\x03\ud49e\x03\ud4a0\x03\ud4a1\x03\ud4a4\x03\ud4a4\x03\ud4a7\x03\ud4a8\x03\ud4ab\x03\ud4ae\x03\ud4b0\x03\ud4bb\x03\ud4bd\x03\ud4bd\x03\ud4bf\x03\ud4c5\x03\ud4c7\x03\ud507\x03\ud509\x03\ud50c\x03\ud50f\x03\ud516\x03\ud518\x03\ud51e\x03\ud520\x03\ud53b\x03\ud53d\x03\ud540\x03\ud542\x03\ud546\x03\ud548\x03\ud548',u._serializedATNSegment1="\x03\ud54c\x03\ud552\x03\ud554\x03\ud6a7\x03\ud6aa\x03\ud6c2\x03\ud6c4\x03\ud6dc\x03\ud6de\x03\ud6fc\x03\ud6fe\x03\ud716\x03\ud718\x03\ud736\x03\ud738\x03\ud750\x03\ud752\x03\ud770\x03\ud772\x03\ud78a\x03\ud78c\x03\ud7aa\x03\ud7ac\x03\ud7c4\x03\ud7c6\x03\ud7cd\x03\ue802\x03\ue8c6\x03\ue902\x03\ue945\x03\uee02\x03\uee05\x03\uee07\x03\uee21\x03\uee23\x03\uee24\x03\uee26\x03\uee26\x03\uee29\x03\uee29\x03\uee2b\x03\uee34\x03\uee36\x03\uee39\x03\uee3b\x03\uee3b\x03\uee3d\x03\uee3d\x03\uee44\x03\uee44\x03\uee49\x03\uee49\x03\uee4b\x03\uee4b\x03\uee4d\x03\uee4d\x03\uee4f\x03\uee51\x03\uee53\x03\uee54\x03\uee56\x03\uee56\x03\uee59\x03\uee59\x03\uee5b\x03\uee5b\x03\uee5d\x03\uee5d\x03\uee5f\x03\uee5f\x03\uee61\x03\uee61\x03\uee63\x03\uee64\x03\uee66\x03\uee66\x03\uee69\x03\uee6c\x03\uee6e\x03\uee74\x03\uee76\x03\uee79\x03\uee7b\x03\uee7e\x03\uee80\x03\uee80\x03\uee82\x03\uee8b\x03\uee8d\x03\uee9d\x03\ueea3\x03\ueea5\x03\ueea7\x03\ueeab\x03\ueead\x03\ueebd\x03\x02\x04\ua6d8\x04\ua702\x04\ub736\x04\ub742\x04\ub81f\x04\ub822\x04\ucea3\x04\uf802\x04\ufa1f\x041\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x03\x13\x03\x02\x02\x02\x05\x16\x03\x02\x02\x02\x07\x18\x03\x02\x02\x02\t\x1a\x03\x02\x02\x02\v\x1c\x03\x02\x02\x02\r%\x03\x02\x02\x02\x0f'\x03\x02\x02\x02\x11)\x03\x02\x02\x02\x13\x14\x071\x02\x02\x14\x15\x071\x02\x02\x15\x04\x03\x02\x02\x02\x16\x17\x071\x02\x02\x17\x06\x03\x02\x02\x02\x18\x19\x07,\x02\x02\x19\b\x03\x02\x02\x02\x1a\x1b\x07#\x02\x02\x1b\n\x03\x02\x02\x02\x1c \x05\x0f\b\x02\x1d\x1f\x05\r\x07\x02\x1e\x1d\x03\x02\x02\x02\x1f\"\x03\x02\x02\x02 \x1e\x03\x02\x02\x02 !\x03\x02\x02\x02!#\x03\x02\x02\x02\" \x03\x02\x02\x02#$\b\x06\x02\x02$\f\x03\x02\x02\x02%&\t\x02\x02\x02&\x0e\x03\x02\x02\x02'(\t\x03\x02\x02(\x10\x03\x02\x02\x02)-\x07)\x02\x02*,\v\x02\x02\x02+*\x03\x02\x02\x02,/\x03\x02\x02\x02-.\x03\x02\x02\x02-+\x03\x02\x02\x02.0\x03\x02\x02\x02/-\x03\x02\x02\x0201\x07)\x02\x021\x12\x03\x02\x02\x02\x05\x02 -\x03\x03\x06\x02",u._serializedATN=a.join([u._serializedATNSegment0,u._serializedATNSegment1],""),r.XPathLexer=u},{260:260,278:278,283:283,304:304,365:365}],387:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(267),o=t(252),s=t(372),a=t(383);class u extends a.XPathElement{constructor(t,e){super(t),this.ruleIndex=e}evaluate(t){let e=[];for(let r of s.Trees.getChildren(t))r instanceof i.ParserRuleContext&&(r.ruleIndex===this.ruleIndex&&!this.invert||r.ruleIndex!==this.ruleIndex&&this.invert)&&e.push(r);return e}}n([o.Override],u.prototype,"evaluate",null),r.XPathRuleElement=u},{252:252,267:267,372:372,383:383}],388:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(383);class a extends s.XPathElement{constructor(t,e){super(t),this.tokenType=e}evaluate(t){return o.Trees.findAllTokenNodes(t,this.tokenType)}}n([i.Override],a.prototype,"evaluate",null),r.XPathTokenAnywhereElement=a},{252:252,372:372,383:383}],389:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(371),s=t(372),a=t(383);class u extends a.XPathElement{constructor(t,e){super(t),this.tokenType=e}evaluate(t){let e=[];for(let r of s.Trees.getChildren(t))r instanceof o.TerminalNode&&(r.symbol.type===this.tokenType&&!this.invert||r.symbol.type!==this.tokenType&&this.invert)&&e.push(r);return e}}n([i.Override],u.prototype,"evaluate",null),r.XPathTokenElement=u},{252:252,371:371,372:372,383:383}],390:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(382),a=t(383);class u extends a.XPathElement{constructor(){super(s.XPath.WILDCARD)}evaluate(t){return this.invert?[]:o.Trees.getDescendants(t)}}n([i.Override],u.prototype,"evaluate",null),r.XPathWildcardAnywhereElement=u},{252:252,372:372,382:382,383:383}],391:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(382),a=t(383);class u extends a.XPathElement{constructor(){super(s.XPath.WILDCARD)}evaluate(t){let e=[];if(this.invert)return e;for(let r of o.Trees.getChildren(t))e.push(r);return e}}n([i.Override],u.prototype,"evaluate",null),r.XPathWildcardElement=u},{252:252,372:372,382:382,383:383}],386:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(383);class a extends s.XPathElement{constructor(t,e){super(t),this.ruleIndex=e}evaluate(t){return o.Trees.findAllRuleNodes(t,this.ruleIndex)}}n([i.Override],a.prototype,"evaluate",null),r.XPathRuleAnywhereElement=a},{252:252,372:372,383:383}],383:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.nodeName=t,this.invert=!1}toString(){let t=this.invert?"!":"";return Object.constructor.name+"["+t+this.nodeName+"]"}}n([t(252).Override],i.prototype,"toString",null),r.XPathElement=i},{252:252}],392:[function(t,e,r){e.exports=function(t,e,r){if(t.filter)return t.filter(e,r);if(null==t)throw new TypeError;if("function"!=typeof e)throw new TypeError;for(var i=[],o=0;o<t.length;o++)if(n.call(t,o)){var s=t[o];e.call(r,s,o,t)&&i.push(s)}return i};var n=Object.prototype.hasOwnProperty},{}],394:[function(t,e,r){(function(r){(function(){"use strict";var n=t(392);e.exports=function(){return n(["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],(function(t){return"function"==typeof r[t]}))}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{392:392}],395:[function(t,e,r){"use strict";r.toByteArray=function(t){var e,r,n=l(t),s=n[0],a=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),c=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[c++]=e>>16&255,u[c++]=e>>8&255,u[c++]=255&e;return 2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[c++]=255&e),1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[c++]=e>>8&255,u[c++]=255&e),u},r.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=0,a=r-i;s<a;s+=16383)o.push(c(t,s,s+16383>a?a:s+16383));return 1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],i[s.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t,e,r){for(var i,o,s=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},{}],397:[function(t,e,r){},{}],398:[function(t,e,r){"use strict";var n=t(429).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"\ufffd";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"\ufffd";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"\ufffd"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function p(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}r.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"\ufffd":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},{429:429}],429:[function(t,e,r){var n=t(400),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,r),r.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},{400:400}],400:[function(t,e,r){(function(e){(function(){"use strict";var e=t(395),n=t(416);r.Buffer=o,r.SlowBuffer=function(t){return+t!=t&&(t=0),o.alloc(+t)},r.INSPECT_MAX_BYTES=50;function i(t){if(t>2147483647)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return e.__proto__=o.prototype,e}function o(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}return s(t,e,r)}function s(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!o.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|h(t,e),n=i(r),s=n.write(t,e);return s!==r&&(n=n.slice(0,s)),n}(t,e);if(ArrayBuffer.isView(t))return l(t);if(null==t)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(k(t,ArrayBuffer)||t&&k(t.buffer,ArrayBuffer))return function(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return(n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r)).__proto__=o.prototype,n}(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return o.from(n,e,r);var s=function(t){if(o.isBuffer(t)){var e=0|c(t.length),r=i(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||F(t.length)?i(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return o.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function a(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return a(t),i(t<0?0:0|c(t))}function l(t){for(var e=t.length<0?0:0|c(t.length),r=i(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function c(t){if(t>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|t}function h(t,e){if(o.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||k(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(t).length;default:if(i)return n?-1:D(t).length;e=(""+e).toLowerCase(),i=!0}}function p(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function d(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),F(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=o.from(e,n)),o.isBuffer(e))return 0===e.length?-1:f(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):f(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function f(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var c=-1;for(o=r;o<a;o++)if(l(t,o)===l(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(l(t,o+p)!==l(e,p)){h=!1;break}if(h)return o}return-1}function y(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(F(a))return s;t[r+s]=a}return s}function m(t,e,r,n){return M(D(e,t.length-r),t,r,n)}function g(t,e,r,n){return M(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return g(t,e,r,n)}function T(t,e,r,n){return M(U(e),t,r,n)}function _(t,e,r,n){return M(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,r,n){return 0===r&&n===t.length?e.fromByteArray(t):e.fromByteArray(t.slice(r,n))}function b(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,l=t[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}r.kMaxLength=2147483647,o.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(e){return!1}}(),o.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(o.prototype,"parent",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.buffer}}),Object.defineProperty(o.prototype,"offset",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&o[Symbol.species]===o&&Object.defineProperty(o,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),o.poolSize=8192,o.from=function(t,e,r){return s(t,e,r)},o.prototype.__proto__=Uint8Array.prototype,o.__proto__=Uint8Array,o.alloc=function(t,e,r){return function(t,e,r){return a(t),t<=0?i(t):void 0!==e?"string"==typeof r?i(t).fill(e,r):i(t).fill(e):i(t)}(t,e,r)},o.allocUnsafe=function(t){return u(t)},o.allocUnsafeSlow=function(t){return u(t)},o.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==o.prototype},o.compare=function(t,e){if(k(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),k(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),!o.isBuffer(t)||!o.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},o.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return o.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=o.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(k(s,Uint8Array)&&(s=o.from(s)),!o.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},o.byteLength=h,o.prototype._isBuffer=!0,o.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)p(this,e,e+1);return this},o.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)p(this,e,e+3),p(this,e+1,e+2);return this},o.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)p(this,e,e+7),p(this,e+1,e+6),p(this,e+2,e+5),p(this,e+3,e+4);return this},o.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?b(this,0,t):function(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,r);case"utf8":case"utf-8":return b(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},o.prototype.toLocaleString=o.prototype.toString,o.prototype.equals=function(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===o.compare(this,t)},o.prototype.inspect=function(){var t="",e=r.INSPECT_MAX_BYTES;return t=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim(),this.length>e&&(t+=" ... "),"<Buffer "+t+">"},o.prototype.compare=function(t,e,r,n,i){if(k(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),!o.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),u=Math.min(s,a),l=this.slice(n,i),c=t.slice(e,r),h=0;h<u;++h)if(l[h]!==c[h]){s=l[h],a=c[h];break}return s<a?-1:a<s?1:0},o.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},o.prototype.indexOf=function(t,e,r){return d(this,t,e,r,!0)},o.prototype.lastIndexOf=function(t,e,r){return d(this,t,e,r,!1)},o.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return y(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return g(this,t,e,r);case"latin1":case"binary":return v(this,t,e,r);case"base64":return T(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function A(t,e,r){var n,i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var o="",s=e;s<r;++s)o+=(n=t[s])<16?"0"+n.toString(16):n.toString(16);return o}function N(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function O(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function w(t,e,r,n,i,s){if(!o.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function R(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,i,o){return e=+e,r>>>=0,o||R(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function P(t,e,r,i,o){return e=+e,r>>>=0,o||R(t,0,r,8),n.write(t,e,r,i,52,8),r+8}o.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return n.__proto__=o.prototype,n},o.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},o.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},o.prototype.readUInt8=function(t,e){return t>>>=0,e||O(t,1,this.length),this[t]},o.prototype.readUInt16LE=function(t,e){return t>>>=0,e||O(t,2,this.length),this[t]|this[t+1]<<8},o.prototype.readUInt16BE=function(t,e){return t>>>=0,e||O(t,2,this.length),this[t]<<8|this[t+1]},o.prototype.readUInt32LE=function(t,e){return t>>>=0,e||O(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},o.prototype.readUInt32BE=function(t,e){return t>>>=0,e||O(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},o.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},o.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},o.prototype.readInt8=function(t,e){return t>>>=0,e||O(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},o.prototype.readInt16LE=function(t,e){t>>>=0,e||O(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt16BE=function(t,e){t>>>=0,e||O(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt32LE=function(t,e){return t>>>=0,e||O(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},o.prototype.readInt32BE=function(t,e){return t>>>=0,e||O(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},o.prototype.readFloatLE=function(t,e){return t>>>=0,e||O(t,4,this.length),n.read(this,t,!0,23,4)},o.prototype.readFloatBE=function(t,e){return t>>>=0,e||O(t,4,this.length),n.read(this,t,!1,23,4)},o.prototype.readDoubleLE=function(t,e){return t>>>=0,e||O(t,8,this.length),n.read(this,t,!0,52,8)},o.prototype.readDoubleBE=function(t,e){return t>>>=0,e||O(t,8,this.length),n.read(this,t,!1,52,8)},o.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||w(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},o.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||w(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},o.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,1,255,0),this[e]=255&t,e+1},o.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},o.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},o.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},o.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},o.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);w(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},o.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);w(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},o.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},o.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},o.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},o.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},o.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},o.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},o.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},o.prototype.writeDoubleLE=function(t,e,r){return P(this,t,e,!0,r)},o.prototype.writeDoubleBE=function(t,e,r){return P(this,t,e,!1,r)},o.prototype.copy=function(t,e,r,n){if(!o.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(e,r,n);else if(this===t&&r<e&&e<n)for(var s=i-1;s>=0;--s)t[s+e]=this[s+r];else Uint8Array.prototype.set.call(t,this.subarray(r,n),e);return i},o.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!o.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var a=o.isBuffer(t)?t:o.from(t,n),u=a.length;if(0===u)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=a[s%u]}return this};var I=/[^+/0-9A-Za-z-_]/g;function D(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(t){return e.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(I,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function M(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function k(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function F(t){return t!=t}}).call(this)}).call(this,t(400).Buffer)},{395:395,400:400,416:416}],416:[function(t,e,r){r.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,l=u>>1,c=-7,h=r?i-1:0,p=r?-1:1,d=t[e+h];for(h+=p,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=p,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=n;c>0;s=256*s+t[e+h],h+=p,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=l}return(d?-1:1)*s*Math.pow(2,o-n)},r.write=function(t,e,r,n,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,f=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[r+d]=255&a,d+=f,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[r+d]=255&s,d+=f,s/=256,l-=8);t[r+d-f]|=128*y}},{}],406:[function(t,e,r){"use strict";var n=TypeError,i=Object.getOwnPropertyDescriptor;if(i)try{i({},"")}catch(f){i=null}var o=function(){throw new n},s=i?function(){try{return o}catch(t){try{return i(arguments,"callee").get}catch(e){return o}}}():o,a=t(414)(),u=Object.getPrototypeOf||function(t){return t.__proto__},l="undefined"==typeof Uint8Array?void 0:u(Uint8Array),c={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":a?u([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":a?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&a?u((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&a?u((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":a?u(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":a?Symbol:void 0,"%SymbolPrototype%":a?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":s,"%TypedArray%":l,"%TypedArrayPrototype%":l?l.prototype:void 0,"%TypeError%":n,"%TypeErrorPrototype%":n.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},h=t(413).call(Function.call,String.prototype.replace),p=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,d=/\\(\\)?/g;e.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');for(var r,o=(r=[],h(t,p,(function(t,e,n,i){r[r.length]=n?h(i,d,"$1"):e||t})),r),s=function(t,e){if(!(t in c))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===c[t]&&!e)throw new n("intrinsic "+t+" exists, but is not available. Please file an issue!");return c[t]}("%"+(o.length>0?o[0]:"")+"%",e),a=1;a<o.length;a+=1)if(null!=s)if(i&&a+1>=o.length){var u=i(s,o[a]);if(!e&&!(o[a]in s))throw new n("base intrinsic for "+t+" exists, but the property is not available.");s=u&&"get"in u&&!("originalValue"in u.get)?u.get:s[o[a]]}else s=s[o[a]];return s}},{413:413,414:414}],414:[function(t,e,r){(function(r){(function(){"use strict";var n=r.Symbol,i=t(415);e.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{415:415}],413:[function(t,e,r){"use strict";var n=t(412);e.exports=Function.prototype.bind||n},{412:412}],407:[function(t,e,r){"use strict";var n=t(413),i=t(406),o=i("%Function.prototype.apply%"),s=i("%Function.prototype.call%"),a=i("%Reflect.apply%",!0)||n.call(s,o),u=i("%Object.defineProperty%",!0);if(u)try{u({},"a",{value:1})}catch(c){u=null}e.exports=function(){return a(n,s,arguments)};var l=function(){return a(n,o,arguments)};u?u(e.exports,"apply",{value:l}):e.exports.apply=l},{406:406,413:413}],408:[function(t,e,r){"use strict";var n=t(406),i=t(407),o=i(n("String.prototype.indexOf"));e.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&o(t,".prototype.")?i(r):r}},{406:406,407:407}],409:[function(t,e,r){"use strict";var n=t(406)("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(i){n=null}e.exports=n},{406:406}],410:[function(t,e,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(t,e){return new Promise((function(r,n){function i(){void 0!==o&&t.removeListener("error",o),r([].slice.call(arguments))}var o;"error"!==e&&(o=function(r){t.removeListener(e,i),n(r)},t.once("error",o)),t.once(e,i)}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function l(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function h(t,e,r,n){var i,o,s,a;if(l(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),s=o[e]),void 0===s)s=o[e]=r,++t._eventsCount;else if("function"==typeof s?s=o[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=c(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function p(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=function(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}.bind(n);return i.listener=r,n.wrapFn=i,i}function d(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):y(i,i.length)}function f(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var l=u.length,c=y(u,l);for(r=0;r<l;++r)o(c[r],this,e)}return!0},a.prototype.addListener=function(t,e){return h(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return h(this,t,e,!0)},a.prototype.once=function(t,e){return l(e),this.on(t,p(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){return l(e),this.prependListener(t,p(this,t,e)),this},a.prototype.removeListener=function(t,e){var r,n,i,o,s;if(l(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},a.prototype.listeners=function(t){return d(this,t,!0)},a.prototype.rawListeners=function(t){return d(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},{}],411:[function(t,e,r){var n=Object.prototype.hasOwnProperty,i=Object.prototype.toString;e.exports=function(t,e,r){if("[object Function]"!==i.call(e))throw new TypeError("iterator must be a function");var o=t.length;if(o===+o)for(var s=0;s<o;s++)e.call(r,t[s],s,t);else for(var a in t)n.call(t,a)&&e.call(r,t[a],a,t)}},{}],412:[function(t,e,r){"use strict";var n=Array.prototype.slice,i=Object.prototype.toString;e.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,o=n.call(arguments,1),s=Math.max(0,e.length-o.length),a=[],u=0;u<s;u++)a.push("$"+u);if(r=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var i=e.apply(this,o.concat(n.call(arguments)));return Object(i)===i?i:this}return e.apply(t,o.concat(n.call(arguments)))})),e.prototype){var l=function(){};l.prototype=e.prototype,r.prototype=new l,l.prototype=null}return r}},{}],415:[function(t,e,r){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},{}],417:[function(t,e,r){"function"==typeof Object.create?e.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},{}],418:[function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,i=Object.prototype.toString,o=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i.call(t)},s=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i.call(t)&&"[object Function]"===i.call(t.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,e.exports=a?o:s},{}],419:[function(t,e,r){"use strict";var n=Object.prototype.toString,i=Function.prototype.toString,o=/^\s*(?:function)?\*/,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,a=Object.getPrototypeOf,u=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}(),l=u?a(u):{};e.exports=function(t){return"function"==typeof t&&(!!o.test(i.call(t))||(s?a(t)===l:"[object GeneratorFunction]"===n.call(t)))}},{}],420:[function(t,e,r){(function(r){(function(){"use strict";var n=t(411),i=t(394),o=t(408),s=o("Object.prototype.toString"),a=t(414)()&&"symbol"==typeof Symbol.toStringTag,u=i(),l=o("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},c=o("String.prototype.slice"),h={},p=t(409),d=Object.getPrototypeOf;a&&p&&d&&n(u,(function(t){var e=new r[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=d(e),i=p(n,Symbol.toStringTag);if(!i){var o=d(n);i=p(o,Symbol.toStringTag)}h[t]=i.get})),e.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!a){var e=c(s(t),8,-1);return l(u,e)>-1}return!!p&&function(t){var e=!1;return n(h,(function(r,n){if(!e)try{e=r.call(t)===n}catch(i){}})),e}(t)}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{394:394,408:408,409:409,411:411,414:414}],422:[function(t,e,r){"use strict";!function(){var t=1,r=2,n=3,i=4,o=5,s=6,a=7,u=8,l=9,c=10,h=11,p=function(){var e,p,d,f,y=1,m=2,g=3,v=4,T=5,_=6,E=7,b='Unexpected token "%0"',S="Unexpected end of path";function x(){for(var t,e=C();D("|");)H(),(t||(t=[e])).push(C());return t?{type:u,args:t}:e}function C(){return D("(")?A():O()}function A(){F("(");var e=x();F(")");for(var r,n=[];r=N();)n.push(r);return n.length?e.type===t?(e.parts=e.parts.concat(n),e):(n.unshift(e),{type:t,parts:n}):e}function N(){return D("[")?function(){F("[");var t=function(){if(D(":"))return H(),{type:c,toIdx:I()};var t=I();return D(":")?(H(),D("]")?{type:c,fromIdx:t}:{type:c,fromIdx:t,toIdx:I()}):{type:c,idx:t}}();return F("]"),{type:i,arg:t}}():D("{")?function(){F("{");var t=w();return F("}"),{type:n,arg:t}}():D("(")?A():void 0}function O(){U()||V(H());var e,n,i,o,s=!1;D("^")?(H(),s=!0):k()&&(e=H().val.substr(1));for(var a,u=[];a=M()?(n=void 0,i=void 0,o=void 0,i=H().val,o=j(),(D("*")||o.type===y||o.type===g)&&(n=H().val),{type:r,selector:i,prop:n}):N();)u.push(a);return{type:t,fromRoot:s,subst:e,parts:u}}function w(){for(var t,e=R();D("||");)H(),(t||(t=[e])).push(R());return t?{type:o,op:"||",args:t}:e}function R(){for(var t,e=L();D("&&");)H(),(t||(t=[e])).push(L());return t?{type:o,op:"&&",args:t}:e}function L(){for(var t=function t(){for(var e=function(){for(var t=P();D("+")||D("-");)t={type:a,op:H().val,args:[t,P()]};return t}();D("<")||D(">")||D("<=")||D(">=");)e={type:s,op:H().val,args:[e,t()]};return e}();D("==")||D("!=")||D("===")||D("!==")||D("^==")||D("==^")||D("^=")||D("=^")||D("$==")||D("==$")||D("$=")||D("=$")||D("*==")||D("==*")||D("*=")||D("=*");)t={type:s,op:H().val,args:[t,L()]};return t}function P(){for(var t=I();D("*")||D("/")||D("%");)t={type:a,op:H().val,args:[t,P()]};return t}function I(){return D("!")||D("-")?{type:l,op:H().val,arg:I()}:(t=j().type)===g||t===m||t===v||t===T?{type:h,val:H().val}:U()?O():D("(")?function(){F("(");var t=w();return F(")"),t}():V(H());var t}function D(t){var e=j();return e.type===_&&e.val===t}function U(){return M()||k()||D("^")}function M(){var t=j();if(t.type===_){var e=t.val;return"."===e||".."===e}return!1}function k(){var t=j();return t.type===y&&"$"===t.val[0]}function F(t){var e=H();e.type===_&&e.val===t||V(e)}function j(){if(null!==d)return d;var t=p;return d=B(),p=t,d}function B(){for(;t=e[p]," \r\n\t".indexOf(t)>-1;)++p;var t;if(p>=f)return{type:E,range:[p,p]};var r=function(){var t=p,r=e[p],n=e[p+1];if("."===r){if(G(n))return;return"."===e[++p]?{type:_,val:"..",range:[t,++p]}:{type:_,val:".",range:[t,p]}}if("="===n){var i=e[p+2];if("="===i){if("=!^$*".indexOf(r)>=0)return{type:_,val:r+n+i,range:[t,p+=3]}}else if("^$*".indexOf(i)>=0){if("="===r)return{type:_,val:r+n+i,range:[t,p+=3]}}else if("=!^$*><".indexOf(r)>=0)return{type:_,val:r+n,range:[t,p+=2]}}else if("="===r&&"^$*".indexOf(n)>=0)return{type:_,val:r+n,range:[t,p+=2]};return r!==n||"|"!==r&&"&"!==r?":{}()[]^+-*/%!><|".indexOf(r)>=0?{type:_,val:r,range:[t,++p]}:void 0:{type:_,val:r+n,range:[t,p+=2]}}();if(r||(r=function(){var t=e[p];if(z(t)){for(var r=p,n=t;++p<f&&W(t=e[p]);)n+=t;switch(n){case"true":case"false":return{type:v,val:"true"===n,range:[r,p]};case"null":return{type:T,val:null,range:[r,p]};default:return{type:y,val:n,range:[r,p]}}}}())||(r=function(){if('"'===e[p]||"'"===e[p]){for(var t,r=e[p],n=++p,i="",o=!1;p<f;){if("\\"===(t=e[p++]))t=e[p++];else if(('"'===t||"'"===t)&&t===r){o=!0;break}i+=t}return o?{type:g,val:i,range:[n,p]}:void 0}}())||(r=function(){var t=p,r=e[p],n="."===r;if(n||G(r)){for(var i=r;++p<f;){if("."===(r=e[p])){if(n)return;n=!0}else if(!G(r))break;i+=r}return{type:m,val:n?parseFloat(i):parseInt(i,10),range:[t,p]}}}()))return r;r={range:[p,p]},p>=f?r.type=E:r.val=e[p],V(r)}function H(){var t;return d?(p=d.range[1],t=d,d=null,t):B()}function G(t){return"0123456789".indexOf(t)>=0}function z(t){return"$"===t||"@"===t||"_"===t||t>="a"&&t<="z"||t>="A"&&t<="Z"}function W(t){return z(t)||t>="0"&&t<="9"}function V(t){t.type===E&&$(t,S),$(t,b,t.val)}function $(t,e){var r=Array.prototype.slice.call(arguments,2),n=e.replace(/%(\d)/g,(function(t,e){return r[e]||""})),i=new Error(n);throw i.column=t.range[0],i}return function(t){e=t.split(""),p=0,d=null,f=e.length;var r=x(),n=H();return n.type!==E&&V(n),r}}(),d=function(){var e,c,p,d;function f(){if(d.length)return d.shift();var t="v"+ ++p;return c.push(t),t}function y(){for(var t=arguments,e=t.length;e--;)d.push(t[e])}function m(t,r,n){if(t.prop){var i=S(t.prop),o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),h=f();e.push(o,"= [];",s,"= 0;",a,"=",n,".length;",h,"= [];","while(",s,"<",a,") {",u,"=",n,"[",s,"++];","if(",u,"!= null) {"),"*"===t.prop?(e.push("if(typeof ",u,'=== "object") {',"if(isArr(",u,")) {",o,"=",o,".concat(",u,");","}","else {","for(",l," in ",u,") {","if(",u,".hasOwnProperty(",l,")) {",c,"=",u,"[",l,"];"),x(o,c),e.push("}","}","}","}")):(e.push(c,"=",u,"[",i,"];"),x(o,c,h,a)),e.push("}","}",r,"=",a,"> 1 &&",h,".length?",h,".length > 1?","concat.apply(",o,",",h,") :",o,".concat(",h,"[0]) :",o,";"),y(o,s,a,u,l,c,h)}}function g(t,r,n){var i=t.prop,o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),h=f(),p=f();e.push(o,"=",n,".slice(),",p,"= [];","while(",o,".length) {",s,"=",o,".shift();"),i?e.push("if(typeof ",s,'=== "object" &&',s,") {"):e.push("if(typeof ",s,"!= null) {"),e.push(a,"= [];","if(isArr(",s,")) {",u,"= 0,",h,"=",s,".length;","while(",u,"<",h,") {",c,"=",s,"[",u,"++];"),i&&e.push("if(typeof ",c,'=== "object") {'),x(a,c),i&&e.push("}"),e.push("}","}","else {"),i?"*"!==i&&(e.push(c,"=",s,'["'+i+'"];'),x(p,c)):(x(p,s),e.push("if(typeof ",s,'=== "object") {')),e.push("for(",l," in ",s,") {","if(",s,".hasOwnProperty(",l,")) {",c,"=",s,"[",l,"];"),x(a,c),"*"===i&&x(p,c),e.push("}","}"),i||e.push("}"),e.push("}",a,".length &&",o,".unshift.apply(",o,",",a,");","}","}",r,"=",p,";"),y(o,s,a,u,l,c,h,p)}function v(t,r,n){var i=f(),o=f(),s=f(),a=f(),u=f();e.push(i,"= [];",o,"= 0;",s,"=",n,".length;","while(",o,"<",s,") {",u,"=",n,"[",o,"++];"),_(t.arg,a,u),e.push(A(t.arg,a),"&&",i,".push(",u,");","}",r,"=",i,";"),y(i,o,s,u,a)}function T(t,r,n){var i,o,s=t.arg;if(s.idx){var a=f();return _(s.idx,a,n),e.push(a,"< 0 && (",a,"=",n,".length +",a,");",r,"=",n,"[",a,"] == null? [] : [",n,"[",a,"]];"),y(a),!1}s.fromIdx?s.toIdx?(_(s.fromIdx,i=f(),n),_(s.toIdx,o=f(),n),e.push(r,"=",n,".slice(",i,",",o,");"),y(i,o)):(_(s.fromIdx,i=f(),n),e.push(r,"=",n,".slice(",i,");"),y(i)):(_(s.toIdx,o=f(),n),e.push(r,"=",n,".slice(0,",o,");"),y(o))}function _(c,p,d){switch(c.type){case t:!function(t,o,s){var a=t.parts,l=0,c=a.length;for(e.push(o,"=",t.fromRoot?"data":t.subst?"subst."+t.subst:s,";","isArr("+o+") || ("+o+" = ["+o+"]);");l<c;){var h=a[l++];switch(h.type){case r:".."===h.selector?g(h,o,o):m(h,o,o);break;case n:v(h,o,o);break;case i:T(h,o,o);break;case u:b(h,o,o)}}}(c,p,d);break;case u:b(c,p,d);break;case s:!function(r,n,i){var o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),p=f(),d=f(),m=r.args[0],g=r.args[1];e.push(n,"= false;"),_(m,o,i),_(g,s,i);var v=m.type===t,T=g.type===h;e.push(a,"="),v?e.push("true;"):e.push("isArr(",o,");"),e.push(u,"="),T?e.push("false;"):e.push("isArr(",s,");"),e.push("if("),v||e.push(a,"&&"),e.push(o,".length === 1) {",o,"=",o,"[0];",a,"= false;","}"),T||e.push("if(",u,"&&",s,".length === 1) {",s,"=",s,"[0];",u,"= false;","}"),e.push(l,"= 0;","if(",a,") {",p,"=",o,".length;"),T||(e.push("if(",u,") {",d,"=",s,".length;","while(",l,"<",p,"&& !",n,") {",c,"= 0;","while(",c,"<",d,") {"),E(r.op,[o,"[",l,"]"].join(""),[s,"[",c,"]"].join("")),e.push(n,"= true;","break;","}","++",c,";","}","++",l,";","}","}","else {")),e.push("while(",l,"<",p,") {"),E(r.op,[o,"[",l,"]"].join(""),s),e.push(n,"= true;","break;","}","++",l,";","}"),T||e.push("}"),e.push("}"),T||(e.push("else if(",u,") {",d,"=",s,".length;","while(",l,"<",d,") {"),E(r.op,o,[s,"[",l,"]"].join("")),e.push(n,"= true;","break;","}","++",l,";","}","}")),e.push("else {",n,"=",D[r.op](o,s),";","}"),y(o,s,a,u,l,c,p,d)}(c,p,d);break;case a:!function(t,r,n){var i=f(),o=f(),s=t.args;_(s[0],i,n),_(s[1],o,n),e.push(r,"=",D[t.op](N(s[0],i),N(s[1],o)),";"),y(i,o)}(c,p,d);break;case o:!function(t,r,n){var i,o=[],s=t.args,a=s.length,u=0;switch(e.push(r,"= false;"),t.op){case"&&":for(;u<a;)o.push(i=f()),_(s[u],i,n),e.push("if(",A(s[u++],i),") {");e.push(r,"= true;");break;case"||":for(;u<a;)o.push(i=f()),_(s[u],i,n),e.push("if(",A(s[u],i),") {",r,"= true;","}"),1+u++<a&&e.push("else {");--a}for(;a--;)e.push("}");y.apply(null,o)}(c,p,d);break;case l:!function(t,r,n){var i=f(),o=t.arg;switch(_(o,i,n),t.op){case"!":e.push(r,"= !",A(o,i)+";");break;case"-":e.push(r,"= -",N(o,i)+";")}y(i)}(c,p,d);break;case h:e.push(p,"="),x=c.val,e.push("string"==typeof x?S(x):null===x?"null":x),e.push(";")}var x}function E(t,r,n){e.push("if(",D[t](r,n),") {")}function b(t,r,n){for(var i=[],o=t.args,s=o.length,a=0;a<s;)i.push(f()),_(o[a],i[a++],n);e.push(r,"= concat.call(",i.join(","),");"),y.apply(null,i)}function S(t){return"'"+t.replace(/\\/g,"\\\\").replace(/'/g,"\\'")+"'"}function x(t,r,n,i){e.push("if(typeof ",r,'!== "undefined") {',"if(isArr(",r,")) {"),n&&(e.push(i,"> 1?"),C(n,r),e.push(":")),e.push(t,"=",t,".length?",t,".concat(",r,") :",r,".slice()",";","}","else {"),n&&e.push("if(",n,".length) {",t,"= concat.apply(",t,",",n,");",n,"= [];","}"),C(t,r),e.push(";","}","}")}function C(t,r){e.push(t,".length?",t,".push(",r,") :",t,"[0] =",r)}function A(e,r){switch(e.type){case o:return r;case h:return"!!"+r;case t:return r+".length > 0";default:return["(typeof ",r,'=== "boolean"?',r,":","isArr(",r,")?",r,".length > 0 : !!",r,")"].join("")}}function N(e,r){switch(e.type){case h:return r;case t:return r+"[0]";default:return["(isArr(",r,")?",r,"[0] : ",r,")"].join("")}}function O(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".indexOf(",e,") === 0"].join("")}function w(t,e){return[t,"!= null &&",e,"!= null &&",t,".toString().toLowerCase().indexOf(",e,".toString().toLowerCase()) === 0"].join("")}function R(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".length >=",e,".length &&",t,".lastIndexOf(",e,") ===",t,".length -",e,".length"].join("")}function L(t,e){return[t,"!= null &&",e,"!= null &&","(",t,"=",t,".toString()).length >=","(",e,"=",e,".toString()).length &&","(",t,".toLowerCase()).lastIndexOf(","(",e,".toLowerCase())) ===",t,".length -",e,".length"].join("")}function P(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".indexOf(",e,") > -1"].join("")}function I(t,e){return[t,"!= null && ",e,"!= null &&",t,".toString().toLowerCase().indexOf(",e,".toString().toLowerCase()) > -1"].join("")}var D={"===":function(t,e){return t+"==="+e},"==":function(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string"?',t,".toLowerCase() ===",e,".toLowerCase() :"+t,"==",e].join("")},">=":function(t,e){return t+">="+e},">":function(t,e){return t+">"+e},"<=":function(t,e){return t+"<="+e},"<":function(t,e){return t+"<"+e},"!==":function(t,e){return t+"!=="+e},"!=":function(t,e){return t+"!="+e},"^==":O,"==^":function(t,e){return O(e,t)},"^=":w,"=^":function(t,e){return w(e,t)},"$==":R,"==$":function(t,e){return R(e,t)},"$=":L,"=$":function(t,e){return L(e,t)},"*==":P,"==*":function(t,e){return P(e,t)},"=*":function(t,e){return I(e,t)},"*=":I,"+":function(t,e){return t+"+"+e},"-":function(t,e){return t+"-"+e},"*":function(t,e){return t+"*"+e},"/":function(t,e){return t+"/"+e},"%":function(t,e){return t+"%"+e}};return function(r){if(e=[],c=["res"],p=0,d=[],_(r,"res","data"),e.unshift("var ",Array.isArray?"isArr = Array.isArray":'toStr = Object.prototype.toString, isArr = function(o) { return toStr.call(o) === "[object Array]"; }',", concat = Array.prototype.concat",",",c.join(","),";"),r.type===t){var n=r.parts[r.parts.length-1];n&&n.type===i&&"idx"in n.arg&&e.push("res = res[0];")}return e.push("return res;"),e.join("")}}();function f(t){return Function("data,subst",d(p(t)))}var y={},m=[],g={cacheSize:100},v={cacheSize:function(t,e){if(e<t&&m.length>e)for(var r=m.splice(0,m.length-e),n=r.length;n--;)delete y[r[n]]}},T=function(t,e,r){return y[t]||(y[t]=f(t),m.push(t)>g.cacheSize&&delete y[m.shift()]),y[t](e,r||{})};T.version="0.3.4",T.params=function(t){if(!arguments.length)return g;for(var e in t)t.hasOwnProperty(e)&&(v[e]&&v[e](g[e],t[e]),g[e]=t[e])},T.compile=f,T.apply=T,"object"==typeof e&&"object"==typeof e.exports?e.exports=T:"object"==typeof modules?modules.define("jspath",(function(t){t(T)})):window.JSPath=T}()},{}],426:[function(t,e,r){"use strict";function n(t){var e=this;if(e instanceof n||(e=new n),e.tail=null,e.head=null,e.length=0,t&&"function"==typeof t.forEach)t.forEach((function(t){e.push(t)}));else if(arguments.length>0)for(var r=0,i=arguments.length;r<i;r++)e.push(arguments[r]);return e}function i(t,e,r){var n=e===t.head?new a(r,null,e,t):new a(r,e,e.next,t);return null===n.next&&(t.tail=n),null===n.prev&&(t.head=n),t.length++,n}function o(t,e){t.tail=new a(e,t.tail,null,t),t.head||(t.head=t.tail),t.length++}function s(t,e){t.head=new a(e,null,t.head,t),t.tail||(t.tail=t.head),t.length++}function a(t,e,r,n){if(!(this instanceof a))return new a(t,e,r,n);this.list=n,this.value=t,e?(e.next=this,this.prev=e):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}e.exports=n,n.Node=a,n.create=n,n.prototype.removeNode=function(t){if(t.list!==this)throw new Error("removing node which does not belong to this list");var e=t.next,r=t.prev;return e&&(e.prev=r),r&&(r.next=e),t===this.head&&(this.head=e),t===this.tail&&(this.tail=r),t.list.length--,t.next=null,t.prev=null,t.list=null,e},n.prototype.unshiftNode=function(t){if(t!==this.head){t.list&&t.list.removeNode(t);var e=this.head;t.list=this,t.next=e,e&&(e.prev=t),this.head=t,this.tail||(this.tail=t),this.length++}},n.prototype.pushNode=function(t){if(t!==this.tail){t.list&&t.list.removeNode(t);var e=this.tail;t.list=this,t.prev=e,e&&(e.next=t),this.tail=t,this.head||(this.head=t),this.length++}},n.prototype.push=function(){for(var t=0,e=arguments.length;t<e;t++)o(this,arguments[t]);return this.length},n.prototype.unshift=function(){for(var t=0,e=arguments.length;t<e;t++)s(this,arguments[t]);return this.length},n.prototype.pop=function(){if(this.tail){var t=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,t}},n.prototype.shift=function(){if(this.head){var t=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,t}},n.prototype.forEach=function(t,e){e=e||this;for(var r=this.head,n=0;null!==r;n++)t.call(e,r.value,n,this),r=r.next},n.prototype.forEachReverse=function(t,e){e=e||this;for(var r=this.tail,n=this.length-1;null!==r;n--)t.call(e,r.value,n,this),r=r.prev},n.prototype.get=function(t){for(var e=0,r=this.head;null!==r&&e<t;e++)r=r.next;if(e===t&&null!==r)return r.value},n.prototype.getReverse=function(t){for(var e=0,r=this.tail;null!==r&&e<t;e++)r=r.prev;if(e===t&&null!==r)return r.value},n.prototype.map=function(t,e){e=e||this;for(var r=new n,i=this.head;null!==i;)r.push(t.call(e,i.value,this)),i=i.next;return r},n.prototype.mapReverse=function(t,e){e=e||this;for(var r=new n,i=this.tail;null!==i;)r.push(t.call(e,i.value,this)),i=i.prev;return r},n.prototype.reduce=function(t,e){var r,n=this.head;if(arguments.length>1)r=e;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var i=0;null!==n;i++)r=t(r,n.value,i),n=n.next;return r},n.prototype.reduceReverse=function(t,e){var r,n=this.tail;if(arguments.length>1)r=e;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var i=this.length-1;null!==n;i--)r=t(r,n.value,i),n=n.prev;return r},n.prototype.toArray=function(){for(var t=new Array(this.length),e=0,r=this.head;null!==r;e++)t[e]=r.value,r=r.next;return t},n.prototype.toArrayReverse=function(){for(var t=new Array(this.length),e=0,r=this.tail;null!==r;e++)t[e]=r.value,r=r.prev;return t},n.prototype.slice=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var r=new n;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=0,o=this.head;null!==o&&i<t;i++)o=o.next;for(;null!==o&&i<e;i++,o=o.next)r.push(o.value);return r},n.prototype.sliceReverse=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var r=new n;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=this.length,o=this.tail;null!==o&&i>e;i--)o=o.prev;for(;null!==o&&i>t;i--,o=o.prev)r.push(o.value);return r},n.prototype.splice=function(t,e){t>this.length&&(t=this.length-1),t<0&&(t=this.length+t);for(var r=0,n=this.head;null!==n&&r<t;r++)n=n.next;var o=[];for(r=0;n&&r<e;r++)o.push(n.value),n=this.removeNode(n);for(null===n&&(n=this.tail),n!==this.head&&n!==this.tail&&(n=n.prev),r=2;r<arguments.length;r++)n=i(this,n,arguments[r]);return o},n.prototype.reverse=function(){for(var t=this.head,e=this.tail,r=t;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=e,this.tail=t,this};try{t(425)(n)}catch(u){}},{425:425}],425:[function(t,e,r){"use strict";e.exports=function(t){t.prototype[Symbol.iterator]=function*(){for(let t=this.head;t;t=t.next)yield t.value}}},{}],430:[function(t,e,r){(function(e){(function(){!function(r){r.parser=function(t,e){return new o(t,e)},r.SAXParser=o,r.SAXStream=a,r.createStream=function(t,e){return new a(t,e)},r.MAX_BUFFER_LENGTH=65536;var n,i=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(t,e){if(!(this instanceof o))return new o(t,e);!function(t){for(var e=0,r=i.length;e<r;e++)t[i[e]]=""}(this),this.q=this.c="",this.bufferCheckPosition=r.MAX_BUFFER_LENGTH,this.opt=e||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!t,this.noscript=!(!t&&!this.opt.noscript),this.state=x.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(r.XML_ENTITIES):Object.create(r.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(h)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),A(this,"onready")}r.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(r);return e}),o.prototype={end:function(){L(this)},write:function(t){if(this.error)throw this.error;if(this.closed)return R(this,"Cannot write after close. Assign an onready handler.");if(null===t)return L(this);"object"==typeof t&&(t=t.toString());for(var e,n,o,s,a,c=0,h="";h=j(t,c++),this.c=h,h;)switch(this.trackPosition&&(this.position++,"\n"===h?(this.line++,this.column=0):this.column++),this.state){case x.BEGIN:if(this.state=x.BEGIN_WHITESPACE,"\ufeff"===h)continue;F(this,h);continue;case x.BEGIN_WHITESPACE:F(this,h);continue;case x.TEXT:if(this.sawRoot&&!this.closedRoot){for(var E=c-1;h&&"<"!==h&&"&"!==h;)(h=j(t,c++))&&this.trackPosition&&(this.position++,"\n"===h?(this.line++,this.column=0):this.column++);this.textNode+=t.substring(E,c-1)}"<"!==h||this.sawRoot&&this.closedRoot&&!this.strict?(m(h)||this.sawRoot&&!this.closedRoot||P(this,"Text data outside of root node."),"&"===h?this.state=x.TEXT_ENTITY:this.textNode+=h):(this.state=x.OPEN_WAKA,this.startTagPosition=this.position);continue;case x.SCRIPT:"<"===h?this.state=x.SCRIPT_ENDING:this.script+=h;continue;case x.SCRIPT_ENDING:"/"===h?this.state=x.CLOSE_TAG:(this.script+="<"+h,this.state=x.SCRIPT);continue;case x.OPEN_WAKA:if("!"===h)this.state=x.SGML_DECL,this.sgmlDecl="";else if(m(h));else if(T(p,h))this.state=x.OPEN_TAG,this.tagName=h;else if("/"===h)this.state=x.CLOSE_TAG,this.tagName="";else if("?"===h)this.state=x.PROC_INST,this.procInstName=this.procInstBody="";else{if(P(this,"Unencoded <"),this.startTagPosition+1<this.position){var b=this.position-this.startTagPosition;h=new Array(b).join(" ")+h}this.textNode+="<"+h,this.state=x.TEXT}continue;case x.SGML_DECL:(this.sgmlDecl+h).toUpperCase()===u?(N(this,"onopencdata"),this.state=x.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+h==="--"?(this.state=x.COMMENT,this.comment="",this.sgmlDecl=""):(this.sgmlDecl+h).toUpperCase()===l?(this.state=x.DOCTYPE,(this.doctype||this.sawRoot)&&P(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===h?(N(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=x.TEXT):g(h)?(this.state=x.SGML_DECL_QUOTED,this.sgmlDecl+=h):this.sgmlDecl+=h;continue;case x.SGML_DECL_QUOTED:h===this.q&&(this.state=x.SGML_DECL,this.q=""),this.sgmlDecl+=h;continue;case x.DOCTYPE:">"===h?(this.state=x.TEXT,N(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=h,"["===h?this.state=x.DOCTYPE_DTD:g(h)&&(this.state=x.DOCTYPE_QUOTED,this.q=h));continue;case x.DOCTYPE_QUOTED:this.doctype+=h,h===this.q&&(this.q="",this.state=x.DOCTYPE);continue;case x.DOCTYPE_DTD:this.doctype+=h,"]"===h?this.state=x.DOCTYPE:g(h)&&(this.state=x.DOCTYPE_DTD_QUOTED,this.q=h);continue;case x.DOCTYPE_DTD_QUOTED:this.doctype+=h,h===this.q&&(this.state=x.DOCTYPE_DTD,this.q="");continue;case x.COMMENT:"-"===h?this.state=x.COMMENT_ENDING:this.comment+=h;continue;case x.COMMENT_ENDING:"-"===h?(this.state=x.COMMENT_ENDED,this.comment=w(this.opt,this.comment),this.comment&&N(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+h,this.state=x.COMMENT);continue;case x.COMMENT_ENDED:">"!==h?(P(this,"Malformed comment"),this.comment+="--"+h,this.state=x.COMMENT):this.state=x.TEXT;continue;case x.CDATA:"]"===h?this.state=x.CDATA_ENDING:this.cdata+=h;continue;case x.CDATA_ENDING:"]"===h?this.state=x.CDATA_ENDING_2:(this.cdata+="]"+h,this.state=x.CDATA);continue;case x.CDATA_ENDING_2:">"===h?(this.cdata&&N(this,"oncdata",this.cdata),N(this,"onclosecdata"),this.cdata="",this.state=x.TEXT):"]"===h?this.cdata+="]":(this.cdata+="]]"+h,this.state=x.CDATA);continue;case x.PROC_INST:"?"===h?this.state=x.PROC_INST_ENDING:m(h)?this.state=x.PROC_INST_BODY:this.procInstName+=h;continue;case x.PROC_INST_BODY:if(!this.procInstBody&&m(h))continue;"?"===h?this.state=x.PROC_INST_ENDING:this.procInstBody+=h;continue;case x.PROC_INST_ENDING:">"===h?(N(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=x.TEXT):(this.procInstBody+="?"+h,this.state=x.PROC_INST_BODY);continue;case x.OPEN_TAG:T(d,h)?this.tagName+=h:(I(this),">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:(m(h)||P(this,"Invalid character in tag name"),this.state=x.ATTRIB));continue;case x.OPEN_TAG_SLASH:">"===h?(M(this,!0),k(this)):(P(this,"Forward-slash in opening tag not followed by >"),this.state=x.ATTRIB);continue;case x.ATTRIB:if(m(h))continue;">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:T(p,h)?(this.attribName=h,this.attribValue="",this.state=x.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case x.ATTRIB_NAME:"="===h?this.state=x.ATTRIB_VALUE:">"===h?(P(this,"Attribute without value"),this.attribValue=this.attribName,U(this),M(this)):m(h)?this.state=x.ATTRIB_NAME_SAW_WHITE:T(d,h)?this.attribName+=h:P(this,"Invalid attribute name");continue;case x.ATTRIB_NAME_SAW_WHITE:if("="===h)this.state=x.ATTRIB_VALUE;else{if(m(h))continue;P(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",N(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===h?M(this):T(p,h)?(this.attribName=h,this.state=x.ATTRIB_NAME):(P(this,"Invalid attribute name"),this.state=x.ATTRIB)}continue;case x.ATTRIB_VALUE:if(m(h))continue;g(h)?(this.q=h,this.state=x.ATTRIB_VALUE_QUOTED):(P(this,"Unquoted attribute value"),this.state=x.ATTRIB_VALUE_UNQUOTED,this.attribValue=h);continue;case x.ATTRIB_VALUE_QUOTED:if(h!==this.q){"&"===h?this.state=x.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=h;continue}U(this),this.q="",this.state=x.ATTRIB_VALUE_CLOSED;continue;case x.ATTRIB_VALUE_CLOSED:m(h)?this.state=x.ATTRIB:">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:T(p,h)?(P(this,"No whitespace between attributes"),this.attribName=h,this.attribValue="",this.state=x.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case x.ATTRIB_VALUE_UNQUOTED:if(!v(h)){"&"===h?this.state=x.ATTRIB_VALUE_ENTITY_U:this.attribValue+=h;continue}U(this),">"===h?M(this):this.state=x.ATTRIB;continue;case x.CLOSE_TAG:if(this.tagName)">"===h?k(this):T(d,h)?this.tagName+=h:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=x.SCRIPT):(m(h)||P(this,"Invalid tagname in closing tag"),this.state=x.CLOSE_TAG_SAW_WHITE);else{if(m(h))continue;_(p,h)?this.script?(this.script+="</"+h,this.state=x.SCRIPT):P(this,"Invalid tagname in closing tag."):this.tagName=h}continue;case x.CLOSE_TAG_SAW_WHITE:if(m(h))continue;">"===h?k(this):P(this,"Invalid characters in closing tag");continue;case x.TEXT_ENTITY:case x.ATTRIB_VALUE_ENTITY_Q:case x.ATTRIB_VALUE_ENTITY_U:var S,C;switch(this.state){case x.TEXT_ENTITY:S=x.TEXT,C="textNode";break;case x.ATTRIB_VALUE_ENTITY_Q:S=x.ATTRIB_VALUE_QUOTED,C="attribValue";break;case x.ATTRIB_VALUE_ENTITY_U:S=x.ATTRIB_VALUE_UNQUOTED,C="attribValue"}";"===h?(this[C]+=(n=void 0,o=void 0,s=void 0,a=void 0,o=(e=this).entity,s=o.toLowerCase(),a="",e.ENTITIES[o]?e.ENTITIES[o]:e.ENTITIES[s]?e.ENTITIES[s]:("#"===(o=s).charAt(0)&&("x"===o.charAt(1)?(o=o.slice(2),a=(n=parseInt(o,16)).toString(16)):(o=o.slice(1),a=(n=parseInt(o,10)).toString(10))),o=o.replace(/^0+/,""),isNaN(n)||a.toLowerCase()!==o?(P(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(n))),this.entity="",this.state=S):T(this.entity.length?y:f,h)?this.entity+=h:(P(this,"Invalid character in entity name"),this[C]+="&"+this.entity+h,this.entity="",this.state=S);continue;default:throw new Error(this,"Unknown state: "+this.state)}return this.position>=this.bufferCheckPosition&&function(t){for(var e=Math.max(r.MAX_BUFFER_LENGTH,10),n=0,o=0,s=i.length;o<s;o++){var a=t[i[o]].length;if(a>e)switch(i[o]){case"textNode":O(t);break;case"cdata":N(t,"oncdata",t.cdata),t.cdata="";break;case"script":N(t,"onscript",t.script),t.script="";break;default:R(t,"Max buffer length exceeded: "+i[o])}n=Math.max(n,a)}var u=r.MAX_BUFFER_LENGTH-n;t.bufferCheckPosition=u+t.position}(this),this},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){O(this),""!==this.cdata&&(N(this,"oncdata",this.cdata),this.cdata=""),""!==this.script&&(N(this,"onscript",this.script),this.script="")}};try{n=t(431).Stream}catch(B){n=function(){}}var s=r.EVENTS.filter((function(t){return"error"!==t&&"end"!==t}));function a(t,e){if(!(this instanceof a))return new a(t,e);n.apply(this),this._parser=new o(t,e),this.writable=!0,this.readable=!0;var r=this;this._parser.onend=function(){r.emit("end")},this._parser.onerror=function(t){r.emit("error",t),r._parser.error=null},this._decoder=null,s.forEach((function(t){Object.defineProperty(r,"on"+t,{get:function(){return r._parser["on"+t]},set:function(e){if(!e)return r.removeAllListeners(t),r._parser["on"+t]=e,e;r.on(t,e)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(n.prototype,{constructor:{value:a}}),a.prototype.write=function(r){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(r)){if(!this._decoder){var n=t(398).StringDecoder;this._decoder=new n("utf8")}r=this._decoder.write(r)}return this._parser.write(r.toString()),this.emit("data",r),!0},a.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},a.prototype.on=function(t,e){var r=this;return r._parser["on"+t]||-1===s.indexOf(t)||(r._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),r.emit.apply(r,e)}),n.prototype.on.call(r,t,e)};var u="[CDATA[",l="DOCTYPE",c="http://www.w3.org/XML/1998/namespace",h={xml:c,xmlns:"http://www.w3.org/2000/xmlns/"},p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,y=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(t){return" "===t||"\n"===t||"\r"===t||"\t"===t}function g(t){return'"'===t||"'"===t}function v(t){return">"===t||m(t)}function T(t,e){return t.test(e)}function _(t,e){return!T(t,e)}var E,b,S,x=0;for(var C in r.STATE={BEGIN:x++,BEGIN_WHITESPACE:x++,TEXT:x++,TEXT_ENTITY:x++,OPEN_WAKA:x++,SGML_DECL:x++,SGML_DECL_QUOTED:x++,DOCTYPE:x++,DOCTYPE_QUOTED:x++,DOCTYPE_DTD:x++,DOCTYPE_DTD_QUOTED:x++,COMMENT_STARTING:x++,COMMENT:x++,COMMENT_ENDING:x++,COMMENT_ENDED:x++,CDATA:x++,CDATA_ENDING:x++,CDATA_ENDING_2:x++,PROC_INST:x++,PROC_INST_BODY:x++,PROC_INST_ENDING:x++,OPEN_TAG:x++,OPEN_TAG_SLASH:x++,ATTRIB:x++,ATTRIB_NAME:x++,ATTRIB_NAME_SAW_WHITE:x++,ATTRIB_VALUE:x++,ATTRIB_VALUE_QUOTED:x++,ATTRIB_VALUE_CLOSED:x++,ATTRIB_VALUE_UNQUOTED:x++,ATTRIB_VALUE_ENTITY_Q:x++,ATTRIB_VALUE_ENTITY_U:x++,CLOSE_TAG:x++,CLOSE_TAG_SAW_WHITE:x++,SCRIPT:x++,SCRIPT_ENDING:x++},r.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},r.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(r.ENTITIES).forEach((function(t){var e=r.ENTITIES[t],n="number"==typeof e?String.fromCharCode(e):e;r.ENTITIES[t]=n})),r.STATE)r.STATE[r.STATE[C]]=C;function A(t,e,r){t[e]&&t[e](r)}function N(t,e,r){t.textNode&&O(t),A(t,e,r)}function O(t){t.textNode=w(t.opt,t.textNode),t.textNode&&A(t,"ontext",t.textNode),t.textNode=""}function w(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function R(t,e){return O(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,A(t,"onerror",e),t}function L(t){return t.sawRoot&&!t.closedRoot&&P(t,"Unclosed root tag"),t.state!==x.BEGIN&&t.state!==x.BEGIN_WHITESPACE&&t.state!==x.TEXT&&R(t,"Unexpected end"),O(t),t.c="",t.closed=!0,A(t,"onend"),o.call(t,t.strict,t.opt),t}function P(t,e){if("object"!=typeof t||!(t instanceof o))throw new Error("bad call to strictFail");t.strict&&R(t,e)}function I(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,r=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(r.ns=e.ns),t.attribList.length=0,N(t,"onopentagstart",r)}function D(t,e){var r=t.indexOf(":")<0?["",t]:t.split(":"),n=r[0],i=r[1];return e&&"xmlns"===t&&(n="xmlns",i=""),{prefix:n,local:i}}function U(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else{if(t.opt.xmlns){var e=D(t.attribName,!0),r=e.prefix,n=e.local;if("xmlns"===r)if("xml"===n&&t.attribValue!==c)P(t,"xml: prefix must be bound to "+c+"\nActual: "+t.attribValue);else if("xmlns"===n&&"http://www.w3.org/2000/xmlns/"!==t.attribValue)P(t,"xmlns: prefix must be bound to http://www.w3.org/2000/xmlns/\nActual: "+t.attribValue);else{var i=t.tag,o=t.tags[t.tags.length-1]||t;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[n]=t.attribValue}t.attribList.push([t.attribName,t.attribValue])}else t.tag.attributes[t.attribName]=t.attribValue,N(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue=""}}function M(t,e){if(t.opt.xmlns){var r=t.tag,n=D(t.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(P(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),r.uri=n.prefix);var i=t.tags[t.tags.length-1]||t;r.ns&&i.ns!==r.ns&&Object.keys(r.ns).forEach((function(e){N(t,"onopennamespace",{prefix:e,uri:r.ns[e]})}));for(var o=0,s=t.attribList.length;o<s;o++){var a=t.attribList[o],u=a[0],l=a[1],c=D(u,!0),h=c.prefix,p=c.local,d=""===h?"":r.ns[h]||"",f={name:u,value:l,prefix:h,local:p,uri:d};h&&"xmlns"!==h&&!d&&(P(t,"Unbound namespace prefix: "+JSON.stringify(h)),f.uri=h),t.tag.attributes[u]=f,N(t,"onattribute",f)}t.attribList.length=0}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),N(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=x.TEXT:t.state=x.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0}function k(t){if(!t.tagName)return P(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=x.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=x.SCRIPT);N(t,"onscript",t.script),t.script=""}var e=t.tags.length,r=t.tagName;t.strict||(r=r[t.looseCase]());for(var n=r;e--&&t.tags[e].name!==n;)P(t,"Unexpected close tag");if(e<0)return P(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=x.TEXT);t.tagName=r;for(var i=t.tags.length;i-- >e;){var o=t.tag=t.tags.pop();t.tagName=t.tag.name,N(t,"onclosetag",t.tagName);var s={};for(var a in o.ns)s[a]=o.ns[a];var u=t.tags[t.tags.length-1]||t;t.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(e){var r=o.ns[e];N(t,"onclosenamespace",{prefix:e,uri:r})}))}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=x.TEXT}function F(t,e){"<"===e?(t.state=x.OPEN_WAKA,t.startTagPosition=t.position):m(e)||(P(t,"Non-whitespace before first tag."),t.textNode=e,t.state=x.TEXT)}function j(t,e){var r="";return e<t.length&&(r=t.charAt(e)),r}x=r.STATE,String.fromCodePoint||(E=String.fromCharCode,b=Math.floor,S=function(){var t,e,r=[],n=-1,i=arguments.length;if(!i)return"";for(var o="";++n<i;){var s=Number(arguments[n]);if(!isFinite(s)||s<0||s>1114111||b(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?r.push(s):(t=55296+((s-=65536)>>10),e=s%1024+56320,r.push(t,e)),(n+1===i||r.length>16384)&&(o+=E.apply(null,r),r.length=0)}return o},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:S,configurable:!0,writable:!0}):String.fromCodePoint=S)}(void 0===r?this.sax={}:r)}).call(this)}).call(this,t(400).Buffer)},{398:398,400:400,431:431}],431:[function(t,e,r){e.exports=i;var n=t(410).EventEmitter;function i(){n.call(this)}t(417)(i,n),i.Readable=t(435),i.Writable=t(437),i.Duplex=t(433),i.Transform=t(436),i.PassThrough=t(434),i.finished=t(441),i.pipeline=t(443),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",a),r.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(c(),0===n.listenerCount(this,"error"))throw t}function c(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",l),t.removeListener("error",l),r.removeListener("end",c),r.removeListener("close",c),t.removeListener("close",c)}return r.on("error",l),t.on("error",l),r.on("end",c),r.on("close",c),t.on("close",c),t.emit("pipe",r),t}},{410:410,417:417,433:433,434:434,435:435,436:436,437:437,441:441,443:443}],441:[function(t,e,r){"use strict";var n=t(432).codes.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var s=r.readable||!1!==r.readable&&e.readable,a=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||c()},l=e._writableState&&e._writableState.finished,c=function(){a=!1,l=!0,s||o.call(e)},h=e._readableState&&e._readableState.endEmitted,p=function(){s=!1,h=!0,a||o.call(e)},d=function(t){o.call(e,t)},f=function(){var t;return s&&!h?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):a&&!l?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",c)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",c),e.on("abort",f),e.req?y():e.on("request",y)):a&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",p),e.on("finish",c),!1!==r.error&&e.on("error",d),e.on("close",f),function(){e.removeListener("complete",c),e.removeListener("abort",f),e.removeListener("request",y),e.req&&e.req.removeListener("finish",c),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",c),e.removeListener("end",p),e.removeListener("error",d),e.removeListener("close",f)}}},{432:432}],443:[function(t,e,r){"use strict";var n,i=t(432).codes,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(t){if(t)throw t}function u(t){t()}function l(t,e){return t.pipe(e)}e.exports=function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];var c,h=function(t){return t.length?"function"!=typeof t[t.length-1]?a:t.pop():a}(r);if(Array.isArray(r[0])&&(r=r[0]),r.length<2)throw new o("streams");var p=r.map((function(e,i){var o=i<r.length-1;return function(e,r,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=t(441)),n(e,{readable:r,writable:i},(function(t){if(t)return o(t);a=!0,o()}));var u=!1;return function(t){if(!a&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new s("pipe"))}}(e,o,i>0,(function(t){c||(c=t),t&&p.forEach(u),o||(p.forEach(u),h(c))}))}));return r.reduce(l)}},{432:432,441:441}],433:[function(t,e,r){(function(r){(function(){"use strict";var n=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};e.exports=l;var i=t(435),o=t(437);t(417)(l,i);for(var s=n(o.prototype),a=0;a<s.length;a++){var u=s[a];l.prototype[u]||(l.prototype[u]=o.prototype[u])}function l(t){if(!(this instanceof l))return new l(t);i.call(this,t),o.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",c)))}function c(){this._writableState.ended||r.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})}).call(this)}).call(this,t(428))},{417:417,428:428,435:435,437:437}],436:[function(t,e,r){"use strict";e.exports=c;var n=t(432).codes,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,s=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,u=t(433);function l(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(t){if(!(this instanceof c))return new c(t);u.call(this,t),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",h)}function h(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?p(this,null,null):this._flush((function(e,r){p(t,e,r)}))}function p(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new a;if(t._transformState.transforming)throw new s;return t.push(null)}t(417)(c,u),c.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},c.prototype._transform=function(t,e,r){r(new i("_transform()"))},c.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},c.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},{417:417,432:432,433:433}],434:[function(t,e,r){"use strict";e.exports=i;var n=t(436);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}t(417)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},{417:417,436:436}],437:[function(t,e,r){(function(r,n){(function(){"use strict";function i(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(void 0),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}var o;e.exports=C,C.WritableState=x;var s,a={deprecate:t(448)},u=t(445),l=t(400).Buffer,c=n.Uint8Array||function(){},h=t(440),p=t(444).getHighWaterMark,d=t(432).codes,f=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,m=d.ERR_MULTIPLE_CALLBACK,g=d.ERR_STREAM_CANNOT_PIPE,v=d.ERR_STREAM_DESTROYED,T=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,E=d.ERR_UNKNOWN_ENCODING,b=h.errorOrDestroy;function S(){}function x(e,n,s){o=o||t(433),e=e||{},"boolean"!=typeof s&&(s=n instanceof o),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=p(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===e.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,i=n.sync,o=n.writecb;if("function"!=typeof o)throw new m;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,i,o){--e.pendingcb,n?(r.nextTick(o,i),r.nextTick(L,t,e),t._writableState.errorEmitted=!0,b(t,i)):(o(i),t._writableState.errorEmitted=!0,b(t,i),L(t,e))}(t,n,i,e,o);else{var s=w(n)||t.destroyed;s||n.corked||n.bufferProcessing||!n.bufferedRequest||O(t,n),i?r.nextTick(N,t,n,s,o):N(t,n,s,o)}}(n,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function C(e){var r=this instanceof(o=o||t(433));if(!r&&!s.call(C,this))return new C(e);this._writableState=new x(e,this,r),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function A(t,e,r,n,i,o,s){e.writelen=n,e.writecb=s,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new v("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function N(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),L(t,e)}function O(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,o=new Array(n),s=e.corkedRequestsFree;s.entry=r;for(var a=0,u=!0;r;)o[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;o.allBuffers=u,A(t,e,!0,e.length,o,"",s.finish),e.pendingcb++,e.lastBufferedRequest=null,s.next?(e.corkedRequestsFree=s.next,s.next=null):e.corkedRequestsFree=new i(e),e.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,c=r.encoding,h=r.callback;if(A(t,e,!1,e.objectMode?1:l.length,l,c,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function w(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function R(t,e){t._final((function(r){e.pendingcb--,r&&b(t,r),e.prefinished=!0,t.emit("prefinish"),L(t,e)}))}function L(t,e){var n=w(e);if(n&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,r.nextTick(R,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var i=t._readableState;(!i||i.autoDestroy&&i.endEmitted)&&t.destroy()}return n}t(417)(C,u),x.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(x.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(C,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===C&&t&&t._writableState instanceof x}})):s=function(t){return t instanceof this},C.prototype.pipe=function(){b(this,new g)},C.prototype.write=function(t,e,n){var i,o=this._writableState,s=!1,a=!o.objectMode&&(i=t,l.isBuffer(i)||i instanceof c);return a&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof n&&(n=S),o.ending?function(t,e){var n=new _;b(t,n),r.nextTick(e,n)}(this,n):(a||function(t,e,n,i){var o;return null===n?o=new T:"string"==typeof n||e.objectMode||(o=new f("chunk",["string","Buffer"],n)),!o||(b(t,o),r.nextTick(i,o),!1)}(this,o,t,n))&&(o.pendingcb++,s=function(t,e,r,n,i,o){if(!r){var s=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,r)),e}(e,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=e.objectMode?1:n.length;e.length+=a;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else A(t,e,!1,a,n,i,o);return u}(this,o,a,t,e,n)),s},C.prototype.cork=function(){this._writableState.corked++},C.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||O(this,t))},C.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new E(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(C.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(C.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),C.prototype._write=function(t,e,r){r(new y("_write()"))},C.prototype._writev=null,C.prototype.end=function(t,e,n){var i=this._writableState;return"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),i.corked&&(i.corked=1,this.uncork()),i.ending||function(t,e,n){e.ending=!0,L(t,e),n&&(e.finished?r.nextTick(n):t.once("finish",n)),e.ended=!0,t.writable=!1}(this,i,n),this},Object.defineProperty(C.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(C.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),C.prototype.destroy=h.destroy,C.prototype._undestroy=h.undestroy,C.prototype._destroy=function(t,e){e(t)}}).call(this)}).call(this,t(428),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{400:400,417:417,428:428,432:432,433:433,440:440,444:444,445:445,448:448}],435:[function(t,e,r){(function(r,n){(function(){"use strict";var i;e.exports=C,C.ReadableState=x,t(410).EventEmitter;var o,s=function(t,e){return t.listeners(e).length},a=t(445),u=t(400).Buffer,l=n.Uint8Array||function(){},c=t(397);o=c&&c.debuglog?c.debuglog("stream"):function(){};var h,p,d,f=t(439),y=t(440),m=t(444).getHighWaterMark,g=t(432).codes,v=g.ERR_INVALID_ARG_TYPE,T=g.ERR_STREAM_PUSH_AFTER_EOF,_=g.ERR_METHOD_NOT_IMPLEMENTED,E=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;t(417)(C,a);var b=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function x(e,r,n){i=i||t(433),e=e||{},"boolean"!=typeof n&&(n=r instanceof i),this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=m(this,e,"readableHighWaterMark",n),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=t(446).StringDecoder),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function C(e){if(i=i||t(433),!(this instanceof C))return new C(e);var r=this instanceof i;this._readableState=new x(e,this,r),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),a.call(this)}function A(t,e,r,n,i){o("readableAddChunk",e);var s,a=t._readableState;if(null===e)a.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?w(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,R(t)))}}(t,a);else if(i||(s=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof l||"string"==typeof e||void 0===e||t.objectMode||(r=new v("chunk",["string","Buffer","Uint8Array"],e)),r}(a,e)),s)b(t,s);else if(a.objectMode||e&&e.length>0)if("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)a.endEmitted?b(t,new E):N(t,a,e,!0);else if(a.ended)b(t,new T);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!r?(e=a.decoder.write(e),a.objectMode||0!==e.length?N(t,a,e,!1):L(t,a)):N(t,a,e,!1)}else n||(a.reading=!1,L(t,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function N(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&w(t)),L(t,e)}Object.defineProperty(C.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),C.prototype.destroy=y.destroy,C.prototype._undestroy=y.undestroy,C.prototype._destroy=function(t,e){e(t)},C.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),A(this,t,e,!1,r)},C.prototype.unshift=function(t){return A(this,t,null,!0,!1)},C.prototype.isPaused=function(){return!1===this._readableState.flowing},C.prototype.setEncoding=function(e){h||(h=t(446).StringDecoder);var r=new h(e);this._readableState.decoder=r,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=r.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};function O(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=1073741824?t=1073741824:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function w(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,r.nextTick(R,t))}function R(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,M(t)}function L(t,e){e.readingMore||(e.readingMore=!0,r.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function I(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function D(t){o("readable nexttick read 0"),t.read(0)}function U(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),M(t),e.flowing&&!e.reading&&t.read(0)}function M(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function k(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function F(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,r.nextTick(j,e,t))}function j(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function B(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}C.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?F(this):w(this),null;if(0===(t=O(t,e))&&e.ended)return 0===e.length&&F(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=O(r,e))),null===(n=t>0?k(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&F(this)),null!==n&&this.emit("data",n),n},C.prototype._read=function(t){b(this,new _("_read()"))},C.prototype.pipe=function(t,e){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=t;break;case 1:i.pipes=[i.pipes,t];break;default:i.pipes.push(t)}i.pipesCount+=1,o("pipe count=%d opts=%j",i.pipesCount,e);var a=e&&!1===e.end||t===r.stdout||t===r.stderr?y:u;function u(){o("onend"),t.end()}i.endEmitted?r.nextTick(a):n.once("end",a),t.on("unpipe",(function e(r,s){o("onunpipe"),r===n&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",f),t.removeListener("drain",l),t.removeListener("error",p),t.removeListener("unpipe",e),n.removeListener("end",u),n.removeListener("end",y),n.removeListener("data",h),c=!0,!i.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}));var l=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,M(t))}}(n);t.on("drain",l);var c=!1;function h(e){o("ondata");var r=t.write(e);o("dest.write",r),!1===r&&((1===i.pipesCount&&i.pipes===t||i.pipesCount>1&&-1!==B(i.pipes,t))&&!c&&(o("false write response, pause",i.awaitDrain),i.awaitDrain++),n.pause())}function p(e){o("onerror",e),y(),t.removeListener("error",p),0===s(t,"error")&&b(t,e)}function d(){t.removeListener("finish",f),y()}function f(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),n.unpipe(t)}return n.on("data",h),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener("error",r);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(r):t._events.error=[r,t._events.error]:t.on("error",r)}(t,0,p),t.once("close",d),t.once("finish",f),t.emit("pipe",n),i.flowing||(o("pipe resume"),n.resume()),t},C.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=B(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},C.prototype.on=function(t,e){var n=a.prototype.on.call(this,t,e),i=this._readableState;return"data"===t?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===t&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,o("on readable",i.length,i.reading),i.length?w(this):i.reading||r.nextTick(D,this))),n},C.prototype.addListener=C.prototype.on,C.prototype.removeListener=function(t,e){var n=a.prototype.removeListener.call(this,t,e);return"readable"===t&&r.nextTick(I,this),n},C.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||r.nextTick(I,this),e},C.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,r.nextTick(U,t,e))}(this,t)),t.paused=!1,this},C.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},C.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var s=0;s<S.length;s++)t.on(S[s],this.emit.bind(this,S[s]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(C.prototype[Symbol.asyncIterator]=function(){return void 0===p&&(p=t(438)),p(this)}),Object.defineProperty(C.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(C.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(C.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),C._fromList=k,Object.defineProperty(C.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(C.from=function(e,r){return void 0===d&&(d=t(442)),d(C,e,r)})}).call(this)}).call(this,t(428),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{397:397,400:400,410:410,417:417,428:428,432:432,433:433,438:438,439:439,440:440,442:442,444:444,445:445,446:446}],432:[function(t,e,r){"use strict";var n={};function i(t,e,r){r||(r=Error);var i=function(t){var r,n;function i(r,n,i){return t.call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,n,i))||this}return n=t,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n,i}(r);i.prototype.name=r.name,i.prototype.code=t,n[t]=i}function o(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}i("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(t,e,r){var n,i,s,a;if("string"==typeof e&&("not ","not "===e.substr(0,"not ".length))?(n="must not be",e=e.replace(/^not /,"")):n="must be",s=t,(void 0===a||a>s.length)&&(a=s.length)," argument"===s.substring(a-" argument".length,a))i="The ".concat(t," ").concat(n," ").concat(o(e,"type"));else{var u=function(t,e,r){return"number"!=typeof r&&(r=0),!(r+".".length>t.length)&&-1!==t.indexOf(".",r)}(t)?"property":"argument";i='The "'.concat(t,'" ').concat(u," ").concat(n," ").concat(o(e,"type"))}return i+". Received type ".concat(typeof r)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.codes=n},{}],442:[function(t,e,r){e.exports=function(){throw new Error("Readable.from is not available in the browser")}},{}],445:[function(t,e,r){e.exports=t(410).EventEmitter},{410:410}],440:[function(t,e,r){(function(t){(function(){"use strict";function r(t,e){i(t,e),n(t)}function n(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function i(t,e){t.emit("error",e)}e.exports={destroy:function(e,o){var s=this,a=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return a||u?(o?o(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,t.nextTick(i,this,e)):t.nextTick(i,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!o&&e?s._writableState?s._writableState.errorEmitted?t.nextTick(n,s):(s._writableState.errorEmitted=!0,t.nextTick(r,s,e)):t.nextTick(r,s,e):o?(t.nextTick(n,s),o(e)):t.nextTick(n,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}}).call(this)}).call(this,t(428))},{428:428}],439:[function(t,e,r){"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=t(400).Buffer,a=t(397).inspect,u=a&&a.custom||"inspect";e.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return s.alloc(0);for(var e,r,n,i=s.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,s.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=s.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:u,value:function(t,e){return a(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&o(e.prototype,r),t}()},{397:397,400:400}],444:[function(t,e,r){"use strict";var n=t(432).codes.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},{432:432}],438:[function(t,e,r){(function(r){(function(){"use strict";var n;function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var o=t(441),s=Symbol("lastResolve"),a=Symbol("lastReject"),u=Symbol("error"),l=Symbol("ended"),c=Symbol("lastPromise"),h=Symbol("handlePromise"),p=Symbol("stream");function d(t,e){return{value:t,done:e}}function f(t){var e=t[s];if(null!==e){var r=t[p].read();null!==r&&(t[c]=null,t[s]=null,t[a]=null,e(d(r,!1)))}}var y=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((i(n={get stream(){return this[p]},next:function(){var t=this,e=this[u];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(d(void 0,!0));if(this[p].destroyed)return new Promise((function(e,n){r.nextTick((function(){t[u]?n(t[u]):e(d(void 0,!0))}))}));var n,i=this[c];if(i)n=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(d(void 0,!0)):e[h](r,n)}),n)}}(i,this));else{var o=this[p].read();if(null!==o)return Promise.resolve(d(o,!1));n=new Promise(this[h])}return this[c]=n,n}},Symbol.asyncIterator,(function(){return this})),i(n,"return",(function(){var t=this;return new Promise((function(e,r){t[p].destroy(null,(function(t){t?r(t):e(d(void 0,!0))}))}))})),n),y);e.exports=function(t){var e,n=Object.create(m,(i(e={},p,{value:t,writable:!0}),i(e,s,{value:null,writable:!0}),i(e,a,{value:null,writable:!0}),i(e,u,{value:null,writable:!0}),i(e,l,{value:t._readableState.endEmitted,writable:!0}),i(e,h,{value:function(t,e){var r=n[p].read();r?(n[c]=null,n[s]=null,n[a]=null,t(d(r,!1))):(n[s]=t,n[a]=e)},writable:!0}),e));return n[c]=null,o(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=n[a];return null!==e&&(n[c]=null,n[s]=null,n[a]=null,e(t)),void(n[u]=t)}var r=n[s];null!==r&&(n[c]=null,n[s]=null,n[a]=null,r(d(void 0,!0))),n[l]=!0})),t.on("readable",function(t){r.nextTick(f,t)}.bind(null,n)),n}}).call(this)}).call(this,t(428))},{428:428,441:441}],446:[function(t,e,r){"use strict";var n=t(429).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"\ufffd";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"\ufffd";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"\ufffd"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function p(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}r.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"\ufffd":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},{429:429}],448:[function(t,e,r){(function(t){(function(){function r(e){try{if(!t.localStorage)return!1}catch(n){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],447:[function(t,e,r){(function(e,n){(function(){var i=t(428).nextTick,o=(Function.prototype.apply,Array.prototype.slice),s={},a=0;function u(t,e){this._id=t,this._clearFn=e}u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},r.setImmediate="function"==typeof e?e:function(t){var e=a++,n=!(arguments.length<2)&&o.call(arguments,1);return s[e]=!0,i((function(){s[e]&&(n?t.apply(null,n):t.call(null),r.clearImmediate(e))})),e},r.clearImmediate="function"==typeof n?n:function(t){delete s[t]}}).call(this)}).call(this,t(447).setImmediate,t(447).clearImmediate)},{428:428,447:447}],449:[function(t,e,r){e.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},{}],450:[function(t,e,r){"use strict";var n=t(418),i=t(419),o=t(452),s=t(420);function a(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,c=a(Object.prototype.toString),h=a(Number.prototype.valueOf),p=a(String.prototype.valueOf),d=a(Boolean.prototype.valueOf);if(u)var f=a(BigInt.prototype.valueOf);if(l)var y=a(Symbol.prototype.valueOf);function m(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(r){return!1}}function g(t){return"[object Map]"===c(t)}function v(t){return"[object Set]"===c(t)}function T(t){return"[object WeakMap]"===c(t)}function _(t){return"[object WeakSet]"===c(t)}function E(t){return"[object ArrayBuffer]"===c(t)}function b(t){return"undefined"!=typeof ArrayBuffer&&(E.working?E(t):t instanceof ArrayBuffer)}function S(t){return"[object DataView]"===c(t)}function x(t){return"undefined"!=typeof DataView&&(S.working?S(t):t instanceof DataView)}function C(t){return"[object SharedArrayBuffer]"===c(t)}function A(t){return"undefined"!=typeof SharedArrayBuffer&&(C.working?C(t):t instanceof SharedArrayBuffer)}function N(t){return m(t,h)}function O(t){return m(t,p)}function w(t){return m(t,d)}function R(t){return u&&m(t,f)}function L(t){return l&&m(t,y)}r.isArgumentsObject=n,r.isGeneratorFunction=i,r.isTypedArray=s,r.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},r.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):s(t)||x(t)},r.isUint8Array=function(t){return"Uint8Array"===o(t)},r.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},r.isUint16Array=function(t){return"Uint16Array"===o(t)},r.isUint32Array=function(t){return"Uint32Array"===o(t)},r.isInt8Array=function(t){return"Int8Array"===o(t)},r.isInt16Array=function(t){return"Int16Array"===o(t)},r.isInt32Array=function(t){return"Int32Array"===o(t)},r.isFloat32Array=function(t){return"Float32Array"===o(t)},r.isFloat64Array=function(t){return"Float64Array"===o(t)},r.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},r.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},g.working="undefined"!=typeof Map&&g(new Map),r.isMap=function(t){return"undefined"!=typeof Map&&(g.working?g(t):t instanceof Map)},v.working="undefined"!=typeof Set&&v(new Set),r.isSet=function(t){return"undefined"!=typeof Set&&(v.working?v(t):t instanceof Set)},T.working="undefined"!=typeof WeakMap&&T(new WeakMap),r.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(T.working?T(t):t instanceof WeakMap)},_.working="undefined"!=typeof WeakSet&&_(new WeakSet),r.isWeakSet=function(t){return _(t)},E.working="undefined"!=typeof ArrayBuffer&&E(new ArrayBuffer),r.isArrayBuffer=b,S.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&S(new DataView(new ArrayBuffer(1),0,1)),r.isDataView=x,C.working="undefined"!=typeof SharedArrayBuffer&&C(new SharedArrayBuffer),r.isSharedArrayBuffer=A,r.isAsyncFunction=function(t){return"[object AsyncFunction]"===c(t)},r.isMapIterator=function(t){return"[object Map Iterator]"===c(t)},r.isSetIterator=function(t){return"[object Set Iterator]"===c(t)},r.isGeneratorObject=function(t){return"[object Generator]"===c(t)},r.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===c(t)},r.isNumberObject=N,r.isStringObject=O,r.isBooleanObject=w,r.isBigIntObject=R,r.isSymbolObject=L,r.isBoxedPrimitive=function(t){return N(t)||O(t)||w(t)||R(t)||L(t)},r.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(b(t)||A(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(r,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},{418:418,419:419,420:420,452:452}],452:[function(t,e,r){(function(r){(function(){"use strict";var n=t(411),i=t(394),o=t(408),s=o("Object.prototype.toString"),a=t(414)()&&"symbol"==typeof Symbol.toStringTag,u=i(),l=o("String.prototype.slice"),c={},h=t(409),p=Object.getPrototypeOf;a&&h&&p&&n(u,(function(t){if("function"==typeof r[t]){var e=new r[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=p(e),i=h(n,Symbol.toStringTag);if(!i){var o=p(n);i=h(o,Symbol.toStringTag)}c[t]=i.get}}));var d=t(420);e.exports=function(t){return!!d(t)&&(a?function(t){var e=!1;return n(c,(function(r,n){if(!e)try{var i=r.call(t);i===n&&(e=i)}catch(o){}})),e}(t):l(s(t),8,-1))}}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{394:394,408:408,409:409,411:411,414:414,420:420}],453:[function(t,e,r){function n(t){this.options=t||{locator:{}}}function i(){this.cdata=!1}function o(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}function s(t){if(t)return"\n@"+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function a(t,e,r){return"string"==typeof t?t.substr(e,r):t.length>=e+r||e?new java.lang.String(t,e,r)+"":t}function u(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}n.prototype.parseFromString=function(t,e){var r=this.options,n=new l,o=r.domBuilder||new i,a=r.errorHandler,u=r.locator,c=r.xmlns||{},h={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&o.setDocumentLocator(u),n.errorHandler=function(t,e,r){if(!t){if(e instanceof i)return e;t=e}var n={},o=t instanceof Function;function a(e){var i=t[e];!i&&o&&(i=2==t.length?function(r){t(e,r)}:t),n[e]=i&&function(t){i("[xmldom "+e+"]\t"+t+s(r))}||function(){}}return r=r||{},a("warning"),a("error"),a("fatalError"),n}(a,o,u),n.domBuilder=r.domBuilder||o,/\/x?html?$/.test(e)&&(h.nbsp="\xa0",h.copy="\xa9",c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",t?n.parse(t,c,h):n.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,r,n){var i=this.doc,s=i.createElementNS(t,r||e),a=n.length;u(this,s),this.currentElement=s,this.locator&&o(this.locator,s);for(var l=0;l<a;l++){t=n.getURI(l);var c=n.getValue(l),h=(r=n.getQName(l),i.createAttributeNS(t,r));this.locator&&o(n.getLocator(l),h),h.value=h.nodeValue=c,s.setAttributeNode(h)}},endElement:function(t,e,r){var n=this.currentElement;n.tagName,this.currentElement=n.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var r=this.doc.createProcessingInstruction(t,e);this.locator&&o(this.locator,r),u(this,r)},ignorableWhitespace:function(t,e,r){},characters:function(t,e,r){if(t=a.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(t);else n=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(t)&&this.doc.appendChild(n),this.locator&&o(this.locator,n)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,r){t=a.apply(this,arguments);var n=this.doc.createComment(t);this.locator&&o(this.locator,n),u(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(t,e,r);this.locator&&o(this.locator,i),u(this,i)}},warning:function(t){console.warn("[xmldom warning]\t"+t,s(this.locator))},error:function(t){console.error("[xmldom error]\t"+t,s(this.locator))},fatalError:function(t){throw console.error("[xmldom fatalError]\t"+t,s(this.locator)),t}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(t){i.prototype[t]=function(){return null}}));var l=t(455).XMLReader,c=t(454).DOMImplementation;t(454).XMLSerializer,r.DOMParser=n},{454:454,455:455}],455:[function(t,e,r){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,i=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),o=new RegExp("^"+n.source+i.source+"*(?::"+n.source+i.source+"*)?$");function s(){}function a(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function u(t,e,r,n,i,o){for(var s,a=++e,u=0;;){var l=t.charAt(a);switch(l){case"=":if(1===u)s=t.slice(e,a),u=3;else{if(2!==u)throw new Error("attribute equal must after attrName");u=3}break;case"'":case'"':if(3===u||1===u){if(1===u&&(o.warning('attribute value must after "="'),s=t.slice(e,a)),e=a+1,!((a=t.indexOf(l,e))>0))throw new Error("attribute value no end '"+l+"' match");c=t.slice(e,a).replace(/&#?\w+;/g,i),r.add(s,c,e-1),u=5}else{if(4!=u)throw new Error('attribute value must after "="');c=t.slice(e,a).replace(/&#?\w+;/g,i),r.add(s,c,e),o.warning('attribute "'+s+'" missed start quot('+l+")!!"),e=a+1,u=5}break;case"/":switch(u){case 0:r.setTagName(t.slice(e,a));case 5:case 6:case 7:u=7,r.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),0==u&&r.setTagName(t.slice(e,a)),a;case">":switch(u){case 0:r.setTagName(t.slice(e,a));case 5:case 6:case 7:break;case 4:case 1:"/"===(c=t.slice(e,a)).slice(-1)&&(r.closed=!0,c=c.slice(0,-1));case 2:2===u&&(c=s),4==u?(o.warning('attribute "'+c+'" missed quot(")!!'),r.add(s,c.replace(/&#?\w+;/g,i),e)):("http://www.w3.org/1999/xhtml"===n[""]&&c.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+c+'" missed value!! "'+c+'" instead!!'),r.add(c,c,e));break;case 3:throw new Error("attribute value missed!!")}return a;case"\x80":l=" ";default:if(l<=" ")switch(u){case 0:r.setTagName(t.slice(e,a)),u=6;break;case 1:s=t.slice(e,a),u=2;break;case 4:var c=t.slice(e,a).replace(/&#?\w+;/g,i);o.warning('attribute "'+c+'" missed quot(")!!'),r.add(s,c,e);case 5:u=6}else switch(u){case 2:r.tagName,"http://www.w3.org/1999/xhtml"===n[""]&&s.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),r.add(s,s,e),e=a,u=1;break;case 5:o.warning('attribute space is required"'+s+'"!!');case 6:u=1,e=a;break;case 3:u=4,e=a;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}a++}}function l(t,e,r){for(var n=t.tagName,i=null,o=t.length;o--;){var s=t[o],a=s.qName,u=s.value;if((d=a.indexOf(":"))>0)var l=s.prefix=a.slice(0,d),c=a.slice(d+1),h="xmlns"===l&&c;else c=a,l=null,h="xmlns"===a&&"";s.localName=c,!1!==h&&(null==i&&(i={},p(r,r={})),r[h]=i[h]=u,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(h,u))}for(o=t.length;o--;)(l=(s=t[o]).prefix)&&("xml"===l&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(s.uri=r[l||""]));var d;(d=n.indexOf(":"))>0?(l=t.prefix=n.slice(0,d),c=t.localName=n.slice(d+1)):(l=null,c=t.localName=n);var f=t.uri=r[l||""];if(e.startElement(f,c,n,t),!t.closed)return t.currentNSMap=r,t.localNSMap=i,!0;if(e.endElement(f,c,n),i)for(l in i)e.endPrefixMapping(l)}function c(t,e,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var o=t.indexOf("</"+r+">",e),s=t.substring(e+1,o);if(/[&<]/.test(s))return/^script$/i.test(r)?(i.characters(s,0,s.length),o):(s=s.replace(/&#?\w+;/g,n),i.characters(s,0,s.length),o)}return e+1}function h(t,e,r,n){var i=n[r];return null==i&&((i=t.lastIndexOf("</"+r+">"))<e&&(i=t.lastIndexOf("</"+r)),n[r]=i),i<e}function p(t,e){for(var r in t)e[r]=t[r]}function d(t,e,r,n){switch(t.charAt(e+2)){case"-":return"-"===t.charAt(e+3)?(i=t.indexOf("--\x3e",e+4))>e?(r.comment(t,e+4,i-e-4),i+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==t.substr(e+3,6)){var i=t.indexOf("]]>",e+9);return r.startCDATA(),r.characters(t,e+9,i-e-9),r.endCDATA(),i+3}var o=function(t,e){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=e,i.exec(t);r=i.exec(t);)if(n.push(r),r[1])return n}(t,e),s=o.length;if(s>1&&/!doctype/i.test(o[0][0])){var a=o[1][0],u=s>3&&/^public$/i.test(o[2][0])&&o[3][0],l=s>4&&o[4][0],c=o[s-1];return r.startDTD(a,u&&u.replace(/^(['"])(.*?)\1$/,"$2"),l&&l.replace(/^(['"])(.*?)\1$/,"$2")),r.endDTD(),c.index+c[0].length}}return-1}function f(t,e,r){var n=t.indexOf("?>",e);if(n){var i=t.substring(e,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return i?(i[0].length,r.processingInstruction(i[1],i[2]),n+2):-1}return-1}function y(t){}function m(t,e){return t.__proto__=e,t}s.prototype={parse:function(t,e,r){var n=this.domBuilder;n.startDocument(),p(e,e={}),function(t,e,r,n,i){function o(t){var e=t.slice(1,-1);return e in r?r[e]:"#"===e.charAt(0)?function(t){if(t>65535){var e=55296+((t-=65536)>>10),r=56320+(1023&t);return String.fromCharCode(e,r)}return String.fromCharCode(t)}(parseInt(e.substr(1).replace("x","0x"))):(i.error("entity not found:"+t),t)}function s(e){if(e>b){var r=t.substring(b,e).replace(/&#?\w+;/g,o);T&&p(b),n.characters(r,0,e-b),b=e}}function p(e,r){for(;e>=g&&(r=v.exec(t));)m=r.index,g=m+r[0].length,T.lineNumber++;T.columnNumber=e-m+1}for(var m=0,g=0,v=/.*(?:\r\n?|\n)|.*$/g,T=n.locator,_=[{currentNSMap:e}],E={},b=0;;){try{var S=t.indexOf("<",b);if(S<0){if(!t.substr(b).match(/^\s*$/)){var x=n.doc,C=x.createTextNode(t.substr(b));x.appendChild(C),n.currentElement=C}return}switch(S>b&&s(S),t.charAt(S+1)){case"/":var A=t.indexOf(">",S+3),N=t.substring(S+2,A),O=_.pop();A<0?(N=t.substring(S+2).replace(/[\s<].*/,""),i.error("end tag name: "+N+" is not complete:"+O.tagName),A=S+1+N.length):N.match(/\s</)&&(N=N.replace(/[\s<].*/,""),i.error("end tag name: "+N+" maybe not complete"),A=S+1+N.length);var w=O.localNSMap,R=O.tagName==N;if(R||O.tagName&&O.tagName.toLowerCase()==N.toLowerCase()){if(n.endElement(O.uri,O.localName,N),w)for(var L in w)n.endPrefixMapping(L);R||i.fatalError("end tag name: "+N+" is not match the current start tagName:"+O.tagName)}else _.push(O);A++;break;case"?":T&&p(S),A=f(t,S,n);break;case"!":T&&p(S),A=d(t,S,n,i);break;default:T&&p(S);var P=new y,I=_[_.length-1].currentNSMap,D=(A=u(t,S,P,I,o,i),P.length);if(!P.closed&&h(t,A,P.tagName,E)&&(P.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),T&&D){for(var U=a(T,{}),M=0;M<D;M++){var k=P[M];p(k.offset),k.locator=a(T,{})}n.locator=U,l(P,n,I)&&_.push(P),n.locator=T}else l(P,n,I)&&_.push(P);"http://www.w3.org/1999/xhtml"!==P.uri||P.closed?A++:A=c(t,A,P.tagName,o,n)}}catch(F){i.error("element parse error: "+F),A=-1}A>b?b=A:s(Math.max(S,b)+1)}}(t,e,r,n,this.errorHandler),n.endDocument()}},y.prototype={setTagName:function(t){if(!o.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},add:function(t,e,r){if(!o.test(t))throw new Error("invalid attribute:"+t);this[this.length++]={qName:t,value:e,offset:r}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}},m({},m.prototype)instanceof m||(m=function(t,e){function r(){}for(e in r.prototype=e,r=new r,t)r[e]=t[e];return r}),r.XMLReader=s},{}],454:[function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r]}function i(t,e){var r=t.prototype;if(Object.create){var i=Object.create(e.prototype);r.__proto__=i}if(!(r instanceof e)){function o(){}o.prototype=e.prototype,n(r,o=new o),t.prototype=r=o}r.constructor!=t&&("function"!=typeof t&&console.error("unknow Class:"+t),r.constructor=t)}var o={},s=o.ELEMENT_NODE=1,a=o.ATTRIBUTE_NODE=2,u=o.TEXT_NODE=3,l=o.CDATA_SECTION_NODE=4,c=o.ENTITY_REFERENCE_NODE=5,h=o.ENTITY_NODE=6,p=o.PROCESSING_INSTRUCTION_NODE=7,d=o.COMMENT_NODE=8,f=o.DOCUMENT_NODE=9,y=o.DOCUMENT_TYPE_NODE=10,m=o.DOCUMENT_FRAGMENT_NODE=11,g=o.NOTATION_NODE=12,v={},T={},_=(v.INDEX_SIZE_ERR=(T[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),E=(v.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),v.NOT_FOUND_ERR=(T[8]="Not found",8)),b=(v.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));function S(t,e){if(e instanceof Error)var r=e;else r=this,Error.call(this,T[t]),this.message=T[t],Error.captureStackTrace&&Error.captureStackTrace(this,S);return r.code=t,e&&(this.message=this.message+": "+e),r}function x(){}function C(t,e){this._node=t,this._refresh=e,A(this)}function A(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var r=t._refresh(t._node);rt(t,"length",r.length),n(r,t),t._inc=e}}function N(){}function O(t,e){for(var r=t.length;r--;)if(t[r]===e)return r}function w(t,e,r,n){if(n?e[O(e,n)]=r:e[e.length++]=r,t){r.ownerElement=t;var i=t.ownerDocument;i&&(n&&M(i,t,n),function(t,e,r){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&(e._nsMap[r.prefix?r.localName:""]=r.value)}(i,t,r))}}function R(t,e,r){var n=O(e,r);if(!(n>=0))throw S(E,new Error(t.tagName+"@"+r));for(var i=e.length-1;n<i;)e[n]=e[++n];if(e.length=i,t){var o=t.ownerDocument;o&&(M(o,t,r),r.ownerElement=null)}}function L(t){if(this._features={},t)for(var e in t)this._features=t[e]}function P(){}function I(t){return("<"==t?"&lt;":">"==t&&"&gt;")||"&"==t&&"&amp;"||'"'==t&&"&quot;"||"&#"+t.charCodeAt()+";"}function D(t,e){if(e(t))return!0;if(t=t.firstChild)do{if(D(t,e))return!0}while(t=t.nextSibling)}function U(){}function M(t,e,r,n){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&delete e._nsMap[r.prefix?r.localName:""]}function k(t,e,r){if(t&&t._inc){t._inc++;var n=e.childNodes;if(r)n[n.length++]=r;else{for(var i=e.firstChild,o=0;i;)n[o++]=i,i=i.nextSibling;n.length=o}}}function F(t,e){var r=e.previousSibling,n=e.nextSibling;return r?r.nextSibling=n:t.firstChild=n,n?n.previousSibling=r:t.lastChild=r,k(t.ownerDocument,t),e}function j(t,e,r){var n=e.parentNode;if(n&&n.removeChild(e),e.nodeType===m){var i=e.firstChild;if(null==i)return e;var o=e.lastChild}else i=o=e;var s=r?r.previousSibling:t.lastChild;i.previousSibling=s,o.nextSibling=r,s?s.nextSibling=i:t.firstChild=i,null==r?t.lastChild=o:r.previousSibling=o;do{i.parentNode=t}while(i!==o&&(i=i.nextSibling));return k(t.ownerDocument||t,t),e.nodeType==m&&(e.firstChild=e.lastChild=null),e}function B(){this._nsMap={}}function H(){}function G(){}function z(){}function W(){}function V(){}function $(){}function q(){}function Y(){}function K(){}function X(){}function Q(){}function Z(){}function J(t,e){var r=[],n=9==this.nodeType?this.documentElement:this,i=n.prefix,o=n.namespaceURI;if(o&&null==i&&null==(i=n.lookupPrefix(o)))var s=[{namespace:o,prefix:null}];return et(this,r,t,e,s),r.join("")}function tt(t,e,r){var n=t.prefix||"",i=t.namespaceURI;if(!n&&!i)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=r.length;o--;){var s=r[o];if(s.prefix==n)return s.namespace!=i}return!0}function et(t,e,r,n,i){if(n){if(!(t=n(t)))return;if("string"==typeof t)return void e.push(t)}switch(t.nodeType){case s:i||(i=[]),i.length;var o=t.attributes,h=o.length,g=t.firstChild,v=t.tagName;r="http://www.w3.org/1999/xhtml"===t.namespaceURI||r,e.push("<",v);for(var T=0;T<h;T++)"xmlns"==(_=o.item(T)).prefix?i.push({prefix:_.localName,namespace:_.value}):"xmlns"==_.nodeName&&i.push({prefix:"",namespace:_.value});for(T=0;T<h;T++){var _;if(tt(_=o.item(T),0,i)){var E=_.prefix||"",b=_.namespaceURI,S=E?" xmlns:"+E:" xmlns";e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})}et(_,e,r,n,i)}if(tt(t,0,i)&&(E=t.prefix||"",b=t.namespaceURI,S=E?" xmlns:"+E:" xmlns",e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})),g||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(v)){if(e.push(">"),r&&/^script$/i.test(v))for(;g;)g.data?e.push(g.data):et(g,e,r,n,i),g=g.nextSibling;else for(;g;)et(g,e,r,n,i),g=g.nextSibling;e.push("</",v,">")}else e.push("/>");return;case f:case m:for(g=t.firstChild;g;)et(g,e,r,n,i),g=g.nextSibling;return;case a:return e.push(" ",t.name,'="',t.value.replace(/[<&"]/g,I),'"');case u:return e.push(t.data.replace(/[<&]/g,I));case l:return e.push("<![CDATA[",t.data,"]]>");case d:return e.push("\x3c!--",t.data,"--\x3e");case y:var x=t.publicId,C=t.systemId;if(e.push("<!DOCTYPE ",t.name),x)e.push(' PUBLIC "',x),C&&"."!=C&&e.push('" "',C),e.push('">');else if(C&&"."!=C)e.push(' SYSTEM "',C,'">');else{var A=t.internalSubset;A&&e.push(" [",A,"]"),e.push(">")}return;case p:return e.push("<?",t.target," ",t.data,"?>");case c:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function rt(t,e,r){t[e]=r}v.INVALID_STATE_ERR=(T[11]="Invalid state",11),v.SYNTAX_ERR=(T[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),v.NAMESPACE_ERR=(T[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(T[15]="Invalid access",15),S.prototype=Error.prototype,n(v,S),x.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var r=[],n=0;n<this.length;n++)et(this[n],r,t,e);return r.join("")}},C.prototype.item=function(t){return A(this),this[t]},i(C,x),N.prototype={length:0,item:x.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var r=this[e];if(r.nodeName==t)return r}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new S(b);var r=this.getNamedItem(t.nodeName);return w(this._ownerElement,this,t,r),r},setNamedItemNS:function(t){var e,r=t.ownerElement;if(r&&r!=this._ownerElement)throw new S(b);return e=this.getNamedItemNS(t.namespaceURI,t.localName),w(this._ownerElement,this,t,e),e},removeNamedItem:function(t){var e=this.getNamedItem(t);return R(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var r=this.getNamedItemNS(t,e);return R(this._ownerElement,this,r),r},getNamedItemNS:function(t,e){for(var r=this.length;r--;){var n=this[r];if(n.localName==e&&n.namespaceURI==t)return n}return null}},L.prototype={hasFeature:function(t,e){var r=this._features[t.toLowerCase()];return!(!r||e&&!(e in r))},createDocument:function(t,e,r){var n=new U;if(n.implementation=this,n.childNodes=new x,n.doctype=r,r&&n.appendChild(r),e){var i=n.createElementNS(t,e);n.appendChild(i)}return n},createDocumentType:function(t,e,r){var n=new $;return n.name=t,n.nodeName=t,n.publicId=e,n.systemId=r,n}},P.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return j(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return F(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(t){return function t(e,r,n){var i=new r.constructor;for(var o in r){var u=r[o];"object"!=typeof u&&u!=i[o]&&(i[o]=u)}switch(r.childNodes&&(i.childNodes=new x),i.ownerDocument=e,i.nodeType){case s:var l=r.attributes,c=i.attributes=new N,h=l.length;c._ownerElement=i;for(var p=0;p<h;p++)i.setAttributeNode(t(e,l.item(p),!0));break;case a:n=!0}if(n)for(var d=r.firstChild;d;)i.appendChild(t(e,d,n)),d=d.nextSibling;return i}(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==u&&t.nodeType==u?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var r=e._nsMap;if(r)for(var n in r)if(r[n]==t)return n;e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var r=e._nsMap;if(r&&t in r)return r[t];e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){return null==this.lookupPrefix(t)}},n(o,P),n(o,P.prototype),U.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==m){for(var r=t.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,e),r=n}return t}return null==this.documentElement&&t.nodeType==s&&(this.documentElement=t),j(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),F(this,t)},importNode:function(t,e){return function t(e,r,n){var i;switch(r.nodeType){case s:(i=r.cloneNode(!1)).ownerDocument=e;case m:break;case a:n=!0}if(i||(i=r.cloneNode(!1)),i.ownerDocument=e,i.parentNode=null,n)for(var o=r.firstChild;o;)i.appendChild(t(e,o,n)),o=o.nextSibling;return i}(this,t,e)},getElementById:function(t){var e=null;return D(this.documentElement,(function(r){if(r.nodeType==s&&r.getAttribute("id")==t)return e=r,!0})),e},createElement:function(t){var e=new B;return e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new x,(e.attributes=new N)._ownerElement=e,e},createDocumentFragment:function(){var t=new X;return t.ownerDocument=this,t.childNodes=new x,t},createTextNode:function(t){var e=new z;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new W;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new V;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var r=new Q;return r.ownerDocument=this,r.tagName=r.target=t,r.nodeValue=r.data=e,r},createAttribute:function(t){var e=new H;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new K;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var r=new B,n=e.split(":"),i=r.attributes=new N;return r.childNodes=new x,r.ownerDocument=this,r.nodeName=e,r.tagName=e,r.namespaceURI=t,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,i._ownerElement=r,r},createAttributeNS:function(t,e){var r=new H,n=e.split(":");return r.ownerDocument=this,r.nodeName=e,r.name=e,r.namespaceURI=t,r.specified=!0,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,r}},i(U,P),B.prototype={nodeType:s,hasAttribute:function(t){return null!=this.getAttributeNode(t)},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var r=this.ownerDocument.createAttribute(t);r.value=r.nodeValue=""+e,this.setAttributeNode(r)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===m?this.insertBefore(t,null):function(t,e){var r=e.parentNode;if(r){var n=t.lastChild;r.removeChild(e),n=t.lastChild}return n=t.lastChild,e.parentNode=t,e.previousSibling=n,e.nextSibling=null,n?n.nextSibling=e:t.firstChild=e,t.lastChild=e,k(t.ownerDocument,t,e),e}(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);r&&this.removeAttributeNode(r)},hasAttributeNS:function(t,e){return null!=this.getAttributeNodeNS(t,e)},getAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);return r&&r.value||""},setAttributeNS:function(t,e,r){var n=this.ownerDocument.createAttributeNS(t,e);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new C(this,(function(e){var r=[];return D(e,(function(n){n===e||n.nodeType!=s||"*"!==t&&n.tagName!=t||r.push(n)})),r}))},getElementsByTagNameNS:function(t,e){return new C(this,(function(r){var n=[];return D(r,(function(i){i===r||i.nodeType!==s||"*"!==t&&i.namespaceURI!==t||"*"!==e&&i.localName!=e||n.push(i)})),n}))}},U.prototype.getElementsByTagName=B.prototype.getElementsByTagName,U.prototype.getElementsByTagNameNS=B.prototype.getElementsByTagNameNS,i(B,P),H.prototype.nodeType=a,i(H,P),G.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error(T[_])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,r){r=this.data.substring(0,t)+r+this.data.substring(t+e),this.nodeValue=this.data=r,this.length=r.length}},i(G,P),z.prototype={nodeName:"#text",nodeType:u,splitText:function(t){var e=this.data,r=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},i(z,G),W.prototype={nodeName:"#comment",nodeType:d},i(W,G),V.prototype={nodeName:"#cdata-section",nodeType:l},i(V,G),$.prototype.nodeType=y,i($,P),q.prototype.nodeType=g,i(q,P),Y.prototype.nodeType=h,i(Y,P),K.prototype.nodeType=c,i(K,P),X.prototype.nodeName="#document-fragment",X.prototype.nodeType=m,i(X,P),Q.prototype.nodeType=p,i(Q,P),Z.prototype.serializeToString=function(t,e,r){return J.call(t,e,r)},P.prototype.toString=J;try{Object.defineProperty&&(Object.defineProperty(C.prototype,"length",{get:function(){return A(this),this.$$length}}),Object.defineProperty(P.prototype,"textContent",{get:function(){return function t(e){switch(e.nodeType){case s:case m:var r=[];for(e=e.firstChild;e;)7!==e.nodeType&&8!==e.nodeType&&r.push(t(e)),e=e.nextSibling;return r.join("");default:return e.nodeValue}}(this)},set:function(t){switch(this.nodeType){case s:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),rt=function(t,e,r){t["$$"+e]=r})}catch(nt){}},{}],457:[function(t,e,r){(function(){"use strict";r.stripBOM=function(t){return"\ufeff"===t[0]?t.substring(1):t}}).call(this)},{}],458:[function(t,e,r){(function(){"use strict";var e,n,i,o,s,a={}.hasOwnProperty;e=t(495),n=t(459).defaults,o=function(t){return"string"==typeof t&&(t.indexOf("&")>=0||t.indexOf(">")>=0||t.indexOf("<")>=0)},s=function(t){return"<![CDATA["+i(t)+"]]>"},i=function(t){return t.replace("]]>","]]]]><![CDATA[>")},r.Builder=function(){function t(t){var e,r,i;for(e in this.options={},r=n[.2])a.call(r,e)&&(i=r[e],this.options[e]=i);for(e in t)a.call(t,e)&&(i=t[e],this.options[e]=i)}return t.prototype.buildObject=function(t){var r,i,u,l,c,h;return r=this.options.attrkey,i=this.options.charkey,1===Object.keys(t).length&&this.options.rootName===n[.2].rootName?t=t[c=Object.keys(t)[0]]:c=this.options.rootName,h=this,u=function(t,e){var n,l,c,p,d,f;if("object"!=typeof e)h.options.cdata&&o(e)?t.raw(s(e)):t.txt(e);else if(Array.isArray(e)){for(p in e)if(a.call(e,p))for(d in l=e[p])c=l[d],t=u(t.ele(d),c).up()}else for(d in e)if(a.call(e,d))if(l=e[d],d===r){if("object"==typeof l)for(n in l)f=l[n],t=t.att(n,f)}else if(d===i)t=h.options.cdata&&o(l)?t.raw(s(l)):t.txt(l);else if(Array.isArray(l))for(p in l)a.call(l,p)&&(t="string"==typeof(c=l[p])?h.options.cdata&&o(c)?t.ele(d).raw(s(c)).up():t.ele(d,c).up():u(t.ele(d),c).up());else"object"==typeof l?t=u(t.ele(d),l).up():"string"==typeof l&&h.options.cdata&&o(l)?t=t.ele(d).raw(s(l)).up():(null==l&&(l=""),t=t.ele(d,l.toString()).up());return t},l=e.create(c,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),u(l,t).end(this.options.renderOpts)},t}()}).call(this)},{459:459,495:495}],459:[function(t,e,r){(function(){r.defaults={.1:{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},.2:{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:"\n"},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(this)},{}],495:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h;h=t(465),l=h.assign,c=h.isFunction,i=t(473),o=t(481),s=t(482),u=t(491),a=t(490),r=t(464),n=t(466),e.exports.create=function(t,e,r,n){var i,s;if(null==t)throw new Error("Root element needs a name.");return n=l({},e,r,n),s=(i=new o(n)).element(t),n.headless||(i.declaration(n),null==n.pubID&&null==n.sysID||i.dtd(n)),s},e.exports.begin=function(t,e,r){var n;return c(t)&&(e=(n=[t,e])[0],r=n[1],t={}),e?new s(t,e,r):new o(t)},e.exports.stringWriter=function(t){return new u(t)},e.exports.streamWriter=function(t,e){return new a(t,e)},e.exports.implementation=new i,e.exports.nodeType=r,e.exports.writerState=n}).call(this)},{464:464,465:465,466:466,473:473,481:481,482:482,490:490,491:491}],460:[function(t,e,r){(function(){"use strict";var e,n,i,o,s,a,u,l,c=function(t,e){return function(){return t.apply(e,arguments)}},h={}.hasOwnProperty;u=t(430),i=t(410),e=t(457),a=t(461),l=t(447).setImmediate,n=t(459).defaults,o=function(t){return"object"==typeof t&&null!=t&&0===Object.keys(t).length},s=function(t,e,r){var n,i;for(n=0,i=t.length;n<i;n++)e=(0,t[n])(e,r);return e},r.Parser=function(t){function p(t){var e,i,o;if(this.parseStringPromise=c(this.parseStringPromise,this),this.parseString=c(this.parseString,this),this.reset=c(this.reset,this),this.assignOrPush=c(this.assignOrPush,this),this.processAsync=c(this.processAsync,this),!(this instanceof r.Parser))return new r.Parser(t);for(e in this.options={},i=n[.2])h.call(i,e)&&(o=i[e],this.options[e]=o);for(e in t)h.call(t,e)&&(o=t[e],this.options[e]=o);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(a.normalize)),this.reset()}return function(t,e){for(var r in e)h.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(p,i),p.prototype.processAsync=function(){var t,e;try{return this.remaining.length<=this.options.chunkSize?(t=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(t),this.saxParser.close()):(t=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(t),l(this.processAsync))}catch(r){if(e=r,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(e)}},p.prototype.assignOrPush=function(t,e,r){return e in t?(t[e]instanceof Array||(t[e]=[t[e]]),t[e].push(r)):this.options.explicitArray?t[e]=[r]:t[e]=r},p.prototype.reset=function(){var t,e,r,n,i;return this.removeAllListeners(),this.saxParser=u.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=(i=this,function(t){if(i.saxParser.resume(),!i.saxParser.errThrown)return i.saxParser.errThrown=!0,i.emit("error",t)}),this.saxParser.onend=function(t){return function(){if(!t.saxParser.ended)return t.saxParser.ended=!0,t.emit("end",t.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,n=[],t=this.options.attrkey,e=this.options.charkey,this.saxParser.onopentag=function(r){return function(i){var o,a,u,l,c;if((u={})[e]="",!r.options.ignoreAttrs)for(o in c=i.attributes)h.call(c,o)&&(t in u||r.options.mergeAttrs||(u[t]={}),a=r.options.attrValueProcessors?s(r.options.attrValueProcessors,i.attributes[o],o):i.attributes[o],l=r.options.attrNameProcessors?s(r.options.attrNameProcessors,o):o,r.options.mergeAttrs?r.assignOrPush(u,l,a):u[t][l]=a);return u["#name"]=r.options.tagNameProcessors?s(r.options.tagNameProcessors,i.name):i.name,r.options.xmlns&&(u[r.options.xmlnskey]={uri:i.uri,local:i.local}),n.push(u)}}(this),this.saxParser.onclosetag=function(t){return function(){var r,i,a,u,l,c,p,d,f,y;if(c=n.pop(),l=c["#name"],t.options.explicitChildren&&t.options.preserveChildrenOrder||delete c["#name"],!0===c.cdata&&(r=c.cdata,delete c.cdata),f=n[n.length-1],c[e].match(/^\s*$/)&&!r?(i=c[e],delete c[e]):(t.options.trim&&(c[e]=c[e].trim()),t.options.normalize&&(c[e]=c[e].replace(/\s{2,}/g," ").trim()),c[e]=t.options.valueProcessors?s(t.options.valueProcessors,c[e],l):c[e],1===Object.keys(c).length&&e in c&&!t.EXPLICIT_CHARKEY&&(c=c[e])),o(c)&&(c=""!==t.options.emptyTag?t.options.emptyTag:i),null!=t.options.validator&&(y="/"+function(){var t,e,r;for(r=[],t=0,e=n.length;t<e;t++)u=n[t],r.push(u["#name"]);return r}().concat(l).join("/"),function(){var e;try{c=t.options.validator(y,f&&f[l],c)}catch(r){return e=r,t.emit("error",e)}}()),t.options.explicitChildren&&!t.options.mergeAttrs&&"object"==typeof c)if(t.options.preserveChildrenOrder){if(f){for(a in f[t.options.childkey]=f[t.options.childkey]||[],p={},c)h.call(c,a)&&(p[a]=c[a]);f[t.options.childkey].push(p),delete c["#name"],1===Object.keys(c).length&&e in c&&!t.EXPLICIT_CHARKEY&&(c=c[e])}}else u={},t.options.attrkey in c&&(u[t.options.attrkey]=c[t.options.attrkey],delete c[t.options.attrkey]),!t.options.charsAsChildren&&t.options.charkey in c&&(u[t.options.charkey]=c[t.options.charkey],delete c[t.options.charkey]),Object.getOwnPropertyNames(c).length>0&&(u[t.options.childkey]=c),c=u;return n.length>0?t.assignOrPush(f,l,c):(t.options.explicitRoot&&(d=c,(c={})[l]=d),t.resultObject=c,t.saxParser.ended=!0,t.emit("end",t.resultObject))}}(this),r=function(t){return function(r){var i,o;if(o=n[n.length-1])return o[e]+=r,t.options.explicitChildren&&t.options.preserveChildrenOrder&&t.options.charsAsChildren&&(t.options.includeWhiteChars||""!==r.replace(/\\n/g,"").trim())&&(o[t.options.childkey]=o[t.options.childkey]||[],(i={"#name":"__text__"})[e]=r,t.options.normalize&&(i[e]=i[e].replace(/\s{2,}/g," ").trim()),o[t.options.childkey].push(i)),o}}(this),this.saxParser.ontext=r,this.saxParser.oncdata=function(t){var e;if(e=r(t))return e.cdata=!0}},p.prototype.parseString=function(t,r){var n;null!=r&&"function"==typeof r&&(this.on("end",(function(t){return this.reset(),r(null,t)})),this.on("error",(function(t){return this.reset(),r(t)})));try{return""===(t=t.toString()).trim()?(this.emit("end",null),!0):(t=e.stripBOM(t),this.options.async?(this.remaining=t,l(this.processAsync),this.saxParser):this.saxParser.write(t).close())}catch(i){if(n=i,!this.saxParser.errThrown&&!this.saxParser.ended)return this.emit("error",n),this.saxParser.errThrown=!0;if(this.saxParser.ended)throw n}},p.prototype.parseStringPromise=function(t){return new Promise((e=this,function(r,n){return e.parseString(t,(function(t,e){return t?n(t):r(e)}))}));var e},p}(),r.parseString=function(t,e,n){var i,o;return null!=n?("function"==typeof n&&(i=n),"object"==typeof e&&(o=e)):("function"==typeof e&&(i=e),o={}),new r.Parser(o).parseString(t,i)},r.parseStringPromise=function(t,e){var n;return"object"==typeof e&&(n=e),new r.Parser(n).parseStringPromise(t)}}).call(this)},{410:410,430:430,447:447,457:457,459:459,461:461}],461:[function(t,e,r){(function(){"use strict";var t;t=new RegExp(/(?!xmlns)^.*:/),r.normalize=function(t){return t.toLowerCase()},r.firstCharLowerCase=function(t){return t.charAt(0).toLowerCase()+t.slice(1)},r.stripPrefix=function(e){return e.replace(t,"")},r.parseNumbers=function(t){return isNaN(t)||(t=t%1==0?parseInt(t,10):parseFloat(t)),t},r.parseBooleans=function(t){return/^(?:true|false)$/i.test(t)&&(t="true"===t.toLowerCase()),t}}).call(this)},{}],463:[function(t,e,r){(function(){e.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(this)},{}],464:[function(t,e,r){(function(){e.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(this)},{}],465:[function(t,e,r){(function(){var t,r,n,i,o,s,a,u=[].slice,l={}.hasOwnProperty;t=function(){var t,e,r,n,i,s;if(s=arguments[0],i=2<=arguments.length?u.call(arguments,1):[],o(Object.assign))Object.assign.apply(null,arguments);else for(t=0,r=i.length;t<r;t++)if(null!=(n=i[t]))for(e in n)l.call(n,e)&&(s[e]=n[e]);return s},o=function(t){return!!t&&"[object Function]"===Object.prototype.toString.call(t)},s=function(t){var e;return!!t&&("function"==(e=typeof t)||"object"===e)},n=function(t){return o(Array.isArray)?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(t)},i=function(t){var e;if(n(t))return!t.length;for(e in t)if(l.call(t,e))return!1;return!0},a=function(t){var e,r;return s(t)&&(r=Object.getPrototypeOf(t))&&(e=r.constructor)&&"function"==typeof e&&e instanceof e&&Function.prototype.toString.call(e)===Function.prototype.toString.call(Object)},r=function(t){return o(t.valueOf)?t.valueOf():t},e.exports.assign=t,e.exports.isFunction=o,e.exports.isObject=s,e.exports.isArray=n,e.exports.isEmpty=i,e.exports.isPlainObject=a,e.exports.getValue=r}).call(this)},{}],466:[function(t,e,r){(function(){e.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(this)},{}],467:[function(t,e,r){(function(){var r;r=t(464),t(486),e.exports=function(){function t(t,e,n){if(this.parent=t,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),null==e)throw new Error("Missing attribute name. "+this.debugInfo(e));this.name=this.stringify.name(e),this.value=this.stringify.attValue(n),this.type=r.Attribute,this.isId=!1,this.schemaTypeInfo=null}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(t.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(t.prototype,"textContent",{get:function(){return this.value},set:function(t){return this.value=t||""}}),Object.defineProperty(t.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(t.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(t.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(t.prototype,"specified",{get:function(){return!0}}),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(t){return this.options.writer.attribute(this,this.options.writer.filterOptions(t))},t.prototype.debugInfo=function(t){return null==(t=t||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+t+"}, parent: <"+this.parent.name+">"},t.prototype.isEqualNode=function(t){return t.namespaceURI===this.namespaceURI&&t.prefix===this.prefix&&t.localName===this.localName&&t.value===this.value},t}()}).call(this)},{464:464,486:486}],486:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h,p,d,f,y,m,g,v,T={}.hasOwnProperty;v=t(465),g=v.isObject,m=v.isFunction,y=v.isEmpty,f=v.getValue,l=null,i=null,o=null,s=null,a=null,p=null,d=null,h=null,u=null,n=null,c=null,r=null,e.exports=function(){function e(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,l||(l=t(484),i=t(468),o=t(470),s=t(479),a=t(480),p=t(489),d=t(493),h=t(488),u=t(483),n=t(464),c=t(487),t(485),r=t(463))}return Object.defineProperty(e.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.childNodeList&&this.childNodeList.nodes||(this.childNodeList=new c(this.children)),this.childNodeList}}),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){var t;return t=this.parent.children.indexOf(this),this.parent.children[t-1]||null}}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){var t;return t=this.parent.children.indexOf(this),this.parent.children[t+1]||null}}),Object.defineProperty(e.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(e.prototype,"textContent",{get:function(){var t,e,r,i,o;if(this.nodeType===n.Element||this.nodeType===n.DocumentFragment){for(o="",e=0,r=(i=this.children).length;e<r;e++)(t=i[e]).textContent&&(o+=t.textContent);return o}return null},set:function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e.prototype.setParent=function(t){var e,r,n,i,o;for(this.parent=t,t&&(this.options=t.options,this.stringify=t.stringify),o=[],r=0,n=(i=this.children).length;r<n;r++)e=i[r],o.push(e.setParent(this));return o},e.prototype.element=function(t,e,r){var n,i,o,s,a,u,l,c,h,p,d;if(u=null,null===e&&null==r&&(e=(h=[{},null])[0],r=h[1]),null==e&&(e={}),e=f(e),g(e)||(r=(p=[e,r])[0],e=p[1]),null!=t&&(t=f(t)),Array.isArray(t))for(o=0,l=t.length;o<l;o++)i=t[o],u=this.element(i);else if(m(t))u=this.element(t.apply());else if(g(t)){for(a in t)if(T.call(t,a))if(d=t[a],m(d)&&(d=d.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===a.indexOf(this.stringify.convertAttKey))u=this.attribute(a.substr(this.stringify.convertAttKey.length),d);else if(!this.options.separateArrayItems&&Array.isArray(d)&&y(d))u=this.dummy();else if(g(d)&&y(d))u=this.element(a);else if(this.options.keepNullNodes||null!=d)if(!this.options.separateArrayItems&&Array.isArray(d))for(s=0,c=d.length;s<c;s++)i=d[s],(n={})[a]=i,u=this.element(n);else g(d)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===a.indexOf(this.stringify.convertTextKey)?u=this.element(d):(u=this.element(a)).element(d):u=this.element(a,d);else u=this.dummy()}else u=this.options.keepNullNodes||null!==r?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===t.indexOf(this.stringify.convertTextKey)?this.text(r):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===t.indexOf(this.stringify.convertCDataKey)?this.cdata(r):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===t.indexOf(this.stringify.convertCommentKey)?this.comment(r):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===t.indexOf(this.stringify.convertRawKey)?this.raw(r):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===t.indexOf(this.stringify.convertPIKey)?this.instruction(t.substr(this.stringify.convertPIKey.length),r):this.node(t,e,r):this.dummy();if(null==u)throw new Error("Could not create any elements with: "+t+". "+this.debugInfo());return u},e.prototype.insertBefore=function(t,e,r){var n,i,o,s,a;if(null!=t?t.type:void 0)return s=e,(o=t).setParent(this),s?(i=children.indexOf(s),a=children.splice(i),children.push(o),Array.prototype.push.apply(children,a)):children.push(o),o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(t));return i=this.parent.children.indexOf(this),a=this.parent.children.splice(i),n=this.parent.element(t,e,r),Array.prototype.push.apply(this.parent.children,a),n},e.prototype.insertAfter=function(t,e,r){var n,i,o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(t));return i=this.parent.children.indexOf(this),o=this.parent.children.splice(i+1),n=this.parent.element(t,e,r),Array.prototype.push.apply(this.parent.children,o),n},e.prototype.remove=function(){var t;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return t=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[t,t-t+1].concat([])),this.parent},e.prototype.node=function(t,e,r){var n,i;return null!=t&&(t=f(t)),e||(e={}),e=f(e),g(e)||(r=(i=[e,r])[0],e=i[1]),n=new l(this,t,e),null!=r&&n.text(r),this.children.push(n),n},e.prototype.text=function(t){var e;return g(t)&&this.element(t),e=new d(this,t),this.children.push(e),this},e.prototype.cdata=function(t){var e;return e=new i(this,t),this.children.push(e),this},e.prototype.comment=function(t){var e;return e=new o(this,t),this.children.push(e),this},e.prototype.commentBefore=function(t){var e,r;return e=this.parent.children.indexOf(this),r=this.parent.children.splice(e),this.parent.comment(t),Array.prototype.push.apply(this.parent.children,r),this},e.prototype.commentAfter=function(t){var e,r;return e=this.parent.children.indexOf(this),r=this.parent.children.splice(e+1),this.parent.comment(t),Array.prototype.push.apply(this.parent.children,r),this},e.prototype.raw=function(t){var e;return e=new p(this,t),this.children.push(e),this},e.prototype.dummy=function(){return new u(this)},e.prototype.instruction=function(t,e){var r,n,i,o,s;if(null!=t&&(t=f(t)),null!=e&&(e=f(e)),Array.isArray(t))for(o=0,s=t.length;o<s;o++)r=t[o],this.instruction(r);else if(g(t))for(r in t)T.call(t,r)&&(n=t[r],this.instruction(r,n));else m(e)&&(e=e.apply()),i=new h(this,t,e),this.children.push(i);return this},e.prototype.instructionBefore=function(t,e){var r,n;return r=this.parent.children.indexOf(this),n=this.parent.children.splice(r),this.parent.instruction(t,e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.instructionAfter=function(t,e){var r,n;return r=this.parent.children.indexOf(this),n=this.parent.children.splice(r+1),this.parent.instruction(t,e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.declaration=function(t,e,r){var i,o;return i=this.document(),o=new s(i,t,e,r),0===i.children.length?i.children.unshift(o):i.children[0].type===n.Declaration?i.children[0]=o:i.children.unshift(o),i.root()||i},e.prototype.dtd=function(t,e){var r,i,o,s,u,l,c,h,p;for(r=this.document(),i=new a(r,t,e),o=s=0,l=(h=r.children).length;s<l;o=++s)if(h[o].type===n.DocType)return r.children[o]=i,i;for(o=u=0,c=(p=r.children).length;u<c;o=++u)if(p[o].isRoot)return r.children.splice(o,0,i),i;return r.children.push(i),i},e.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},e.prototype.root=function(){var t;for(t=this;t;){if(t.type===n.Document)return t.rootObject;if(t.isRoot)return t;t=t.parent}},e.prototype.document=function(){var t;for(t=this;t;){if(t.type===n.Document)return t;t=t.parent}},e.prototype.end=function(t){return this.document().end(t)},e.prototype.prev=function(){var t;if((t=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[t-1]},e.prototype.next=function(){var t;if(-1===(t=this.parent.children.indexOf(this))||t===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[t+1]},e.prototype.importDocument=function(t){var e;return(e=t.root().clone()).parent=this,e.isRoot=!1,this.children.push(e),this},e.prototype.debugInfo=function(t){var e,r;return null!=(t=t||this.name)||(null!=(e=this.parent)?e.name:void 0)?null==t?"parent: <"+this.parent.name+">":(null!=(r=this.parent)?r.name:void 0)?"node: <"+t+">, parent: <"+this.parent.name+">":"node: <"+t+">":""},e.prototype.ele=function(t,e,r){return this.element(t,e,r)},e.prototype.nod=function(t,e,r){return this.node(t,e,r)},e.prototype.txt=function(t){return this.text(t)},e.prototype.dat=function(t){return this.cdata(t)},e.prototype.com=function(t){return this.comment(t)},e.prototype.ins=function(t,e){return this.instruction(t,e)},e.prototype.doc=function(){return this.document()},e.prototype.dec=function(t,e,r){return this.declaration(t,e,r)},e.prototype.e=function(t,e,r){return this.element(t,e,r)},e.prototype.n=function(t,e,r){return this.node(t,e,r)},e.prototype.t=function(t){return this.text(t)},e.prototype.d=function(t){return this.cdata(t)},e.prototype.c=function(t){return this.comment(t)},e.prototype.r=function(t){return this.raw(t)},e.prototype.i=function(t,e){return this.instruction(t,e)},e.prototype.u=function(){return this.up()},e.prototype.importXMLBuilder=function(t){return this.importDocument(t)},e.prototype.replaceChild=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeChild=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.appendChild=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.hasChildNodes=function(){return 0!==this.children.length},e.prototype.cloneNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.normalize=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isSupported=function(t,e){return!0},e.prototype.hasAttributes=function(){return 0!==this.attribs.length},e.prototype.compareDocumentPosition=function(t){var e;return this===t?0:this.document()!==t.document()?(e=r.Disconnected|r.ImplementationSpecific,Math.random()<.5?e|=r.Preceding:e|=r.Following,e):this.isAncestor(t)?r.Contains|r.Preceding:this.isDescendant(t)?r.Contains|r.Following:this.isPreceding(t)?r.Preceding:r.Following},e.prototype.isSameNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.lookupPrefix=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isDefaultNamespace=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.lookupNamespaceURI=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){var e,r,n;if(t.nodeType!==this.nodeType)return!1;if(t.children.length!==this.children.length)return!1;for(e=r=0,n=this.children.length-1;0<=n?r<=n:r>=n;e=0<=n?++r:--r)if(!this.children[e].isEqualNode(t.children[e]))return!1;return!0},e.prototype.getFeature=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setUserData=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getUserData=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.contains=function(t){return!!t&&(t===this||this.isDescendant(t))},e.prototype.isDescendant=function(t){var e,r,n,i;for(r=0,n=(i=this.children).length;r<n;r++){if(t===(e=i[r]))return!0;if(e.isDescendant(t))return!0}return!1},e.prototype.isAncestor=function(t){return t.isDescendant(this)},e.prototype.isPreceding=function(t){var e,r;return e=this.treePosition(t),r=this.treePosition(this),-1!==e&&-1!==r&&e<r},e.prototype.isFollowing=function(t){var e,r;return e=this.treePosition(t),r=this.treePosition(this),-1!==e&&-1!==r&&e>r},e.prototype.treePosition=function(t){var e,r;return r=0,e=!1,this.foreachTreeNode(this.document(),(function(n){if(r++,!e&&n===t)return e=!0})),e?r:-1},e.prototype.foreachTreeNode=function(t,e){var r,n,i,o,s;for(t||(t=this.document()),n=0,i=(o=t.children).length;n<i;n++){if(s=e(r=o[n]))return s;if(s=this.foreachTreeNode(r,e))return s}},e}()}).call(this)},{463:463,464:464,465:465,468:468,470:470,479:479,480:480,483:483,484:484,485:485,487:487,488:488,489:489,493:493}],468:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=r.CData,this.value=this.stringify.cdata(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.cdata(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,469:469}],469:[function(t,e,r){(function(){var r,n={}.hasOwnProperty;r=t(486),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t),this.value=""}return function(t,e){for(var r in e)n.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,r),Object.defineProperty(e.prototype,"data",{get:function(){return this.value},set:function(t){return this.value=t||""}}),Object.defineProperty(e.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(t){return this.value=t||""}}),e.prototype.clone=function(){return Object.create(this)},e.prototype.substringData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.appendData=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.insertData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.deleteData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.replaceData=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.data===this.data},e}()}).call(this)},{486:486}],470:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=r.Comment,this.value=this.stringify.comment(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.comment(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,469:469}],471:[function(t,e,r){(function(){var r,n;r=t(472),n=t(474),e.exports=function(){function t(){this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new r,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=Object.create(this.defaultParams)}return Object.defineProperty(t.prototype,"parameterNames",{get:function(){return new n(Object.keys(this.defaultParams))}}),t.prototype.getParameter=function(t){return this.params.hasOwnProperty(t)?this.params[t]:null},t.prototype.canSetParameter=function(t,e){return!0},t.prototype.setParameter=function(t,e){return null!=e?this.params[t]=e:delete this.params[t]},t}()}).call(this)},{472:472,474:474}],472:[function(t,e,r){(function(){e.exports=function(){function t(){}return t.prototype.handleError=function(t){throw new Error(t)},t}()}).call(this)},{}],474:[function(t,e,r){(function(){e.exports=function(){function t(t){this.arr=t||[]}return Object.defineProperty(t.prototype,"length",{get:function(){return this.arr.length}}),t.prototype.item=function(t){return this.arr[t]||null},t.prototype.contains=function(t){return-1!==this.arr.indexOf(t)},t}()}).call(this)},{}],473:[function(t,e,r){(function(){e.exports=function(){function t(){}return t.prototype.hasFeature=function(t,e){return!0},t.prototype.createDocumentType=function(t,e,r){throw new Error("This DOM method is not implemented.")},t.prototype.createDocument=function(t,e,r){throw new Error("This DOM method is not implemented.")},t.prototype.createHTMLDocument=function(t){throw new Error("This DOM method is not implemented.")},t.prototype.getFeature=function(t,e){throw new Error("This DOM method is not implemented.")},t}()}).call(this)},{}],475:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i,o,s,a){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!s)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==s.indexOf("#")&&(s="#"+s),!s.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(a&&!s.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.name(n),this.type=r.AttributeDeclaration,this.attributeName=this.stringify.name(i),this.attributeType=this.stringify.dtdAttType(o),a&&(this.defaultValue=this.stringify.dtdAttDefault(a)),this.defaultValueType=s}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],476:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.name(n),this.type=r.ElementDeclaration,this.value=this.stringify.dtdElementValue(i)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],477:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).isObject,n=t(486),r=t(464),e.exports=function(t){function e(t,n,o,s){if(e.__super__.constructor.call(this,t),null==o)throw new Error("Missing DTD entity name. "+this.debugInfo(o));if(null==s)throw new Error("Missing DTD entity value. "+this.debugInfo(o));if(this.pe=!!n,this.name=this.stringify.name(o),this.type=r.EntityDeclaration,i(s)){if(!s.pubID&&!s.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(o));if(s.pubID&&!s.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(o));if(this.internal=!1,null!=s.pubID&&(this.pubID=this.stringify.dtdPubID(s.pubID)),null!=s.sysID&&(this.sysID=this.stringify.dtdSysID(s.sysID)),null!=s.nData&&(this.nData=this.stringify.dtdNData(s.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(o))}else this.value=this.stringify.dtdEntityValue(s),this.internal=!0}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return null}}),e.prototype.toString=function(t){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,465:465,486:486}],478:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.name(n),this.type=r.NotationDeclaration,null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),e.prototype.toString=function(t){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],479:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).isObject,n=t(486),r=t(464),e.exports=function(t){function e(t,n,o,s){var a;e.__super__.constructor.call(this,t),i(n)&&(n=(a=n).version,o=a.encoding,s=a.standalone),n||(n="1.0"),this.type=r.Declaration,this.version=this.stringify.xmlVersion(n),null!=o&&(this.encoding=this.stringify.xmlEncoding(o)),null!=s&&(this.standalone=this.stringify.xmlStandalone(s))}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.declaration(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,465:465,486:486}],480:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c={}.hasOwnProperty;l=t(465).isObject,u=t(486),r=t(464),n=t(475),o=t(477),i=t(476),s=t(478),a=t(485),e.exports=function(t){function e(t,n,i){var o,s,a,u,c,h;if(e.__super__.constructor.call(this,t),this.type=r.DocType,t.children)for(s=0,a=(u=t.children).length;s<a;s++)if((o=u[s]).type===r.Element){this.name=o.name;break}this.documentObject=t,l(n)&&(n=(c=n).pubID,i=c.sysID),null==i&&(i=(h=[n,i])[0],n=h[1]),null!=n&&(this.pubID=this.stringify.dtdPubID(n)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}return function(t,e){for(var r in e)c.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,u),Object.defineProperty(e.prototype,"entities",{get:function(){var t,e,n,i,o;for(i={},e=0,n=(o=this.children).length;e<n;e++)(t=o[e]).type!==r.EntityDeclaration||t.pe||(i[t.name]=t);return new a(i)}}),Object.defineProperty(e.prototype,"notations",{get:function(){var t,e,n,i,o;for(i={},e=0,n=(o=this.children).length;e<n;e++)(t=o[e]).type===r.NotationDeclaration&&(i[t.name]=t);return new a(i)}}),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e.prototype.element=function(t,e){var r;return r=new i(this,t,e),this.children.push(r),this},e.prototype.attList=function(t,e,r,i,o){var s;return s=new n(this,t,e,r,i,o),this.children.push(s),this},e.prototype.entity=function(t,e){var r;return r=new o(this,!1,t,e),this.children.push(r),this},e.prototype.pEntity=function(t,e){var r;return r=new o(this,!0,t,e),this.children.push(r),this},e.prototype.notation=function(t,e){var r;return r=new s(this,t,e),this.children.push(r),this},e.prototype.toString=function(t){return this.options.writer.docType(this,this.options.writer.filterOptions(t))},e.prototype.ele=function(t,e){return this.element(t,e)},e.prototype.att=function(t,e,r,n,i){return this.attList(t,e,r,n,i)},e.prototype.ent=function(t,e){return this.entity(t,e)},e.prototype.pent=function(t,e){return this.pEntity(t,e)},e.prototype.not=function(t,e){return this.notation(t,e)},e.prototype.up=function(){return this.root()||this.documentObject},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.name===this.name&&t.publicId===this.publicId&&t.systemId===this.systemId},e}()}).call(this)},{464:464,465:465,475:475,476:476,477:477,478:478,485:485,486:486}],485:[function(t,e,r){(function(){e.exports=function(){function t(t){this.nodes=t}return Object.defineProperty(t.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.getNamedItem=function(t){return this.nodes[t]},t.prototype.setNamedItem=function(t){var e;return e=this.nodes[t.nodeName],this.nodes[t.nodeName]=t,e||null},t.prototype.removeNamedItem=function(t){var e;return e=this.nodes[t],delete this.nodes[t],e||null},t.prototype.item=function(t){return this.nodes[Object.keys(this.nodes)[t]]||null},t.prototype.getNamedItemNS=function(t,e){throw new Error("This DOM method is not implemented.")},t.prototype.setNamedItemNS=function(t){throw new Error("This DOM method is not implemented.")},t.prototype.removeNamedItemNS=function(t,e){throw new Error("This DOM method is not implemented.")},t}()}).call(this)},{}],481:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l={}.hasOwnProperty;u=t(465).isPlainObject,i=t(473),n=t(471),o=t(486),r=t(464),a=t(492),s=t(491),e.exports=function(t){function e(t){e.__super__.constructor.call(this,null),this.name="#document",this.type=r.Document,this.documentURI=null,this.domConfig=new n,t||(t={}),t.writer||(t.writer=new s),this.options=t,this.stringify=new a(t)}return function(t,e){for(var r in e)l.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,o),Object.defineProperty(e.prototype,"implementation",{value:new i}),Object.defineProperty(e.prototype,"doctype",{get:function(){var t,e,n,i;for(e=0,n=(i=this.children).length;e<n;e++)if((t=i[e]).type===r.DocType)return t;return null}}),Object.defineProperty(e.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration?this.children[0].encoding:null}}),Object.defineProperty(e.prototype,"xmlStandalone",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration&&"yes"===this.children[0].standalone}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(e.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(e.prototype,"origin",{get:function(){return null}}),Object.defineProperty(e.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(e.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(e.prototype,"contentType",{get:function(){return null}}),e.prototype.end=function(t){var e;return e={},t?u(t)&&(e=t,t=this.options.writer):t=this.options.writer,t.document(this,t.filterOptions(e))},e.prototype.toString=function(t){return this.options.writer.document(this,this.options.writer.filterOptions(t))},e.prototype.createElement=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createDocumentFragment=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createTextNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createComment=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createCDATASection=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createProcessingInstruction=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createAttribute=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createEntityReference=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.importNode=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createElementNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementById=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.adoptNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.normalizeDocument=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.renameNode=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByClassName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createEvent=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createRange=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createNodeIterator=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createTreeWalker=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e}()}).call(this)},{464:464,465:465,471:471,473:473,486:486,491:491,492:492}],491:[function(t,e,r){(function(){var r,n={}.hasOwnProperty;r=t(494),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t)}return function(t,e){for(var r in e)n.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,r),e.prototype.document=function(t,e){var r,n,i,o,s;for(e=this.filterOptions(e),o="",n=0,i=(s=t.children).length;n<i;n++)r=s[n],o+=this.writeChildNode(r,e,0);return e.pretty&&o.slice(-e.newline.length)===e.newline&&(o=o.slice(0,-e.newline.length)),o},e}()}).call(this)},{494:494}],492:[function(t,e,r){(function(){var t=function(t,e){return function(){return t.apply(e,arguments)}},r={}.hasOwnProperty;e.exports=function(){function e(e){var n,i,o;for(n in this.assertLegalName=t(this.assertLegalName,this),this.assertLegalChar=t(this.assertLegalChar,this),e||(e={}),this.options=e,this.options.version||(this.options.version="1.0"),i=e.stringify||{})r.call(i,n)&&(o=i[n],this[n]=o)}return e.prototype.name=function(t){return this.options.noValidation?t:this.assertLegalName(""+t||"")},e.prototype.text=function(t){return this.options.noValidation?t:this.assertLegalChar(this.textEscape(""+t||""))},e.prototype.cdata=function(t){return this.options.noValidation?t:(t=(t=""+t||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(t))},e.prototype.comment=function(t){if(this.options.noValidation)return t;if((t=""+t||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+t);return this.assertLegalChar(t)},e.prototype.raw=function(t){return this.options.noValidation?t:""+t||""},e.prototype.attValue=function(t){return this.options.noValidation?t:this.assertLegalChar(this.attEscape(t=""+t||""))},e.prototype.insTarget=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.insValue=function(t){if(this.options.noValidation)return t;if((t=""+t||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+t);return this.assertLegalChar(t)},e.prototype.xmlVersion=function(t){if(this.options.noValidation)return t;if(!(t=""+t||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+t);return t},e.prototype.xmlEncoding=function(t){if(this.options.noValidation)return t;if(!(t=""+t||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+t);return this.assertLegalChar(t)},e.prototype.xmlStandalone=function(t){return this.options.noValidation?t:t?"yes":"no"},e.prototype.dtdPubID=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdSysID=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdElementValue=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdAttType=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdAttDefault=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdEntityValue=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdNData=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e.prototype.assertLegalChar=function(t){var e,r;if(this.options.noValidation)return t;if(e="","1.0"===this.options.version){if(e=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,r=t.match(e))throw new Error("Invalid character in string: "+t+" at index "+r.index)}else if("1.1"===this.options.version&&(e=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,r=t.match(e)))throw new Error("Invalid character in string: "+t+" at index "+r.index);return t},e.prototype.assertLegalName=function(t){var e;if(this.options.noValidation)return t;if(this.assertLegalChar(t),e=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!t.match(e))throw new Error("Invalid character in name");return t},e.prototype.textEscape=function(t){var e;return this.options.noValidation?t:(e=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,t.replace(e,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))},e.prototype.attEscape=function(t){var e;return this.options.noValidation?t:(e=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,t.replace(e,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))},e}()}).call(this)},{}],482:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h,p,d,f,y,m,g,v,T,_,E,b,S,x,C={}.hasOwnProperty;x=t(465),b=x.isObject,E=x.isFunction,S=x.isPlainObject,_=x.getValue,r=t(464),d=t(481),f=t(484),o=t(468),s=t(470),m=t(489),T=t(493),y=t(488),h=t(479),p=t(480),a=t(475),l=t(477),u=t(476),c=t(478),i=t(467),v=t(492),g=t(491),n=t(466),e.exports=function(){function t(t,e,n){var i;this.name="?xml",this.type=r.Document,t||(t={}),i={},t.writer?S(t.writer)&&(i=t.writer,t.writer=new g):t.writer=new g,this.options=t,this.writer=t.writer,this.writerOptions=this.writer.filterOptions(i),this.stringify=new v(t),this.onDataCallback=e||function(){},this.onEndCallback=n||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return t.prototype.createChildNode=function(t){var e,n,i,o,s,a,u,l;switch(t.type){case r.CData:this.cdata(t.value);break;case r.Comment:this.comment(t.value);break;case r.Element:for(n in i={},u=t.attribs)C.call(u,n)&&(e=u[n],i[n]=e.value);this.node(t.name,i);break;case r.Dummy:this.dummy();break;case r.Raw:this.raw(t.value);break;case r.Text:this.text(t.value);break;case r.ProcessingInstruction:this.instruction(t.target,t.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+t.constructor.name)}for(s=0,a=(l=t.children).length;s<a;s++)o=l[s],this.createChildNode(o),o.type===r.Element&&this.up();return this},t.prototype.dummy=function(){return this},t.prototype.node=function(t,e,r){var n;if(null==t)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(t));return this.openCurrent(),t=_(t),null==e&&(e={}),e=_(e),b(e)||(r=(n=[e,r])[0],e=n[1]),this.currentNode=new f(this,t,e),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=r&&this.text(r),this},t.prototype.element=function(t,e,n){var i,o,s,a,u,l;if(this.currentNode&&this.currentNode.type===r.DocType)this.dtdElement.apply(this,arguments);else if(Array.isArray(t)||b(t)||E(t))for(a=this.options.noValidation,this.options.noValidation=!0,(l=new d(this.options).element("TEMP_ROOT")).element(t),this.options.noValidation=a,o=0,s=(u=l.children).length;o<s;o++)i=u[o],this.createChildNode(i),i.type===r.Element&&this.up();else this.node(t,e,n);return this},t.prototype.attribute=function(t,e){var r,n;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(t));if(null!=t&&(t=_(t)),b(t))for(r in t)C.call(t,r)&&(n=t[r],this.attribute(r,n));else E(e)&&(e=e.apply()),this.options.keepNullAttributes&&null==e?this.currentNode.attribs[t]=new i(this,t,""):null!=e&&(this.currentNode.attribs[t]=new i(this,t,e));return this},t.prototype.text=function(t){var e;return this.openCurrent(),e=new T(this,t),this.onData(this.writer.text(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.cdata=function(t){var e;return this.openCurrent(),e=new o(this,t),this.onData(this.writer.cdata(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.comment=function(t){var e;return this.openCurrent(),e=new s(this,t),this.onData(this.writer.comment(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.raw=function(t){var e;return this.openCurrent(),e=new m(this,t),this.onData(this.writer.raw(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.instruction=function(t,e){var r,n,i,o,s;if(this.openCurrent(),null!=t&&(t=_(t)),null!=e&&(e=_(e)),Array.isArray(t))for(r=0,o=t.length;r<o;r++)n=t[r],this.instruction(n);else if(b(t))for(n in t)C.call(t,n)&&(i=t[n],this.instruction(n,i));else E(e)&&(e=e.apply()),s=new y(this,t,e),this.onData(this.writer.processingInstruction(s,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this},t.prototype.declaration=function(t,e,r){var n;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return n=new h(this,t,e,r),this.onData(this.writer.declaration(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.doctype=function(t,e,r){if(this.openCurrent(),null==t)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new p(this,e,r),this.currentNode.rootNodeName=t,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},t.prototype.dtdElement=function(t,e){var r;return this.openCurrent(),r=new u(this,t,e),this.onData(this.writer.dtdElement(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.attList=function(t,e,r,n,i){var o;return this.openCurrent(),o=new a(this,t,e,r,n,i),this.onData(this.writer.dtdAttList(o,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.entity=function(t,e){var r;return this.openCurrent(),r=new l(this,!1,t,e),this.onData(this.writer.dtdEntity(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.pEntity=function(t,e){var r;return this.openCurrent(),r=new l(this,!0,t,e),this.onData(this.writer.dtdEntity(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.notation=function(t,e){var r;return this.openCurrent(),r=new c(this,t,e),this.onData(this.writer.dtdNotation(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},t.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},t.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},t.prototype.openNode=function(t){var e,i,o,s;if(!t.isOpen){if(this.root||0!==this.currentLevel||t.type!==r.Element||(this.root=t),i="",t.type===r.Element){for(o in this.writerOptions.state=n.OpenTag,i=this.writer.indent(t,this.writerOptions,this.currentLevel)+"<"+t.name,s=t.attribs)C.call(s,o)&&(e=s[o],i+=this.writer.attribute(e,this.writerOptions,this.currentLevel));i+=(t.children?">":"/>")+this.writer.endline(t,this.writerOptions,this.currentLevel),this.writerOptions.state=n.InsideTag}else this.writerOptions.state=n.OpenTag,i=this.writer.indent(t,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+t.rootNodeName,t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),t.children?(i+=" [",this.writerOptions.state=n.InsideTag):(this.writerOptions.state=n.CloseTag,i+=">"),i+=this.writer.endline(t,this.writerOptions,this.currentLevel);return this.onData(i,this.currentLevel),t.isOpen=!0}},t.prototype.closeNode=function(t){var e;if(!t.isClosed)return"",this.writerOptions.state=n.CloseTag,e=t.type===r.Element?this.writer.indent(t,this.writerOptions,this.currentLevel)+"</"+t.name+">"+this.writer.endline(t,this.writerOptions,this.currentLevel):this.writer.indent(t,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(t,this.writerOptions,this.currentLevel),this.writerOptions.state=n.None,this.onData(e,this.currentLevel),t.isClosed=!0},t.prototype.onData=function(t,e){return this.documentStarted=!0,this.onDataCallback(t,e+1)},t.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},t.prototype.debugInfo=function(t){return null==t?"":"node: <"+t+">"},t.prototype.ele=function(){return this.element.apply(this,arguments)},t.prototype.nod=function(t,e,r){return this.node(t,e,r)},t.prototype.txt=function(t){return this.text(t)},t.prototype.dat=function(t){return this.cdata(t)},t.prototype.com=function(t){return this.comment(t)},t.prototype.ins=function(t,e){return this.instruction(t,e)},t.prototype.dec=function(t,e,r){return this.declaration(t,e,r)},t.prototype.dtd=function(t,e,r){return this.doctype(t,e,r)},t.prototype.e=function(t,e,r){return this.element(t,e,r)},t.prototype.n=function(t,e,r){return this.node(t,e,r)},t.prototype.t=function(t){return this.text(t)},t.prototype.d=function(t){return this.cdata(t)},t.prototype.c=function(t){return this.comment(t)},t.prototype.r=function(t){return this.raw(t)},t.prototype.i=function(t,e){return this.instruction(t,e)},t.prototype.att=function(){return this.currentNode&&this.currentNode.type===r.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},t.prototype.a=function(){return this.currentNode&&this.currentNode.type===r.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},t.prototype.ent=function(t,e){return this.entity(t,e)},t.prototype.pent=function(t,e){return this.pEntity(t,e)},t.prototype.not=function(t,e){return this.notation(t,e)},t}()}).call(this)},{464:464,465:465,466:466,467:467,468:468,470:470,475:475,476:476,477:477,478:478,479:479,480:480,481:481,484:484,488:488,489:489,491:491,492:492,493:493}],484:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c={}.hasOwnProperty;l=t(465),u=l.isObject,a=l.isFunction,s=l.getValue,o=t(486),r=t(464),n=t(467),i=t(485),e.exports=function(t){function e(t,n,i){var o,s,a,u;if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(n),this.type=r.Element,this.attribs={},this.schemaTypeInfo=null,null!=i&&this.attribute(i),t.type===r.Document&&(this.isRoot=!0,this.documentObject=t,t.rootObject=this,t.children))for(s=0,a=(u=t.children).length;s<a;s++)if((o=u[s]).type===r.DocType){o.name=this.name;break}}return function(t,e){for(var r in e)c.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,o),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.attributeMap&&this.attributeMap.nodes||(this.attributeMap=new i(this.attribs)),this.attributeMap}}),e.prototype.clone=function(){var t,e,r,n;for(e in(r=Object.create(this)).isRoot&&(r.documentObject=null),r.attribs={},n=this.attribs)c.call(n,e)&&(t=n[e],r.attribs[e]=t.clone());return r.children=[],this.children.forEach((function(t){var e;return(e=t.clone()).parent=r,r.children.push(e)})),r},e.prototype.attribute=function(t,e){var r,i;if(null!=t&&(t=s(t)),u(t))for(r in t)c.call(t,r)&&(i=t[r],this.attribute(r,i));else a(e)&&(e=e.apply()),this.options.keepNullAttributes&&null==e?this.attribs[t]=new n(this,t,""):null!=e&&(this.attribs[t]=new n(this,t,e));return this},e.prototype.removeAttribute=function(t){var e,r,n;if(null==t)throw new Error("Missing attribute name. "+this.debugInfo());if(t=s(t),Array.isArray(t))for(r=0,n=t.length;r<n;r++)e=t[r],delete this.attribs[e];else delete this.attribs[t];return this},e.prototype.toString=function(t){return this.options.writer.element(this,this.options.writer.filterOptions(t))},e.prototype.att=function(t,e){return this.attribute(t,e)},e.prototype.a=function(t,e){return this.attribute(t,e)},e.prototype.getAttribute=function(t){return this.attribs.hasOwnProperty(t)?this.attribs[t].value:null},e.prototype.setAttribute=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNode=function(t){return this.attribs.hasOwnProperty(t)?this.attribs[t]:null},e.prototype.setAttributeNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeAttributeNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setAttributeNS=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNodeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setAttributeNodeNS=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.hasAttribute=function(t){return this.attribs.hasOwnProperty(t)},e.prototype.hasAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setIdAttribute=function(t,e){return this.attribs.hasOwnProperty(t)?this.attribs[t].isId:e},e.prototype.setIdAttributeNS=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setIdAttributeNode=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByClassName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){var r,n,i;if(!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t))return!1;if(t.namespaceURI!==this.namespaceURI)return!1;if(t.prefix!==this.prefix)return!1;if(t.localName!==this.localName)return!1;if(t.attribs.length!==this.attribs.length)return!1;for(r=n=0,i=this.attribs.length-1;0<=i?n<=i:n>=i;r=0<=i?++n:--n)if(!this.attribs[r].isEqualNode(t.attribs[r]))return!1;return!0},e}()}).call(this)},{464:464,465:465,467:467,485:485,486:486}],489:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(486),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.type=r.Raw,this.value=this.stringify.raw(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.raw(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],493:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=r.Text,this.value=this.stringify.text(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"wholeText",{get:function(){var t,e,r;for(r="",e=this.previousSibling;e;)r=e.data+r,e=e.previousSibling;for(r+=this.data,t=this.nextSibling;t;)r+=t.data,t=t.nextSibling;return r}}),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.text(this,this.options.writer.filterOptions(t))},e.prototype.splitText=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.replaceWholeText=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e}()}).call(this)},{464:464,469:469}],488:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.type=r.ProcessingInstruction,this.target=this.stringify.insTarget(n),this.name=this.target,i&&(this.value=this.stringify.insValue(i))}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(t))},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.target===this.target},e}()}).call(this)},{464:464,469:469}],483:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t),this.type=r.Dummy}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return""},e}()}).call(this)},{464:464,486:486}],487:[function(t,e,r){(function(){e.exports=function(){function t(t){this.nodes=t}return Object.defineProperty(t.prototype,"length",{get:function(){return this.nodes.length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.item=function(t){return this.nodes[t]||null},t}()}).call(this)},{}],490:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;r=t(464),i=t(494),n=t(466),e.exports=function(t){function e(t,r){this.stream=t,e.__super__.constructor.call(this,r)}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,i),e.prototype.endline=function(t,r,i){return t.isLastRootNode&&r.state===n.CloseTag?"":e.__super__.endline.call(this,t,r,i)},e.prototype.document=function(t,e){var r,n,i,o,s,a,u,l,c;for(n=i=0,s=(u=t.children).length;i<s;n=++i)(r=u[n]).isLastRootNode=n===t.children.length-1;for(e=this.filterOptions(e),c=[],o=0,a=(l=t.children).length;o<a;o++)r=l[o],c.push(this.writeChildNode(r,e,0));return c},e.prototype.attribute=function(t,r,n){return this.stream.write(e.__super__.attribute.call(this,t,r,n))},e.prototype.cdata=function(t,r,n){return this.stream.write(e.__super__.cdata.call(this,t,r,n))},e.prototype.comment=function(t,r,n){return this.stream.write(e.__super__.comment.call(this,t,r,n))},e.prototype.declaration=function(t,r,n){return this.stream.write(e.__super__.declaration.call(this,t,r,n))},e.prototype.docType=function(t,e,r){var i,o,s,a;if(r||(r=0),this.openNode(t,e,r),e.state=n.OpenTag,this.stream.write(this.indent(t,e,r)),this.stream.write("<!DOCTYPE "+t.root().name),t.pubID&&t.sysID?this.stream.write(' PUBLIC "'+t.pubID+'" "'+t.sysID+'"'):t.sysID&&this.stream.write(' SYSTEM "'+t.sysID+'"'),t.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(t,e,r)),e.state=n.InsideTag,o=0,s=(a=t.children).length;o<s;o++)i=a[o],this.writeChildNode(i,e,r+1);e.state=n.CloseTag,this.stream.write("]")}return e.state=n.CloseTag,this.stream.write(e.spaceBeforeSlash+">"),this.stream.write(this.endline(t,e,r)),e.state=n.None,this.closeNode(t,e,r)},e.prototype.element=function(t,e,i){var s,a,u,l,c,h,p,d,f;for(p in i||(i=0),this.openNode(t,e,i),e.state=n.OpenTag,this.stream.write(this.indent(t,e,i)+"<"+t.name),d=t.attribs)o.call(d,p)&&(s=d[p],this.attribute(s,e,i));if(l=0===(u=t.children.length)?null:t.children[0],0===u||t.children.every((function(t){return(t.type===r.Text||t.type===r.Raw)&&""===t.value})))e.allowEmpty?(this.stream.write(">"),e.state=n.CloseTag,this.stream.write("</"+t.name+">")):(e.state=n.CloseTag,this.stream.write(e.spaceBeforeSlash+"/>"));else if(!e.pretty||1!==u||l.type!==r.Text&&l.type!==r.Raw||null==l.value){for(this.stream.write(">"+this.endline(t,e,i)),e.state=n.InsideTag,c=0,h=(f=t.children).length;c<h;c++)a=f[c],this.writeChildNode(a,e,i+1);e.state=n.CloseTag,this.stream.write(this.indent(t,e,i)+"</"+t.name+">")}else this.stream.write(">"),e.state=n.InsideTag,e.suppressPrettyCount++,this.writeChildNode(l,e,i+1),e.suppressPrettyCount--,e.state=n.CloseTag,this.stream.write("</"+t.name+">");return this.stream.write(this.endline(t,e,i)),e.state=n.None,this.closeNode(t,e,i)},e.prototype.processingInstruction=function(t,r,n){return this.stream.write(e.__super__.processingInstruction.call(this,t,r,n))},e.prototype.raw=function(t,r,n){return this.stream.write(e.__super__.raw.call(this,t,r,n))},e.prototype.text=function(t,r,n){return this.stream.write(e.__super__.text.call(this,t,r,n))},e.prototype.dtdAttList=function(t,r,n){return this.stream.write(e.__super__.dtdAttList.call(this,t,r,n))},e.prototype.dtdElement=function(t,r,n){return this.stream.write(e.__super__.dtdElement.call(this,t,r,n))},e.prototype.dtdEntity=function(t,r,n){return this.stream.write(e.__super__.dtdEntity.call(this,t,r,n))},e.prototype.dtdNotation=function(t,r,n){return this.stream.write(e.__super__.dtdNotation.call(this,t,r,n))},e}()}).call(this)},{464:464,466:466,494:494}],494:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).assign,r=t(464),t(479),t(480),t(468),t(470),t(484),t(489),t(493),t(488),t(483),t(475),t(476),t(477),t(478),n=t(466),e.exports=function(){function t(t){var e,r,n;for(e in t||(t={}),this.options=t,r=t.writer||{})o.call(r,e)&&(n=r[e],this["_"+e]=this[e],this[e]=n)}return t.prototype.filterOptions=function(t){var e,r,o,s,a,u,l,c;return t||(t={}),t=i({},this.options,t),(e={writer:this}).pretty=t.pretty||!1,e.allowEmpty=t.allowEmpty||!1,e.indent=null!=(r=t.indent)?r:"  ",e.newline=null!=(o=t.newline)?o:"\n",e.offset=null!=(s=t.offset)?s:0,e.dontPrettyTextNodes=null!=(a=null!=(u=t.dontPrettyTextNodes)?u:t.dontprettytextnodes)?a:0,e.spaceBeforeSlash=null!=(l=null!=(c=t.spaceBeforeSlash)?c:t.spacebeforeslash)?l:"",!0===e.spaceBeforeSlash&&(e.spaceBeforeSlash=" "),e.suppressPrettyCount=0,e.user={},e.state=n.None,e},t.prototype.indent=function(t,e,r){var n;return!e.pretty||e.suppressPrettyCount?"":e.pretty&&(n=(r||0)+e.offset+1)>0?new Array(n).join(e.indent):""},t.prototype.endline=function(t,e,r){return!e.pretty||e.suppressPrettyCount?"":e.newline},t.prototype.attribute=function(t,e,r){var n;return this.openAttribute(t,e,r),n=" "+t.name+'="'+t.value+'"',this.closeAttribute(t,e,r),n},t.prototype.cdata=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<![CDATA[",e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+="]]>"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.comment=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"\x3c!-- ",e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=" --\x3e"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.declaration=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<?xml",e.state=n.InsideTag,i+=' version="'+t.version+'"',null!=t.encoding&&(i+=' encoding="'+t.encoding+'"'),null!=t.standalone&&(i+=' standalone="'+t.standalone+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+"?>",i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.docType=function(t,e,r){var i,o,s,a,u;if(r||(r=0),this.openNode(t,e,r),e.state=n.OpenTag,a=this.indent(t,e,r),a+="<!DOCTYPE "+t.root().name,t.pubID&&t.sysID?a+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(a+=' SYSTEM "'+t.sysID+'"'),t.children.length>0){for(a+=" [",a+=this.endline(t,e,r),e.state=n.InsideTag,o=0,s=(u=t.children).length;o<s;o++)i=u[o],a+=this.writeChildNode(i,e,r+1);e.state=n.CloseTag,a+="]"}return e.state=n.CloseTag,a+=e.spaceBeforeSlash+">",a+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),a},t.prototype.element=function(t,e,i){var s,a,u,l,c,h,p,d,f,y,m,g,v,T;for(f in i||(i=0),y=!1,m="",this.openNode(t,e,i),e.state=n.OpenTag,m+=this.indent(t,e,i)+"<"+t.name,g=t.attribs)o.call(g,f)&&(s=g[f],m+=this.attribute(s,e,i));if(l=0===(u=t.children.length)?null:t.children[0],0===u||t.children.every((function(t){return(t.type===r.Text||t.type===r.Raw)&&""===t.value})))e.allowEmpty?(m+=">",e.state=n.CloseTag,m+="</"+t.name+">"+this.endline(t,e,i)):(e.state=n.CloseTag,m+=e.spaceBeforeSlash+"/>"+this.endline(t,e,i));else if(!e.pretty||1!==u||l.type!==r.Text&&l.type!==r.Raw||null==l.value){if(e.dontPrettyTextNodes)for(c=0,p=(v=t.children).length;c<p;c++)if(((a=v[c]).type===r.Text||a.type===r.Raw)&&null!=a.value){e.suppressPrettyCount++,y=!0;break}for(m+=">"+this.endline(t,e,i),e.state=n.InsideTag,h=0,d=(T=t.children).length;h<d;h++)a=T[h],m+=this.writeChildNode(a,e,i+1);e.state=n.CloseTag,m+=this.indent(t,e,i)+"</"+t.name+">",y&&e.suppressPrettyCount--,m+=this.endline(t,e,i),e.state=n.None}else m+=">",e.state=n.InsideTag,e.suppressPrettyCount++,y=!0,m+=this.writeChildNode(l,e,i+1),e.suppressPrettyCount--,y=!1,e.state=n.CloseTag,m+="</"+t.name+">"+this.endline(t,e,i);return this.closeNode(t,e,i),m},t.prototype.writeChildNode=function(t,e,n){switch(t.type){case r.CData:return this.cdata(t,e,n);case r.Comment:return this.comment(t,e,n);case r.Element:return this.element(t,e,n);case r.Raw:return this.raw(t,e,n);case r.Text:return this.text(t,e,n);case r.ProcessingInstruction:return this.processingInstruction(t,e,n);case r.Dummy:return"";case r.Declaration:return this.declaration(t,e,n);case r.DocType:return this.docType(t,e,n);case r.AttributeDeclaration:return this.dtdAttList(t,e,n);case r.ElementDeclaration:return this.dtdElement(t,e,n);case r.EntityDeclaration:return this.dtdEntity(t,e,n);case r.NotationDeclaration:return this.dtdNotation(t,e,n);default:throw new Error("Unknown XML node type: "+t.constructor.name)}},t.prototype.processingInstruction=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<?",e.state=n.InsideTag,i+=t.target,t.value&&(i+=" "+t.value),e.state=n.CloseTag,i+=e.spaceBeforeSlash+"?>",i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.raw=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r),e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.text=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r),e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdAttList=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ATTLIST",e.state=n.InsideTag,i+=" "+t.elementName+" "+t.attributeName+" "+t.attributeType,"#DEFAULT"!==t.defaultValueType&&(i+=" "+t.defaultValueType),t.defaultValue&&(i+=' "'+t.defaultValue+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdElement=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ELEMENT",e.state=n.InsideTag,i+=" "+t.name+" "+t.value,e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdEntity=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ENTITY",e.state=n.InsideTag,t.pe&&(i+=" %"),i+=" "+t.name,t.value?i+=' "'+t.value+'"':(t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),t.nData&&(i+=" NDATA "+t.nData)),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdNotation=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!NOTATION",e.state=n.InsideTag,i+=" "+t.name,t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.pubID?i+=' PUBLIC "'+t.pubID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.openNode=function(t,e,r){},t.prototype.closeNode=function(t,e,r){},t.prototype.openAttribute=function(t,e,r){},t.prototype.closeAttribute=function(t,e,r){},t}()}).call(this)},{464:464,465:465,466:466,468:468,470:470,475:475,476:476,477:477,478:478,479:479,480:480,483:483,484:484,488:488,489:489,493:493}]},{},[1])(1)}));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:26:49.0828748-07:00
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const Decorators_1 = require("./Decorators");
const IntStream_1 = require("./IntStream");
const READ_BUFFER_SIZE = 1024;
const INITIAL_BUFFER_SIZE = 1024;
/**
 * Vacuum all input from a {@link Reader}/{@link InputStream} and then treat it
 * like a `char[]` buffer. Can also pass in a {@link String} or
 * `char[]` to use.
 *
 * If you need encoding, pass in stream/reader with correct encoding.
 *
 * @deprecated as of 4.7, please use `CharStreams` interface.
 */
class ANTLRInputStream {
    /** Copy data in string to a local char array */
    constructor(input) {
        /** 0..n-1 index into string of next char */
        this.p = 0;
        this.data = input;
        this.n = input.length;
    }
    /** Reset the stream so that it's in the same state it was
     *  when the object was created *except* the data array is not
     *  touched.
     */
    reset() {
        this.p = 0;
    }
    consume() {
        if (this.p >= this.n) {
            assert(this.LA(1) === IntStream_1.IntStream.EOF);
            throw new Error("cannot consume EOF");
        }
        //System.out.println("prev p="+p+", c="+(char)data[p]);
        if (this.p < this.n) {
            this.p++;
            //System.out.println("p moves to "+p+" (c='"+(char)data[p]+"')");
        }
    }
    LA(i) {
        if (i === 0) {
            return 0; // undefined
        }
        if (i < 0) {
            i++; // e.g., translate LA(-1) to use offset i=0; then data[p+0-1]
            if ((this.p + i - 1) < 0) {
                return IntStream_1.IntStream.EOF; // invalid; no char before first char
            }
        }
        if ((this.p + i - 1) >= this.n) {
            //System.out.println("char LA("+i+")=EOF; p="+p);
            return IntStream_1.IntStream.EOF;
        }
        //System.out.println("char LA("+i+")="+(char)data[p+i-1]+"; p="+p);
        //System.out.println("LA("+i+"); p="+p+" n="+n+" data.length="+data.length);
        return this.data.charCodeAt(this.p + i - 1);
    }
    LT(i) {
        return this.LA(i);
    }
    /** Return the current input symbol index 0..n where n indicates the
     *  last symbol has been read.  The index is the index of char to
     *  be returned from LA(1).
     */
    get index() {
        return this.p;
    }
    get size() {
        return this.n;
    }
    /** mark/release do nothing; we have entire buffer */
    mark() {
        return -1;
    }
    release(marker) {
        // No default implementation since this stream buffers the entire input
    }
    /** consume() ahead until p==index; can't just set p=index as we must
     *  update line and charPositionInLine. If we seek backwards, just set p
     */
    seek(index) {
        if (index <= this.p) {
            this.p = index; // just jump; don't update stream state (line, ...)
            return;
        }
        // seek forward, consume until p hits index or n (whichever comes first)
        index = Math.min(index, this.n);
        while (this.p < index) {
            this.consume();
        }
    }
    getText(interval) {
        let start = interval.a;
        let stop = interval.b;
        if (stop >= this.n) {
            stop = this.n - 1;
        }
        let count = stop - start + 1;
        if (start >= this.n) {
            return "";
        }
        // System.err.println("data: "+Arrays.toString(data)+", n="+n+
        // 				   ", start="+start+
        // 				   ", stop="+stop);
        return this.data.substr(start, count);
    }
    get sourceName() {
        if (!this.name) {
            return IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        return this.name;
    }
    toString() { return this.data; }
}
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "LA", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "getText", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "toString", null);
exports.ANTLRInputStream = ANTLRInputStream;

},{"./Decorators":13,"./IntStream":19,"assert":153}],4:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:49.2855056-07:00
const DefaultErrorStrategy_1 = require("./DefaultErrorStrategy");
const InputMismatchException_1 = require("./InputMismatchException");
const Decorators_1 = require("./Decorators");
const ParseCancellationException_1 = require("./misc/ParseCancellationException");
/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext#exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * This error strategy is useful in the following scenarios.
 *
 * * **Two-stage parsing:** This error strategy allows the first
 *   stage of two-stage parsing to immediately terminate if an error is
 *   encountered, and immediately fall back to the second stage. In addition to
 *   avoiding wasted work by attempting to recover from errors here, the empty
 *   implementation of {@link BailErrorStrategy#sync} improves the performance of
 *   the first stage.
 * * **Silent validation:** When syntax errors are not being
 *   reported or logged, and the parse result is simply ignored if errors occur,
 *   the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 *   when the result will be ignored either way.
 *
 * ```
 * myparser.errorHandler = new BailErrorStrategy();
 * ```
 *
 * @see Parser.errorHandler
 */
class BailErrorStrategy extends DefaultErrorStrategy_1.DefaultErrorStrategy {
    /** Instead of recovering from exception `e`, re-throw it wrapped
     *  in a {@link ParseCancellationException} so it is not caught by the
     *  rule function catches.  Use {@link Exception#getCause()} to get the
     *  original {@link RecognitionException}.
     */
    recover(recognizer, e) {
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    /** Make sure we don't attempt to recover inline; if the parser
     *  successfully recovers, it won't throw an exception.
     */
    recoverInline(recognizer) {
        let e = new InputMismatchException_1.InputMismatchException(recognizer);
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    /** Make sure we don't attempt to recover from problems in subrules. */
    sync(recognizer) {
        // intentionally empty
    }
}
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "recover", null);
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "recoverInline", null);
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "sync", null);
exports.BailErrorStrategy = BailErrorStrategy;

},{"./Decorators":13,"./DefaultErrorStrategy":14,"./InputMismatchException":18,"./misc/ParseCancellationException":124}],5:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:49.6074365-07:00
const assert = require("assert");
const CommonToken_1 = require("./CommonToken");
const Interval_1 = require("./misc/Interval");
const Lexer_1 = require("./Lexer");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * This token stream ignores the value of {@link Token#getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token#DEFAULT_CHANNEL} or
 * {@link Token#HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.
 */
let BufferedTokenStream = class BufferedTokenStream {
    constructor(tokenSource) {
        /**
         * A collection of all tokens fetched from the token source. The list is
         * considered a complete view of the input once {@link #fetchedEOF} is set
         * to `true`.
         */
        this.tokens = [];
        /**
         * The index into {@link #tokens} of the current token (next token to
         * {@link #consume}). {@link #tokens}`[`{@link #p}`]` should be
         * {@link #LT LT(1)}.
         *
         * This field is set to -1 when the stream is first constructed or when
         * {@link #setTokenSource} is called, indicating that the first token has
         * not yet been fetched from the token source. For additional information,
         * see the documentation of {@link IntStream} for a description of
         * Initializing Methods.
         */
        this.p = -1;
        /**
         * Indicates whether the {@link Token#EOF} token has been fetched from
         * {@link #tokenSource} and added to {@link #tokens}. This field improves
         * performance for the following cases:
         *
         * * {@link #consume}: The lookahead check in {@link #consume} to prevent
         *   consuming the EOF symbol is optimized by checking the values of
         *   {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.
         * * {@link #fetch}: The check to prevent adding multiple EOF symbols into
         *   {@link #tokens} is trivial with this field.
         */
        this.fetchedEOF = false;
        if (tokenSource == null) {
            throw new Error("tokenSource cannot be null");
        }
        this._tokenSource = tokenSource;
    }
    get tokenSource() {
        return this._tokenSource;
    }
    /** Reset this token stream by setting its token source. */
    set tokenSource(tokenSource) {
        this._tokenSource = tokenSource;
        this.tokens.length = 0;
        this.p = -1;
        this.fetchedEOF = false;
    }
    get index() {
        return this.p;
    }
    mark() {
        return 0;
    }
    release(marker) {
        // no resources to release
    }
    seek(index) {
        this.lazyInit();
        this.p = this.adjustSeekIndex(index);
    }
    get size() {
        return this.tokens.length;
    }
    consume() {
        let skipEofCheck;
        if (this.p >= 0) {
            if (this.fetchedEOF) {
                // the last token in tokens is EOF. skip check if p indexes any
                // fetched token except the last.
                skipEofCheck = this.p < this.tokens.length - 1;
            }
            else {
                // no EOF token in tokens. skip check if p indexes a fetched token.
                skipEofCheck = this.p < this.tokens.length;
            }
        }
        else {
            // not yet initialized
            skipEofCheck = false;
        }
        if (!skipEofCheck && this.LA(1) === Token_1.Token.EOF) {
            throw new Error("cannot consume EOF");
        }
        if (this.sync(this.p + 1)) {
            this.p = this.adjustSeekIndex(this.p + 1);
        }
    }
    /** Make sure index `i` in tokens has a token.
     *
     * @returns `true` if a token is located at index `i`, otherwise
     *    `false`.
     * @see #get(int i)
     */
    sync(i) {
        assert(i >= 0);
        let n = i - this.tokens.length + 1; // how many more elements we need?
        //System.out.println("sync("+i+") needs "+n);
        if (n > 0) {
            let fetched = this.fetch(n);
            return fetched >= n;
        }
        return true;
    }
    /** Add `n` elements to buffer.
     *
     * @returns The actual number of elements added to the buffer.
     */
    fetch(n) {
        if (this.fetchedEOF) {
            return 0;
        }
        for (let i = 0; i < n; i++) {
            let t = this.tokenSource.nextToken();
            if (this.isWritableToken(t)) {
                t.tokenIndex = this.tokens.length;
            }
            this.tokens.push(t);
            if (t.type === Token_1.Token.EOF) {
                this.fetchedEOF = true;
                return i + 1;
            }
        }
        return n;
    }
    get(i) {
        if (i < 0 || i >= this.tokens.length) {
            throw new RangeError("token index " + i + " out of range 0.." + (this.tokens.length - 1));
        }
        return this.tokens[i];
    }
    /** Get all tokens from start..stop inclusively. */
    getRange(start, stop) {
        if (start < 0 || stop < 0) {
            return [];
        }
        this.lazyInit();
        let subset = new Array();
        if (stop >= this.tokens.length) {
            stop = this.tokens.length - 1;
        }
        for (let i = start; i <= stop; i++) {
            let t = this.tokens[i];
            if (t.type === Token_1.Token.EOF) {
                break;
            }
            subset.push(t);
        }
        return subset;
    }
    LA(i) {
        let token = this.LT(i);
        if (!token) {
            return Token_1.Token.INVALID_TYPE;
        }
        return token.type;
    }
    tryLB(k) {
        if ((this.p - k) < 0) {
            return undefined;
        }
        return this.tokens[this.p - k];
    }
    LT(k) {
        let result = this.tryLT(k);
        if (result === undefined) {
            throw new RangeError("requested lookback index out of range");
        }
        return result;
    }
    tryLT(k) {
        this.lazyInit();
        if (k === 0) {
            throw new RangeError("0 is not a valid lookahead index");
        }
        if (k < 0) {
            return this.tryLB(-k);
        }
        let i = this.p + k - 1;
        this.sync(i);
        if (i >= this.tokens.length) {
            // return EOF token
            // EOF must be last token
            return this.tokens[this.tokens.length - 1];
        }
        //		if ( i>range ) range = i;
        return this.tokens[i];
    }
    /**
     * Allowed derived classes to modify the behavior of operations which change
     * the current stream position by adjusting the target token index of a seek
     * operation. The default implementation simply returns `i`. If an
     * exception is thrown in this method, the current stream index should not be
     * changed.
     *
     * For example, {@link CommonTokenStream} overrides this method to ensure that
     * the seek target is always an on-channel token.
     *
     * @param i The target token index.
     * @returns The adjusted target token index.
     */
    adjustSeekIndex(i) {
        return i;
    }
    lazyInit() {
        if (this.p === -1) {
            this.setup();
        }
    }
    setup() {
        this.sync(0);
        this.p = this.adjustSeekIndex(0);
    }
    /** Given a start and stop index, return a `List` of all tokens in
     *  the token type `BitSet`.  Return an empty array if no tokens were found.  This
     *  method looks at both on and off channel tokens.
     */
    getTokens(start, stop, types) {
        this.lazyInit();
        if (start === undefined) {
            assert(stop === undefined && types === undefined);
            return this.tokens;
        }
        else if (stop === undefined) {
            stop = this.tokens.length - 1;
        }
        if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {
            throw new RangeError("start " + start + " or stop " + stop + " not in 0.." + (this.tokens.length - 1));
        }
        if (start > stop) {
            return [];
        }
        if (types === undefined) {
            return this.tokens.slice(start, stop + 1);
        }
        else if (typeof types === "number") {
            types = new Set().add(types);
        }
        let typesSet = types;
        // list = tokens[start:stop]:{T t, t.type in types}
        let filteredTokens = this.tokens.slice(start, stop + 1);
        filteredTokens = filteredTokens.filter((value) => typesSet.has(value.type));
        return filteredTokens;
    }
    /**
     * Given a starting index, return the index of the next token on channel.
     * Return `i` if `tokens[i]` is on channel. Return the index of
     * the EOF token if there are no tokens on channel between `i` and
     * EOF.
     */
    nextTokenOnChannel(i, channel) {
        this.sync(i);
        if (i >= this.size) {
            return this.size - 1;
        }
        let token = this.tokens[i];
        while (token.channel !== channel) {
            if (token.type === Token_1.Token.EOF) {
                return i;
            }
            i++;
            this.sync(i);
            token = this.tokens[i];
        }
        return i;
    }
    /**
     * Given a starting index, return the index of the previous token on
     * channel. Return `i` if `tokens[i]` is on channel. Return -1
     * if there are no tokens on channel between `i` and 0.
     *
     * If `i` specifies an index at or after the EOF token, the EOF token
     * index is returned. This is due to the fact that the EOF token is treated
     * as though it were on every channel.
     */
    previousTokenOnChannel(i, channel) {
        this.sync(i);
        if (i >= this.size) {
            // the EOF token is on every channel
            return this.size - 1;
        }
        while (i >= 0) {
            let token = this.tokens[i];
            if (token.type === Token_1.Token.EOF || token.channel === channel) {
                return i;
            }
            i--;
        }
        return i;
    }
    /** Collect all tokens on specified channel to the right of
     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL} or
     *  EOF. If `channel` is `-1`, find any non default channel token.
     */
    getHiddenTokensToRight(tokenIndex, channel = -1) {
        this.lazyInit();
        if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
            throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
        }
        let nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
        let to;
        let from = tokenIndex + 1;
        // if none onchannel to right, nextOnChannel=-1 so set to = last token
        if (nextOnChannel === -1) {
            to = this.size - 1;
        }
        else {
            to = nextOnChannel;
        }
        return this.filterForChannel(from, to, channel);
    }
    /** Collect all tokens on specified channel to the left of
     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}.
     *  If `channel` is `-1`, find any non default channel token.
     */
    getHiddenTokensToLeft(tokenIndex, channel = -1) {
        this.lazyInit();
        if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
            throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
        }
        if (tokenIndex === 0) {
            // obviously no tokens can appear before the first token
            return [];
        }
        let prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
        if (prevOnChannel === tokenIndex - 1) {
            return [];
        }
        // if none onchannel to left, prevOnChannel=-1 then from=0
        let from = prevOnChannel + 1;
        let to = tokenIndex - 1;
        return this.filterForChannel(from, to, channel);
    }
    filterForChannel(from, to, channel) {
        let hidden = new Array();
        for (let i = from; i <= to; i++) {
            let t = this.tokens[i];
            if (channel === -1) {
                if (t.channel !== Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL) {
                    hidden.push(t);
                }
            }
            else {
                if (t.channel === channel) {
                    hidden.push(t);
                }
            }
        }
        return hidden;
    }
    get sourceName() {
        return this.tokenSource.sourceName;
    }
    getText(interval) {
        if (interval === undefined) {
            interval = Interval_1.Interval.of(0, this.size - 1);
        }
        else if (!(interval instanceof Interval_1.Interval)) {
            // Note: the more obvious check for 'instanceof RuleContext' results in a circular dependency problem
            interval = interval.sourceInterval;
        }
        let start = interval.a;
        let stop = interval.b;
        if (start < 0 || stop < 0) {
            return "";
        }
        this.fill();
        if (stop >= this.tokens.length) {
            stop = this.tokens.length - 1;
        }
        let buf = "";
        for (let i = start; i <= stop; i++) {
            let t = this.tokens[i];
            if (t.type === Token_1.Token.EOF) {
                break;
            }
            buf += t.text;
        }
        return buf.toString();
    }
    getTextFromRange(start, stop) {
        if (this.isToken(start) && this.isToken(stop)) {
            return this.getText(Interval_1.Interval.of(start.tokenIndex, stop.tokenIndex));
        }
        return "";
    }
    /** Get all tokens from lexer until EOF. */
    fill() {
        this.lazyInit();
        const blockSize = 1000;
        while (true) {
            let fetched = this.fetch(blockSize);
            if (fetched < blockSize) {
                return;
            }
        }
    }
    // TODO: Figure out a way to make this more flexible?
    isWritableToken(t) {
        return t instanceof CommonToken_1.CommonToken;
    }
    // TODO: Figure out a way to make this more flexible?
    isToken(t) {
        return t instanceof CommonToken_1.CommonToken;
    }
};
__decorate([
    Decorators_1.NotNull
], BufferedTokenStream.prototype, "_tokenSource", void 0);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "get", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "LA", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "LT", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "getText", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "getTextFromRange", null);
BufferedTokenStream = __decorate([
    __param(0, Decorators_1.NotNull)
], BufferedTokenStream);
exports.BufferedTokenStream = BufferedTokenStream;

},{"./CommonToken":9,"./Decorators":13,"./Lexer":21,"./Token":37,"./misc/Interval":119,"assert":153}],6:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CodePointBuffer_1 = require("./CodePointBuffer");
const CodePointCharStream_1 = require("./CodePointCharStream");
const IntStream_1 = require("./IntStream");
// const DEFAULT_BUFFER_SIZE: number = 4096;
/** This class represents the primary interface for creating {@link CharStream}s
 *  from a variety of sources as of 4.7.  The motivation was to support
 *  Unicode code points > U+FFFF.  {@link ANTLRInputStream} and
 *  {@link ANTLRFileStream} are now deprecated in favor of the streams created
 *  by this interface.
 *
 *  DEPRECATED: {@code new ANTLRFileStream("myinputfile")}
 *  NEW:        {@code CharStreams.fromFileName("myinputfile")}
 *
 *  WARNING: If you use both the deprecated and the new streams, you will see
 *  a nontrivial performance degradation. This speed hit is because the
 *  {@link Lexer}'s internal code goes from a monomorphic to megamorphic
 *  dynamic dispatch to get characters from the input stream. Java's
 *  on-the-fly compiler (JIT) is unable to perform the same optimizations
 *  so stick with either the old or the new streams, if performance is
 *  a primary concern. See the extreme debugging and spelunking
 *  needed to identify this issue in our timing rig:
 *
 *      https://github.com/antlr/antlr4/pull/1781
 *
 *  The ANTLR character streams still buffer all the input when you create
 *  the stream, as they have done for ~20 years. If you need unbuffered
 *  access, please note that it becomes challenging to create
 *  parse trees. The parse tree has to point to tokens which will either
 *  point into a stale location in an unbuffered stream or you have to copy
 *  the characters out of the buffer into the token. That defeats the purpose
 *  of unbuffered input. Per the ANTLR book, unbuffered streams are primarily
 *  useful for processing infinite streams *during the parse.*
 *
 *  The new streams also use 8-bit buffers when possible so this new
 *  interface supports character streams that use half as much memory
 *  as the old {@link ANTLRFileStream}, which assumed 16-bit characters.
 *
 *  A big shout out to Ben Hamilton (github bhamiltoncx) for his superhuman
 *  efforts across all targets to get true Unicode 3.1 support for U+10FFFF.
 *
 *  @since 4.7
 */
var CharStreams;
(function (CharStreams) {
    // /**
    //  * Creates a {@link CharStream} given a path to a UTF-8
    //  * encoded file on disk.
    //  *
    //  * Reads the entire contents of the file into the result before returning.
    //  */
    // export function fromFile(file: File): CharStream;
    // export function fromFile(file: File, charset: Charset): CharStream;
    // export function fromFile(file: File, charset?: Charset): CharStream {
    // 	if (charset === undefined) {
    // 		charset = Charset.forName("UTF-8");
    // 	}
    function fromString(s, sourceName) {
        if (sourceName === undefined || sourceName.length === 0) {
            sourceName = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        // Initial guess assumes no code points > U+FFFF: one code
        // point for each code unit in the string
        let codePointBufferBuilder = CodePointBuffer_1.CodePointBuffer.builder(s.length);
        // TODO: CharBuffer.wrap(String) rightfully returns a read-only buffer
        // which doesn't expose its array, so we make a copy.
        let cb = new Uint16Array(s.length);
        for (let i = 0; i < s.length; i++) {
            cb[i] = s.charCodeAt(i);
        }
        codePointBufferBuilder.append(cb);
        return CodePointCharStream_1.CodePointCharStream.fromBuffer(codePointBufferBuilder.build(), sourceName);
    }
    CharStreams.fromString = fromString;
    // export function bufferFromChannel(
    // 	channel: ReadableByteChannel,
    // 	charset: Charset,
    // 	bufferSize: number,
    // 	decodingErrorAction: CodingErrorAction,
    // 	inputSize: number): CodePointBuffer {
    // 	try {
    // 		let utf8BytesIn: Uint8Array = new Uint8Array(bufferSize);
    // 		let utf16CodeUnitsOut: Uint16Array = new Uint16Array(bufferSize);
    // 		if (inputSize === -1) {
    // 			inputSize = bufferSize;
    // 		} else if (inputSize > Integer.MAX_VALUE) {
    // 			// ByteBuffer et al don't support long sizes
    // 			throw new RangeError(`inputSize ${inputSize} larger than max ${Integer.MAX_VALUE}`);
    // 		}
    // 		let codePointBufferBuilder: CodePointBuffer.Builder = CodePointBuffer.builder(inputSize);
    // 		let decoder: CharsetDecoder = charset
    // 				.newDecoder()
    // 				.onMalformedInput(decodingErrorAction)
    // 				.onUnmappableCharacter(decodingErrorAction);
    // 		let endOfInput: boolean = false;
    // 		while (!endOfInput) {
    // 			let bytesRead: number = channel.read(utf8BytesIn);
    // 			endOfInput = (bytesRead === -1);
    // 			utf8BytesIn.flip();
    // 			let result: CoderResult = decoder.decode(
    // 				utf8BytesIn,
    // 				utf16CodeUnitsOut,
    // 				endOfInput);
    // 			if (result.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
    // 				result.throwException();
    // 			}
    // 			utf16CodeUnitsOut.flip();
    // 			codePointBufferBuilder.append(utf16CodeUnitsOut);
    // 			utf8BytesIn.compact();
    // 			utf16CodeUnitsOut.compact();
    // 		}
    // 		// Handle any bytes at the end of the file which need to
    // 		// be represented as errors or substitution characters.
    // 		let flushResult: CoderResult = decoder.flush(utf16CodeUnitsOut);
    // 		if (flushResult.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
    // 			flushResult.throwException();
    // 		}
    // 		utf16CodeUnitsOut.flip();
    // 		codePointBufferBuilder.append(utf16CodeUnitsOut);
    // 		return codePointBufferBuilder.build();
    // 	}
    // 	finally {
    // 		channel.close();
    // 	}
    // }
})(CharStreams = exports.CharStreams || (exports.CharStreams = {}));

},{"./CodePointBuffer":7,"./CodePointCharStream":8,"./IntStream":19}],7:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const Character = require("./misc/Character");
/**
 * Wrapper for `Uint8Array` / `Uint16Array` / `Int32Array`.
 */
class CodePointBuffer {
    constructor(buffer, size) {
        this.buffer = buffer;
        this._position = 0;
        this._size = size;
    }
    static withArray(buffer) {
        return new CodePointBuffer(buffer, buffer.length);
    }
    get position() {
        return this._position;
    }
    set position(newPosition) {
        if (newPosition < 0 || newPosition > this._size) {
            throw new RangeError();
        }
        this._position = newPosition;
    }
    get remaining() {
        return this._size - this.position;
    }
    get(offset) {
        return this.buffer[offset];
    }
    array() {
        return this.buffer.slice(0, this._size);
    }
    static builder(initialBufferSize) {
        return new CodePointBuffer.Builder(initialBufferSize);
    }
}
exports.CodePointBuffer = CodePointBuffer;
(function (CodePointBuffer) {
    let Type;
    (function (Type) {
        Type[Type["BYTE"] = 0] = "BYTE";
        Type[Type["CHAR"] = 1] = "CHAR";
        Type[Type["INT"] = 2] = "INT";
    })(Type || (Type = {}));
    class Builder {
        constructor(initialBufferSize) {
            this.type = 0 /* BYTE */;
            this.buffer = new Uint8Array(initialBufferSize);
            this.prevHighSurrogate = -1;
            this.position = 0;
        }
        build() {
            return new CodePointBuffer(this.buffer, this.position);
        }
        static roundUpToNextPowerOfTwo(i) {
            let nextPowerOfTwo = 32 - Math.clz32(i - 1);
            return Math.pow(2, nextPowerOfTwo);
        }
        ensureRemaining(remainingNeeded) {
            switch (this.type) {
                case 0 /* BYTE */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Uint8Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
                case 1 /* CHAR */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Uint16Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
                case 2 /* INT */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Int32Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
            }
        }
        append(utf16In) {
            this.ensureRemaining(utf16In.length);
            this.appendArray(utf16In);
        }
        appendArray(utf16In) {
            switch (this.type) {
                case 0 /* BYTE */:
                    this.appendArrayByte(utf16In);
                    break;
                case 1 /* CHAR */:
                    this.appendArrayChar(utf16In);
                    break;
                case 2 /* INT */:
                    this.appendArrayInt(utf16In);
                    break;
            }
        }
        appendArrayByte(utf16In) {
            assert(this.prevHighSurrogate === -1);
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outByte = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                if (c <= 0xFF) {
                    outByte[outOffset] = c;
                }
                else {
                    utf16In = utf16In.subarray(inOffset, inLimit);
                    this.position = outOffset;
                    if (!Character.isHighSurrogate(c)) {
                        this.byteToCharBuffer(utf16In.length);
                        this.appendArrayChar(utf16In);
                        return;
                    }
                    else {
                        this.byteToIntBuffer(utf16In.length);
                        this.appendArrayInt(utf16In);
                        return;
                    }
                }
                inOffset++;
                outOffset++;
            }
            this.position = outOffset;
        }
        appendArrayChar(utf16In) {
            assert(this.prevHighSurrogate === -1);
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outChar = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                if (!Character.isHighSurrogate(c)) {
                    outChar[outOffset] = c;
                }
                else {
                    utf16In = utf16In.subarray(inOffset, inLimit);
                    this.position = outOffset;
                    this.charToIntBuffer(utf16In.length);
                    this.appendArrayInt(utf16In);
                    return;
                }
                inOffset++;
                outOffset++;
            }
            this.position = outOffset;
        }
        appendArrayInt(utf16In) {
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outInt = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                inOffset++;
                if (this.prevHighSurrogate !== -1) {
                    if (Character.isLowSurrogate(c)) {
                        outInt[outOffset] = String.fromCharCode(this.prevHighSurrogate, c).codePointAt(0);
                        outOffset++;
                        this.prevHighSurrogate = -1;
                    }
                    else {
                        // Dangling high surrogate
                        outInt[outOffset] = this.prevHighSurrogate;
                        outOffset++;
                        if (Character.isHighSurrogate(c)) {
                            this.prevHighSurrogate = c;
                        }
                        else {
                            outInt[outOffset] = c;
                            outOffset++;
                            this.prevHighSurrogate = -1;
                        }
                    }
                }
                else if (Character.isHighSurrogate(c)) {
                    this.prevHighSurrogate = c;
                }
                else {
                    outInt[outOffset] = c;
                    outOffset++;
                }
            }
            if (this.prevHighSurrogate !== -1) {
                // Dangling high surrogate
                outInt[outOffset] = this.prevHighSurrogate;
                outOffset++;
            }
            this.position = outOffset;
        }
        byteToCharBuffer(toAppend) {
            // CharBuffers hold twice as much per unit as ByteBuffers, so start with half the capacity.
            let newBuffer = new Uint16Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 1 /* CHAR */;
            this.buffer = newBuffer;
        }
        byteToIntBuffer(toAppend) {
            // IntBuffers hold four times as much per unit as ByteBuffers, so start with one quarter the capacity.
            let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 2));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 2 /* INT */;
            this.buffer = newBuffer;
        }
        charToIntBuffer(toAppend) {
            // IntBuffers hold two times as much per unit as ByteBuffers, so start with one half the capacity.
            let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 2 /* INT */;
            this.buffer = newBuffer;
        }
    }
    CodePointBuffer.Builder = Builder;
})(CodePointBuffer = exports.CodePointBuffer || (exports.CodePointBuffer = {}));

},{"./misc/Character":115,"assert":153}],8:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const IntStream_1 = require("./IntStream");
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
/**
 * Alternative to {@link ANTLRInputStream} which treats the input
 * as a series of Unicode code points, instead of a series of UTF-16
 * code units.
 *
 * Use this if you need to parse input which potentially contains
 * Unicode values > U+FFFF.
 */
class CodePointCharStream {
    // Use the factory method {@link #fromBuffer(CodePointBuffer)} to
    // construct instances of this type.
    constructor(array, position, remaining, name) {
        // TODO
        assert(position === 0);
        this._array = array;
        this._size = remaining;
        this._name = name;
        this._position = 0;
    }
    get internalStorage() {
        return this._array;
    }
    static fromBuffer(codePointBuffer, name) {
        if (name === undefined || name.length === 0) {
            name = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        // Java lacks generics on primitive types.
        //
        // To avoid lots of calls to virtual methods in the
        // very hot codepath of LA() below, we construct one
        // of three concrete subclasses.
        //
        // The concrete subclasses directly access the code
        // points stored in the underlying array (byte[],
        // char[], or int[]), so we can avoid lots of virtual
        // method calls to ByteBuffer.get(offset).
        return new CodePointCharStream(codePointBuffer.array(), codePointBuffer.position, codePointBuffer.remaining, name);
    }
    consume() {
        if (this._size - this._position === 0) {
            assert(this.LA(1) === IntStream_1.IntStream.EOF);
            throw new RangeError("cannot consume EOF");
        }
        this._position++;
    }
    get index() {
        return this._position;
    }
    get size() {
        return this._size;
    }
    /** mark/release do nothing; we have entire buffer */
    mark() {
        return -1;
    }
    release(marker) {
        // No default implementation since this stream buffers the entire input
    }
    seek(index) {
        this._position = index;
    }
    get sourceName() {
        return this._name;
    }
    toString() {
        return this.getText(Interval_1.Interval.of(0, this.size - 1));
    }
    LA(i) {
        let offset;
        switch (Math.sign(i)) {
            case -1:
                offset = this.index + i;
                if (offset < 0) {
                    return IntStream_1.IntStream.EOF;
                }
                return this._array[offset];
            case 0:
                // Undefined
                return 0;
            case 1:
                offset = this.index + i - 1;
                if (offset >= this.size) {
                    return IntStream_1.IntStream.EOF;
                }
                return this._array[offset];
        }
        throw new RangeError("Not reached");
    }
    /** Return the UTF-16 encoded string for the given interval */
    getText(interval) {
        const startIdx = Math.min(interval.a, this.size);
        const len = Math.min(interval.b - interval.a + 1, this.size - startIdx);
        if (this._array instanceof Int32Array) {
            return String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));
        }
        else {
            return String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));
        }
    }
}
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "toString", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "LA", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "getText", null);
exports.CodePointCharStream = CodePointCharStream;

},{"./Decorators":13,"./IntStream":19,"./misc/Interval":119,"assert":153}],9:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
let CommonToken = class CommonToken {
    constructor(type, text, source = CommonToken.EMPTY_SOURCE, channel = Token_1.Token.DEFAULT_CHANNEL, start = 0, stop = 0) {
        /**
         * This is the backing field for {@link #getLine} and {@link #setLine}.
         */
        this._line = 0;
        /**
         * This is the backing field for {@link #getCharPositionInLine} and
         * {@link #setCharPositionInLine}.
         */
        this._charPositionInLine = -1; // set to invalid position
        /**
         * This is the backing field for {@link #getChannel} and
         * {@link #setChannel}.
         */
        this._channel = Token_1.Token.DEFAULT_CHANNEL;
        /**
         * This is the backing field for `tokenIndex`.
         */
        this.index = -1;
        this._text = text;
        this._type = type;
        this.source = source;
        this._channel = channel;
        this.start = start;
        this.stop = stop;
        if (source.source != null) {
            this._line = source.source.line;
            this._charPositionInLine = source.source.charPositionInLine;
        }
    }
    /**
     * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
     *
     * If `oldToken` is also a {@link CommonToken} instance, the newly
     * constructed token will share a reference to the {@link #text} field and
     * the {@link Tuple2} stored in {@link #source}. Otherwise, {@link #text} will
     * be assigned the result of calling {@link #getText}, and {@link #source}
     * will be constructed from the result of {@link Token#getTokenSource} and
     * {@link Token#getInputStream}.
     *
     * @param oldToken The token to copy.
     */
    static fromToken(oldToken) {
        let result = new CommonToken(oldToken.type, undefined, CommonToken.EMPTY_SOURCE, oldToken.channel, oldToken.startIndex, oldToken.stopIndex);
        result._line = oldToken.line;
        result.index = oldToken.tokenIndex;
        result._charPositionInLine = oldToken.charPositionInLine;
        if (oldToken instanceof CommonToken) {
            result._text = oldToken.text;
            result.source = oldToken.source;
        }
        else {
            result._text = oldToken.text;
            result.source = { source: oldToken.tokenSource, stream: oldToken.inputStream };
        }
        return result;
    }
    get type() {
        return this._type;
    }
    // @Override
    set type(type) {
        this._type = type;
    }
    get line() {
        return this._line;
    }
    // @Override
    set line(line) {
        this._line = line;
    }
    get text() {
        if (this._text != null) {
            return this._text;
        }
        let input = this.inputStream;
        if (input == null) {
            return undefined;
        }
        let n = input.size;
        if (this.start < n && this.stop < n) {
            return input.getText(Interval_1.Interval.of(this.start, this.stop));
        }
        else {
            return "<EOF>";
        }
    }
    /**
     * Explicitly set the text for this token. If {code text} is not
     * `undefined`, then {@link #getText} will return this value rather than
     * extracting the text from the input.
     *
     * @param text The explicit text of the token, or `undefined` if the text
     * should be obtained from the input along with the start and stop indexes
     * of the token.
     */
    // @Override
    set text(text) {
        this._text = text;
    }
    get charPositionInLine() {
        return this._charPositionInLine;
    }
    // @Override
    set charPositionInLine(charPositionInLine) {
        this._charPositionInLine = charPositionInLine;
    }
    get channel() {
        return this._channel;
    }
    // @Override
    set channel(channel) {
        this._channel = channel;
    }
    get startIndex() {
        return this.start;
    }
    set startIndex(start) {
        this.start = start;
    }
    get stopIndex() {
        return this.stop;
    }
    set stopIndex(stop) {
        this.stop = stop;
    }
    get tokenIndex() {
        return this.index;
    }
    // @Override
    set tokenIndex(index) {
        this.index = index;
    }
    get tokenSource() {
        return this.source.source;
    }
    get inputStream() {
        return this.source.stream;
    }
    toString(recognizer) {
        let channelStr = "";
        if (this._channel > 0) {
            channelStr = ",channel=" + this._channel;
        }
        let txt = this.text;
        if (txt != null) {
            txt = txt.replace(/\n/g, "\\n");
            txt = txt.replace(/\r/g, "\\r");
            txt = txt.replace(/\t/g, "\\t");
        }
        else {
            txt = "<no text>";
        }
        let typeString = String(this._type);
        if (recognizer) {
            typeString = recognizer.vocabulary.getDisplayName(this._type);
        }
        return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + typeString + ">" + channelStr + "," + this._line + ":" + this.charPositionInLine + "]";
    }
};
/**
 * An empty {@link Tuple2} which is used as the default value of
 * {@link #source} for tokens that do not have a source.
 */
CommonToken.EMPTY_SOURCE = { source: undefined, stream: undefined };
__decorate([
    Decorators_1.NotNull
], CommonToken.prototype, "source", void 0);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "type", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "line", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "channel", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "startIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "stopIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "tokenIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "toString", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], CommonToken, "fromToken", null);
CommonToken = __decorate([
    __param(2, Decorators_1.NotNull)
], CommonToken);
exports.CommonToken = CommonToken;

},{"./Decorators":13,"./Token":37,"./misc/Interval":119}],10:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommonToken_1 = require("./CommonToken");
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */
class CommonTokenFactory {
    /**
     * Constructs a {@link CommonTokenFactory} with the specified value for
     * {@link #copyText}.
     *
     * When `copyText` is `false`, the {@link #DEFAULT} instance
     * should be used instead of constructing a new instance.
     *
     * @param copyText The value for {@link #copyText}.
     */
    constructor(copyText = false) {
        this.copyText = copyText;
    }
    create(source, type, text, channel, start, stop, line, charPositionInLine) {
        let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);
        t.line = line;
        t.charPositionInLine = charPositionInLine;
        if (text == null && this.copyText && source.stream != null) {
            t.text = source.stream.getText(Interval_1.Interval.of(start, stop));
        }
        return t;
    }
    createSimple(type, text) {
        return new CommonToken_1.CommonToken(type, text);
    }
}
__decorate([
    Decorators_1.Override
], CommonTokenFactory.prototype, "create", null);
__decorate([
    Decorators_1.Override
], CommonTokenFactory.prototype, "createSimple", null);
exports.CommonTokenFactory = CommonTokenFactory;
(function (CommonTokenFactory) {
    /**
     * The default {@link CommonTokenFactory} instance.
     *
     * This token factory does not explicitly copy token text when constructing
     * tokens.
     */
    CommonTokenFactory.DEFAULT = new CommonTokenFactory();
})(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));

},{"./CommonToken":9,"./Decorators":13,"./misc/Interval":119}],11:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:50.3953157-07:00
const BufferedTokenStream_1 = require("./BufferedTokenStream");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token#getChannel} returns a particular value).
 *
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link #getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link #LA}, {@link #LT}, and
 * {@link #LB}.
 *
 * By default, tokens are placed on the default channel
 * ({@link Token#DEFAULT_CHANNEL}), but may be reassigned by using the
 * `->channel(HIDDEN)` lexer command, or by using an embedded action to
 * call {@link Lexer#setChannel}.
 *
 * Note: lexer rules which use the `->skip` lexer command or call
 * {@link Lexer#skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.
 */
let CommonTokenStream = class CommonTokenStream extends BufferedTokenStream_1.BufferedTokenStream {
    /**
     * Constructs a new {@link CommonTokenStream} using the specified token
     * source and filtering tokens to the specified channel. Only tokens whose
     * {@link Token#getChannel} matches `channel` or have the
     * `Token.type` equal to {@link Token#EOF} will be returned by the
     * token stream lookahead methods.
     *
     * @param tokenSource The token source.
     * @param channel The channel to use for filtering tokens.
     */
    constructor(tokenSource, channel = Token_1.Token.DEFAULT_CHANNEL) {
        super(tokenSource);
        this.channel = channel;
    }
    adjustSeekIndex(i) {
        return this.nextTokenOnChannel(i, this.channel);
    }
    tryLB(k) {
        if ((this.p - k) < 0) {
            return undefined;
        }
        let i = this.p;
        let n = 1;
        // find k good tokens looking backwards
        while (n <= k && i > 0) {
            // skip off-channel tokens
            i = this.previousTokenOnChannel(i - 1, this.channel);
            n++;
        }
        if (i < 0) {
            return undefined;
        }
        return this.tokens[i];
    }
    tryLT(k) {
        //System.out.println("enter LT("+k+")");
        this.lazyInit();
        if (k === 0) {
            throw new RangeError("0 is not a valid lookahead index");
        }
        if (k < 0) {
            return this.tryLB(-k);
        }
        let i = this.p;
        let n = 1; // we know tokens[p] is a good one
        // find k good tokens
        while (n < k) {
            // skip off-channel tokens, but make sure to not look past EOF
            if (this.sync(i + 1)) {
                i = this.nextTokenOnChannel(i + 1, this.channel);
            }
            n++;
        }
        //		if ( i>range ) range = i;
        return this.tokens[i];
    }
    /** Count EOF just once. */
    getNumberOfOnChannelTokens() {
        let n = 0;
        this.fill();
        for (let t of this.tokens) {
            if (t.channel === this.channel) {
                n++;
            }
            if (t.type === Token_1.Token.EOF) {
                break;
            }
        }
        return n;
    }
};
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "adjustSeekIndex", null);
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "tryLB", null);
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "tryLT", null);
CommonTokenStream = __decorate([
    __param(0, Decorators_1.NotNull)
], CommonTokenStream);
exports.CommonTokenStream = CommonTokenStream;

},{"./BufferedTokenStream":5,"./Decorators":13,"./Token":37}],12:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @author Sam Harwell
 */
class ConsoleErrorListener {
    /**
     * {@inheritDoc}
     *
     * This implementation prints messages to {@link System#err} containing the
     * values of `line`, `charPositionInLine`, and `msg` using
     * the following format.
     *
     * <pre>
     * line *line*:*charPositionInLine* *msg*
     * </pre>
     */
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        console.error(`line ${line}:${charPositionInLine} ${msg}`);
    }
}
/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
exports.ConsoleErrorListener = ConsoleErrorListener;

},{}],13:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function NotNull(target, propertyKey, propertyDescriptor) {
    // intentionally empty
}
exports.NotNull = NotNull;
function Nullable(target, propertyKey, propertyDescriptor) {
    // intentionally empty
}
exports.Nullable = Nullable;
function Override(target, propertyKey, propertyDescriptor) {
    // do something with 'target' ...
}
exports.Override = Override;
function SuppressWarnings(options) {
    return (target, propertyKey, descriptor) => {
        // intentionally empty
    };
}
exports.SuppressWarnings = SuppressWarnings;

},{}],14:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNState_1 = require("./atn/ATNState");
const ATNStateType_1 = require("./atn/ATNStateType");
const FailedPredicateException_1 = require("./FailedPredicateException");
const InputMismatchException_1 = require("./InputMismatchException");
const IntervalSet_1 = require("./misc/IntervalSet");
const NoViableAltException_1 = require("./NoViableAltException");
const PredictionContext_1 = require("./atn/PredictionContext");
const Token_1 = require("./Token");
const Decorators_1 = require("./Decorators");
/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
 */
class DefaultErrorStrategy {
    constructor() {
        /**
         * Indicates whether the error strategy is currently "recovering from an
         * error". This is used to suppress reporting multiple error messages while
         * attempting to recover from a detected syntax error.
         *
         * @see #inErrorRecoveryMode
         */
        this.errorRecoveryMode = false;
        /** The index into the input stream where the last error occurred.
         * 	This is used to prevent infinite loops where an error is found
         *  but no token is consumed during recovery...another error is found,
         *  ad nauseum.  This is a failsafe mechanism to guarantee that at least
         *  one token/tree node is consumed for two errors.
         */
        this.lastErrorIndex = -1;
        /**
         * @see #nextTokensContext
         */
        this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation simply calls {@link #endErrorCondition} to
     * ensure that the handler is not in error recovery mode.
     */
    reset(recognizer) {
        this.endErrorCondition(recognizer);
    }
    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
     */
    beginErrorCondition(recognizer) {
        this.errorRecoveryMode = true;
    }
    /**
     * {@inheritDoc}
     */
    inErrorRecoveryMode(recognizer) {
        return this.errorRecoveryMode;
    }
    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     *
     * @param recognizer
     */
    endErrorCondition(recognizer) {
        this.errorRecoveryMode = false;
        this.lastErrorStates = undefined;
        this.lastErrorIndex = -1;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation simply calls {@link #endErrorCondition}.
     */
    reportMatch(recognizer) {
        this.endErrorCondition(recognizer);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of `e`
     * according to the following table.
     *
     * * {@link NoViableAltException}: Dispatches the call to
     *   {@link #reportNoViableAlternative}
     * * {@link InputMismatchException}: Dispatches the call to
     *   {@link #reportInputMismatch}
     * * {@link FailedPredicateException}: Dispatches the call to
     *   {@link #reportFailedPredicate}
     * * All other types: calls {@link Parser#notifyErrorListeners} to report
     *   the exception
     */
    reportError(recognizer, e) {
        // if we've already reported an error and have not matched a token
        // yet successfully, don't report any errors.
        if (this.inErrorRecoveryMode(recognizer)) {
            //			System.err.print("[SPURIOUS] ");
            return; // don't report spurious errors
        }
        this.beginErrorCondition(recognizer);
        if (e instanceof NoViableAltException_1.NoViableAltException) {
            this.reportNoViableAlternative(recognizer, e);
        }
        else if (e instanceof InputMismatchException_1.InputMismatchException) {
            this.reportInputMismatch(recognizer, e);
        }
        else if (e instanceof FailedPredicateException_1.FailedPredicateException) {
            this.reportFailedPredicate(recognizer, e);
        }
        else {
            console.error(`unknown recognition error type: ${e}`);
            this.notifyErrorListeners(recognizer, e.toString(), e);
        }
    }
    notifyErrorListeners(recognizer, message, e) {
        let offendingToken = e.getOffendingToken(recognizer);
        if (offendingToken === undefined) {
            // Pass null to notifyErrorListeners so it in turn calls the error listeners with undefined as the offending
            // token. If we passed undefined, it would instead call the listeners with currentToken from the parser.
            offendingToken = null;
        }
        recognizer.notifyErrorListeners(message, offendingToken, e);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.
     */
    recover(recognizer, e) {
        //		System.out.println("recover in "+recognizer.getRuleInvocationStack()+
        //						   " index="+recognizer.inputStream.index+
        //						   ", lastErrorIndex="+
        //						   lastErrorIndex+
        //						   ", states="+lastErrorStates);
        if (this.lastErrorIndex === recognizer.inputStream.index &&
            this.lastErrorStates &&
            this.lastErrorStates.contains(recognizer.state)) {
            // uh oh, another error at same token index and previously-visited
            // state in ATN; must be a case where LT(1) is in the recovery
            // token set so nothing got consumed. Consume a single token
            // at least to prevent an infinite loop; this is a failsafe.
            //			System.err.println("seen error condition before index="+
            //							   lastErrorIndex+", states="+lastErrorStates);
            //			System.err.println("FAILSAFE consumes "+recognizer.getTokenNames()[recognizer.inputStream.LA(1)]);
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer.inputStream.index;
        if (!this.lastErrorStates) {
            this.lastErrorStates = new IntervalSet_1.IntervalSet();
        }
        this.lastErrorStates.add(recognizer.state);
        let followSet = this.getErrorRecoverySet(recognizer);
        this.consumeUntil(recognizer, followSet);
    }
    /**
     * The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,
     *
     * ```antlr
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * ```
     *
     * At the start of a sub rule upon error, {@link #sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * If the sub rule is optional (`(...)?`, `(...)*`, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.
     *
     * During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.
     *
     * **ORIGINS**
     *
     * Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule
     *
     * ```antlr
     * classDef : 'class' ID '{' member* '}'
     * ```
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.
     */
    sync(recognizer) {
        let s = recognizer.interpreter.atn.states[recognizer.state];
        //		System.err.println("sync @ "+s.stateNumber+"="+s.getClass().getSimpleName());
        // If already recovering, don't try to sync
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        let tokens = recognizer.inputStream;
        let la = tokens.LA(1);
        // try cheaper subset first; might get lucky. seems to shave a wee bit off
        let nextTokens = recognizer.atn.nextTokens(s);
        if (nextTokens.contains(la)) {
            // We are sure the token matches
            this.nextTokensContext = undefined;
            this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
            return;
        }
        if (nextTokens.contains(Token_1.Token.EPSILON)) {
            if (this.nextTokensContext === undefined) {
                // It's possible the next token won't match; information tracked
                // by sync is restricted for performance.
                this.nextTokensContext = recognizer.context;
                this.nextTokensState = recognizer.state;
            }
            return;
        }
        switch (s.stateType) {
            case ATNStateType_1.ATNStateType.BLOCK_START:
            case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
            case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
            case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                // report error and recover if possible
                if (this.singleTokenDeletion(recognizer)) {
                    return;
                }
                throw new InputMismatchException_1.InputMismatchException(recognizer);
            case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
            case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                //			System.err.println("at loop back: "+s.getClass().getSimpleName());
                this.reportUnwantedToken(recognizer);
                let expecting = recognizer.getExpectedTokens();
                let whatFollowsLoopIterationOrRule = expecting.or(this.getErrorRecoverySet(recognizer));
                this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
                break;
            default:
                // do nothing if we can't identify the exact kind of ATN state
                break;
        }
    }
    /**
     * This is called by {@link #reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportNoViableAlternative(recognizer, e) {
        let tokens = recognizer.inputStream;
        let input;
        if (tokens) {
            if (e.startToken.type === Token_1.Token.EOF) {
                input = "<EOF>";
            }
            else {
                input = tokens.getTextFromRange(e.startToken, e.getOffendingToken());
            }
        }
        else {
            input = "<unknown input>";
        }
        let msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This is called by {@link #reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportInputMismatch(recognizer, e) {
        let expected = e.expectedTokens;
        let expectedString = expected ? expected.toStringVocabulary(recognizer.vocabulary) : "";
        let msg = "mismatched input " + this.getTokenErrorDisplay(e.getOffendingToken(recognizer)) +
            " expecting " + expectedString;
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This is called by {@link #reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportFailedPredicate(recognizer, e) {
        let ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];
        let msg = "rule " + ruleName + " " + e.message;
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current `LT(1)` symbol and has not yet been
     * removed from the input stream. When this method returns,
     * `recognizer` is in error recovery mode.
     *
     * This method is called when {@link #singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.
     *
     * The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser#notifyErrorListeners}.
     *
     * @param recognizer the parser instance
     */
    reportUnwantedToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        let t = recognizer.currentToken;
        let tokenName = this.getTokenErrorDisplay(t);
        let expecting = this.getExpectedTokens(recognizer);
        let msg = "extraneous input " + tokenName + " expecting " +
            expecting.toStringVocabulary(recognizer.vocabulary);
        recognizer.notifyErrorListeners(msg, t, undefined);
    }
    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, `recognizer` is in error recovery mode.
     *
     * This method is called when {@link #singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.
     *
     * The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser#notifyErrorListeners}.
     *
     * @param recognizer the parser instance
     */
    reportMissingToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        let t = recognizer.currentToken;
        let expecting = this.getExpectedTokens(recognizer);
        let msg = "missing " + expecting.toStringVocabulary(recognizer.vocabulary) +
            " at " + this.getTokenErrorDisplay(t);
        recognizer.notifyErrorListeners(msg, t, undefined);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method
     * {@link InputMismatchException}.
     *
     * **EXTRA TOKEN** (single token deletion)
     *
     * `LA(1)` is not what we are looking for. If `LA(2)` has the
     * right token, however, then assume `LA(1)` is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the `LA(2)` token) as the successful result of the match operation.
     *
     * This recovery strategy is implemented by {@link #singleTokenDeletion}.
     *
     * **MISSING TOKEN** (single token insertion)
     *
     * If current token (at `LA(1)`) is consistent with what could come
     * after the expected `LA(1)` token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.
     *
     * This recovery strategy is implemented by {@link #singleTokenInsertion}.
     *
     * **EXAMPLE**
     *
     * For example, Input `i=(3;` is clearly missing the `')'`. When
     * the parser returns from the nested call to `expr`, it will have
     * call chain:
     *
     * ```
     * stat → expr → atom
     * ```
     *
     * and it will be trying to match the `')'` at this point in the
     * derivation:
     *
     * ```
     * => ID '=' '(' INT ')' ('+' atom)* ';'
     *                    ^
     * ```
     *
     * The attempt to match `')'` will fail when it sees `';'` and
     * call {@link #recoverInline}. To recover, it sees that `LA(1)==';'`
     * is in the set of tokens that can follow the `')'` token reference
     * in rule `atom`. It can assume that you forgot the `')'`.
     */
    recoverInline(recognizer) {
        // SINGLE TOKEN DELETION
        let matchedSymbol = this.singleTokenDeletion(recognizer);
        if (matchedSymbol) {
            // we have deleted the extra token.
            // now, move past ttype token as if all were ok
            recognizer.consume();
            return matchedSymbol;
        }
        // SINGLE TOKEN INSERTION
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        // even that didn't work; must throw the exception
        if (this.nextTokensContext === undefined) {
            throw new InputMismatchException_1.InputMismatchException(recognizer);
        }
        else {
            throw new InputMismatchException_1.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);
        }
    }
    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link #recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns `true`, `recognizer` will be in error recovery
     * mode.
     *
     * This method determines whether or not single-token insertion is viable by
     * checking if the `LA(1)` input symbol could be successfully matched
     * if it were instead the `LA(2)` symbol. If this method returns
     * `true`, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.
     *
     * @param recognizer the parser instance
     * @returns `true` if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise `false`
     */
    singleTokenInsertion(recognizer) {
        let currentSymbolType = recognizer.inputStream.LA(1);
        // if current token is consistent with what could come after current
        // ATN state, then we know we're missing a token; error recovery
        // is free to conjure up and insert the missing token
        let currentState = recognizer.interpreter.atn.states[recognizer.state];
        let next = currentState.transition(0).target;
        let atn = recognizer.interpreter.atn;
        let expectingAtLL2 = atn.nextTokens(next, PredictionContext_1.PredictionContext.fromRuleContext(atn, recognizer.context));
        //		console.warn("LT(2) set="+expectingAtLL2.toString(recognizer.getTokenNames()));
        if (expectingAtLL2.contains(currentSymbolType)) {
            this.reportMissingToken(recognizer);
            return true;
        }
        return false;
    }
    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link #recoverInline} to attempt to recover
     * from mismatched input. If this method returns `undefined`, the parser and error
     * handler state will not have changed. If this method returns non-`undefined`,
     * `recognizer` will *not* be in error recovery mode since the
     * returned token was a successful match.
     *
     * If the single-token deletion is successful, this method calls
     * {@link #reportUnwantedToken} to report the error, followed by
     * {@link Parser#consume} to actually "delete" the extraneous token. Then,
     * before returning {@link #reportMatch} is called to signal a successful
     * match.
     *
     * @param recognizer the parser instance
     * @returns the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * `undefined`
     */
    singleTokenDeletion(recognizer) {
        let nextTokenType = recognizer.inputStream.LA(2);
        let expecting = this.getExpectedTokens(recognizer);
        if (expecting.contains(nextTokenType)) {
            this.reportUnwantedToken(recognizer);
            /*
            System.err.println("recoverFromMismatchedToken deleting "+
                               ((TokenStream)recognizer.inputStream).LT(1)+
                               " since "+((TokenStream)recognizer.inputStream).LT(2)+
                               " is what we want");
            */
            recognizer.consume(); // simply delete extra token
            // we want to return the token we're actually matching
            let matchedSymbol = recognizer.currentToken;
            this.reportMatch(recognizer); // we know current token is correct
            return matchedSymbol;
        }
        return undefined;
    }
    /** Conjure up a missing token during error recovery.
     *
     *  The recognizer attempts to recover from single missing
     *  symbols. But, actions might refer to that missing symbol.
     *  For example, x=ID {f($x);}. The action clearly assumes
     *  that there has been an identifier matched previously and that
     *  $x points at that token. If that token is missing, but
     *  the next token in the stream is what we want we assume that
     *  this token is missing and we keep going. Because we
     *  have to return some token to replace the missing token,
     *  we have to conjure one up. This method gives the user control
     *  over the tokens returned for missing tokens. Mostly,
     *  you will want to create something special for identifier
     *  tokens. For literals such as '{' and ',', the default
     *  action in the parser or tree parser works. It simply creates
     *  a CommonToken of the appropriate type. The text will be the token.
     *  If you change what tokens must be created by the lexer,
     *  override this method to create the appropriate tokens.
     */
    getMissingSymbol(recognizer) {
        let currentSymbol = recognizer.currentToken;
        let expecting = this.getExpectedTokens(recognizer);
        let expectedTokenType = Token_1.Token.INVALID_TYPE;
        if (!expecting.isNil) {
            // get any element
            expectedTokenType = expecting.minElement;
        }
        let tokenText;
        if (expectedTokenType === Token_1.Token.EOF) {
            tokenText = "<missing EOF>";
        }
        else {
            tokenText = "<missing " + recognizer.vocabulary.getDisplayName(expectedTokenType) + ">";
        }
        let current = currentSymbol;
        let lookback = recognizer.inputStream.tryLT(-1);
        if (current.type === Token_1.Token.EOF && lookback != null) {
            current = lookback;
        }
        return this.constructToken(recognizer.inputStream.tokenSource, expectedTokenType, tokenText, current);
    }
    constructToken(tokenSource, expectedTokenType, tokenText, current) {
        let factory = tokenSource.tokenFactory;
        let x = current.tokenSource;
        let stream = x ? x.inputStream : undefined;
        return factory.create({ source: tokenSource, stream }, expectedTokenType, tokenText, Token_1.Token.DEFAULT_CHANNEL, -1, -1, current.line, current.charPositionInLine);
    }
    getExpectedTokens(recognizer) {
        return recognizer.getExpectedTokens();
    }
    /** How should a token be displayed in an error message? The default
     *  is to display just the text, but during development you might
     *  want to have a lot of information spit out.  Override in that case
     *  to use t.toString() (which, for CommonToken, dumps everything about
     *  the token). This is better than forcing you to override a method in
     *  your token objects because you don't have to go modify your lexer
     *  so that it creates a new Java type.
     */
    getTokenErrorDisplay(t) {
        if (!t) {
            return "<no token>";
        }
        let s = this.getSymbolText(t);
        if (!s) {
            if (this.getSymbolType(t) === Token_1.Token.EOF) {
                s = "<EOF>";
            }
            else {
                s = `<${this.getSymbolType(t)}>`;
            }
        }
        return this.escapeWSAndQuote(s);
    }
    getSymbolText(symbol) {
        return symbol.text;
    }
    getSymbolType(symbol) {
        return symbol.type;
    }
    escapeWSAndQuote(s) {
        //		if ( s==null ) return s;
        s = s.replace("\n", "\\n");
        s = s.replace("\r", "\\r");
        s = s.replace("\t", "\\t");
        return "'" + s + "'";
    }
    /*  Compute the error recovery set for the current rule.  During
     *  rule invocation, the parser pushes the set of tokens that can
     *  follow that rule reference on the stack; this amounts to
     *  computing FIRST of what follows the rule reference in the
     *  enclosing rule. See LinearApproximator.FIRST().
     *  This local follow set only includes tokens
     *  from within the rule; i.e., the FIRST computation done by
     *  ANTLR stops at the end of a rule.
     *
     *  EXAMPLE
     *
     *  When you find a "no viable alt exception", the input is not
     *  consistent with any of the alternatives for rule r.  The best
     *  thing to do is to consume tokens until you see something that
     *  can legally follow a call to r *or* any rule that called r.
     *  You don't want the exact set of viable next tokens because the
     *  input might just be missing a token--you might consume the
     *  rest of the input looking for one of the missing tokens.
     *
     *  Consider grammar:
     *
     *  a : '[' b ']'
     *    | '(' b ')'
     *    ;
     *  b : c '^' INT ;
     *  c : ID
     *    | INT
     *    ;
     *
     *  At each rule invocation, the set of tokens that could follow
     *  that rule is pushed on a stack.  Here are the various
     *  context-sensitive follow sets:
     *
     *  FOLLOW(b1_in_a) = FIRST(']') = ']'
     *  FOLLOW(b2_in_a) = FIRST(')') = ')'
     *  FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     *  Upon erroneous input "[]", the call chain is
     *
     *  a -> b -> c
     *
     *  and, hence, the follow context stack is:
     *
     *  depth     follow set       start of rule execution
     *    0         <EOF>                    a (from main())
     *    1          ']'                     b
     *    2          '^'                     c
     *
     *  Notice that ')' is not included, because b would have to have
     *  been called from a different context in rule a for ')' to be
     *  included.
     *
     *  For error recovery, we cannot consider FOLLOW(c)
     *  (context-sensitive or otherwise).  We need the combined set of
     *  all context-sensitive FOLLOW sets--the set of all tokens that
     *  could follow any reference in the call chain.  We need to
     *  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
     *  we resync'd to that token, we'd consume until EOF.  We need to
     *  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     *  In this case, for input "[]", LA(1) is ']' and in the set, so we would
     *  not consume anything. After printing an error, rule c would
     *  return normally.  Rule b would not find the required '^' though.
     *  At this point, it gets a mismatched token error and
     *  exception (since LA(1) is not in the viable following token
     *  set).  The rule exception handler tries to recover, but finds
     *  the same recovery set and doesn't consume anything.  Rule b
     *  exits normally returning to rule a.  Now it finds the ']' (and
     *  with the successful match exits errorRecovery mode).
     *
     *  So, you can see that the parser walks up the call chain looking
     *  for the token that was a member of the recovery set.
     *
     *  Errors are not generated in errorRecovery mode.
     *
     *  ANTLR's error recovery mechanism is based upon original ideas:
     *
     *  "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     *  and
     *
     *  "A note on error recovery in recursive descent parsers":
     *  http://portal.acm.org/citation.cfm?id=947902.947905
     *
     *  Later, Josef Grosch had some good ideas:
     *
     *  "Efficient and Comfortable Error Recovery in Recursive Descent
     *  Parsers":
     *  ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     *  Like Grosch I implement context-sensitive FOLLOW sets that are combined
     *  at run-time upon error to avoid overhead during parsing.
     */
    getErrorRecoverySet(recognizer) {
        let atn = recognizer.interpreter.atn;
        let ctx = recognizer.context;
        let recoverSet = new IntervalSet_1.IntervalSet();
        while (ctx && ctx.invokingState >= 0) {
            // compute what follows who invoked us
            let invokingState = atn.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            let follow = atn.nextTokens(rt.followState);
            recoverSet.addAll(follow);
            ctx = ctx._parent;
        }
        recoverSet.remove(Token_1.Token.EPSILON);
        //		System.out.println("recover set "+recoverSet.toString(recognizer.getTokenNames()));
        return recoverSet;
    }
    /** Consume tokens until one matches the given token set. */
    consumeUntil(recognizer, set) {
        //		System.err.println("consumeUntil("+set.toString(recognizer.getTokenNames())+")");
        let ttype = recognizer.inputStream.LA(1);
        while (ttype !== Token_1.Token.EOF && !set.contains(ttype)) {
            //System.out.println("consume during recover LA(1)="+getTokenNames()[input.LA(1)]);
            //			recognizer.inputStream.consume();
            recognizer.consume();
            ttype = recognizer.inputStream.LA(1);
        }
    }
}
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "beginErrorCondition", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "inErrorRecoveryMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "endErrorCondition", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reportMatch", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reportError", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "notifyErrorListeners", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "recover", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "sync", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportNoViableAlternative", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportInputMismatch", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportFailedPredicate", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportUnwantedToken", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportMissingToken", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "recoverInline", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "singleTokenInsertion", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "singleTokenDeletion", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getMissingSymbol", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getExpectedTokens", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getSymbolText", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getSymbolType", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "escapeWSAndQuote", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getErrorRecoverySet", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "consumeUntil", null);
exports.DefaultErrorStrategy = DefaultErrorStrategy;

},{"./Decorators":13,"./FailedPredicateException":17,"./InputMismatchException":18,"./NoViableAltException":25,"./Token":37,"./atn/ATNState":46,"./atn/ATNStateType":47,"./atn/PredictionContext":87,"./misc/IntervalSet":120}],15:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:51.1349829-07:00
/**
 *
 * @author Sam Harwell
 */
var Dependents;
(function (Dependents) {
    /**
     * The element is dependent upon the specified rule.
     */
    Dependents[Dependents["SELF"] = 0] = "SELF";
    /**
     * The element is dependent upon the set of the specified rule's parents
     * (rules which directly reference it).
     */
    Dependents[Dependents["PARENTS"] = 1] = "PARENTS";
    /**
     * The element is dependent upon the set of the specified rule's children
     * (rules which it directly references).
     */
    Dependents[Dependents["CHILDREN"] = 2] = "CHILDREN";
    /**
     * The element is dependent upon the set of the specified rule's ancestors
     * (the transitive closure of `PARENTS` rules).
     */
    Dependents[Dependents["ANCESTORS"] = 3] = "ANCESTORS";
    /**
     * The element is dependent upon the set of the specified rule's descendants
     * (the transitive closure of `CHILDREN` rules).
     */
    Dependents[Dependents["DESCENDANTS"] = 4] = "DESCENDANTS";
    /**
     * The element is dependent upon the set of the specified rule's siblings
     * (the union of `CHILDREN` of its `PARENTS`).
     */
    Dependents[Dependents["SIBLINGS"] = 5] = "SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's preceeding
     * siblings (the union of `CHILDREN` of its `PARENTS` which
     * appear before a reference to the rule).
     */
    Dependents[Dependents["PRECEEDING_SIBLINGS"] = 6] = "PRECEEDING_SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's following
     * siblings (the union of `CHILDREN` of its `PARENTS` which
     * appear after a reference to the rule).
     */
    Dependents[Dependents["FOLLOWING_SIBLINGS"] = 7] = "FOLLOWING_SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's preceeding
     * elements (rules which might end before the start of the specified rule
     * while parsing). This is calculated by taking the
     * `PRECEEDING_SIBLINGS` of the rule and each of its
     * `ANCESTORS`, along with the `DESCENDANTS` of those
     * elements.
     */
    Dependents[Dependents["PRECEEDING"] = 8] = "PRECEEDING";
    /**
     * The element is dependent upon the set of the specified rule's following
     * elements (rules which might start after the end of the specified rule
     * while parsing). This is calculated by taking the
     * `FOLLOWING_SIBLINGS` of the rule and each of its
     * `ANCESTORS`, along with the `DESCENDANTS` of those
     * elements.
     */
    Dependents[Dependents["FOLLOWING"] = 9] = "FOLLOWING";
})(Dependents = exports.Dependents || (exports.Dependents = {}));

},{}],16:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const BitSet_1 = require("./misc/BitSet");
const Decorators_1 = require("./Decorators");
const Interval_1 = require("./misc/Interval");
/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 * certain potential correctness and performance problems in grammars. "Reports"
 * are made by calling {@link Parser#notifyErrorListeners} with the appropriate
 * message.
 *
 * * **Ambiguities**: These are cases where more than one path through the
 *   grammar can match the input.
 * * **Weak context sensitivity**: These are cases where full-context
 *   prediction resolved an SLL conflict to a unique alternative which equaled the
 *   minimum alternative of the SLL conflict.
 * * **Strong (forced) context sensitivity**: These are cases where the
 *   full-context prediction resolved an SLL conflict to a unique alternative,
 *   *and* the minimum alternative of the SLL conflict was found to not be
 *   a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *   this situation occurs.
 *
 * @author Sam Harwell
 */
class DiagnosticErrorListener {
    /**
     * Initializes a new instance of {@link DiagnosticErrorListener}, specifying
     * whether all ambiguities or only exact ambiguities are reported.
     *
     * @param exactOnly `true` to report only exact ambiguities, otherwise
     * `false` to report all ambiguities.  Defaults to true.
     */
    constructor(exactOnly = true) {
        this.exactOnly = exactOnly;
        this.exactOnly = exactOnly;
    }
    syntaxError(
    /*@NotNull*/
    recognizer, offendingSymbol, line, charPositionInLine, 
    /*@NotNull*/
    msg, e) {
        // intentionally empty
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        if (this.exactOnly && !exact) {
            return;
        }
        let decision = this.getDecisionDescription(recognizer, dfa);
        let conflictingAlts = this.getConflictingAlts(ambigAlts, configs);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
        let format = "reportAttemptingFullContext d=%s, input='%s'";
        let decision = this.getDecisionDescription(recognizer, dfa);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportAttemptingFullContext d=${decision}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
        let format = "reportContextSensitivity d=%s, input='%s'";
        let decision = this.getDecisionDescription(recognizer, dfa);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportContextSensitivity d=${decision}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    getDecisionDescription(recognizer, dfa) {
        let decision = dfa.decision;
        let ruleIndex = dfa.atnStartState.ruleIndex;
        let ruleNames = recognizer.ruleNames;
        if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
            return decision.toString();
        }
        let ruleName = ruleNames[ruleIndex];
        if (!ruleName) {
            return decision.toString();
        }
        return `${decision} (${ruleName})`;
    }
    /**
     * Computes the set of conflicting or ambiguous alternatives from a
     * configuration set, if that information was not already provided by the
     * parser.
     *
     * @param reportedAlts The set of conflicting or ambiguous alternatives, as
     * reported by the parser.
     * @param configs The conflicting or ambiguous configuration set.
     * @returns Returns `reportedAlts` if it is not `undefined`, otherwise
     * returns the set of alternatives represented in `configs`.
     */
    getConflictingAlts(reportedAlts, configs) {
        if (reportedAlts != null) {
            return reportedAlts;
        }
        let result = new BitSet_1.BitSet();
        for (let config of configs) {
            result.set(config.alt);
        }
        return result;
    }
}
__decorate([
    Decorators_1.Override
], DiagnosticErrorListener.prototype, "syntaxError", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportAmbiguity", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportContextSensitivity", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "getDecisionDescription", null);
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "getConflictingAlts", null);
exports.DiagnosticErrorListener = DiagnosticErrorListener;

},{"./Decorators":13,"./misc/BitSet":114,"./misc/Interval":119}],17:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const RecognitionException_1 = require("./RecognitionException");
const Decorators_1 = require("./Decorators");
const PredicateTransition_1 = require("./atn/PredicateTransition");
/** A semantic predicate failed during validation.  Validation of predicates
 *  occurs when normally parsing the alternative just like matching a token.
 *  Disambiguating predicate evaluation occurs when we test a predicate during
 *  prediction.
 */
let FailedPredicateException = class FailedPredicateException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, predicate, message) {
        super(recognizer, recognizer.inputStream, recognizer.context, FailedPredicateException.formatMessage(predicate, message));
        let s = recognizer.interpreter.atn.states[recognizer.state];
        let trans = s.transition(0);
        if (trans instanceof PredicateTransition_1.PredicateTransition) {
            this._ruleIndex = trans.ruleIndex;
            this._predicateIndex = trans.predIndex;
        }
        else {
            this._ruleIndex = 0;
            this._predicateIndex = 0;
        }
        this._predicate = predicate;
        super.setOffendingToken(recognizer, recognizer.currentToken);
    }
    get ruleIndex() {
        return this._ruleIndex;
    }
    get predicateIndex() {
        return this._predicateIndex;
    }
    get predicate() {
        return this._predicate;
    }
    static formatMessage(predicate, message) {
        if (message) {
            return message;
        }
        return `failed predicate: {${predicate}}?`;
    }
};
__decorate([
    Decorators_1.NotNull
], FailedPredicateException, "formatMessage", null);
FailedPredicateException = __decorate([
    __param(0, Decorators_1.NotNull)
], FailedPredicateException);
exports.FailedPredicateException = FailedPredicateException;

},{"./Decorators":13,"./RecognitionException":31,"./atn/PredicateTransition":86}],18:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:51.5187682-07:00
const RecognitionException_1 = require("./RecognitionException");
const Decorators_1 = require("./Decorators");
/** This signifies any kind of mismatched input exceptions such as
 *  when the current input does not match the expected token.
 */
let InputMismatchException = class InputMismatchException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, state, context) {
        if (context === undefined) {
            context = recognizer.context;
        }
        super(recognizer, recognizer.inputStream, context);
        if (state !== undefined) {
            this.setOffendingState(state);
        }
        this.setOffendingToken(recognizer, recognizer.currentToken);
    }
};
InputMismatchException = __decorate([
    __param(0, Decorators_1.NotNull)
], InputMismatchException);
exports.InputMismatchException = InputMismatchException;

},{"./Decorators":13,"./RecognitionException":31}],19:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:51.6934376-07:00
var IntStream;
(function (IntStream) {
    /**
     * The value returned by {@link #LA LA()} when the end of the stream is
     * reached.
     */
    IntStream.EOF = -1;
    /**
     * The value returned by {@link #getSourceName} when the actual name of the
     * underlying source is not known.
     */
    IntStream.UNKNOWN_SOURCE_NAME = "<unknown>";
})(IntStream = exports.IntStream || (exports.IntStream = {}));

},{}],20:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00
const Decorators_1 = require("./Decorators");
const ParserRuleContext_1 = require("./ParserRuleContext");
/**
 * This class extends {@link ParserRuleContext} by allowing the value of
 * {@link #getRuleIndex} to be explicitly set for the context.
 *
 * {@link ParserRuleContext} does not include field storage for the rule index
 * since the context classes created by the code generator override the
 * {@link #getRuleIndex} method to return the correct value for that context.
 * Since the parser interpreter does not use the context classes generated for a
 * parser, this class (with slightly more memory overhead per node) is used to
 * provide equivalent functionality.
 */
class InterpreterRuleContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(ruleIndex, parent, invokingStateNumber) {
        if (invokingStateNumber !== undefined) {
            super(parent, invokingStateNumber);
        }
        else {
            super();
        }
        this._ruleIndex = ruleIndex;
    }
    get ruleIndex() {
        return this._ruleIndex;
    }
}
__decorate([
    Decorators_1.Override
], InterpreterRuleContext.prototype, "ruleIndex", null);
exports.InterpreterRuleContext = InterpreterRuleContext;

},{"./Decorators":13,"./ParserRuleContext":28}],21:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommonTokenFactory_1 = require("./CommonTokenFactory");
const IntegerStack_1 = require("./misc/IntegerStack");
const Interval_1 = require("./misc/Interval");
const IntStream_1 = require("./IntStream");
const LexerATNSimulator_1 = require("./atn/LexerATNSimulator");
const LexerNoViableAltException_1 = require("./LexerNoViableAltException");
const Decorators_1 = require("./Decorators");
const Recognizer_1 = require("./Recognizer");
const Token_1 = require("./Token");
/** A lexer is recognizer that draws input symbols from a character stream.
 *  lexer grammars result in a subclass of this object. A Lexer object
 *  uses simplified match() and error recovery mechanisms in the interest
 *  of speed.
 */
class Lexer extends Recognizer_1.Recognizer {
    constructor(input) {
        super();
        /** How to create token objects */
        this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
        /** What character index in the stream did the current token start at?
         *  Needed, for example, to get the text for current token.  Set at
         *  the start of nextToken.
         */
        this._tokenStartCharIndex = -1;
        /** The line on which the first character of the token resides */
        this._tokenStartLine = 0;
        /** The character position of first character within the line */
        this._tokenStartCharPositionInLine = 0;
        /** Once we see EOF on char stream, next token will be EOF.
         *  If you have DONE : EOF ; then you see DONE EOF.
         */
        this._hitEOF = false;
        /** The channel number for the current token */
        this._channel = 0;
        /** The token type for the current token */
        this._type = 0;
        this._modeStack = new IntegerStack_1.IntegerStack();
        this._mode = Lexer.DEFAULT_MODE;
        this._input = input;
        this._tokenFactorySourcePair = { source: this, stream: input };
    }
    static get DEFAULT_TOKEN_CHANNEL() {
        return Token_1.Token.DEFAULT_CHANNEL;
    }
    static get HIDDEN() {
        return Token_1.Token.HIDDEN_CHANNEL;
    }
    reset(resetInput) {
        // wack Lexer state variables
        if (resetInput === undefined || resetInput) {
            this._input.seek(0); // rewind the input
        }
        this._token = undefined;
        this._type = Token_1.Token.INVALID_TYPE;
        this._channel = Token_1.Token.DEFAULT_CHANNEL;
        this._tokenStartCharIndex = -1;
        this._tokenStartCharPositionInLine = -1;
        this._tokenStartLine = -1;
        this._text = undefined;
        this._hitEOF = false;
        this._mode = Lexer.DEFAULT_MODE;
        this._modeStack.clear();
        this.interpreter.reset();
    }
    /** Return a token from this source; i.e., match a token on the char
     *  stream.
     */
    nextToken() {
        if (this._input == null) {
            throw new Error("nextToken requires a non-null input stream.");
        }
        // Mark start location in char stream so unbuffered streams are
        // guaranteed at least have text of current token
        let tokenStartMarker = this._input.mark();
        try {
            outer: while (true) {
                if (this._hitEOF) {
                    return this.emitEOF();
                }
                this._token = undefined;
                this._channel = Token_1.Token.DEFAULT_CHANNEL;
                this._tokenStartCharIndex = this._input.index;
                this._tokenStartCharPositionInLine = this.interpreter.charPositionInLine;
                this._tokenStartLine = this.interpreter.line;
                this._text = undefined;
                do {
                    this._type = Token_1.Token.INVALID_TYPE;
                    //				System.out.println("nextToken line "+tokenStartLine+" at "+((char)input.LA(1))+
                    //								   " in mode "+mode+
                    //								   " at index "+input.index);
                    let ttype;
                    try {
                        ttype = this.interpreter.match(this._input, this._mode);
                    }
                    catch (e) {
                        if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                            this.notifyListeners(e); // report error
                            this.recover(e);
                            ttype = Lexer.SKIP;
                        }
                        else {
                            throw e;
                        }
                    }
                    if (this._input.LA(1) === IntStream_1.IntStream.EOF) {
                        this._hitEOF = true;
                    }
                    if (this._type === Token_1.Token.INVALID_TYPE) {
                        this._type = ttype;
                    }
                    if (this._type === Lexer.SKIP) {
                        continue outer;
                    }
                } while (this._type === Lexer.MORE);
                if (this._token == null) {
                    return this.emit();
                }
                return this._token;
            }
        }
        finally {
            // make sure we release marker after match or
            // unbuffered char stream will keep buffering
            this._input.release(tokenStartMarker);
        }
    }
    /** Instruct the lexer to skip creating a token for current lexer rule
     *  and look for another token.  nextToken() knows to keep looking when
     *  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
     *  if token==undefined at end of any token rule, it creates one for you
     *  and emits it.
     */
    skip() {
        this._type = Lexer.SKIP;
    }
    more() {
        this._type = Lexer.MORE;
    }
    mode(m) {
        this._mode = m;
    }
    pushMode(m) {
        if (LexerATNSimulator_1.LexerATNSimulator.debug) {
            console.log("pushMode " + m);
        }
        this._modeStack.push(this._mode);
        this.mode(m);
    }
    popMode() {
        if (this._modeStack.isEmpty) {
            throw new Error("EmptyStackException");
        }
        if (LexerATNSimulator_1.LexerATNSimulator.debug) {
            console.log("popMode back to " + this._modeStack.peek());
        }
        this.mode(this._modeStack.pop());
        return this._mode;
    }
    get tokenFactory() {
        return this._factory;
    }
    // @Override
    set tokenFactory(factory) {
        this._factory = factory;
    }
    get inputStream() {
        return this._input;
    }
    /** Set the char stream and reset the lexer */
    set inputStream(input) {
        this.reset(false);
        this._input = input;
        this._tokenFactorySourcePair = { source: this, stream: this._input };
    }
    get sourceName() {
        return this._input.sourceName;
    }
    emit(token) {
        if (!token) {
            token = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.charIndex - 1, this._tokenStartLine, this._tokenStartCharPositionInLine);
        }
        this._token = token;
        return token;
    }
    emitEOF() {
        let cpos = this.charPositionInLine;
        let line = this.line;
        let eof = this._factory.create(this._tokenFactorySourcePair, Token_1.Token.EOF, undefined, Token_1.Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, line, cpos);
        this.emit(eof);
        return eof;
    }
    get line() {
        return this.interpreter.line;
    }
    set line(line) {
        this.interpreter.line = line;
    }
    get charPositionInLine() {
        return this.interpreter.charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
        this.interpreter.charPositionInLine = charPositionInLine;
    }
    /** What is the index of the current character of lookahead? */
    get charIndex() {
        return this._input.index;
    }
    /** Return the text matched so far for the current token or any
     *  text override.
     */
    get text() {
        if (this._text != null) {
            return this._text;
        }
        return this.interpreter.getText(this._input);
    }
    /** Set the complete text of this token; it wipes any previous
     *  changes to the text.
     */
    set text(text) {
        this._text = text;
    }
    /** Override if emitting multiple tokens. */
    get token() { return this._token; }
    set token(_token) {
        this._token = _token;
    }
    set type(ttype) {
        this._type = ttype;
    }
    get type() {
        return this._type;
    }
    set channel(channel) {
        this._channel = channel;
    }
    get channel() {
        return this._channel;
    }
    /** Return a list of all Token objects in input char stream.
     *  Forces load of all tokens. Does not include EOF token.
     */
    getAllTokens() {
        let tokens = [];
        let t = this.nextToken();
        while (t.type !== Token_1.Token.EOF) {
            tokens.push(t);
            t = this.nextToken();
        }
        return tokens;
    }
    notifyListeners(e) {
        let text = this._input.getText(Interval_1.Interval.of(this._tokenStartCharIndex, this._input.index));
        let msg = "token recognition error at: '" +
            this.getErrorDisplay(text) + "'";
        let listener = this.getErrorListenerDispatch();
        if (listener.syntaxError) {
            listener.syntaxError(this, undefined, this._tokenStartLine, this._tokenStartCharPositionInLine, msg, e);
        }
    }
    getErrorDisplay(s) {
        if (typeof s === "number") {
            switch (s) {
                case Token_1.Token.EOF:
                    return "<EOF>";
                case 0x0a:
                    return "\\n";
                case 0x09:
                    return "\\t";
                case 0x0d:
                    return "\\r";
            }
            return String.fromCharCode(s);
        }
        return s.replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r");
    }
    getCharErrorDisplay(c) {
        let s = this.getErrorDisplay(c);
        return "'" + s + "'";
    }
    recover(re) {
        if (re instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
            if (this._input.LA(1) !== IntStream_1.IntStream.EOF) {
                // skip a char and try again
                this.interpreter.consume(this._input);
            }
        }
        else {
            //System.out.println("consuming char "+(char)input.LA(1)+" during recovery");
            //re.printStackTrace();
            // TODO: Do we lose character or line position information?
            this._input.consume();
        }
    }
}
Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;
__decorate([
    Decorators_1.Override
], Lexer.prototype, "nextToken", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "tokenFactory", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "line", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "charPositionInLine", null);
exports.Lexer = Lexer;

},{"./CommonTokenFactory":10,"./Decorators":13,"./IntStream":19,"./LexerNoViableAltException":23,"./Recognizer":32,"./Token":37,"./atn/LexerATNSimulator":65,"./misc/IntegerStack":118,"./misc/Interval":119}],22:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Lexer_1 = require("./Lexer");
const LexerATNSimulator_1 = require("./atn/LexerATNSimulator");
const Decorators_1 = require("./Decorators");
const Decorators_2 = require("./Decorators");
let LexerInterpreter = class LexerInterpreter extends Lexer_1.Lexer {
    constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input) {
        super(input);
        if (atn.grammarType !== 0 /* LEXER */) {
            throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");
        }
        this._grammarFileName = grammarFileName;
        this._atn = atn;
        this._ruleNames = ruleNames.slice(0);
        this._channelNames = channelNames.slice(0);
        this._modeNames = modeNames.slice(0);
        this._vocabulary = vocabulary;
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(atn, this);
    }
    get atn() {
        return this._atn;
    }
    get grammarFileName() {
        return this._grammarFileName;
    }
    get ruleNames() {
        return this._ruleNames;
    }
    get channelNames() {
        return this._channelNames;
    }
    get modeNames() {
        return this._modeNames;
    }
    get vocabulary() {
        return this._vocabulary;
    }
};
__decorate([
    Decorators_1.NotNull
], LexerInterpreter.prototype, "_vocabulary", void 0);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "atn", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "grammarFileName", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "ruleNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "channelNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "modeNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "vocabulary", null);
LexerInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerInterpreter);
exports.LexerInterpreter = LexerInterpreter;

},{"./Decorators":13,"./Lexer":21,"./atn/LexerATNSimulator":65}],23:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const RecognitionException_1 = require("./RecognitionException");
const Decorators_1 = require("./Decorators");
const Interval_1 = require("./misc/Interval");
const Utils = require("./misc/Utils");
let LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
        super(lexer, input);
        this._startIndex = startIndex;
        this._deadEndConfigs = deadEndConfigs;
    }
    get startIndex() {
        return this._startIndex;
    }
    get deadEndConfigs() {
        return this._deadEndConfigs;
    }
    get inputStream() {
        return super.inputStream;
    }
    toString() {
        let symbol = "";
        if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {
            symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));
            symbol = Utils.escapeWhitespace(symbol, false);
        }
        // return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);
        return `LexerNoViableAltException('${symbol}')`;
    }
};
__decorate([
    Decorators_1.Override
], LexerNoViableAltException.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], LexerNoViableAltException.prototype, "toString", null);
LexerNoViableAltException = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerNoViableAltException);
exports.LexerNoViableAltException = LexerNoViableAltException;

},{"./Decorators":13,"./RecognitionException":31,"./misc/Interval":119,"./misc/Utils":126}],24:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommonTokenFactory_1 = require("./CommonTokenFactory");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
/**
 * Provides an implementation of {@link TokenSource} as a wrapper around a list
 * of {@link Token} objects.
 *
 * If the final token in the list is an {@link Token#EOF} token, it will be used
 * as the EOF token for every call to {@link #nextToken} after the end of the
 * list is reached. Otherwise, an EOF token will be created.
 */
let ListTokenSource = class ListTokenSource {
    /**
     * Constructs a new {@link ListTokenSource} instance from the specified
     * collection of {@link Token} objects and source name.
     *
     * @param tokens The collection of {@link Token} objects to provide as a
     * {@link TokenSource}.
     * @param sourceName The name of the {@link TokenSource}. If this value is
     * `undefined`, {@link #getSourceName} will attempt to infer the name from
     * the next {@link Token} (or the previous token if the end of the input has
     * been reached).
     *
     * @exception NullPointerException if `tokens` is `undefined`
     */
    constructor(tokens, sourceName) {
        /**
         * The index into {@link #tokens} of token to return by the next call to
         * {@link #nextToken}. The end of the input is indicated by this value
         * being greater than or equal to the number of items in {@link #tokens}.
         */
        this.i = 0;
        /**
         * This is the backing field for {@link #getTokenFactory} and
         * {@link setTokenFactory}.
         */
        this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
        if (tokens == null) {
            throw new Error("tokens cannot be null");
        }
        this.tokens = tokens;
        this._sourceName = sourceName;
    }
    /**
     * {@inheritDoc}
     */
    get charPositionInLine() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].charPositionInLine;
        }
        else if (this.eofToken != null) {
            return this.eofToken.charPositionInLine;
        }
        else if (this.tokens.length > 0) {
            // have to calculate the result from the line/column of the previous
            // token, along with the text of the token.
            let lastToken = this.tokens[this.tokens.length - 1];
            let tokenText = lastToken.text;
            if (tokenText != null) {
                let lastNewLine = tokenText.lastIndexOf("\n");
                if (lastNewLine >= 0) {
                    return tokenText.length - lastNewLine - 1;
                }
            }
            return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;
        }
        // only reach this if tokens is empty, meaning EOF occurs at the first
        // position in the input
        return 0;
    }
    /**
     * {@inheritDoc}
     */
    nextToken() {
        if (this.i >= this.tokens.length) {
            if (this.eofToken == null) {
                let start = -1;
                if (this.tokens.length > 0) {
                    let previousStop = this.tokens[this.tokens.length - 1].stopIndex;
                    if (previousStop !== -1) {
                        start = previousStop + 1;
                    }
                }
                let stop = Math.max(-1, start - 1);
                this.eofToken = this._factory.create({ source: this, stream: this.inputStream }, Token_1.Token.EOF, "EOF", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);
            }
            return this.eofToken;
        }
        let t = this.tokens[this.i];
        if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {
            this.eofToken = t;
        }
        this.i++;
        return t;
    }
    /**
     * {@inheritDoc}
     */
    get line() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].line;
        }
        else if (this.eofToken != null) {
            return this.eofToken.line;
        }
        else if (this.tokens.length > 0) {
            // have to calculate the result from the line/column of the previous
            // token, along with the text of the token.
            let lastToken = this.tokens[this.tokens.length - 1];
            let line = lastToken.line;
            let tokenText = lastToken.text;
            if (tokenText != null) {
                for (let i = 0; i < tokenText.length; i++) {
                    if (tokenText.charAt(i) === "\n") {
                        line++;
                    }
                }
            }
            // if no text is available, assume the token did not contain any newline characters.
            return line;
        }
        // only reach this if tokens is empty, meaning EOF occurs at the first
        // position in the input
        return 1;
    }
    /**
     * {@inheritDoc}
     */
    get inputStream() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].inputStream;
        }
        else if (this.eofToken != null) {
            return this.eofToken.inputStream;
        }
        else if (this.tokens.length > 0) {
            return this.tokens[this.tokens.length - 1].inputStream;
        }
        // no input stream information is available
        return undefined;
    }
    /**
     * {@inheritDoc}
     */
    get sourceName() {
        if (this._sourceName) {
            return this._sourceName;
        }
        let inputStream = this.inputStream;
        if (inputStream != null) {
            return inputStream.sourceName;
        }
        return "List";
    }
    /**
     * {@inheritDoc}
     */
    // @Override
    set tokenFactory(factory) {
        this._factory = factory;
    }
    /**
     * {@inheritDoc}
     */
    get tokenFactory() {
        return this._factory;
    }
};
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "nextToken", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "line", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ListTokenSource.prototype, "tokenFactory", null);
ListTokenSource = __decorate([
    __param(0, Decorators_1.NotNull)
], ListTokenSource);
exports.ListTokenSource = ListTokenSource;

},{"./CommonTokenFactory":10,"./Decorators":13,"./Token":37}],25:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Parser_1 = require("./Parser");
const RecognitionException_1 = require("./RecognitionException");
const Decorators_1 = require("./Decorators");
/** Indicates that the parser could not decide which of two or more paths
 *  to take based upon the remaining input. It tracks the starting token
 *  of the offending input and also knows where the parser was
 *  in the various paths when the error. Reported by reportNoViableAlternative()
 */
class NoViableAltException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
        if (recognizer instanceof Parser_1.Parser) {
            if (input === undefined) {
                input = recognizer.inputStream;
            }
            if (startToken === undefined) {
                startToken = recognizer.currentToken;
            }
            if (offendingToken === undefined) {
                offendingToken = recognizer.currentToken;
            }
            if (ctx === undefined) {
                ctx = recognizer.context;
            }
        }
        super(recognizer, input, ctx);
        this._deadEndConfigs = deadEndConfigs;
        this._startToken = startToken;
        this.setOffendingToken(recognizer, offendingToken);
    }
    get startToken() {
        return this._startToken;
    }
    get deadEndConfigs() {
        return this._deadEndConfigs;
    }
}
__decorate([
    Decorators_1.NotNull
], NoViableAltException.prototype, "_startToken", void 0);
exports.NoViableAltException = NoViableAltException;

},{"./Decorators":13,"./Parser":26,"./RecognitionException":31}],26:[function(require,module,exports){
(function (process){(function (){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Utils = require("./misc/Utils");
const ATNDeserializationOptions_1 = require("./atn/ATNDeserializationOptions");
const ATNDeserializer_1 = require("./atn/ATNDeserializer");
const DefaultErrorStrategy_1 = require("./DefaultErrorStrategy");
const ErrorNode_1 = require("./tree/ErrorNode");
const IntegerStack_1 = require("./misc/IntegerStack");
const Lexer_1 = require("./Lexer");
const Decorators_1 = require("./Decorators");
const ParseInfo_1 = require("./atn/ParseInfo");
const ParserATNSimulator_1 = require("./atn/ParserATNSimulator");
const ProxyParserErrorListener_1 = require("./ProxyParserErrorListener");
const Recognizer_1 = require("./Recognizer");
const TerminalNode_1 = require("./tree/TerminalNode");
const Token_1 = require("./Token");
class TraceListener {
    constructor(ruleNames, tokenStream) {
        this.ruleNames = ruleNames;
        this.tokenStream = tokenStream;
    }
    enterEveryRule(ctx) {
        console.log("enter   " + this.ruleNames[ctx.ruleIndex] +
            ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    exitEveryRule(ctx) {
        console.log("exit    " + this.ruleNames[ctx.ruleIndex] +
            ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    visitErrorNode(node) {
        // intentionally empty
    }
    visitTerminal(node) {
        let parent = node.parent.ruleContext;
        let token = node.symbol;
        console.log("consume " + token + " rule " + this.ruleNames[parent.ruleIndex]);
    }
}
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "enterEveryRule", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "exitEveryRule", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "visitErrorNode", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "visitTerminal", null);
/** This is all the parsing support code essentially; most of it is error recovery stuff. */
class Parser extends Recognizer_1.Recognizer {
    constructor(input) {
        super();
        /**
         * The error handling strategy for the parser. The default value is a new
         * instance of {@link DefaultErrorStrategy}.
         *
         * @see #getErrorHandler
         * @see #setErrorHandler
         */
        this._errHandler = new DefaultErrorStrategy_1.DefaultErrorStrategy();
        this._precedenceStack = new IntegerStack_1.IntegerStack();
        /**
         * Specifies whether or not the parser should construct a parse tree during
         * the parsing process. The default value is `true`.
         *
         * @see `buildParseTree`
         */
        this._buildParseTrees = true;
        /**
         * The list of {@link ParseTreeListener} listeners registered to receive
         * events during the parse.
         *
         * @see #addParseListener
         */
        this._parseListeners = [];
        /**
         * The number of syntax errors reported during parsing. This value is
         * incremented each time {@link #notifyErrorListeners} is called.
         */
        this._syntaxErrors = 0;
        /** Indicates parser has match()ed EOF token. See {@link #exitRule()}. */
        this.matchedEOF = false;
        this._precedenceStack.push(0);
        this.inputStream = input;
    }
    reset(resetInput) {
        // Note: this method executes when not parsing, so _ctx can be undefined
        if (resetInput === undefined || resetInput) {
            this.inputStream.seek(0);
        }
        this._errHandler.reset(this);
        this._ctx = undefined;
        this._syntaxErrors = 0;
        this.matchedEOF = false;
        this.isTrace = false;
        this._precedenceStack.clear();
        this._precedenceStack.push(0);
        let interpreter = this.interpreter;
        if (interpreter != null) {
            interpreter.reset();
        }
    }
    /**
     * Match current input symbol against `ttype`. If the symbol type
     * matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
     * called to complete the match process.
     *
     * If the symbol type does not match,
     * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link #getBuildParseTree} is
     * `true` and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link #createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
     *
     * @param ttype the token type to match
     * @returns the matched symbol
     * @ if the current input symbol did not match
     * `ttype` and the error strategy could not recover from the
     * mismatched symbol
     */
    match(ttype) {
        let t = this.currentToken;
        if (t.type === ttype) {
            if (ttype === Token_1.Token.EOF) {
                this.matchedEOF = true;
            }
            this._errHandler.reportMatch(this);
            this.consume();
        }
        else {
            t = this._errHandler.recoverInline(this);
            if (this._buildParseTrees && t.tokenIndex === -1) {
                // we must have conjured up a new token during single token insertion
                // if it's not the current symbol
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
            }
        }
        return t;
    }
    /**
     * Match current input symbol as a wildcard. If the symbol type matches
     * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
     * and {@link #consume} are called to complete the match process.
     *
     * If the symbol type does not match,
     * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link #getBuildParseTree} is
     * `true` and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link Parser#createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
     *
     * @returns the matched symbol
     * @ if the current input symbol did not match
     * a wildcard and the error strategy could not recover from the mismatched
     * symbol
     */
    matchWildcard() {
        let t = this.currentToken;
        if (t.type > 0) {
            this._errHandler.reportMatch(this);
            this.consume();
        }
        else {
            t = this._errHandler.recoverInline(this);
            if (this._buildParseTrees && t.tokenIndex === -1) {
                // we must have conjured up a new token during single token insertion
                // if it's not the current symbol
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
            }
        }
        return t;
    }
    /**
     * Track the {@link ParserRuleContext} objects during the parse and hook
     * them up using the {@link ParserRuleContext#children} list so that it
     * forms a parse tree. The {@link ParserRuleContext} returned from the start
     * rule represents the root of the parse tree.
     *
     * Note that if we are not building parse trees, rule contexts only point
     * upwards. When a rule exits, it returns the context but that gets garbage
     * collected if nobody holds a reference. It points upwards but nobody
     * points at it.
     *
     * When we build parse trees, we are adding all of these contexts to
     * {@link ParserRuleContext#children} list. Contexts are then not candidates
     * for garbage collection.
     */
    set buildParseTree(buildParseTrees) {
        this._buildParseTrees = buildParseTrees;
    }
    /**
     * Gets whether or not a complete parse tree will be constructed while
     * parsing. This property is `true` for a newly constructed parser.
     *
     * @returns `true` if a complete parse tree will be constructed while
     * parsing, otherwise `false`
     */
    get buildParseTree() {
        return this._buildParseTrees;
    }
    getParseListeners() {
        return this._parseListeners;
    }
    /**
     * Registers `listener` to receive events during the parsing process.
     *
     * To support output-preserving grammar transformations (including but not
     * limited to left-recursion removal, automated left-factoring, and
     * optimized code generation), calls to listener methods during the parse
     * may differ substantially from calls made by
     * {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
     * particular, rule entry and exit events may occur in a different order
     * during the parse than after the parser. In addition, calls to certain
     * rule entry methods may be omitted.
     *
     * With the following specific exceptions, calls to listener events are
     * *deterministic*, i.e. for identical input the calls to listener
     * methods will be the same.
     *
     * * Alterations to the grammar used to generate code may change the
     *   behavior of the listener calls.
     * * Alterations to the command line options passed to ANTLR 4 when
     *   generating the parser may change the behavior of the listener calls.
     * * Changing the version of the ANTLR Tool used to generate the parser
     *   may change the behavior of the listener calls.
     *
     * @param listener the listener to add
     *
     * @throws {@link TypeError} if `listener` is `undefined`
     */
    addParseListener(listener) {
        if (listener == null) {
            throw new TypeError("listener cannot be null");
        }
        this._parseListeners.push(listener);
    }
    /**
     * Remove `listener` from the list of parse listeners.
     *
     * If `listener` is `undefined` or has not been added as a parse
     * listener, this method does nothing.
     *
     * @see #addParseListener
     *
     * @param listener the listener to remove
     */
    removeParseListener(listener) {
        let index = this._parseListeners.findIndex((l) => l === listener);
        if (index !== -1) {
            this._parseListeners.splice(index, 1);
        }
    }
    /**
     * Remove all parse listeners.
     *
     * @see #addParseListener
     */
    removeParseListeners() {
        this._parseListeners.length = 0;
    }
    /**
     * Notify any parse listeners of an enter rule event.
     *
     * @see #addParseListener
     */
    triggerEnterRuleEvent() {
        for (let listener of this._parseListeners) {
            if (listener.enterEveryRule) {
                listener.enterEveryRule(this._ctx);
            }
            this._ctx.enterRule(listener);
        }
    }
    /**
     * Notify any parse listeners of an exit rule event.
     *
     * @see #addParseListener
     */
    triggerExitRuleEvent() {
        // reverse order walk of listeners
        for (let i = this._parseListeners.length - 1; i >= 0; i--) {
            let listener = this._parseListeners[i];
            this._ctx.exitRule(listener);
            if (listener.exitEveryRule) {
                listener.exitEveryRule(this._ctx);
            }
        }
    }
    /**
     * Gets the number of syntax errors reported during parsing. This value is
     * incremented each time {@link #notifyErrorListeners} is called.
     *
     * @see #notifyErrorListeners
     */
    get numberOfSyntaxErrors() {
        return this._syntaxErrors;
    }
    get tokenFactory() {
        return this._input.tokenSource.tokenFactory;
    }
    /**
     * The ATN with bypass alternatives is expensive to create so we create it
     * lazily.
     *
     * @ if the current parser does not
     * implement the `serializedATN` property.
     */
    getATNWithBypassAlts() {
        let serializedAtn = this.serializedATN;
        if (serializedAtn == null) {
            throw new Error("The current parser does not support an ATN with bypass alternatives.");
        }
        let result = Parser.bypassAltsAtnCache.get(serializedAtn);
        if (result == null) {
            let deserializationOptions = new ATNDeserializationOptions_1.ATNDeserializationOptions();
            deserializationOptions.isGenerateRuleBypassTransitions = true;
            result = new ATNDeserializer_1.ATNDeserializer(deserializationOptions).deserialize(Utils.toCharArray(serializedAtn));
            Parser.bypassAltsAtnCache.set(serializedAtn, result);
        }
        return result;
    }
    compileParseTreePattern(pattern, patternRuleIndex, lexer) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!lexer) {
                if (this.inputStream) {
                    let tokenSource = this.inputStream.tokenSource;
                    if (tokenSource instanceof Lexer_1.Lexer) {
                        lexer = tokenSource;
                    }
                }
                if (!lexer) {
                    throw new Error("Parser can't discover a lexer to use");
                }
            }
            let currentLexer = lexer;
            let m = yield Promise.resolve().then(() => require("./tree/pattern/ParseTreePatternMatcher"));
            let matcher = new m.ParseTreePatternMatcher(currentLexer, this);
            return matcher.compile(pattern, patternRuleIndex);
        });
    }
    get errorHandler() {
        return this._errHandler;
    }
    set errorHandler(handler) {
        this._errHandler = handler;
    }
    get inputStream() {
        return this._input;
    }
    /** Set the token stream and reset the parser. */
    set inputStream(input) {
        this.reset(false);
        this._input = input;
    }
    /** Match needs to return the current input symbol, which gets put
     *  into the label for the associated token ref; e.g., x=ID.
     */
    get currentToken() {
        return this._input.LT(1);
    }
    notifyErrorListeners(msg, offendingToken, e) {
        if (offendingToken === undefined) {
            offendingToken = this.currentToken;
        }
        else if (offendingToken === null) {
            offendingToken = undefined;
        }
        this._syntaxErrors++;
        let line = -1;
        let charPositionInLine = -1;
        if (offendingToken != null) {
            line = offendingToken.line;
            charPositionInLine = offendingToken.charPositionInLine;
        }
        let listener = this.getErrorListenerDispatch();
        if (listener.syntaxError) {
            listener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);
        }
    }
    /**
     * Consume and return the [current symbol](`currentToken`).
     *
     * E.g., given the following input with `A` being the current
     * lookahead symbol, this function moves the cursor to `B` and returns
     * `A`.
     *
     * ```
     * A B
     * ^
     * ```
     *
     * If the parser is not in error recovery mode, the consumed symbol is added
     * to the parse tree using {@link ParserRuleContext#addChild(TerminalNode)}, and
     * {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
     * If the parser *is* in error recovery mode, the consumed symbol is
     * added to the parse tree using {@link #createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)} and
     * {@link ParseTreeListener#visitErrorNode} is called on any parse
     * listeners.
     */
    consume() {
        let o = this.currentToken;
        if (o.type !== Parser.EOF) {
            this.inputStream.consume();
        }
        let hasListener = this._parseListeners.length !== 0;
        if (this._buildParseTrees || hasListener) {
            if (this._errHandler.inErrorRecoveryMode(this)) {
                let node = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));
                if (hasListener) {
                    for (let listener of this._parseListeners) {
                        if (listener.visitErrorNode) {
                            listener.visitErrorNode(node);
                        }
                    }
                }
            }
            else {
                let node = this.createTerminalNode(this._ctx, o);
                this._ctx.addChild(node);
                if (hasListener) {
                    for (let listener of this._parseListeners) {
                        if (listener.visitTerminal) {
                            listener.visitTerminal(node);
                        }
                    }
                }
            }
        }
        return o;
    }
    /**
     * How to create a token leaf node associated with a parent.
     * Typically, the terminal node to create is not a function of the parent.
     *
     * @since 4.7
     */
    createTerminalNode(parent, t) {
        return new TerminalNode_1.TerminalNode(t);
    }
    /**
     * How to create an error node, given a token, associated with a parent.
     * Typically, the error node to create is not a function of the parent.
     *
     * @since 4.7
     */
    createErrorNode(parent, t) {
        return new ErrorNode_1.ErrorNode(t);
    }
    addContextToParseTree() {
        let parent = this._ctx._parent;
        // add current context to parent if we have a parent
        if (parent != null) {
            parent.addChild(this._ctx);
        }
    }
    /**
     * Always called by generated parsers upon entry to a rule. Access field
     * {@link #_ctx} get the current context.
     */
    enterRule(localctx, state, ruleIndex) {
        this.state = state;
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        if (this._buildParseTrees) {
            this.addContextToParseTree();
        }
        this.triggerEnterRuleEvent();
    }
    enterLeftFactoredRule(localctx, state, ruleIndex) {
        this.state = state;
        if (this._buildParseTrees) {
            let factoredContext = this._ctx.getChild(this._ctx.childCount - 1);
            this._ctx.removeLastChild();
            factoredContext._parent = localctx;
            localctx.addChild(factoredContext);
        }
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        if (this._buildParseTrees) {
            this.addContextToParseTree();
        }
        this.triggerEnterRuleEvent();
    }
    exitRule() {
        if (this.matchedEOF) {
            // if we have matched EOF, it cannot consume past EOF so we use LT(1) here
            this._ctx._stop = this._input.LT(1); // LT(1) will be end of file
        }
        else {
            this._ctx._stop = this._input.tryLT(-1); // stop node is what we just matched
        }
        // trigger event on _ctx, before it reverts to parent
        this.triggerExitRuleEvent();
        this.state = this._ctx.invokingState;
        this._ctx = this._ctx._parent;
    }
    enterOuterAlt(localctx, altNum) {
        localctx.altNumber = altNum;
        // if we have new localctx, make sure we replace existing ctx
        // that is previous child of parse tree
        if (this._buildParseTrees && this._ctx !== localctx) {
            let parent = this._ctx._parent;
            if (parent != null) {
                parent.removeLastChild();
                parent.addChild(localctx);
            }
        }
        this._ctx = localctx;
    }
    /**
     * Get the precedence level for the top-most precedence rule.
     *
     * @returns The precedence level for the top-most precedence rule, or -1 if
     * the parser context is not nested within a precedence rule.
     */
    get precedence() {
        if (this._precedenceStack.isEmpty) {
            return -1;
        }
        return this._precedenceStack.peek();
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
        this.state = state;
        this._precedenceStack.push(precedence);
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    }
    /** Like {@link #enterRule} but for recursive rules.
     *  Make the current context the child of the incoming localctx.
     */
    pushNewRecursionContext(localctx, state, ruleIndex) {
        let previous = this._ctx;
        previous._parent = localctx;
        previous.invokingState = state;
        previous._stop = this._input.tryLT(-1);
        this._ctx = localctx;
        this._ctx._start = previous._start;
        if (this._buildParseTrees) {
            this._ctx.addChild(previous);
        }
        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    }
    unrollRecursionContexts(_parentctx) {
        this._precedenceStack.pop();
        this._ctx._stop = this._input.tryLT(-1);
        let retctx = this._ctx; // save current ctx (return value)
        // unroll so _ctx is as it was before call to recursive method
        if (this._parseListeners.length > 0) {
            while (this._ctx !== _parentctx) {
                this.triggerExitRuleEvent();
                this._ctx = this._ctx._parent;
            }
        }
        else {
            this._ctx = _parentctx;
        }
        // hook into tree
        retctx._parent = _parentctx;
        if (this._buildParseTrees && _parentctx != null) {
            // add return ctx into invoking rule's tree
            _parentctx.addChild(retctx);
        }
    }
    getInvokingContext(ruleIndex) {
        let p = this._ctx;
        while (p && p.ruleIndex !== ruleIndex) {
            p = p._parent;
        }
        return p;
    }
    get context() {
        return this._ctx;
    }
    set context(ctx) {
        this._ctx = ctx;
    }
    precpred(localctx, precedence) {
        return precedence >= this._precedenceStack.peek();
    }
    getErrorListenerDispatch() {
        return new ProxyParserErrorListener_1.ProxyParserErrorListener(this.getErrorListeners());
    }
    inContext(context) {
        // TODO: useful in parser?
        return false;
    }
    /**
     * Checks whether or not `symbol` can follow the current state in the
     * ATN. The behavior of this method is equivalent to the following, but is
     * implemented such that the complete context-sensitive follow set does not
     * need to be explicitly constructed.
     *
     * ```
     * return getExpectedTokens().contains(symbol);
     * ```
     *
     * @param symbol the symbol type to check
     * @returns `true` if `symbol` can follow the current state in
     * the ATN, otherwise `false`.
     */
    isExpectedToken(symbol) {
        //   		return interpreter.atn.nextTokens(_ctx);
        let atn = this.interpreter.atn;
        let ctx = this._ctx;
        let s = atn.states[this.state];
        let following = atn.nextTokens(s);
        if (following.contains(symbol)) {
            return true;
        }
        //        System.out.println("following "+s+"="+following);
        if (!following.contains(Token_1.Token.EPSILON)) {
            return false;
        }
        while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
            let invokingState = atn.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            following = atn.nextTokens(rt.followState);
            if (following.contains(symbol)) {
                return true;
            }
            ctx = ctx._parent;
        }
        if (following.contains(Token_1.Token.EPSILON) && symbol === Token_1.Token.EOF) {
            return true;
        }
        return false;
    }
    get isMatchedEOF() {
        return this.matchedEOF;
    }
    /**
     * Computes the set of input symbols which could follow the current parser
     * state and context, as given by {@link #getState} and {@link #getContext},
     * respectively.
     *
     * @see ATN#getExpectedTokens(int, RuleContext)
     */
    getExpectedTokens() {
        return this.atn.getExpectedTokens(this.state, this.context);
    }
    getExpectedTokensWithinCurrentRule() {
        let atn = this.interpreter.atn;
        let s = atn.states[this.state];
        return atn.nextTokens(s);
    }
    /** Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found. */
    getRuleIndex(ruleName) {
        let ruleIndex = this.getRuleIndexMap().get(ruleName);
        if (ruleIndex != null) {
            return ruleIndex;
        }
        return -1;
    }
    get ruleContext() { return this._ctx; }
    /** Return List&lt;String&gt; of the rule names in your parser instance
     *  leading up to a call to the current rule.  You could override if
     *  you want more details such as the file/line info of where
     *  in the ATN a rule is invoked.
     *
     *  This is very useful for error messages.
     */
    getRuleInvocationStack(ctx = this._ctx) {
        let p = ctx; // Workaround for Microsoft/TypeScript#14487
        let ruleNames = this.ruleNames;
        let stack = [];
        while (p != null) {
            // compute what follows who invoked us
            let ruleIndex = p.ruleIndex;
            if (ruleIndex < 0) {
                stack.push("n/a");
            }
            else {
                stack.push(ruleNames[ruleIndex]);
            }
            p = p._parent;
        }
        return stack;
    }
    /** For debugging and other purposes. */
    getDFAStrings() {
        let s = [];
        for (let dfa of this._interp.atn.decisionToDFA) {
            s.push(dfa.toString(this.vocabulary, this.ruleNames));
        }
        return s;
    }
    /** For debugging and other purposes. */
    dumpDFA() {
        let seenOne = false;
        for (let dfa of this._interp.atn.decisionToDFA) {
            if (!dfa.isEmpty) {
                if (seenOne) {
                    console.log();
                }
                console.log("Decision " + dfa.decision + ":");
                process.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));
                seenOne = true;
            }
        }
    }
    get sourceName() {
        return this._input.sourceName;
    }
    get parseInfo() {
        return Promise.resolve().then(() => require("./atn/ProfilingATNSimulator")).then((m) => {
            let interp = this.interpreter;
            if (interp instanceof m.ProfilingATNSimulator) {
                return new ParseInfo_1.ParseInfo(interp);
            }
            return undefined;
        });
    }
    /**
     * @since 4.3
     */
    setProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            let m = yield Promise.resolve().then(() => require("./atn/ProfilingATNSimulator"));
            let interp = this.interpreter;
            if (profile) {
                if (!(interp instanceof m.ProfilingATNSimulator)) {
                    this.interpreter = new m.ProfilingATNSimulator(this);
                }
            }
            else if (interp instanceof m.ProfilingATNSimulator) {
                this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this.atn, this);
            }
            this.interpreter.setPredictionMode(interp.getPredictionMode());
        });
    }
    /** During a parse is sometimes useful to listen in on the rule entry and exit
     *  events as well as token matches. This is for quick and dirty debugging.
     */
    set isTrace(trace) {
        if (!trace) {
            if (this._tracer) {
                this.removeParseListener(this._tracer);
                this._tracer = undefined;
            }
        }
        else {
            if (this._tracer) {
                this.removeParseListener(this._tracer);
            }
            else {
                this._tracer = new TraceListener(this.ruleNames, this._input);
            }
            this.addParseListener(this._tracer);
        }
    }
    /**
     * Gets whether a {@link TraceListener} is registered as a parse listener
     * for the parser.
     */
    get isTrace() {
        return this._tracer != null;
    }
}
/**
 * This field maps from the serialized ATN string to the deserialized {@link ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions.isGenerateRuleBypassTransitions
 */
Parser.bypassAltsAtnCache = new Map();
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "_errHandler", void 0);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "match", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "matchWildcard", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getParseListeners", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "addParseListener", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getATNWithBypassAlts", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "errorHandler", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "inputStream", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "currentToken", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "enterRule", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.Nullable)
], Parser.prototype, "precpred", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "getErrorListenerDispatch", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getExpectedTokens", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getExpectedTokensWithinCurrentRule", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "parseInfo", null);
exports.Parser = Parser;

}).call(this)}).call(this,require('_process'))
},{"./Decorators":13,"./DefaultErrorStrategy":14,"./Lexer":21,"./ProxyParserErrorListener":30,"./Recognizer":32,"./Token":37,"./atn/ATNDeserializationOptions":43,"./atn/ATNDeserializer":44,"./atn/ParseInfo":80,"./atn/ParserATNSimulator":81,"./atn/ProfilingATNSimulator":90,"./misc/IntegerStack":118,"./misc/Utils":126,"./tree/ErrorNode":128,"./tree/TerminalNode":132,"./tree/pattern/ParseTreePatternMatcher":138,"_process":205}],27:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNState_1 = require("./atn/ATNState");
const ATNStateType_1 = require("./atn/ATNStateType");
const BitSet_1 = require("./misc/BitSet");
const FailedPredicateException_1 = require("./FailedPredicateException");
const InputMismatchException_1 = require("./InputMismatchException");
const InterpreterRuleContext_1 = require("./InterpreterRuleContext");
const LoopEndState_1 = require("./atn/LoopEndState");
const Decorators_1 = require("./Decorators");
const Decorators_2 = require("./Decorators");
const Parser_1 = require("./Parser");
const ParserATNSimulator_1 = require("./atn/ParserATNSimulator");
const RecognitionException_1 = require("./RecognitionException");
const StarLoopEntryState_1 = require("./atn/StarLoopEntryState");
const Token_1 = require("./Token");
/** A parser simulator that mimics what ANTLR's generated
 *  parser code does. A ParserATNSimulator is used to make
 *  predictions via adaptivePredict but this class moves a pointer through the
 *  ATN to simulate parsing. ParserATNSimulator just
 *  makes us efficient rather than having to backtrack, for example.
 *
 *  This properly creates parse trees even for left recursive rules.
 *
 *  We rely on the left recursive rule invocation and special predicate
 *  transitions to make left recursive rules work.
 *
 *  See TestParserInterpreter for examples.
 */
let ParserInterpreter = class ParserInterpreter extends Parser_1.Parser {
    constructor(grammarFileName, vocabulary, ruleNames, atn, input) {
        super(grammarFileName instanceof ParserInterpreter ? grammarFileName.inputStream : input);
        /** This stack corresponds to the _parentctx, _parentState pair of locals
         *  that would exist on call stack frames with a recursive descent parser;
         *  in the generated function for a left-recursive rule you'd see:
         *
         *  private EContext e(int _p) {
         *      ParserRuleContext _parentctx = _ctx;    // Pair.a
         *      int _parentState = state;          // Pair.b
         *      ...
         *  }
         *
         *  Those values are used to create new recursive rule invocation contexts
         *  associated with left operand of an alt like "expr '*' expr".
         */
        this._parentContextStack = [];
        /** We need a map from (decision,inputIndex)->forced alt for computing ambiguous
         *  parse trees. For now, we allow exactly one override.
         */
        this.overrideDecision = -1;
        this.overrideDecisionInputIndex = -1;
        this.overrideDecisionAlt = -1;
        this.overrideDecisionReached = false; // latch and only override once; error might trigger infinite loop
        /** What is the current context when we override a decisions?  This tells
         *  us what the root of the parse tree is when using override
         *  for an ambiguity/lookahead check.
         */
        this._overrideDecisionRoot = undefined;
        if (grammarFileName instanceof ParserInterpreter) {
            let old = grammarFileName;
            this._grammarFileName = old._grammarFileName;
            this._atn = old._atn;
            this.pushRecursionContextStates = old.pushRecursionContextStates;
            this._ruleNames = old._ruleNames;
            this._vocabulary = old._vocabulary;
            this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this._atn, this);
        }
        else {
            // The second constructor requires non-null arguments
            vocabulary = vocabulary;
            ruleNames = ruleNames;
            atn = atn;
            this._grammarFileName = grammarFileName;
            this._atn = atn;
            this._ruleNames = ruleNames.slice(0);
            this._vocabulary = vocabulary;
            // identify the ATN states where pushNewRecursionContext() must be called
            this.pushRecursionContextStates = new BitSet_1.BitSet(atn.states.length);
            for (let state of atn.states) {
                if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                    continue;
                }
                if (state.precedenceRuleDecision) {
                    this.pushRecursionContextStates.set(state.stateNumber);
                }
            }
            // get atn simulator that knows how to do predictions
            this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(atn, this);
        }
    }
    reset(resetInput) {
        if (resetInput === undefined) {
            super.reset();
        }
        else {
            super.reset(resetInput);
        }
        this.overrideDecisionReached = false;
        this._overrideDecisionRoot = undefined;
    }
    get atn() {
        return this._atn;
    }
    get vocabulary() {
        return this._vocabulary;
    }
    get ruleNames() {
        return this._ruleNames;
    }
    get grammarFileName() {
        return this._grammarFileName;
    }
    /** Begin parsing at startRuleIndex */
    parse(startRuleIndex) {
        let startRuleStartState = this._atn.ruleToStartState[startRuleIndex];
        this._rootContext = this.createInterpreterRuleContext(undefined, ATNState_1.ATNState.INVALID_STATE_NUMBER, startRuleIndex);
        if (startRuleStartState.isPrecedenceRule) {
            this.enterRecursionRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);
        }
        else {
            this.enterRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex);
        }
        while (true) {
            let p = this.atnState;
            switch (p.stateType) {
                case ATNStateType_1.ATNStateType.RULE_STOP:
                    // pop; return from rule
                    if (this._ctx.isEmpty) {
                        if (startRuleStartState.isPrecedenceRule) {
                            let result = this._ctx;
                            let parentContext = this._parentContextStack.pop();
                            this.unrollRecursionContexts(parentContext[0]);
                            return result;
                        }
                        else {
                            this.exitRule();
                            return this._rootContext;
                        }
                    }
                    this.visitRuleStopState(p);
                    break;
                default:
                    try {
                        this.visitState(p);
                    }
                    catch (e) {
                        if (e instanceof RecognitionException_1.RecognitionException) {
                            this.state = this._atn.ruleToStopState[p.ruleIndex].stateNumber;
                            this.context.exception = e;
                            this.errorHandler.reportError(this, e);
                            this.recover(e);
                        }
                        else {
                            throw e;
                        }
                    }
                    break;
            }
        }
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
        this._parentContextStack.push([this._ctx, localctx.invokingState]);
        super.enterRecursionRule(localctx, state, ruleIndex, precedence);
    }
    get atnState() {
        return this._atn.states[this.state];
    }
    visitState(p) {
        let predictedAlt = 1;
        if (p.numberOfTransitions > 1) {
            predictedAlt = this.visitDecisionState(p);
        }
        let transition = p.transition(predictedAlt - 1);
        switch (transition.serializationType) {
            case 1 /* EPSILON */:
                if (this.pushRecursionContextStates.get(p.stateNumber) &&
                    !(transition.target instanceof LoopEndState_1.LoopEndState)) {
                    // We are at the start of a left recursive rule's (...)* loop
                    // and we're not taking the exit branch of loop.
                    let parentContext = this._parentContextStack[this._parentContextStack.length - 1];
                    let localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this._ctx.ruleIndex);
                    this.pushNewRecursionContext(localctx, this._atn.ruleToStartState[p.ruleIndex].stateNumber, this._ctx.ruleIndex);
                }
                break;
            case 5 /* ATOM */:
                this.match(transition._label);
                break;
            case 2 /* RANGE */:
            case 7 /* SET */:
            case 8 /* NOT_SET */:
                if (!transition.matches(this._input.LA(1), Token_1.Token.MIN_USER_TOKEN_TYPE, 65535)) {
                    this.recoverInline();
                }
                this.matchWildcard();
                break;
            case 9 /* WILDCARD */:
                this.matchWildcard();
                break;
            case 3 /* RULE */:
                let ruleStartState = transition.target;
                let ruleIndex = ruleStartState.ruleIndex;
                let newctx = this.createInterpreterRuleContext(this._ctx, p.stateNumber, ruleIndex);
                if (ruleStartState.isPrecedenceRule) {
                    this.enterRecursionRule(newctx, ruleStartState.stateNumber, ruleIndex, transition.precedence);
                }
                else {
                    this.enterRule(newctx, transition.target.stateNumber, ruleIndex);
                }
                break;
            case 4 /* PREDICATE */:
                let predicateTransition = transition;
                if (!this.sempred(this._ctx, predicateTransition.ruleIndex, predicateTransition.predIndex)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this);
                }
                break;
            case 6 /* ACTION */:
                let actionTransition = transition;
                this.action(this._ctx, actionTransition.ruleIndex, actionTransition.actionIndex);
                break;
            case 10 /* PRECEDENCE */:
                if (!this.precpred(this._ctx, transition.precedence)) {
                    let precedence = transition.precedence;
                    throw new FailedPredicateException_1.FailedPredicateException(this, `precpred(_ctx, ${precedence})`);
                }
                break;
            default:
                throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.");
        }
        this.state = transition.target.stateNumber;
    }
    /** Method visitDecisionState() is called when the interpreter reaches
     *  a decision state (instance of DecisionState). It gives an opportunity
     *  for subclasses to track interesting things.
     */
    visitDecisionState(p) {
        let predictedAlt;
        this.errorHandler.sync(this);
        let decision = p.decision;
        if (decision === this.overrideDecision && this._input.index === this.overrideDecisionInputIndex && !this.overrideDecisionReached) {
            predictedAlt = this.overrideDecisionAlt;
            this.overrideDecisionReached = true;
        }
        else {
            predictedAlt = this.interpreter.adaptivePredict(this._input, decision, this._ctx);
        }
        return predictedAlt;
    }
    /** Provide simple "factory" for InterpreterRuleContext's.
     *  @since 4.5.1
     */
    createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
        return new InterpreterRuleContext_1.InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);
    }
    visitRuleStopState(p) {
        let ruleStartState = this._atn.ruleToStartState[p.ruleIndex];
        if (ruleStartState.isPrecedenceRule) {
            let parentContext = this._parentContextStack.pop();
            this.unrollRecursionContexts(parentContext[0]);
            this.state = parentContext[1];
        }
        else {
            this.exitRule();
        }
        let ruleTransition = this._atn.states[this.state].transition(0);
        this.state = ruleTransition.followState.stateNumber;
    }
    /** Override this parser interpreters normal decision-making process
     *  at a particular decision and input token index. Instead of
     *  allowing the adaptive prediction mechanism to choose the
     *  first alternative within a block that leads to a successful parse,
     *  force it to take the alternative, 1..n for n alternatives.
     *
     *  As an implementation limitation right now, you can only specify one
     *  override. This is sufficient to allow construction of different
     *  parse trees for ambiguous input. It means re-parsing the entire input
     *  in general because you're never sure where an ambiguous sequence would
     *  live in the various parse trees. For example, in one interpretation,
     *  an ambiguous input sequence would be matched completely in expression
     *  but in another it could match all the way back to the root.
     *
     *  s : e '!'? ;
     *  e : ID
     *    | ID '!'
     *    ;
     *
     *  Here, x! can be matched as (s (e ID) !) or (s (e ID !)). In the first
     *  case, the ambiguous sequence is fully contained only by the root.
     *  In the second case, the ambiguous sequences fully contained within just
     *  e, as in: (e ID !).
     *
     *  Rather than trying to optimize this and make
     *  some intelligent decisions for optimization purposes, I settled on
     *  just re-parsing the whole input and then using
     *  {link Trees#getRootOfSubtreeEnclosingRegion} to find the minimal
     *  subtree that contains the ambiguous sequence. I originally tried to
     *  record the call stack at the point the parser detected and ambiguity but
     *  left recursive rules create a parse tree stack that does not reflect
     *  the actual call stack. That impedance mismatch was enough to make
     *  it it challenging to restart the parser at a deeply nested rule
     *  invocation.
     *
     *  Only parser interpreters can override decisions so as to avoid inserting
     *  override checking code in the critical ALL(*) prediction execution path.
     *
     *  @since 4.5
     */
    addDecisionOverride(decision, tokenIndex, forcedAlt) {
        this.overrideDecision = decision;
        this.overrideDecisionInputIndex = tokenIndex;
        this.overrideDecisionAlt = forcedAlt;
    }
    get overrideDecisionRoot() {
        return this._overrideDecisionRoot;
    }
    /** Rely on the error handler for this parser but, if no tokens are consumed
     *  to recover, add an error node. Otherwise, nothing is seen in the parse
     *  tree.
     */
    recover(e) {
        let i = this._input.index;
        this.errorHandler.recover(this, e);
        if (this._input.index === i) {
            // no input consumed, better add an error node
            let tok = e.getOffendingToken();
            if (!tok) {
                throw new Error("Expected exception to have an offending token");
            }
            let source = tok.tokenSource;
            let stream = source !== undefined ? source.inputStream : undefined;
            let sourcePair = { source, stream };
            if (e instanceof InputMismatchException_1.InputMismatchException) {
                let expectedTokens = e.expectedTokens;
                if (expectedTokens === undefined) {
                    throw new Error("Expected the exception to provide expected tokens");
                }
                let expectedTokenType = Token_1.Token.INVALID_TYPE;
                if (!expectedTokens.isNil) {
                    // get any element
                    expectedTokenType = expectedTokens.minElement;
                }
                let errToken = this.tokenFactory.create(sourcePair, expectedTokenType, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                tok.line, tok.charPositionInLine);
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
            }
            else { // NoViableAlt
                let source = tok.tokenSource;
                let errToken = this.tokenFactory.create(sourcePair, Token_1.Token.INVALID_TYPE, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                tok.line, tok.charPositionInLine);
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
            }
        }
    }
    recoverInline() {
        return this._errHandler.recoverInline(this);
    }
    /** Return the root of the parse, which can be useful if the parser
     *  bails out. You still can access the top node. Note that,
     *  because of the way left recursive rules add children, it's possible
     *  that the root will not have any children if the start rule immediately
     *  called and left recursive rule that fails.
     *
     * @since 4.5.1
     */
    get rootContext() {
        return this._rootContext;
    }
};
__decorate([
    Decorators_1.NotNull
], ParserInterpreter.prototype, "_vocabulary", void 0);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "reset", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "atn", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "vocabulary", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "ruleNames", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "grammarFileName", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "enterRecursionRule", null);
ParserInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
], ParserInterpreter);
exports.ParserInterpreter = ParserInterpreter;

},{"./Decorators":13,"./FailedPredicateException":17,"./InputMismatchException":18,"./InterpreterRuleContext":20,"./Parser":26,"./RecognitionException":31,"./Token":37,"./atn/ATNState":46,"./atn/ATNStateType":47,"./atn/LoopEndState":77,"./atn/ParserATNSimulator":81,"./atn/StarLoopEntryState":99,"./misc/BitSet":114}],28:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:56.6285494-07:00
const ErrorNode_1 = require("./tree/ErrorNode");
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
const RuleContext_1 = require("./RuleContext");
const TerminalNode_1 = require("./tree/TerminalNode");
/** A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule invocations:
 *  start, stop, rule index, current alt number.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
class ParserRuleContext extends RuleContext_1.RuleContext {
    constructor(parent, invokingStateNumber) {
        if (invokingStateNumber == null) {
            super();
        }
        else {
            super(parent, invokingStateNumber);
        }
    }
    static emptyContext() {
        return ParserRuleContext.EMPTY;
    }
    /**
     * COPY a ctx (I'm deliberately not using copy constructor) to avoid
     * confusion with creating node with parent. Does not copy children
     * (except error leaves).
     *
     * This is used in the generated parser code to flip a generic XContext
     * node for rule X to a YContext for alt label Y. In that sense, it is not
     * really a generic copy function.
     *
     * If we do an error sync() at start of a rule, we might add error nodes
     * to the generic XContext so this function must copy those nodes to the
     * YContext as well else they are lost!
     */
    copyFrom(ctx) {
        this._parent = ctx._parent;
        this.invokingState = ctx.invokingState;
        this._start = ctx._start;
        this._stop = ctx._stop;
        // copy any error nodes to alt label node
        if (ctx.children) {
            this.children = [];
            // reset parent pointer for any error nodes
            for (let child of ctx.children) {
                if (child instanceof ErrorNode_1.ErrorNode) {
                    this.addChild(child);
                }
            }
        }
    }
    // Double dispatch methods for listeners
    enterRule(listener) {
        // intentionally empty
    }
    exitRule(listener) {
        // intentionally empty
    }
    /** Add a parse tree node to this as a child.  Works for
     *  internal and leaf nodes. Does not set parent link;
     *  other add methods must do that. Other addChild methods
     *  call this.
     *
     *  We cannot set the parent pointer of the incoming node
     *  because the existing interfaces do not have a setParent()
     *  method and I don't want to break backward compatibility for this.
     *
     *  @since 4.7
     */
    addAnyChild(t) {
        if (!this.children) {
            this.children = [t];
        }
        else {
            this.children.push(t);
        }
        return t;
    }
    addChild(t) {
        let result;
        if (t instanceof TerminalNode_1.TerminalNode) {
            t.setParent(this);
            this.addAnyChild(t);
            return;
        }
        else if (t instanceof RuleContext_1.RuleContext) {
            // Does not set parent link
            this.addAnyChild(t);
            return;
        }
        else {
            // Deprecated code path
            t = new TerminalNode_1.TerminalNode(t);
            this.addAnyChild(t);
            t.setParent(this);
            return t;
        }
    }
    addErrorNode(node) {
        if (node instanceof ErrorNode_1.ErrorNode) {
            const errorNode = node;
            errorNode.setParent(this);
            return this.addAnyChild(errorNode);
        }
        else {
            // deprecated path
            const badToken = node;
            let t = new ErrorNode_1.ErrorNode(badToken);
            this.addAnyChild(t);
            t.setParent(this);
            return t;
        }
    }
    //	public void trace(int s) {
    //		if ( states==null ) states = new ArrayList<Integer>();
    //		states.add(s);
    //	}
    /** Used by enterOuterAlt to toss out a RuleContext previously added as
     *  we entered a rule. If we have # label, we will need to remove
     *  generic ruleContext object.
     */
    removeLastChild() {
        if (this.children) {
            this.children.pop();
        }
    }
    get parent() {
        let parent = super.parent;
        if (parent === undefined || parent instanceof ParserRuleContext) {
            return parent;
        }
        throw new TypeError("Invalid parent type for ParserRuleContext");
    }
    // Note: in TypeScript, order or arguments reversed
    getChild(i, ctxType) {
        if (!this.children || i < 0 || i >= this.children.length) {
            throw new RangeError("index parameter must be between >= 0 and <= number of children.");
        }
        if (ctxType == null) {
            return this.children[i];
        }
        let result = this.tryGetChild(i, ctxType);
        if (result === undefined) {
            throw new Error("The specified node does not exist");
        }
        return result;
    }
    tryGetChild(i, ctxType) {
        if (!this.children || i < 0 || i >= this.children.length) {
            return undefined;
        }
        let j = -1; // what node with ctxType have we found?
        for (let o of this.children) {
            if (o instanceof ctxType) {
                j++;
                if (j === i) {
                    return o;
                }
            }
        }
        return undefined;
    }
    getToken(ttype, i) {
        let result = this.tryGetToken(ttype, i);
        if (result === undefined) {
            throw new Error("The specified token does not exist");
        }
        return result;
    }
    tryGetToken(ttype, i) {
        if (!this.children || i < 0 || i >= this.children.length) {
            return undefined;
        }
        let j = -1; // what token with ttype have we found?
        for (let o of this.children) {
            if (o instanceof TerminalNode_1.TerminalNode) {
                let symbol = o.symbol;
                if (symbol.type === ttype) {
                    j++;
                    if (j === i) {
                        return o;
                    }
                }
            }
        }
        return undefined;
    }
    getTokens(ttype) {
        let tokens = [];
        if (!this.children) {
            return tokens;
        }
        for (let o of this.children) {
            if (o instanceof TerminalNode_1.TerminalNode) {
                let symbol = o.symbol;
                if (symbol.type === ttype) {
                    tokens.push(o);
                }
            }
        }
        return tokens;
    }
    get ruleContext() {
        return this;
    }
    // NOTE: argument order change from Java version
    getRuleContext(i, ctxType) {
        return this.getChild(i, ctxType);
    }
    tryGetRuleContext(i, ctxType) {
        return this.tryGetChild(i, ctxType);
    }
    getRuleContexts(ctxType) {
        let contexts = [];
        if (!this.children) {
            return contexts;
        }
        for (let o of this.children) {
            if (o instanceof ctxType) {
                contexts.push(o);
            }
        }
        return contexts;
    }
    get childCount() {
        return this.children ? this.children.length : 0;
    }
    get sourceInterval() {
        if (!this._start) {
            return Interval_1.Interval.INVALID;
        }
        if (!this._stop || this._stop.tokenIndex < this._start.tokenIndex) {
            return Interval_1.Interval.of(this._start.tokenIndex, this._start.tokenIndex - 1); // empty
        }
        return Interval_1.Interval.of(this._start.tokenIndex, this._stop.tokenIndex);
    }
    /**
     * Get the initial token in this context.
     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
     * (for example, zero length or error productions) this token may exceed stop.
     */
    get start() { return this._start; }
    /**
     * Get the final token in this context.
     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
     * (for example, zero length or error productions) this token may precede start.
     */
    get stop() { return this._stop; }
    /** Used for rule context info debugging during parse-time, not so much for ATN debugging */
    toInfoString(recognizer) {
        let rules = recognizer.getRuleInvocationStack(this).reverse();
        return "ParserRuleContext" + rules + "{" +
            "start=" + this._start +
            ", stop=" + this._stop +
            "}";
    }
}
ParserRuleContext.EMPTY = new ParserRuleContext();
__decorate([
    Decorators_1.Override
    /** Override to make type more specific */
], ParserRuleContext.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], ParserRuleContext.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], ParserRuleContext.prototype, "sourceInterval", null);
exports.ParserRuleContext = ParserRuleContext;

},{"./Decorators":13,"./RuleContext":33,"./misc/Interval":119,"./tree/ErrorNode":128,"./tree/TerminalNode":132}],29:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("./Decorators");
/**
 * This implementation of {@link ANTLRErrorListener} dispatches all calls to a
 * collection of delegate listeners. This reduces the effort required to support multiple
 * listeners.
 *
 * @author Sam Harwell
 */
class ProxyErrorListener {
    constructor(delegates) {
        this.delegates = delegates;
        if (!delegates) {
            throw new Error("Invalid delegates");
        }
    }
    getDelegates() {
        return this.delegates;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        this.delegates.forEach((listener) => {
            if (listener.syntaxError) {
                listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);
            }
        });
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
], ProxyErrorListener.prototype, "syntaxError", null);
exports.ProxyErrorListener = ProxyErrorListener;

},{"./Decorators":13}],30:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ProxyErrorListener_1 = require("./ProxyErrorListener");
const Decorators_1 = require("./Decorators");
/**
 * @author Sam Harwell
 */
class ProxyParserErrorListener extends ProxyErrorListener_1.ProxyErrorListener {
    constructor(delegates) {
        super(delegates);
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportAmbiguity) {
                listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
            }
        });
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportAttemptingFullContext) {
                listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
            }
        });
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportContextSensitivity) {
                listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);
            }
        });
    }
}
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportAmbiguity", null);
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportContextSensitivity", null);
exports.ProxyParserErrorListener = ProxyParserErrorListener;

},{"./Decorators":13,"./ProxyErrorListener":29}],31:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/** The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */
class RecognitionException extends Error {
    constructor(recognizer, input, ctx, message) {
        super(message);
        this._offendingState = -1;
        this._recognizer = recognizer;
        this.input = input;
        this.ctx = ctx;
        if (recognizer) {
            this._offendingState = recognizer.state;
        }
    }
    /**
     * Get the ATN state number the parser was in at the time the error
     * occurred. For {@link NoViableAltException} and
     * {@link LexerNoViableAltException} exceptions, this is the
     * {@link DecisionState} number. For others, it is the state whose outgoing
     * edge we couldn't match.
     *
     * If the state number is not known, this method returns -1.
     */
    get offendingState() {
        return this._offendingState;
    }
    setOffendingState(offendingState) {
        this._offendingState = offendingState;
    }
    /**
     * Gets the set of input symbols which could potentially follow the
     * previously matched symbol at the time this exception was thrown.
     *
     * If the set of expected tokens is not known and could not be computed,
     * this method returns `undefined`.
     *
     * @returns The set of token types that could potentially follow the current
     * state in the ATN, or `undefined` if the information is not available.
     */
    get expectedTokens() {
        if (this._recognizer) {
            return this._recognizer.atn.getExpectedTokens(this._offendingState, this.ctx);
        }
        return undefined;
    }
    /**
     * Gets the {@link RuleContext} at the time this exception was thrown.
     *
     * If the context is not available, this method returns `undefined`.
     *
     * @returns The {@link RuleContext} at the time this exception was thrown.
     * If the context is not available, this method returns `undefined`.
     */
    get context() {
        return this.ctx;
    }
    /**
     * Gets the input stream which is the symbol source for the recognizer where
     * this exception was thrown.
     *
     * If the input stream is not available, this method returns `undefined`.
     *
     * @returns The input stream which is the symbol source for the recognizer
     * where this exception was thrown, or `undefined` if the stream is not
     * available.
     */
    get inputStream() {
        return this.input;
    }
    getOffendingToken(recognizer) {
        if (recognizer && recognizer !== this._recognizer) {
            return undefined;
        }
        return this.offendingToken;
    }
    setOffendingToken(recognizer, offendingToken) {
        if (recognizer === this._recognizer) {
            this.offendingToken = offendingToken;
        }
    }
    /**
     * Gets the {@link Recognizer} where this exception occurred.
     *
     * If the recognizer is not available, this method returns `undefined`.
     *
     * @returns The recognizer where this exception occurred, or `undefined` if
     * the recognizer is not available.
     */
    get recognizer() {
        return this._recognizer;
    }
}
exports.RecognitionException = RecognitionException;

},{}],32:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ConsoleErrorListener_1 = require("./ConsoleErrorListener");
const ProxyErrorListener_1 = require("./ProxyErrorListener");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
const Utils = require("./misc/Utils");
class Recognizer {
    constructor() {
        this._listeners = [ConsoleErrorListener_1.ConsoleErrorListener.INSTANCE];
        this._stateNumber = -1;
    }
    /**
     * Get a map from token names to token types.
     *
     * Used for XPath and tree pattern compilation.
     */
    getTokenTypeMap() {
        let vocabulary = this.vocabulary;
        let result = Recognizer.tokenTypeMapCache.get(vocabulary);
        if (result == null) {
            let intermediateResult = new Map();
            for (let i = 0; i <= this.atn.maxTokenType; i++) {
                let literalName = vocabulary.getLiteralName(i);
                if (literalName != null) {
                    intermediateResult.set(literalName, i);
                }
                let symbolicName = vocabulary.getSymbolicName(i);
                if (symbolicName != null) {
                    intermediateResult.set(symbolicName, i);
                }
            }
            intermediateResult.set("EOF", Token_1.Token.EOF);
            result = intermediateResult;
            Recognizer.tokenTypeMapCache.set(vocabulary, result);
        }
        return result;
    }
    /**
     * Get a map from rule names to rule indexes.
     *
     * Used for XPath and tree pattern compilation.
     */
    getRuleIndexMap() {
        let ruleNames = this.ruleNames;
        if (ruleNames == null) {
            throw new Error("The current recognizer does not provide a list of rule names.");
        }
        let result = Recognizer.ruleIndexMapCache.get(ruleNames);
        if (result == null) {
            result = Utils.toMap(ruleNames);
            Recognizer.ruleIndexMapCache.set(ruleNames, result);
        }
        return result;
    }
    getTokenType(tokenName) {
        let ttype = this.getTokenTypeMap().get(tokenName);
        if (ttype != null) {
            return ttype;
        }
        return Token_1.Token.INVALID_TYPE;
    }
    /**
     * If this recognizer was generated, it will have a serialized ATN
     * representation of the grammar.
     *
     * For interpreters, we don't know their serialized ATN despite having
     * created the interpreter from it.
     */
    get serializedATN() {
        throw new Error("there is no serialized ATN");
    }
    /**
     * Get the {@link ATN} used by the recognizer for prediction.
     *
     * @returns The {@link ATN} used by the recognizer for prediction.
     */
    get atn() {
        return this._interp.atn;
    }
    /**
     * Get the ATN interpreter used by the recognizer for prediction.
     *
     * @returns The ATN interpreter used by the recognizer for prediction.
     */
    get interpreter() {
        return this._interp;
    }
    /**
     * Set the ATN interpreter used by the recognizer for prediction.
     *
     * @param interpreter The ATN interpreter used by the recognizer for
     * prediction.
     */
    set interpreter(interpreter) {
        this._interp = interpreter;
    }
    /** If profiling during the parse/lex, this will return DecisionInfo records
     *  for each decision in recognizer in a ParseInfo object.
     *
     * @since 4.3
     */
    get parseInfo() {
        return Promise.resolve(undefined);
    }
    /** What is the error header, normally line/character position information? */
    getErrorHeader(e) {
        let token = e.getOffendingToken();
        if (!token) {
            return "";
        }
        let line = token.line;
        let charPositionInLine = token.charPositionInLine;
        return "line " + line + ":" + charPositionInLine;
    }
    /**
     * @exception NullPointerException if `listener` is `undefined`.
     */
    addErrorListener(listener) {
        if (!listener) {
            throw new TypeError("listener must not be null");
        }
        this._listeners.push(listener);
    }
    removeErrorListener(listener) {
        let position = this._listeners.indexOf(listener);
        if (position !== -1) {
            this._listeners.splice(position, 1);
        }
    }
    removeErrorListeners() {
        this._listeners.length = 0;
    }
    getErrorListeners() {
        return this._listeners.slice(0);
    }
    getErrorListenerDispatch() {
        return new ProxyErrorListener_1.ProxyErrorListener(this.getErrorListeners());
    }
    // subclass needs to override these if there are sempreds or actions
    // that the ATN interp needs to execute
    sempred(_localctx, ruleIndex, actionIndex) {
        return true;
    }
    precpred(localctx, precedence) {
        return true;
    }
    action(_localctx, ruleIndex, actionIndex) {
        // intentionally empty
    }
    get state() {
        return this._stateNumber;
    }
    /** Indicate that the recognizer has changed internal state that is
     *  consistent with the ATN state passed in.  This way we always know
     *  where we are in the ATN as the parser goes along. The rule
     *  context objects form a stack that lets us see the stack of
     *  invoking rules. Combine this and we have complete ATN
     *  configuration information.
     */
    set state(atnState) {
        //		System.err.println("setState "+atnState);
        this._stateNumber = atnState;
        //		if ( traceATNStates ) _ctx.trace(atnState);
    }
}
Recognizer.EOF = -1;
Recognizer.tokenTypeMapCache = new WeakMap();
Recognizer.ruleIndexMapCache = new WeakMap();
__decorate([
    Decorators_1.SuppressWarnings("serial"),
    Decorators_1.NotNull
], Recognizer.prototype, "_listeners", void 0);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getTokenTypeMap", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getRuleIndexMap", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "serializedATN", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "atn", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "interpreter", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "getErrorHeader", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "addErrorListener", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "removeErrorListener", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getErrorListeners", null);
exports.Recognizer = Recognizer;

},{"./ConsoleErrorListener":12,"./Decorators":13,"./ProxyErrorListener":29,"./Token":37,"./misc/Utils":126}],33:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:57.3490837-07:00
const ATN_1 = require("./atn/ATN");
const Recognizer_1 = require("./Recognizer");
const RuleNode_1 = require("./tree/RuleNode");
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
const Trees_1 = require("./tree/Trees");
const ParserRuleContext_1 = require("./ParserRuleContext");
/** A rule context is a record of a single rule invocation.
 *
 *  We form a stack of these context objects using the parent
 *  pointer. A parent pointer of `undefined` indicates that the current
 *  context is the bottom of the stack. The ParserRuleContext subclass
 *  as a children list so that we can turn this data structure into a
 *  tree.
 *
 *  The root node always has a `undefined` pointer and invokingState of -1.
 *
 *  Upon entry to parsing, the first invoked rule function creates a
 *  context object (a subclass specialized for that rule such as
 *  SContext) and makes it the root of a parse tree, recorded by field
 *  Parser._ctx.
 *
 *  public final SContext s() throws RecognitionException {
 *      SContext _localctx = new SContext(_ctx, state); <-- create new node
 *      enterRule(_localctx, 0, RULE_s);                     <-- push it
 *      ...
 *      exitRule();                                          <-- pop back to _localctx
 *      return _localctx;
 *  }
 *
 *  A subsequent rule invocation of r from the start rule s pushes a
 *  new context object for r whose parent points at s and use invoking
 *  state is the state with r emanating as edge label.
 *
 *  The invokingState fields from a context object to the root
 *  together form a stack of rule indication states where the root
 *  (bottom of the stack) has a -1 sentinel value. If we invoke start
 *  symbol s then call r1, which calls r2, the  would look like
 *  this:
 *
 *     SContext[-1]   <- root node (bottom of the stack)
 *     R1Context[p]   <- p in rule s called r1
 *     R2Context[q]   <- q in rule r1 called r2
 *
 *  So the top of the stack, _ctx, represents a call to the current
 *  rule and it holds the return address from another rule that invoke
 *  to this rule. To invoke a rule, we must always have a current context.
 *
 *  The parent contexts are useful for computing lookahead sets and
 *  getting error information.
 *
 *  These objects are used during parsing and prediction.
 *  For the special case of parsers, we use the subclass
 *  ParserRuleContext.
 *
 *  @see ParserRuleContext
 */
class RuleContext extends RuleNode_1.RuleNode {
    constructor(parent, invokingState) {
        super();
        this._parent = parent;
        this.invokingState = invokingState != null ? invokingState : -1;
    }
    static getChildContext(parent, invokingState) {
        return new RuleContext(parent, invokingState);
    }
    depth() {
        let n = 0;
        let p = this;
        while (p) {
            p = p._parent;
            n++;
        }
        return n;
    }
    /** A context is empty if there is no invoking state; meaning nobody called
     *  current context.
     */
    get isEmpty() {
        return this.invokingState === -1;
    }
    // satisfy the ParseTree / SyntaxTree interface
    get sourceInterval() {
        return Interval_1.Interval.INVALID;
    }
    get ruleContext() { return this; }
    get parent() { return this._parent; }
    /** @since 4.7. {@see ParseTree#setParent} comment */
    setParent(parent) {
        this._parent = parent;
    }
    get payload() { return this; }
    /** Return the combined text of all child nodes. This method only considers
     *  tokens which have been added to the parse tree.
     *
     *  Since tokens on hidden channels (e.g. whitespace or comments) are not
     *  added to the parse trees, they will not appear in the output of this
     *  method.
     */
    get text() {
        if (this.childCount === 0) {
            return "";
        }
        let builder = "";
        for (let i = 0; i < this.childCount; i++) {
            builder += this.getChild(i).text;
        }
        return builder.toString();
    }
    get ruleIndex() { return -1; }
    /** For rule associated with this parse tree internal node, return
     *  the outer alternative number used to match the input. Default
     *  implementation does not compute nor store this alt num. Create
     *  a subclass of ParserRuleContext with backing field and set
     *  option contextSuperClass.
     *  to set it.
     *
     *  @since 4.5.3
     */
    get altNumber() { return ATN_1.ATN.INVALID_ALT_NUMBER; }
    /** Set the outer alternative number for this context node. Default
     *  implementation does nothing to avoid backing field overhead for
     *  trees that don't need it.  Create
     *  a subclass of ParserRuleContext with backing field and set
     *  option contextSuperClass.
     *
     *  @since 4.5.3
     */
    set altNumber(altNumber) {
        // intentionally ignored by the base implementation
    }
    getChild(i) {
        throw new RangeError("i must be greater than or equal to 0 and less than childCount");
    }
    get childCount() {
        return 0;
    }
    accept(visitor) {
        return visitor.visitChildren(this);
    }
    toStringTree(recog) {
        return Trees_1.Trees.toStringTree(this, recog);
    }
    toString(arg1, stop) {
        const ruleNames = (arg1 instanceof Recognizer_1.Recognizer) ? arg1.ruleNames : arg1;
        stop = stop || ParserRuleContext_1.ParserRuleContext.emptyContext();
        let buf = "";
        let p = this;
        buf += ("[");
        while (p && p !== stop) {
            if (!ruleNames) {
                if (!p.isEmpty) {
                    buf += (p.invokingState);
                }
            }
            else {
                let ruleIndex = p.ruleIndex;
                let ruleName = (ruleIndex >= 0 && ruleIndex < ruleNames.length)
                    ? ruleNames[ruleIndex] : ruleIndex.toString();
                buf += (ruleName);
            }
            if (p._parent && (ruleNames || !p._parent.isEmpty)) {
                buf += (" ");
            }
            p = p._parent;
        }
        buf += ("]");
        return buf.toString();
    }
}
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "sourceInterval", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "ruleContext", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "setParent", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "payload", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "text", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "getChild", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "accept", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "toStringTree", null);
exports.RuleContext = RuleContext;

},{"./Decorators":13,"./ParserRuleContext":28,"./Recognizer":32,"./atn/ATN":40,"./misc/Interval":119,"./tree/RuleNode":131,"./tree/Trees":133}],34:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00
const ATN_1 = require("./atn/ATN");
const Decorators_1 = require("./Decorators");
const ParserRuleContext_1 = require("./ParserRuleContext");
/** A handy class for use with
 *
 *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}
 *
 *  that provides a backing field / impl for the outer alternative number
 *  matched for an internal parse tree node.
 *
 *  I'm only putting into Java runtime as I'm certain I'm the only one that
 *  will really every use this.
 */
class RuleContextWithAltNum extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingStateNumber) {
        if (invokingStateNumber !== undefined) {
            super(parent, invokingStateNumber);
        }
        else {
            super();
        }
        this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;
    }
    get altNumber() {
        return this._altNumber;
    }
    // @Override
    set altNumber(altNum) {
        this._altNumber = altNum;
    }
}
__decorate([
    Decorators_1.Override
], RuleContextWithAltNum.prototype, "altNumber", null);
exports.RuleContextWithAltNum = RuleContextWithAltNum;

},{"./Decorators":13,"./ParserRuleContext":28,"./atn/ATN":40}],35:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Declares a dependency upon a grammar rule, along with a set of zero or more dependent rules.
 *
 * Version numbers within a grammar should be assigned on a monotonically increasing basis to allow for accurate
 * tracking of dependent rules.
 *
 * @author Sam Harwell
 */
function RuleDependency(dependency) {
    return (target, propertyKey, propertyDescriptor) => {
        // intentionally empty
    };
}
exports.RuleDependency = RuleDependency;

},{}],36:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @author Sam Harwell
 */
function RuleVersion(version) {
    return (target, propertyKey, propertyDescriptor) => {
        // intentionally empty
    };
}
exports.RuleVersion = RuleVersion;

},{}],37:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const IntStream_1 = require("./IntStream");
var Token;
(function (Token) {
    Token.INVALID_TYPE = 0;
    /** During lookahead operations, this "token" signifies we hit rule end ATN state
     *  and did not follow it despite needing to.
     */
    Token.EPSILON = -2;
    Token.MIN_USER_TOKEN_TYPE = 1;
    Token.EOF = IntStream_1.IntStream.EOF;
    /** All tokens go to the parser (unless skip() is called in that rule)
     *  on a particular "channel".  The parser tunes to a particular channel
     *  so that whitespace etc... can go to the parser on a "hidden" channel.
     */
    Token.DEFAULT_CHANNEL = 0;
    /** Anything on different channel than DEFAULT_CHANNEL is not parsed
     *  by parser.
     */
    Token.HIDDEN_CHANNEL = 1;
    /**
     * This is the minimum constant value which can be assigned to a
     * user-defined token channel.
     *
     * The non-negative numbers less than {@link #MIN_USER_CHANNEL_VALUE} are
     * assigned to the predefined channels {@link #DEFAULT_CHANNEL} and
     * {@link #HIDDEN_CHANNEL}.
     *
     * @see `Token.channel`
     */
    Token.MIN_USER_CHANNEL_VALUE = 2;
})(Token = exports.Token || (exports.Token = {}));

},{"./IntStream":19}],38:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:58.1768850-07:00
const Interval_1 = require("./misc/Interval");
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
/**
 * Useful for rewriting out a buffered input token stream after doing some
 * augmentation or other manipulations on it.
 *
 * You can insert stuff, replace, and delete chunks. Note that the operations
 * are done lazily--only if you convert the buffer to a {@link String} with
 * {@link TokenStream#getText()}. This is very efficient because you are not
 * moving data around all the time. As the buffer of tokens is converted to
 * strings, the {@link #getText()} method(s) scan the input token stream and
 * check to see if there is an operation at the current index. If so, the
 * operation is done and then normal {@link String} rendering continues on the
 * buffer. This is like having multiple Turing machine instruction streams
 * (programs) operating on a single input tape. :)
 *
 * This rewriter makes no modifications to the token stream. It does not ask the
 * stream to fill itself up nor does it advance the input cursor. The token
 * stream `TokenStream.index` will return the same value before and
 * after any {@link #getText()} call.
 *
 * The rewriter only works on tokens that you have in the buffer and ignores the
 * current input cursor. If you are buffering tokens on-demand, calling
 * {@link #getText()} halfway through the input will only do rewrites for those
 * tokens in the first half of the file.
 *
 * Since the operations are done lazily at {@link #getText}-time, operations do
 * not screw up the token index values. That is, an insert operation at token
 * index `i` does not change the index values for tokens
 * `i`+1..n-1.
 *
 * Because operations never actually alter the buffer, you may always get the
 * original token stream back without undoing anything. Since the instructions
 * are queued up, you can easily simulate transactions and roll back any changes
 * if there is an error just by removing instructions. For example,
 *
 * ```
 * CharStream input = new ANTLRFileStream("input");
 * TLexer lex = new TLexer(input);
 * CommonTokenStream tokens = new CommonTokenStream(lex);
 * T parser = new T(tokens);
 * TokenStreamRewriter rewriter = new TokenStreamRewriter(tokens);
 * parser.startRule();
 * ```
 *
 * Then in the rules, you can execute (assuming rewriter is visible):
 *
 * ```
 * Token t,u;
 * ...
 * rewriter.insertAfter(t, "text to put after t");}
 * rewriter.insertAfter(u, "text after u");}
 * System.out.println(rewriter.getText());
 * ```
 *
 * You can also have multiple "instruction streams" and get multiple rewrites
 * from a single pass over the input. Just name the instruction streams and use
 * that name again when printing the buffer. This could be useful for generating
 * a C file and also its header file--all from the same buffer:
 *
 * ```
 * rewriter.insertAfter("pass1", t, "text to put after t");}
 * rewriter.insertAfter("pass2", u, "text after u");}
 * System.out.println(rewriter.getText("pass1"));
 * System.out.println(rewriter.getText("pass2"));
 * ```
 *
 * If you don't use named rewrite streams, a "default" stream is used as the
 * first example shows.
 */
class TokenStreamRewriter {
    constructor(tokens) {
        this.tokens = tokens;
        this.programs = new Map();
        this.programs.set(TokenStreamRewriter.DEFAULT_PROGRAM_NAME, []);
        this.lastRewriteTokenIndexes = new Map();
    }
    getTokenStream() {
        return this.tokens;
    }
    rollback(instructionIndex, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let is = this.programs.get(programName);
        if (is != null) {
            this.programs.set(programName, is.slice(TokenStreamRewriter.MIN_TOKEN_INDEX, instructionIndex));
        }
    }
    deleteProgram(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        this.rollback(TokenStreamRewriter.MIN_TOKEN_INDEX, programName);
    }
    insertAfter(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let index;
        if (typeof tokenOrIndex === "number") {
            index = tokenOrIndex;
        }
        else {
            index = tokenOrIndex.tokenIndex;
        }
        // to insert after, just insert before next index (even if past end)
        let op = new InsertAfterOp(this.tokens, index, text);
        let rewrites = this.getProgram(programName);
        op.instructionIndex = rewrites.length;
        rewrites.push(op);
    }
    insertBefore(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let index;
        if (typeof tokenOrIndex === "number") {
            index = tokenOrIndex;
        }
        else {
            index = tokenOrIndex.tokenIndex;
        }
        let op = new InsertBeforeOp(this.tokens, index, text);
        let rewrites = this.getProgram(programName);
        op.instructionIndex = rewrites.length;
        rewrites.push(op);
    }
    replaceSingle(index, text) {
        if (typeof index === "number") {
            this.replace(index, index, text);
        }
        else {
            this.replace(index, index, text);
        }
    }
    replace(from, to, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        if (typeof from !== "number") {
            from = from.tokenIndex;
        }
        if (typeof to !== "number") {
            to = to.tokenIndex;
        }
        if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {
            throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);
        }
        let op = new ReplaceOp(this.tokens, from, to, text);
        let rewrites = this.getProgram(programName);
        op.instructionIndex = rewrites.length;
        rewrites.push(op);
    }
    delete(from, to, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        if (to === undefined) {
            to = from;
        }
        if (typeof from === "number") {
            this.replace(from, to, "", programName);
        }
        else {
            this.replace(from, to, "", programName);
        }
    }
    getLastRewriteTokenIndex(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let I = this.lastRewriteTokenIndexes.get(programName);
        if (I == null) {
            return -1;
        }
        return I;
    }
    setLastRewriteTokenIndex(programName, i) {
        this.lastRewriteTokenIndexes.set(programName, i);
    }
    getProgram(name) {
        let is = this.programs.get(name);
        if (is == null) {
            is = this.initializeProgram(name);
        }
        return is;
    }
    initializeProgram(name) {
        let is = [];
        this.programs.set(name, is);
        return is;
    }
    getText(intervalOrProgram, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let interval;
        if (intervalOrProgram instanceof Interval_1.Interval) {
            interval = intervalOrProgram;
        }
        else {
            interval = Interval_1.Interval.of(0, this.tokens.size - 1);
        }
        if (typeof intervalOrProgram === "string") {
            programName = intervalOrProgram;
        }
        let rewrites = this.programs.get(programName);
        let start = interval.a;
        let stop = interval.b;
        // ensure start/end are in range
        if (stop > this.tokens.size - 1) {
            stop = this.tokens.size - 1;
        }
        if (start < 0) {
            start = 0;
        }
        if (rewrites == null || rewrites.length === 0) {
            return this.tokens.getText(interval); // no instructions to execute
        }
        let buf = [];
        // First, optimize instruction stream
        let indexToOp = this.reduceToSingleOperationPerIndex(rewrites);
        // Walk buffer, executing instructions and emitting tokens
        let i = start;
        while (i <= stop && i < this.tokens.size) {
            let op = indexToOp.get(i);
            indexToOp.delete(i); // remove so any left have index size-1
            let t = this.tokens.get(i);
            if (op == null) {
                // no operation at that index, just dump token
                if (t.type !== Token_1.Token.EOF) {
                    buf.push(String(t.text));
                }
                i++; // move to next token
            }
            else {
                i = op.execute(buf); // execute operation and skip
            }
        }
        // include stuff after end if it's last index in buffer
        // So, if they did an insertAfter(lastValidIndex, "foo"), include
        // foo if end==lastValidIndex.
        if (stop === this.tokens.size - 1) {
            // Scan any remaining operations after last token
            // should be included (they will be inserts).
            for (let op of indexToOp.values()) {
                if (op.index >= this.tokens.size - 1) {
                    buf.push(op.text.toString());
                }
            }
        }
        return buf.join("");
    }
    /** We need to combine operations and report invalid operations (like
     *  overlapping replaces that are not completed nested). Inserts to
     *  same index need to be combined etc...  Here are the cases:
     *
     *  I.i.u I.j.v								leave alone, nonoverlapping
     *  I.i.u I.i.v								combine: Iivu
     *
     *  R.i-j.u R.x-y.v	| i-j in x-y			delete first R
     *  R.i-j.u R.i-j.v							delete first R
     *  R.i-j.u R.x-y.v	| x-y in i-j			ERROR
     *  R.i-j.u R.x-y.v	| boundaries overlap	ERROR
     *
     *  Delete special case of replace (text==undefined):
     *  D.i-j.u D.x-y.v	| boundaries overlap	combine to max(min)..max(right)
     *
     *  I.i.u R.x-y.v | i in (x+1)-y			delete I (since insert before
     * 											we're not deleting i)
     *  I.i.u R.x-y.v | i not in (x+1)-y		leave alone, nonoverlapping
     *  R.x-y.v I.i.u | i in x-y				ERROR
     *  R.x-y.v I.x.u 							R.x-y.uv (combine, delete I)
     *  R.x-y.v I.i.u | i not in x-y			leave alone, nonoverlapping
     *
     *  I.i.u = insert u before op @ index i
     *  R.x-y.u = replace x-y indexed tokens with u
     *
     *  First we need to examine replaces. For any replace op:
     *
     * 		1. wipe out any insertions before op within that range.
     * 		2. Drop any replace op before that is contained completely within
     * 	 that range.
     * 		3. Throw exception upon boundary overlap with any previous replace.
     *
     *  Then we can deal with inserts:
     *
     * 		1. for any inserts to same index, combine even if not adjacent.
     * 		2. for any prior replace with same left boundary, combine this
     * 	 insert with replace and delete this replace.
     * 		3. throw exception if index in same range as previous replace
     *
     *  Don't actually delete; make op undefined in list. Easier to walk list.
     *  Later we can throw as we add to index &rarr; op map.
     *
     *  Note that I.2 R.2-2 will wipe out I.2 even though, technically, the
     *  inserted stuff would be before the replace range. But, if you
     *  add tokens in front of a method body '{' and then delete the method
     *  body, I think the stuff before the '{' you added should disappear too.
     *
     *  Return a map from token index to operation.
     */
    reduceToSingleOperationPerIndex(rewrites) {
        // console.log(`rewrites=[${Utils.join(rewrites, ", ")}]`);
        // WALK REPLACES
        for (let i = 0; i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                continue;
            }
            if (!(op instanceof ReplaceOp)) {
                continue;
            }
            let rop = op;
            // Wipe prior inserts within range
            let inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
            for (let iop of inserts) {
                if (iop.index === rop.index) {
                    // E.g., insert before 2, delete 2..2; update replace
                    // text to include insert before, kill insert
                    rewrites[iop.instructionIndex] = undefined;
                    rop.text = iop.text.toString() + (rop.text != null ? rop.text.toString() : "");
                }
                else if (iop.index > rop.index && iop.index <= rop.lastIndex) {
                    // delete insert as it's a no-op.
                    rewrites[iop.instructionIndex] = undefined;
                }
            }
            // Drop any prior replaces contained within
            let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
            for (let prevRop of prevReplaces) {
                if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {
                    // delete replace as it's a no-op.
                    rewrites[prevRop.instructionIndex] = undefined;
                    continue;
                }
                // throw exception unless disjoint or identical
                let disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;
                // Delete special case of replace (text==null):
                // D.i-j.u D.x-y.v	| boundaries overlap	combine to max(min)..max(right)
                if (prevRop.text == null && rop.text == null && !disjoint) {
                    // console.log(`overlapping deletes: ${prevRop}, ${rop}`);
                    rewrites[prevRop.instructionIndex] = undefined; // kill first delete
                    rop.index = Math.min(prevRop.index, rop.index);
                    rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);
                    // console.log(`new rop ${rop}`);
                }
                else if (!disjoint) {
                    throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);
                }
            }
        }
        // WALK INSERTS
        for (let i = 0; i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                continue;
            }
            if (!(op instanceof InsertBeforeOp)) {
                continue;
            }
            let iop = op;
            // combine current insert with prior if any at same index
            let prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
            for (let prevIop of prevInserts) {
                if (prevIop.index === iop.index) {
                    if (prevIop instanceof InsertAfterOp) {
                        iop.text = this.catOpText(prevIop.text, iop.text);
                        rewrites[prevIop.instructionIndex] = undefined;
                    }
                    else if (prevIop instanceof InsertBeforeOp) { // combine objects
                        // convert to strings...we're in process of toString'ing
                        // whole token buffer so no lazy eval issue with any templates
                        iop.text = this.catOpText(iop.text, prevIop.text);
                        // delete redundant prior insert
                        rewrites[prevIop.instructionIndex] = undefined;
                    }
                }
            }
            // look for replaces where iop.index is in range; error
            let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
            for (let rop of prevReplaces) {
                if (iop.index === rop.index) {
                    rop.text = this.catOpText(iop.text, rop.text);
                    rewrites[i] = undefined; // delete current insert
                    continue;
                }
                if (iop.index >= rop.index && iop.index <= rop.lastIndex) {
                    throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);
                }
            }
        }
        // console.log(`rewrites after=[${Utils.join(rewrites, ", ")}]`);
        let m = new Map();
        for (let op of rewrites) {
            if (op == null) {
                // ignore deleted ops
                continue;
            }
            if (m.get(op.index) != null) {
                throw new Error("should only be one op per index");
            }
            m.set(op.index, op);
        }
        // console.log(`index to op: ${m}`);
        return m;
    }
    catOpText(a, b) {
        let x = "";
        let y = "";
        if (a != null) {
            x = a.toString();
        }
        if (b != null) {
            y = b.toString();
        }
        return x + y;
    }
    /** Get all operations before an index of a particular kind */
    getKindOfOps(rewrites, kind, before) {
        let ops = [];
        for (let i = 0; i < before && i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                // ignore deleted
                continue;
            }
            if (op instanceof kind) {
                ops.push(op);
            }
        }
        return ops;
    }
}
TokenStreamRewriter.DEFAULT_PROGRAM_NAME = "default";
TokenStreamRewriter.PROGRAM_INIT_SIZE = 100;
TokenStreamRewriter.MIN_TOKEN_INDEX = 0;
exports.TokenStreamRewriter = TokenStreamRewriter;
// Define the rewrite operation hierarchy
class RewriteOperation {
    constructor(tokens, index, text) {
        this.tokens = tokens;
        this.index = index;
        this.text = text === undefined ? "" : text;
    }
    /** Execute the rewrite operation by possibly adding to the buffer.
     *  Return the index of the next token to operate on.
     */
    execute(buf) {
        return this.index;
    }
    toString() {
        let opName = this.constructor.name;
        let $index = opName.indexOf("$");
        opName = opName.substring($index + 1, opName.length);
        return "<" + opName + "@" + this.tokens.get(this.index) +
            ":\"" + this.text + "\">";
    }
}
__decorate([
    Decorators_1.Override
], RewriteOperation.prototype, "toString", null);
exports.RewriteOperation = RewriteOperation;
class InsertBeforeOp extends RewriteOperation {
    constructor(tokens, index, text) {
        super(tokens, index, text);
    }
    execute(buf) {
        buf.push(this.text.toString());
        if (this.tokens.get(this.index).type !== Token_1.Token.EOF) {
            buf.push(String(this.tokens.get(this.index).text));
        }
        return this.index + 1;
    }
}
__decorate([
    Decorators_1.Override
], InsertBeforeOp.prototype, "execute", null);
/** Distinguish between insert after/before to do the "insert afters"
 *  first and then the "insert befores" at same index. Implementation
 *  of "insert after" is "insert before index+1".
 */
class InsertAfterOp extends InsertBeforeOp {
    constructor(tokens, index, text) {
        super(tokens, index + 1, text); // insert after is insert before index+1
    }
}
/** I'm going to try replacing range from x..y with (y-x)+1 ReplaceOp
 *  instructions.
 */
class ReplaceOp extends RewriteOperation {
    constructor(tokens, from, to, text) {
        super(tokens, from, text);
        this.lastIndex = to;
    }
    execute(buf) {
        if (this.text != null) {
            buf.push(this.text.toString());
        }
        return this.lastIndex + 1;
    }
    toString() {
        if (this.text == null) {
            return "<DeleteOp@" + this.tokens.get(this.index) +
                ".." + this.tokens.get(this.lastIndex) + ">";
        }
        return "<ReplaceOp@" + this.tokens.get(this.index) +
            ".." + this.tokens.get(this.lastIndex) + ":\"" + this.text + "\">";
    }
}
__decorate([
    Decorators_1.Override
], ReplaceOp.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], ReplaceOp.prototype, "toString", null);

},{"./Decorators":13,"./Token":37,"./misc/Interval":119}],39:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:59.5829654-07:00
const Decorators_1 = require("./Decorators");
const Token_1 = require("./Token");
/**
 * This class provides a default implementation of the {@link Vocabulary}
 * interface.
 *
 * @author Sam Harwell
 */
class VocabularyImpl {
    /**
     * Constructs a new instance of {@link VocabularyImpl} from the specified
     * literal, symbolic, and display token names.
     *
     * @param literalNames The literal names assigned to tokens, or an empty array
     * if no literal names are assigned.
     * @param symbolicNames The symbolic names assigned to tokens, or
     * an empty array if no symbolic names are assigned.
     * @param displayNames The display names assigned to tokens, or an empty array
     * to use the values in `literalNames` and `symbolicNames` as
     * the source of display names, as described in
     * {@link #getDisplayName(int)}.
     *
     * @see #getLiteralName(int)
     * @see #getSymbolicName(int)
     * @see #getDisplayName(int)
     */
    constructor(literalNames, symbolicNames, displayNames) {
        this.literalNames = literalNames;
        this.symbolicNames = symbolicNames;
        this.displayNames = displayNames;
        // See note here on -1 part: https://github.com/antlr/antlr4/pull/1146
        this._maxTokenType =
            Math.max(this.displayNames.length, Math.max(this.literalNames.length, this.symbolicNames.length)) - 1;
    }
    get maxTokenType() {
        return this._maxTokenType;
    }
    getLiteralName(tokenType) {
        if (tokenType >= 0 && tokenType < this.literalNames.length) {
            return this.literalNames[tokenType];
        }
        return undefined;
    }
    getSymbolicName(tokenType) {
        if (tokenType >= 0 && tokenType < this.symbolicNames.length) {
            return this.symbolicNames[tokenType];
        }
        if (tokenType === Token_1.Token.EOF) {
            return "EOF";
        }
        return undefined;
    }
    getDisplayName(tokenType) {
        if (tokenType >= 0 && tokenType < this.displayNames.length) {
            let displayName = this.displayNames[tokenType];
            if (displayName) {
                return displayName;
            }
        }
        let literalName = this.getLiteralName(tokenType);
        if (literalName) {
            return literalName;
        }
        let symbolicName = this.getSymbolicName(tokenType);
        if (symbolicName) {
            return symbolicName;
        }
        return String(tokenType);
    }
}
/**
 * Gets an empty {@link Vocabulary} instance.
 *
 * No literal or symbol names are assigned to token types, so
 * {@link #getDisplayName(int)} returns the numeric value for all tokens
 * except {@link Token#EOF}.
 */
VocabularyImpl.EMPTY_VOCABULARY = new VocabularyImpl([], [], []);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "literalNames", void 0);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "symbolicNames", void 0);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "displayNames", void 0);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "maxTokenType", null);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "getLiteralName", null);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "getSymbolicName", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], VocabularyImpl.prototype, "getDisplayName", null);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl, "EMPTY_VOCABULARY", void 0);
exports.VocabularyImpl = VocabularyImpl;

},{"./Decorators":13,"./Token":37}],40:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:25.1063510-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const DFA_1 = require("../dfa/DFA");
const IntervalSet_1 = require("../misc/IntervalSet");
const InvalidState_1 = require("./InvalidState");
const LL1Analyzer_1 = require("./LL1Analyzer");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const PredictionContext_1 = require("./PredictionContext");
const Token_1 = require("../Token");
const assert = require("assert");
/** */
let ATN = class ATN {
    /** Used for runtime deserialization of ATNs from strings */
    constructor(grammarType, maxTokenType) {
        this.states = [];
        /** Each subrule/rule is a decision point and we must track them so we
         *  can go back later and build DFA predictors for them.  This includes
         *  all the rules, subrules, optional blocks, ()+, ()* etc...
         */
        this.decisionToState = [];
        this.modeNameToStartState = new Map();
        this.modeToStartState = [];
        this.contextCache = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.decisionToDFA = [];
        this.modeToDFA = [];
        this.LL1Table = new Map();
        this.grammarType = grammarType;
        this.maxTokenType = maxTokenType;
    }
    clearDFA() {
        this.decisionToDFA = new Array(this.decisionToState.length);
        for (let i = 0; i < this.decisionToDFA.length; i++) {
            this.decisionToDFA[i] = new DFA_1.DFA(this.decisionToState[i], i);
        }
        this.modeToDFA = new Array(this.modeToStartState.length);
        for (let i = 0; i < this.modeToDFA.length; i++) {
            this.modeToDFA[i] = new DFA_1.DFA(this.modeToStartState[i]);
        }
        this.contextCache.clear();
        this.LL1Table.clear();
    }
    get contextCacheSize() {
        return this.contextCache.size;
    }
    getCachedContext(context) {
        return PredictionContext_1.PredictionContext.getCachedContext(context, this.contextCache, new PredictionContext_1.PredictionContext.IdentityHashMap());
    }
    getDecisionToDFA() {
        assert(this.decisionToDFA != null && this.decisionToDFA.length === this.decisionToState.length);
        return this.decisionToDFA;
    }
    nextTokens(s, ctx) {
        if (ctx) {
            let anal = new LL1Analyzer_1.LL1Analyzer(this);
            let next = anal.LOOK(s, ctx);
            return next;
        }
        else {
            if (s.nextTokenWithinRule) {
                return s.nextTokenWithinRule;
            }
            s.nextTokenWithinRule = this.nextTokens(s, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
            s.nextTokenWithinRule.setReadonly(true);
            return s.nextTokenWithinRule;
        }
    }
    addState(state) {
        state.atn = this;
        state.stateNumber = this.states.length;
        this.states.push(state);
    }
    removeState(state) {
        // just replace the state, don't shift states in list
        let invalidState = new InvalidState_1.InvalidState();
        invalidState.atn = this;
        invalidState.stateNumber = state.stateNumber;
        this.states[state.stateNumber] = invalidState;
    }
    defineMode(name, s) {
        this.modeNameToStartState.set(name, s);
        this.modeToStartState.push(s);
        this.modeToDFA.push(new DFA_1.DFA(s));
        this.defineDecisionState(s);
    }
    defineDecisionState(s) {
        this.decisionToState.push(s);
        s.decision = this.decisionToState.length - 1;
        this.decisionToDFA.push(new DFA_1.DFA(s, s.decision));
        return s.decision;
    }
    getDecisionState(decision) {
        if (this.decisionToState.length > 0) {
            return this.decisionToState[decision];
        }
        return undefined;
    }
    get numberOfDecisions() {
        return this.decisionToState.length;
    }
    /**
     * Computes the set of input symbols which could follow ATN state number
     * `stateNumber` in the specified full `context`. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token#EOF} is added to the returned set.
     *
     * If `context` is `undefined`, it is treated as
     * {@link ParserRuleContext#EMPTY}.
     *
     * Note that this does NOT give you the set of all tokens that could
     * appear at a given token position in the input phrase.  In other words, it
     * does not answer:
     *
     * > Given a specific partial input phrase, return the set of all
     * > tokens that can follow the last token in the input phrase.
     *
     * The big difference is that with just the input, the parser could land
     * right in the middle of a lookahead decision. Getting all
     * *possible* tokens given a partial input stream is a separate
     * computation. See https://github.com/antlr/antlr4/issues/1428
     *
     * For this function, we are specifying an ATN state and call stack to
     * compute what token(s) can come next and specifically: outside of a
     * lookahead decision. That is what you want for error reporting and
     * recovery upon parse error.
     *
     * @param stateNumber the ATN state number
     * @param context the full parse context
     * @returns The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     * @ if the ATN does not contain a state with
     * number `stateNumber`
     */
    getExpectedTokens(stateNumber, context) {
        if (stateNumber < 0 || stateNumber >= this.states.length) {
            throw new RangeError("Invalid state number.");
        }
        let ctx = context;
        let s = this.states[stateNumber];
        let following = this.nextTokens(s);
        if (!following.contains(Token_1.Token.EPSILON)) {
            return following;
        }
        let expected = new IntervalSet_1.IntervalSet();
        expected.addAll(following);
        expected.remove(Token_1.Token.EPSILON);
        while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
            let invokingState = this.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            following = this.nextTokens(rt.followState);
            expected.addAll(following);
            expected.remove(Token_1.Token.EPSILON);
            ctx = ctx._parent;
        }
        if (following.contains(Token_1.Token.EPSILON)) {
            expected.add(Token_1.Token.EOF);
        }
        return expected;
    }
};
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "states", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "decisionToState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeNameToStartState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeToStartState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "decisionToDFA", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeToDFA", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "nextTokens", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATN.prototype, "removeState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ATN.prototype, "defineMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATN.prototype, "defineDecisionState", null);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "getExpectedTokens", null);
ATN = __decorate([
    __param(0, Decorators_1.NotNull)
], ATN);
exports.ATN = ATN;
(function (ATN) {
    ATN.INVALID_ALT_NUMBER = 0;
})(ATN = exports.ATN || (exports.ATN = {}));
exports.ATN = ATN;

},{"../Decorators":13,"../Token":37,"../dfa/DFA":105,"../misc/Array2DHashMap":110,"../misc/IntervalSet":120,"../misc/ObjectEqualityComparator":123,"./InvalidState":63,"./LL1Analyzer":64,"./PredictionContext":87,"assert":153}],41:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:25.2796692-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const DecisionState_1 = require("./DecisionState");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const PredictionContext_1 = require("./PredictionContext");
const SemanticContext_1 = require("./SemanticContext");
const assert = require("assert");
/**
 * This field stores the bit mask for implementing the
 * {@link #isPrecedenceFilterSuppressed} property as a bit within the
 * existing {@link #altAndOuterContextDepth} field.
 */
const SUPPRESS_PRECEDENCE_FILTER = 0x80000000;
/**
 * Represents a location with context in an ATN. The location is identified by the following values:
 *
 * * The current ATN state
 * * The predicted alternative
 * * The semantic context which must be true for this configuration to be enabled
 * * The syntactic context, which is represented as a graph-structured stack whose path(s) lead to the root of the rule
 *   invocations leading to this state
 *
 * In addition to these values, `ATNConfig` stores several properties about paths taken to get to the location which
 * were added over time to help with performance, correctness, and/or debugging.
 *
 * * `reachesIntoOuterContext`:: Used to ensure semantic predicates are not evaluated in the wrong context.
 * * `hasPassedThroughNonGreedyDecision`: Used for enabling first-match-wins instead of longest-match-wins after
 *   crossing a non-greedy decision.
 * * `lexerActionExecutor`: Used for tracking the lexer action(s) to execute should this instance be selected during
 *   lexing.
 * * `isPrecedenceFilterSuppressed`: A state variable for one of the dynamic disambiguation strategies employed by
 *   `ParserATNSimulator.applyPrecedenceFilter`.
 *
 * Due to the use of a graph-structured stack, a single `ATNConfig` is capable of representing many individual ATN
 * configurations which reached the same location in an ATN by following different paths.
 *
 * PERF: To conserve memory, `ATNConfig` is split into several different concrete types. `ATNConfig` itself stores the
 * minimum amount of information typically used to define an `ATNConfig` instance. Various derived types provide
 * additional storage space for cases where a non-default value is used for some of the object properties. The
 * `ATNConfig.create` and `ATNConfig.transform` methods automatically select the smallest concrete type capable of
 * representing the unique information for any given `ATNConfig`.
 */
let ATNConfig = class ATNConfig {
    constructor(state, altOrConfig, context) {
        if (typeof altOrConfig === "number") {
            assert((altOrConfig & 0xFFFFFF) === altOrConfig);
            this._state = state;
            this.altAndOuterContextDepth = altOrConfig;
            this._context = context;
        }
        else {
            this._state = state;
            this.altAndOuterContextDepth = altOrConfig.altAndOuterContextDepth;
            this._context = context;
        }
    }
    static create(state, alt, context, semanticContext = SemanticContext_1.SemanticContext.NONE, lexerActionExecutor) {
        if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
            if (lexerActionExecutor != null) {
                return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, alt, context, false);
            }
            else {
                return new SemanticContextATNConfig(semanticContext, state, alt, context);
            }
        }
        else if (lexerActionExecutor != null) {
            return new ActionATNConfig(lexerActionExecutor, state, alt, context, false);
        }
        else {
            return new ATNConfig(state, alt, context);
        }
    }
    /** Gets the ATN state associated with this configuration */
    get state() {
        return this._state;
    }
    /** What alt (or lexer rule) is predicted by this configuration */
    get alt() {
        return this.altAndOuterContextDepth & 0x00FFFFFF;
    }
    get context() {
        return this._context;
    }
    set context(context) {
        this._context = context;
    }
    get reachesIntoOuterContext() {
        return this.outerContextDepth !== 0;
    }
    /**
     * We cannot execute predicates dependent upon local context unless
     * we know for sure we are in the correct context. Because there is
     * no way to do this efficiently, we simply cannot evaluate
     * dependent predicates unless we are in the rule that initially
     * invokes the ATN simulator.
     *
     * closure() tracks the depth of how far we dip into the outer context:
     * depth &gt; 0.  Note that it may not be totally accurate depth since I
     * don't ever decrement. TODO: make it a boolean then
     */
    get outerContextDepth() {
        return (this.altAndOuterContextDepth >>> 24) & 0x7F;
    }
    set outerContextDepth(outerContextDepth) {
        assert(outerContextDepth >= 0);
        // saturate at 0x7F - everything but zero/positive is only used for debug information anyway
        outerContextDepth = Math.min(outerContextDepth, 0x7F);
        this.altAndOuterContextDepth = ((outerContextDepth << 24) | (this.altAndOuterContextDepth & ~0x7F000000) >>> 0);
    }
    get lexerActionExecutor() {
        return undefined;
    }
    get semanticContext() {
        return SemanticContext_1.SemanticContext.NONE;
    }
    get hasPassedThroughNonGreedyDecision() {
        return false;
    }
    clone() {
        return this.transform(this.state, false);
    }
    transform(/*@NotNull*/ state, checkNonGreedy, arg2) {
        if (arg2 == null) {
            return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
        }
        else if (arg2 instanceof PredictionContext_1.PredictionContext) {
            return this.transformImpl(state, arg2, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
        }
        else if (arg2 instanceof SemanticContext_1.SemanticContext) {
            return this.transformImpl(state, this._context, arg2, checkNonGreedy, this.lexerActionExecutor);
        }
        else {
            return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, arg2);
        }
    }
    transformImpl(state, context, semanticContext, checkNonGreedy, lexerActionExecutor) {
        let passedThroughNonGreedy = checkNonGreedy && ATNConfig.checkNonGreedyDecision(this, state);
        if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
            if (lexerActionExecutor != null || passedThroughNonGreedy) {
                return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, this, context, passedThroughNonGreedy);
            }
            else {
                return new SemanticContextATNConfig(semanticContext, state, this, context);
            }
        }
        else if (lexerActionExecutor != null || passedThroughNonGreedy) {
            return new ActionATNConfig(lexerActionExecutor, state, this, context, passedThroughNonGreedy);
        }
        else {
            return new ATNConfig(state, this, context);
        }
    }
    static checkNonGreedyDecision(source, target) {
        return source.hasPassedThroughNonGreedyDecision
            || target instanceof DecisionState_1.DecisionState && target.nonGreedy;
    }
    appendContext(context, contextCache) {
        if (typeof context === "number") {
            let appendedContext = this.context.appendSingleContext(context, contextCache);
            let result = this.transform(this.state, false, appendedContext);
            return result;
        }
        else {
            let appendedContext = this.context.appendContext(context, contextCache);
            let result = this.transform(this.state, false, appendedContext);
            return result;
        }
    }
    /**
     * Determines if this `ATNConfig` fully contains another `ATNConfig`.
     *
     * An ATN configuration represents a position (including context) in an ATN during parsing. Since `ATNConfig` stores
     * the context as a graph, a single `ATNConfig` instance is capable of representing many ATN configurations which
     * are all in the same "location" but have different contexts. These `ATNConfig` instances are again merged when
     * they are added to an `ATNConfigSet`. This method supports `ATNConfigSet.contains` by evaluating whether a
     * particular `ATNConfig` contains all of the ATN configurations represented by another `ATNConfig`.
     *
     * An `ATNConfig` _a_ contains another `ATNConfig` _b_ if all of the following conditions are met:
     *
     * * The configurations are in the same state (`state`)
     * * The configurations predict the same alternative (`alt`)
     * * The semantic context of _a_ implies the semantic context of _b_ (this method performs a weaker equality check)
     * * Joining the prediction contexts of _a_ and _b_ results in the prediction context of _a_
     *
     * This method implements a conservative approximation of containment. As a result, when this method returns `true`
     * it is known that parsing from `subconfig` can only recognize a subset of the inputs which can be recognized
     * starting at the current `ATNConfig`. However, due to the imprecise evaluation of implication for the semantic
     * contexts, no assumptions can be made about the relationship between the configurations when this method returns
     * `false`.
     *
     * @param subconfig The sub configuration.
     * @returns `true` if this configuration contains `subconfig`; otherwise, `false`.
     */
    contains(subconfig) {
        if (this.state.stateNumber !== subconfig.state.stateNumber
            || this.alt !== subconfig.alt
            || !this.semanticContext.equals(subconfig.semanticContext)) {
            return false;
        }
        let leftWorkList = [];
        let rightWorkList = [];
        leftWorkList.push(this.context);
        rightWorkList.push(subconfig.context);
        while (true) {
            let left = leftWorkList.pop();
            let right = rightWorkList.pop();
            if (!left || !right) {
                break;
            }
            if (left === right) {
                return true;
            }
            if (left.size < right.size) {
                return false;
            }
            if (right.isEmpty) {
                return left.hasEmpty;
            }
            else {
                for (let i = 0; i < right.size; i++) {
                    let index = left.findReturnState(right.getReturnState(i));
                    if (index < 0) {
                        // assumes invokingStates has no duplicate entries
                        return false;
                    }
                    leftWorkList.push(left.getParent(index));
                    rightWorkList.push(right.getParent(i));
                }
            }
        }
        return false;
    }
    get isPrecedenceFilterSuppressed() {
        return (this.altAndOuterContextDepth & SUPPRESS_PRECEDENCE_FILTER) !== 0;
    }
    set isPrecedenceFilterSuppressed(value) {
        if (value) {
            this.altAndOuterContextDepth |= SUPPRESS_PRECEDENCE_FILTER;
        }
        else {
            this.altAndOuterContextDepth &= ~SUPPRESS_PRECEDENCE_FILTER;
        }
    }
    /** An ATN configuration is equal to another if both have
     *  the same state, they predict the same alternative, and
     *  syntactic/semantic contexts are the same.
     */
    equals(o) {
        if (this === o) {
            return true;
        }
        else if (!(o instanceof ATNConfig)) {
            return false;
        }
        return this.state.stateNumber === o.state.stateNumber
            && this.alt === o.alt
            && this.reachesIntoOuterContext === o.reachesIntoOuterContext
            && this.context.equals(o.context)
            && this.semanticContext.equals(o.semanticContext)
            && this.isPrecedenceFilterSuppressed === o.isPrecedenceFilterSuppressed
            && this.hasPassedThroughNonGreedyDecision === o.hasPassedThroughNonGreedyDecision
            && ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor, o.lexerActionExecutor);
    }
    hashCode() {
        let hashCode = MurmurHash_1.MurmurHash.initialize(7);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.state.stateNumber);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.alt);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.reachesIntoOuterContext ? 1 : 0);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.context);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.semanticContext);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.hasPassedThroughNonGreedyDecision ? 1 : 0);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.lexerActionExecutor);
        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 7);
        return hashCode;
    }
    /**
     * Returns a graphical representation of the current `ATNConfig` in Graphviz format. The graph can be stored to a
     * **.dot** file and then rendered to an image using Graphviz.
     *
     * @returns A Graphviz graph representing the current `ATNConfig`.
     *
     * @see http://www.graphviz.org/
     */
    toDotString() {
        let builder = "";
        builder += ("digraph G {\n");
        builder += ("rankdir=LR;\n");
        let visited = new Array2DHashMap_1.Array2DHashMap(PredictionContext_1.PredictionContext.IdentityEqualityComparator.INSTANCE);
        let workList = [];
        function getOrAddContext(context) {
            let newNumber = visited.size;
            let result = visited.putIfAbsent(context, newNumber);
            if (result != null) {
                // Already saw this context
                return result;
            }
            workList.push(context);
            return newNumber;
        }
        workList.push(this.context);
        visited.put(this.context, 0);
        while (true) {
            let current = workList.pop();
            if (!current) {
                break;
            }
            for (let i = 0; i < current.size; i++) {
                builder += ("  s") + (getOrAddContext(current));
                builder += ("->");
                builder += ("s") + (getOrAddContext(current.getParent(i)));
                builder += ("[label=\"") + (current.getReturnState(i)) + ("\"];\n");
            }
        }
        builder += ("}\n");
        return builder.toString();
    }
    toString(recog, showAlt, showContext) {
        // Must check showContext before showAlt to preserve original overload behavior
        if (showContext == null) {
            showContext = showAlt != null;
        }
        if (showAlt == null) {
            showAlt = true;
        }
        let buf = "";
        // if (this.state.ruleIndex >= 0) {
        // 	if (recog != null) {
        // 		buf += (recog.ruleNames[this.state.ruleIndex] + ":");
        // 	} else {
        // 		buf += (this.state.ruleIndex + ":");
        // 	}
        // }
        let contexts;
        if (showContext) {
            contexts = this.context.toStrings(recog, this.state.stateNumber);
        }
        else {
            contexts = ["?"];
        }
        let first = true;
        for (let contextDesc of contexts) {
            if (first) {
                first = false;
            }
            else {
                buf += (", ");
            }
            buf += ("(");
            buf += (this.state);
            if (showAlt) {
                buf += (",");
                buf += (this.alt);
            }
            if (this.context) {
                buf += (",");
                buf += (contextDesc);
            }
            if (this.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                buf += (",");
                buf += (this.semanticContext);
            }
            if (this.reachesIntoOuterContext) {
                buf += (",up=") + (this.outerContextDepth);
            }
            buf += (")");
        }
        return buf.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "_state", void 0);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "_context", void 0);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "state", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ATNConfig.prototype, "context", null);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "semanticContext", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "clone", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ATNConfig.prototype, "transformImpl", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "hashCode", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
], ATNConfig, "create", null);
ATNConfig = __decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ATNConfig);
exports.ATNConfig = ATNConfig;
/**
 * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
 * with a non-default semantic context.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let SemanticContextATNConfig = class SemanticContextATNConfig extends ATNConfig {
    constructor(semanticContext, state, altOrConfig, context) {
        if (typeof altOrConfig === "number") {
            super(state, altOrConfig, context);
        }
        else {
            super(state, altOrConfig, context);
        }
        this._semanticContext = semanticContext;
    }
    get semanticContext() {
        return this._semanticContext;
    }
};
__decorate([
    Decorators_1.NotNull
], SemanticContextATNConfig.prototype, "_semanticContext", void 0);
__decorate([
    Decorators_1.Override
], SemanticContextATNConfig.prototype, "semanticContext", null);
SemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], SemanticContextATNConfig);
/**
 * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
 * with a lexer action.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let ActionATNConfig = class ActionATNConfig extends ATNConfig {
    constructor(lexerActionExecutor, state, altOrConfig, context, passedThroughNonGreedyDecision) {
        if (typeof altOrConfig === "number") {
            super(state, altOrConfig, context);
        }
        else {
            super(state, altOrConfig, context);
            if (altOrConfig.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                throw new Error("Not supported");
            }
        }
        this._lexerActionExecutor = lexerActionExecutor;
        this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
        return this.passedThroughNonGreedyDecision;
    }
};
__decorate([
    Decorators_1.Override
], ActionATNConfig.prototype, "lexerActionExecutor", null);
__decorate([
    Decorators_1.Override
], ActionATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
ActionATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ActionATNConfig);
/**
 * This class was derived from `SemanticContextATNConfig` purely as a memory optimization. It allows for the creation of
 * an `ATNConfig` with both a lexer action and a non-default semantic context.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let ActionSemanticContextATNConfig = class ActionSemanticContextATNConfig extends SemanticContextATNConfig {
    constructor(lexerActionExecutor, semanticContext, state, altOrConfig, context, passedThroughNonGreedyDecision) {
        if (typeof altOrConfig === "number") {
            super(semanticContext, state, altOrConfig, context);
        }
        else {
            super(semanticContext, state, altOrConfig, context);
        }
        this._lexerActionExecutor = lexerActionExecutor;
        this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
        return this.passedThroughNonGreedyDecision;
    }
};
__decorate([
    Decorators_1.Override
], ActionSemanticContextATNConfig.prototype, "lexerActionExecutor", null);
__decorate([
    Decorators_1.Override
], ActionSemanticContextATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
ActionSemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ActionSemanticContextATNConfig);

},{"../Decorators":13,"../misc/Array2DHashMap":110,"../misc/MurmurHash":122,"../misc/ObjectEqualityComparator":123,"./DecisionState":60,"./PredictionContext":87,"./SemanticContext":95,"assert":153}],42:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:25.5488013-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
const ATN_1 = require("./ATN");
const ATNConfig_1 = require("./ATNConfig");
const BitSet_1 = require("../misc/BitSet");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const PredictionContext_1 = require("./PredictionContext");
const PredictionContextCache_1 = require("./PredictionContextCache");
const SemanticContext_1 = require("./SemanticContext");
const assert = require("assert");
const Utils = require("../misc/Utils");
class KeyTypeEqualityComparer {
    hashCode(key) {
        return key.state ^ key.alt;
    }
    equals(a, b) {
        return a.state === b.state && a.alt === b.alt;
    }
}
KeyTypeEqualityComparer.INSTANCE = new KeyTypeEqualityComparer();
function NewKeyedConfigMap(map) {
    if (map) {
        return new Array2DHashMap_1.Array2DHashMap(map);
    }
    else {
        return new Array2DHashMap_1.Array2DHashMap(KeyTypeEqualityComparer.INSTANCE);
    }
}
/**
 * Represents a set of ATN configurations (see `ATNConfig`). As configurations are added to the set, they are merged
 * with other `ATNConfig` instances already in the set when possible using the graph-structured stack.
 *
 * An instance of this class represents the complete set of positions (with context) in an ATN which would be associated
 * with a single DFA state. Its internal representation is more complex than traditional state used for NFA to DFA
 * conversion due to performance requirements (both improving speed and reducing memory overhead) as well as supporting
 * features such as semantic predicates and non-greedy operators in a form to support ANTLR's prediction algorithm.
 *
 * @author Sam Harwell
 */
class ATNConfigSet {
    constructor(set, readonly) {
        this._uniqueAlt = 0;
        // Used in parser and lexer. In lexer, it indicates we hit a pred
        // while computing a closure operation.  Don't make a DFA state from this.
        this._hasSemanticContext = false;
        this._dipsIntoOuterContext = false;
        /**
         * When `true`, this config set represents configurations where the entire
         * outer context has been consumed by the ATN interpreter. This prevents the
         * {@link ParserATNSimulator#closure} from pursuing the global FOLLOW when a
         * rule stop state is reached with an empty prediction context.
         *
         * Note: `outermostConfigSet` and {@link #dipsIntoOuterContext} should never
         * be true at the same time.
         */
        this.outermostConfigSet = false;
        this.cachedHashCode = -1;
        if (!set) {
            this.mergedConfigs = NewKeyedConfigMap();
            this.unmerged = [];
            this.configs = [];
            this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        else {
            if (readonly) {
                this.mergedConfigs = undefined;
                this.unmerged = undefined;
            }
            else if (!set.isReadOnly) {
                this.mergedConfigs = NewKeyedConfigMap(set.mergedConfigs);
                this.unmerged = set.unmerged.slice(0);
            }
            else {
                this.mergedConfigs = NewKeyedConfigMap();
                this.unmerged = [];
            }
            this.configs = set.configs.slice(0);
            this._dipsIntoOuterContext = set._dipsIntoOuterContext;
            this._hasSemanticContext = set._hasSemanticContext;
            this.outermostConfigSet = set.outermostConfigSet;
            if (readonly || !set.isReadOnly) {
                this._uniqueAlt = set._uniqueAlt;
                this._conflictInfo = set._conflictInfo;
            }
            // if (!readonly && set.isReadOnly) -> addAll is called from clone()
        }
    }
    /**
     * Get the set of all alternatives represented by configurations in this
     * set.
     */
    getRepresentedAlternatives() {
        if (this._conflictInfo != null) {
            return this._conflictInfo.conflictedAlts.clone();
        }
        let alts = new BitSet_1.BitSet();
        for (let config of this) {
            alts.set(config.alt);
        }
        return alts;
    }
    get isReadOnly() {
        return this.mergedConfigs == null;
    }
    get isOutermostConfigSet() {
        return this.outermostConfigSet;
    }
    set isOutermostConfigSet(outermostConfigSet) {
        if (this.outermostConfigSet && !outermostConfigSet) {
            throw new Error("IllegalStateException");
        }
        assert(!outermostConfigSet || !this._dipsIntoOuterContext);
        this.outermostConfigSet = outermostConfigSet;
    }
    getStates() {
        let states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        for (let c of this.configs) {
            states.add(c.state);
        }
        return states;
    }
    optimizeConfigs(interpreter) {
        if (this.configs.length === 0) {
            return;
        }
        for (let config of this.configs) {
            config.context = interpreter.atn.getCachedContext(config.context);
        }
    }
    clone(readonly) {
        let copy = new ATNConfigSet(this, readonly);
        if (!readonly && this.isReadOnly) {
            copy.addAll(this.configs);
        }
        return copy;
    }
    get size() {
        return this.configs.length;
    }
    get isEmpty() {
        return this.configs.length === 0;
    }
    contains(o) {
        if (!(o instanceof ATNConfig_1.ATNConfig)) {
            return false;
        }
        if (this.mergedConfigs && this.unmerged) {
            let config = o;
            let configKey = this.getKey(config);
            let mergedConfig = this.mergedConfigs.get(configKey);
            if (mergedConfig != null && this.canMerge(config, configKey, mergedConfig)) {
                return mergedConfig.contains(config);
            }
            for (let c of this.unmerged) {
                if (c.contains(o)) {
                    return true;
                }
            }
        }
        else {
            for (let c of this.configs) {
                if (c.contains(o)) {
                    return true;
                }
            }
        }
        return false;
    }
    *[Symbol.iterator]() {
        yield* this.configs;
    }
    toArray() {
        return this.configs;
    }
    add(e, contextCache) {
        this.ensureWritable();
        if (!this.mergedConfigs || !this.unmerged) {
            throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
        }
        assert(!this.outermostConfigSet || !e.reachesIntoOuterContext);
        if (contextCache == null) {
            contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
        }
        let addKey;
        let key = this.getKey(e);
        let mergedConfig = this.mergedConfigs.get(key);
        addKey = (mergedConfig == null);
        if (mergedConfig != null && this.canMerge(e, key, mergedConfig)) {
            mergedConfig.outerContextDepth = Math.max(mergedConfig.outerContextDepth, e.outerContextDepth);
            if (e.isPrecedenceFilterSuppressed) {
                mergedConfig.isPrecedenceFilterSuppressed = true;
            }
            let joined = PredictionContext_1.PredictionContext.join(mergedConfig.context, e.context, contextCache);
            this.updatePropertiesForMergedConfig(e);
            if (mergedConfig.context === joined) {
                return false;
            }
            mergedConfig.context = joined;
            return true;
        }
        for (let i = 0; i < this.unmerged.length; i++) {
            let unmergedConfig = this.unmerged[i];
            if (this.canMerge(e, key, unmergedConfig)) {
                unmergedConfig.outerContextDepth = Math.max(unmergedConfig.outerContextDepth, e.outerContextDepth);
                if (e.isPrecedenceFilterSuppressed) {
                    unmergedConfig.isPrecedenceFilterSuppressed = true;
                }
                let joined = PredictionContext_1.PredictionContext.join(unmergedConfig.context, e.context, contextCache);
                this.updatePropertiesForMergedConfig(e);
                if (unmergedConfig.context === joined) {
                    return false;
                }
                unmergedConfig.context = joined;
                if (addKey) {
                    this.mergedConfigs.put(key, unmergedConfig);
                    this.unmerged.splice(i, 1);
                }
                return true;
            }
        }
        this.configs.push(e);
        if (addKey) {
            this.mergedConfigs.put(key, e);
        }
        else {
            this.unmerged.push(e);
        }
        this.updatePropertiesForAddedConfig(e);
        return true;
    }
    updatePropertiesForMergedConfig(config) {
        // merged configs can't change the alt or semantic context
        this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
        assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    updatePropertiesForAddedConfig(config) {
        if (this.configs.length === 1) {
            this._uniqueAlt = config.alt;
        }
        else if (this._uniqueAlt !== config.alt) {
            this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        this._hasSemanticContext = this._hasSemanticContext || !SemanticContext_1.SemanticContext.NONE.equals(config.semanticContext);
        this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
        assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    canMerge(left, leftKey, right) {
        if (left.state.stateNumber !== right.state.stateNumber) {
            return false;
        }
        if (leftKey.alt !== right.alt) {
            return false;
        }
        return left.semanticContext.equals(right.semanticContext);
    }
    getKey(e) {
        return { state: e.state.stateNumber, alt: e.alt };
    }
    containsAll(c) {
        for (let o of c) {
            if (!(o instanceof ATNConfig_1.ATNConfig)) {
                return false;
            }
            if (!this.contains(o)) {
                return false;
            }
        }
        return true;
    }
    addAll(c, contextCache) {
        this.ensureWritable();
        let changed = false;
        for (let group of c) {
            if (this.add(group, contextCache)) {
                changed = true;
            }
        }
        return changed;
    }
    clear() {
        this.ensureWritable();
        if (!this.mergedConfigs || !this.unmerged) {
            throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
        }
        this.mergedConfigs.clear();
        this.unmerged.length = 0;
        this.configs.length = 0;
        this._dipsIntoOuterContext = false;
        this._hasSemanticContext = false;
        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        this._conflictInfo = undefined;
    }
    equals(obj) {
        if (this === obj) {
            return true;
        }
        if (!(obj instanceof ATNConfigSet)) {
            return false;
        }
        return this.outermostConfigSet === obj.outermostConfigSet
            && Utils.equals(this._conflictInfo, obj._conflictInfo)
            && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.configs, obj.configs);
    }
    hashCode() {
        if (this.isReadOnly && this.cachedHashCode !== -1) {
            return this.cachedHashCode;
        }
        let hashCode = 1;
        hashCode = 5 * hashCode ^ (this.outermostConfigSet ? 1 : 0);
        hashCode = 5 * hashCode ^ ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.hashCode(this.configs);
        if (this.isReadOnly) {
            this.cachedHashCode = hashCode;
        }
        return hashCode;
    }
    toString(showContext) {
        if (showContext == null) {
            showContext = false;
        }
        let buf = "";
        let sortedConfigs = this.configs.slice(0);
        sortedConfigs.sort((o1, o2) => {
            if (o1.alt !== o2.alt) {
                return o1.alt - o2.alt;
            }
            else if (o1.state.stateNumber !== o2.state.stateNumber) {
                return o1.state.stateNumber - o2.state.stateNumber;
            }
            else {
                return o1.semanticContext.toString().localeCompare(o2.semanticContext.toString());
            }
        });
        buf += ("[");
        for (let i = 0; i < sortedConfigs.length; i++) {
            if (i > 0) {
                buf += (", ");
            }
            buf += (sortedConfigs[i].toString(undefined, true, showContext));
        }
        buf += ("]");
        if (this._hasSemanticContext) {
            buf += (",hasSemanticContext=") + (this._hasSemanticContext);
        }
        if (this._uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            buf += (",uniqueAlt=") + (this._uniqueAlt);
        }
        if (this._conflictInfo != null) {
            buf += (",conflictingAlts=") + (this._conflictInfo.conflictedAlts);
            if (!this._conflictInfo.isExact) {
                buf += ("*");
            }
        }
        if (this._dipsIntoOuterContext) {
            buf += (",dipsIntoOuterContext");
        }
        return buf.toString();
    }
    get uniqueAlt() {
        return this._uniqueAlt;
    }
    get hasSemanticContext() {
        return this._hasSemanticContext;
    }
    set hasSemanticContext(value) {
        this.ensureWritable();
        this._hasSemanticContext = value;
    }
    get conflictInfo() {
        return this._conflictInfo;
    }
    set conflictInfo(conflictInfo) {
        this.ensureWritable();
        this._conflictInfo = conflictInfo;
    }
    get conflictingAlts() {
        if (this._conflictInfo == null) {
            return undefined;
        }
        return this._conflictInfo.conflictedAlts;
    }
    get isExactConflict() {
        if (this._conflictInfo == null) {
            return false;
        }
        return this._conflictInfo.isExact;
    }
    get dipsIntoOuterContext() {
        return this._dipsIntoOuterContext;
    }
    get(index) {
        return this.configs[index];
    }
    ensureWritable() {
        if (this.isReadOnly) {
            throw new Error("This ATNConfigSet is read only.");
        }
    }
}
__decorate([
    Decorators_1.NotNull
], ATNConfigSet.prototype, "getRepresentedAlternatives", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "contains", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, Symbol.iterator, null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "toArray", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "containsAll", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "clear", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "hashCode", null);
exports.ATNConfigSet = ATNConfigSet;

},{"../Decorators":13,"../misc/Array2DHashMap":110,"../misc/Array2DHashSet":111,"../misc/ArrayEqualityComparator":112,"../misc/BitSet":114,"../misc/ObjectEqualityComparator":123,"../misc/Utils":126,"./ATN":40,"./ATNConfig":41,"./PredictionContext":87,"./PredictionContextCache":88,"./SemanticContext":95,"assert":153}],43:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:25.8187912-07:00
const Decorators_1 = require("../Decorators");
/**
 *
 * @author Sam Harwell
 */
class ATNDeserializationOptions {
    constructor(options) {
        this.readOnly = false;
        if (options) {
            this.verifyATN = options.verifyATN;
            this.generateRuleBypassTransitions = options.generateRuleBypassTransitions;
            this.optimize = options.optimize;
        }
        else {
            this.verifyATN = true;
            this.generateRuleBypassTransitions = false;
            this.optimize = true;
        }
    }
    static get defaultOptions() {
        if (ATNDeserializationOptions._defaultOptions == null) {
            ATNDeserializationOptions._defaultOptions = new ATNDeserializationOptions();
            ATNDeserializationOptions._defaultOptions.makeReadOnly();
        }
        return ATNDeserializationOptions._defaultOptions;
    }
    get isReadOnly() {
        return this.readOnly;
    }
    makeReadOnly() {
        this.readOnly = true;
    }
    get isVerifyATN() {
        return this.verifyATN;
    }
    set isVerifyATN(verifyATN) {
        this.throwIfReadOnly();
        this.verifyATN = verifyATN;
    }
    get isGenerateRuleBypassTransitions() {
        return this.generateRuleBypassTransitions;
    }
    set isGenerateRuleBypassTransitions(generateRuleBypassTransitions) {
        this.throwIfReadOnly();
        this.generateRuleBypassTransitions = generateRuleBypassTransitions;
    }
    get isOptimize() {
        return this.optimize;
    }
    set isOptimize(optimize) {
        this.throwIfReadOnly();
        this.optimize = optimize;
    }
    throwIfReadOnly() {
        if (this.isReadOnly) {
            throw new Error("The object is read only.");
        }
    }
}
__decorate([
    Decorators_1.NotNull
], ATNDeserializationOptions, "defaultOptions", null);
exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{"../Decorators":13}],44:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:25.9683447-07:00
const ActionTransition_1 = require("./ActionTransition");
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const ATN_1 = require("./ATN");
const ATNDeserializationOptions_1 = require("./ATNDeserializationOptions");
const ATNStateType_1 = require("./ATNStateType");
const AtomTransition_1 = require("./AtomTransition");
const BasicBlockStartState_1 = require("./BasicBlockStartState");
const BasicState_1 = require("./BasicState");
const BitSet_1 = require("../misc/BitSet");
const BlockEndState_1 = require("./BlockEndState");
const BlockStartState_1 = require("./BlockStartState");
const DecisionState_1 = require("./DecisionState");
const DFA_1 = require("../dfa/DFA");
const EpsilonTransition_1 = require("./EpsilonTransition");
const IntervalSet_1 = require("../misc/IntervalSet");
const InvalidState_1 = require("./InvalidState");
const LexerChannelAction_1 = require("./LexerChannelAction");
const LexerCustomAction_1 = require("./LexerCustomAction");
const LexerModeAction_1 = require("./LexerModeAction");
const LexerMoreAction_1 = require("./LexerMoreAction");
const LexerPopModeAction_1 = require("./LexerPopModeAction");
const LexerPushModeAction_1 = require("./LexerPushModeAction");
const LexerSkipAction_1 = require("./LexerSkipAction");
const LexerTypeAction_1 = require("./LexerTypeAction");
const LoopEndState_1 = require("./LoopEndState");
const Decorators_1 = require("../Decorators");
const NotSetTransition_1 = require("./NotSetTransition");
const ParserATNSimulator_1 = require("./ParserATNSimulator");
const PlusBlockStartState_1 = require("./PlusBlockStartState");
const PlusLoopbackState_1 = require("./PlusLoopbackState");
const PrecedencePredicateTransition_1 = require("./PrecedencePredicateTransition");
const PredicateTransition_1 = require("./PredicateTransition");
const RangeTransition_1 = require("./RangeTransition");
const RuleStartState_1 = require("./RuleStartState");
const RuleStopState_1 = require("./RuleStopState");
const RuleTransition_1 = require("./RuleTransition");
const SetTransition_1 = require("./SetTransition");
const StarBlockStartState_1 = require("./StarBlockStartState");
const StarLoopbackState_1 = require("./StarLoopbackState");
const StarLoopEntryState_1 = require("./StarLoopEntryState");
const Token_1 = require("../Token");
const TokensStartState_1 = require("./TokensStartState");
const UUID_1 = require("../misc/UUID");
const WildcardTransition_1 = require("./WildcardTransition");
var UnicodeDeserializingMode;
(function (UnicodeDeserializingMode) {
    UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_BMP"] = 0] = "UNICODE_BMP";
    UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_SMP"] = 1] = "UNICODE_SMP";
})(UnicodeDeserializingMode || (UnicodeDeserializingMode = {}));
/**
 *
 * @author Sam Harwell
 */
class ATNDeserializer {
    constructor(deserializationOptions) {
        if (deserializationOptions == null) {
            deserializationOptions = ATNDeserializationOptions_1.ATNDeserializationOptions.defaultOptions;
        }
        this.deserializationOptions = deserializationOptions;
    }
    static get SERIALIZED_VERSION() {
        /* This value should never change. Updates following this version are
         * reflected as change in the unique ID SERIALIZED_UUID.
         */
        return 3;
    }
    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @returns `true` if the `actualUuid` value represents a
     * serialized ATN at or after the feature identified by `feature` was
     * introduced; otherwise, `false`.
     */
    static isFeatureSupported(feature, actualUuid) {
        let featureIndex = ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(feature));
        if (featureIndex < 0) {
            return false;
        }
        return ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(actualUuid)) >= featureIndex;
    }
    static getUnicodeDeserializer(mode) {
        if (mode === 0 /* UNICODE_BMP */) {
            return {
                readUnicode: (data, p) => {
                    return ATNDeserializer.toInt(data[p]);
                },
                size: 1,
            };
        }
        else {
            return {
                readUnicode: (data, p) => {
                    return ATNDeserializer.toInt32(data, p);
                },
                size: 2,
            };
        }
    }
    deserialize(data) {
        data = data.slice(0);
        // Each Uint16 value in data is shifted by +2 at the entry to this method. This is an encoding optimization
        // targeting the serialized values 0 and -1 (serialized to 0xFFFF), each of which are very common in the
        // serialized form of the ATN. In the modified UTF-8 that Java uses for compiled string literals, these two
        // character values have multi-byte forms. By shifting each value by +2, they become characters 2 and 1 prior to
        // writing the string, each of which have single-byte representations. Since the shift occurs in the tool during
        // ATN serialization, each target is responsible for adjusting the values during deserialization.
        //
        // As a special case, note that the first element of data is not adjusted because it contains the major version
        // number of the serialized ATN, which was fixed at 3 at the time the value shifting was implemented.
        for (let i = 1; i < data.length; i++) {
            data[i] = (data[i] - 2) & 0xFFFF;
        }
        let p = 0;
        let version = ATNDeserializer.toInt(data[p++]);
        if (version !== ATNDeserializer.SERIALIZED_VERSION) {
            let reason = `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer.SERIALIZED_VERSION}).`;
            throw new Error(reason);
        }
        let uuid = ATNDeserializer.toUUID(data, p);
        p += 8;
        if (ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(uuid)) < 0) {
            let reason = `Could not deserialize ATN with UUID ${uuid} (expected ${ATNDeserializer.SERIALIZED_UUID} or a legacy UUID).`;
            throw new Error(reason);
        }
        let supportsLexerActions = ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid);
        let grammarType = ATNDeserializer.toInt(data[p++]);
        let maxTokenType = ATNDeserializer.toInt(data[p++]);
        let atn = new ATN_1.ATN(grammarType, maxTokenType);
        //
        // STATES
        //
        let loopBackStateNumbers = [];
        let endStateNumbers = [];
        let nstates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nstates; i++) {
            let stype = ATNDeserializer.toInt(data[p++]);
            // ignore bad type of states
            if (stype === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                atn.addState(new InvalidState_1.InvalidState());
                continue;
            }
            let ruleIndex = ATNDeserializer.toInt(data[p++]);
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }
            let s = this.stateFactory(stype, ruleIndex);
            if (stype === ATNStateType_1.ATNStateType.LOOP_END) { // special case
                let loopBackStateNumber = ATNDeserializer.toInt(data[p++]);
                loopBackStateNumbers.push([s, loopBackStateNumber]);
            }
            else if (s instanceof BlockStartState_1.BlockStartState) {
                let endStateNumber = ATNDeserializer.toInt(data[p++]);
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }
        // delay the assignment of loop back and end states until we know all the state instances have been initialized
        for (let pair of loopBackStateNumbers) {
            pair[0].loopBackState = atn.states[pair[1]];
        }
        for (let pair of endStateNumbers) {
            pair[0].endState = atn.states[pair[1]];
        }
        let numNonGreedyStates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numNonGreedyStates; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].nonGreedy = true;
        }
        let numSllDecisions = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numSllDecisions; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].sll = true;
        }
        let numPrecedenceStates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numPrecedenceStates; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].isPrecedenceRule = true;
        }
        //
        // RULES
        //
        let nrules = ATNDeserializer.toInt(data[p++]);
        if (atn.grammarType === 0 /* LEXER */) {
            atn.ruleToTokenType = new Int32Array(nrules);
        }
        atn.ruleToStartState = new Array(nrules);
        for (let i = 0; i < nrules; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            let startState = atn.states[s];
            startState.leftFactored = ATNDeserializer.toInt(data[p++]) !== 0;
            atn.ruleToStartState[i] = startState;
            if (atn.grammarType === 0 /* LEXER */) {
                let tokenType = ATNDeserializer.toInt(data[p++]);
                if (tokenType === 0xFFFF) {
                    tokenType = Token_1.Token.EOF;
                }
                atn.ruleToTokenType[i] = tokenType;
                if (!ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid)) {
                    // this piece of unused metadata was serialized prior to the
                    // addition of LexerAction
                    let actionIndexIgnored = ATNDeserializer.toInt(data[p++]);
                    if (actionIndexIgnored === 0xFFFF) {
                        actionIndexIgnored = -1;
                    }
                }
            }
        }
        atn.ruleToStopState = new Array(nrules);
        for (let state of atn.states) {
            if (!(state instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }
        //
        // MODES
        //
        let nmodes = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nmodes; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            atn.modeToStartState.push(atn.states[s]);
        }
        atn.modeToDFA = new Array(nmodes);
        for (let i = 0; i < nmodes; i++) {
            atn.modeToDFA[i] = new DFA_1.DFA(atn.modeToStartState[i]);
        }
        //
        // SETS
        //
        let sets = [];
        // First, read all sets with 16-bit Unicode code points <= U+FFFF.
        p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(0 /* UNICODE_BMP */));
        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_UNICODE_SMP, uuid)) {
            p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(1 /* UNICODE_SMP */));
        }
        //
        // EDGES
        //
        let nedges = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nedges; i++) {
            let src = ATNDeserializer.toInt(data[p]);
            let trg = ATNDeserializer.toInt(data[p + 1]);
            let ttype = ATNDeserializer.toInt(data[p + 2]);
            let arg1 = ATNDeserializer.toInt(data[p + 3]);
            let arg2 = ATNDeserializer.toInt(data[p + 4]);
            let arg3 = ATNDeserializer.toInt(data[p + 5]);
            let trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            // console.log(`EDGE ${trans.constructor.name} ${src}->${trg} ${Transition.serializationNames[ttype]} ${arg1},${arg2},${arg3}`);
            let srcState = atn.states[src];
            srcState.addTransition(trans);
            p += 6;
        }
        let returnTransitionsSet = new Array2DHashSet_1.Array2DHashSet({
            hashCode: (o) => o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn,
            equals: (a, b) => {
                return a.stopState === b.stopState
                    && a.returnState === b.returnState
                    && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;
            },
        });
        let returnTransitions = [];
        for (let state of atn.states) {
            let returningToLeftFactored = state.ruleIndex >= 0 && atn.ruleToStartState[state.ruleIndex].leftFactored;
            for (let i = 0; i < state.numberOfTransitions; i++) {
                let t = state.transition(i);
                if (!(t instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                let ruleTransition = t;
                let returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;
                if (!returningFromLeftFactored && returningToLeftFactored) {
                    continue;
                }
                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {
                    if (ruleTransition.precedence === 0) {
                        outermostPrecedenceReturn = ruleTransition.target.ruleIndex;
                    }
                }
                let current = { stopState: ruleTransition.target.ruleIndex, returnState: ruleTransition.followState.stateNumber, outermostPrecedenceReturn };
                if (returnTransitionsSet.add(current)) {
                    returnTransitions.push(current);
                }
            }
        }
        // Add all elements from returnTransitions to the ATN
        for (let returnTransition of returnTransitions) {
            let transition = new EpsilonTransition_1.EpsilonTransition(atn.states[returnTransition.returnState], returnTransition.outermostPrecedenceReturn);
            atn.ruleToStopState[returnTransition.stopState].addTransition(transition);
        }
        for (let state of atn.states) {
            if (state instanceof BlockStartState_1.BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState == null) {
                    throw new Error("IllegalStateException");
                }
                // block end states can only be associated to a single block start state
                if (state.endState.startState != null) {
                    throw new Error("IllegalStateException");
                }
                state.endState.startState = state;
            }
            if (state instanceof PlusLoopbackState_1.PlusLoopbackState) {
                let loopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    let target = loopbackState.transition(i).target;
                    if (target instanceof PlusBlockStartState_1.PlusBlockStartState) {
                        target.loopBackState = loopbackState;
                    }
                }
            }
            else if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                let loopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    let target = loopbackState.transition(i).target;
                    if (target instanceof StarLoopEntryState_1.StarLoopEntryState) {
                        target.loopBackState = loopbackState;
                    }
                }
            }
        }
        //
        // DECISIONS
        //
        let ndecisions = ATNDeserializer.toInt(data[p++]);
        for (let i = 1; i <= ndecisions; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            let decState = atn.states[s];
            atn.decisionToState.push(decState);
            decState.decision = i - 1;
        }
        //
        // LEXER ACTIONS
        //
        if (atn.grammarType === 0 /* LEXER */) {
            if (supportsLexerActions) {
                atn.lexerActions = new Array(ATNDeserializer.toInt(data[p++]));
                for (let i = 0; i < atn.lexerActions.length; i++) {
                    let actionType = ATNDeserializer.toInt(data[p++]);
                    let data1 = ATNDeserializer.toInt(data[p++]);
                    if (data1 === 0xFFFF) {
                        data1 = -1;
                    }
                    let data2 = ATNDeserializer.toInt(data[p++]);
                    if (data2 === 0xFFFF) {
                        data2 = -1;
                    }
                    let lexerAction = this.lexerActionFactory(actionType, data1, data2);
                    atn.lexerActions[i] = lexerAction;
                }
            }
            else {
                // for compatibility with older serialized ATNs, convert the old
                // serialized action index for action transitions to the new
                // form, which is the index of a LexerCustomAction
                let legacyLexerActions = [];
                for (let state of atn.states) {
                    for (let i = 0; i < state.numberOfTransitions; i++) {
                        let transition = state.transition(i);
                        if (!(transition instanceof ActionTransition_1.ActionTransition)) {
                            continue;
                        }
                        let ruleIndex = transition.ruleIndex;
                        let actionIndex = transition.actionIndex;
                        let lexerAction = new LexerCustomAction_1.LexerCustomAction(ruleIndex, actionIndex);
                        state.setTransition(i, new ActionTransition_1.ActionTransition(transition.target, ruleIndex, legacyLexerActions.length, false));
                        legacyLexerActions.push(lexerAction);
                    }
                }
                atn.lexerActions = legacyLexerActions;
            }
        }
        this.markPrecedenceDecisions(atn);
        atn.decisionToDFA = new Array(ndecisions);
        for (let i = 0; i < ndecisions; i++) {
            atn.decisionToDFA[i] = new DFA_1.DFA(atn.decisionToState[i], i);
        }
        if (this.deserializationOptions.isVerifyATN) {
            this.verifyATN(atn);
        }
        if (this.deserializationOptions.isGenerateRuleBypassTransitions && atn.grammarType === 1 /* PARSER */) {
            atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);
            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
            }
            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                let bypassStart = new BasicBlockStartState_1.BasicBlockStartState();
                bypassStart.ruleIndex = i;
                atn.addState(bypassStart);
                let bypassStop = new BlockEndState_1.BlockEndState();
                bypassStop.ruleIndex = i;
                atn.addState(bypassStop);
                bypassStart.endState = bypassStop;
                atn.defineDecisionState(bypassStart);
                bypassStop.startState = bypassStart;
                let endState;
                let excludeTransition;
                if (atn.ruleToStartState[i].isPrecedenceRule) {
                    // wrap from the beginning of the rule to the StarLoopEntryState
                    endState = undefined;
                    for (let state of atn.states) {
                        if (state.ruleIndex !== i) {
                            continue;
                        }
                        if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                            continue;
                        }
                        let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                        if (!(maybeLoopEndState instanceof LoopEndState_1.LoopEndState)) {
                            continue;
                        }
                        if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                            endState = state;
                            break;
                        }
                    }
                    if (!endState) {
                        throw new Error("Couldn't identify final state of the precedence rule prefix section.");
                    }
                    excludeTransition = endState.loopBackState.transition(0);
                }
                else {
                    endState = atn.ruleToStopState[i];
                }
                // all non-excluded transitions that currently target end state need to target blockEnd instead
                for (let state of atn.states) {
                    for (let i = 0; i < state.numberOfTransitions; i++) {
                        let transition = state.transition(i);
                        if (transition === excludeTransition) {
                            continue;
                        }
                        if (transition.target === endState) {
                            transition.target = bypassStop;
                        }
                    }
                }
                // all transitions leaving the rule start state need to leave blockStart instead
                while (atn.ruleToStartState[i].numberOfTransitions > 0) {
                    let transition = atn.ruleToStartState[i].removeTransition(atn.ruleToStartState[i].numberOfTransitions - 1);
                    bypassStart.addTransition(transition);
                }
                // link the new states
                atn.ruleToStartState[i].addTransition(new EpsilonTransition_1.EpsilonTransition(bypassStart));
                bypassStop.addTransition(new EpsilonTransition_1.EpsilonTransition(endState));
                let matchState = new BasicState_1.BasicState();
                atn.addState(matchState);
                matchState.addTransition(new AtomTransition_1.AtomTransition(bypassStop, atn.ruleToTokenType[i]));
                bypassStart.addTransition(new EpsilonTransition_1.EpsilonTransition(matchState));
            }
            if (this.deserializationOptions.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }
        if (this.deserializationOptions.isOptimize) {
            while (true) {
                let optimizationCount = 0;
                optimizationCount += ATNDeserializer.inlineSetRules(atn);
                optimizationCount += ATNDeserializer.combineChainedEpsilons(atn);
                let preserveOrder = atn.grammarType === 0 /* LEXER */;
                optimizationCount += ATNDeserializer.optimizeSets(atn, preserveOrder);
                if (optimizationCount === 0) {
                    break;
                }
            }
            if (this.deserializationOptions.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }
        ATNDeserializer.identifyTailCalls(atn);
        return atn;
    }
    deserializeSets(data, p, sets, unicodeDeserializer) {
        let nsets = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nsets; i++) {
            let nintervals = ATNDeserializer.toInt(data[p]);
            p++;
            let set = new IntervalSet_1.IntervalSet();
            sets.push(set);
            let containsEof = ATNDeserializer.toInt(data[p++]) !== 0;
            if (containsEof) {
                set.add(-1);
            }
            for (let j = 0; j < nintervals; j++) {
                let a = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                let b = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                set.add(a, b);
            }
        }
        return p;
    }
    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState#precedenceRuleDecision} field to the
     * correct value.
     *
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn) {
        // Map rule index -> precedence decision for that rule
        let rulePrecedenceDecisions = new Map();
        for (let state of atn.states) {
            if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                continue;
            }
            /* We analyze the ATN to determine if this ATN decision state is the
             * decision for the closure block that determines whether a
             * precedence rule should continue or complete.
             */
            if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                if (maybeLoopEndState instanceof LoopEndState_1.LoopEndState) {
                    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                        rulePrecedenceDecisions.set(state.ruleIndex, state);
                        state.precedenceRuleDecision = true;
                        state.precedenceLoopbackStates = new BitSet_1.BitSet(atn.states.length);
                    }
                }
            }
        }
        // After marking precedence decisions, we go back through and fill in
        // StarLoopEntryState.precedenceLoopbackStates.
        for (let precedenceDecision of rulePrecedenceDecisions) {
            for (let transition of atn.ruleToStopState[precedenceDecision[0]].getTransitions()) {
                if (transition.serializationType !== 1 /* EPSILON */) {
                    continue;
                }
                let epsilonTransition = transition;
                if (epsilonTransition.outermostPrecedenceReturn !== -1) {
                    continue;
                }
                precedenceDecision[1].precedenceLoopbackStates.set(transition.target.stateNumber);
            }
        }
    }
    verifyATN(atn) {
        // verify assumptions
        for (let state of atn.states) {
            this.checkCondition(state != null, "ATN states should not be null.");
            if (state.stateType === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                continue;
            }
            this.checkCondition(state.onlyHasEpsilonTransitions || state.numberOfTransitions <= 1);
            if (state instanceof PlusBlockStartState_1.PlusBlockStartState) {
                this.checkCondition(state.loopBackState != null);
            }
            if (state instanceof StarLoopEntryState_1.StarLoopEntryState) {
                let starLoopEntryState = state;
                this.checkCondition(starLoopEntryState.loopBackState != null);
                this.checkCondition(starLoopEntryState.numberOfTransitions === 2);
                if (starLoopEntryState.transition(0).target instanceof StarBlockStartState_1.StarBlockStartState) {
                    this.checkCondition(starLoopEntryState.transition(1).target instanceof LoopEndState_1.LoopEndState);
                    this.checkCondition(!starLoopEntryState.nonGreedy);
                }
                else if (starLoopEntryState.transition(0).target instanceof LoopEndState_1.LoopEndState) {
                    this.checkCondition(starLoopEntryState.transition(1).target instanceof StarBlockStartState_1.StarBlockStartState);
                    this.checkCondition(starLoopEntryState.nonGreedy);
                }
                else {
                    throw new Error("IllegalStateException");
                }
            }
            if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                this.checkCondition(state.numberOfTransitions === 1);
                this.checkCondition(state.transition(0).target instanceof StarLoopEntryState_1.StarLoopEntryState);
            }
            if (state instanceof LoopEndState_1.LoopEndState) {
                this.checkCondition(state.loopBackState != null);
            }
            if (state instanceof RuleStartState_1.RuleStartState) {
                this.checkCondition(state.stopState != null);
            }
            if (state instanceof BlockStartState_1.BlockStartState) {
                this.checkCondition(state.endState != null);
            }
            if (state instanceof BlockEndState_1.BlockEndState) {
                this.checkCondition(state.startState != null);
            }
            if (state instanceof DecisionState_1.DecisionState) {
                let decisionState = state;
                this.checkCondition(decisionState.numberOfTransitions <= 1 || decisionState.decision >= 0);
            }
            else {
                this.checkCondition(state.numberOfTransitions <= 1 || state instanceof RuleStopState_1.RuleStopState);
            }
        }
    }
    checkCondition(condition, message) {
        if (!condition) {
            throw new Error("IllegalStateException: " + message);
        }
    }
    static inlineSetRules(atn) {
        let inlinedCalls = 0;
        let ruleToInlineTransition = new Array(atn.ruleToStartState.length);
        for (let i = 0; i < atn.ruleToStartState.length; i++) {
            let startState = atn.ruleToStartState[i];
            let middleState = startState;
            while (middleState.onlyHasEpsilonTransitions
                && middleState.numberOfOptimizedTransitions === 1
                && middleState.getOptimizedTransition(0).serializationType === 1 /* EPSILON */) {
                middleState = middleState.getOptimizedTransition(0).target;
            }
            if (middleState.numberOfOptimizedTransitions !== 1) {
                continue;
            }
            let matchTransition = middleState.getOptimizedTransition(0);
            let matchTarget = matchTransition.target;
            if (matchTransition.isEpsilon
                || !matchTarget.onlyHasEpsilonTransitions
                || matchTarget.numberOfOptimizedTransitions !== 1
                || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            switch (matchTransition.serializationType) {
                case 5 /* ATOM */:
                case 2 /* RANGE */:
                case 7 /* SET */:
                    ruleToInlineTransition[i] = matchTransition;
                    break;
                case 8 /* NOT_SET */:
                case 9 /* WILDCARD */:
                    // not implemented yet
                    continue;
                default:
                    continue;
            }
        }
        for (let state of atn.states) {
            if (state.ruleIndex < 0) {
                continue;
            }
            let optimizedTransitions;
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    if (optimizedTransitions != null) {
                        optimizedTransitions.push(transition);
                    }
                    continue;
                }
                let ruleTransition = transition;
                let effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];
                if (effective == null) {
                    if (optimizedTransitions != null) {
                        optimizedTransitions.push(transition);
                    }
                    continue;
                }
                if (optimizedTransitions == null) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(i));
                    }
                }
                inlinedCalls++;
                let target = ruleTransition.followState;
                let intermediateState = new BasicState_1.BasicState();
                intermediateState.setRuleIndex(target.ruleIndex);
                atn.addState(intermediateState);
                optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(intermediateState));
                switch (effective.serializationType) {
                    case 5 /* ATOM */:
                        intermediateState.addTransition(new AtomTransition_1.AtomTransition(target, effective._label));
                        break;
                    case 2 /* RANGE */:
                        intermediateState.addTransition(new RangeTransition_1.RangeTransition(target, effective.from, effective.to));
                        break;
                    case 7 /* SET */:
                        intermediateState.addTransition(new SetTransition_1.SetTransition(target, effective.label));
                        break;
                    default:
                        throw new Error("UnsupportedOperationException");
                }
            }
            if (optimizedTransitions != null) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }
                for (let transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + inlinedCalls + " rule invocations by inlining sets.");
        }
        return inlinedCalls;
    }
    static combineChainedEpsilons(atn) {
        let removedEdges = 0;
        for (let state of atn.states) {
            if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState_1.RuleStopState) {
                continue;
            }
            let optimizedTransitions;
            nextTransition: for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                let intermediate = transition.target;
                if (transition.serializationType !== 1 /* EPSILON */
                    || transition.outermostPrecedenceReturn !== -1
                    || intermediate.stateType !== ATNStateType_1.ATNStateType.BASIC
                    || !intermediate.onlyHasEpsilonTransitions) {
                    if (optimizedTransitions != null) {
                        optimizedTransitions.push(transition);
                    }
                    continue nextTransition;
                }
                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    if (intermediate.getOptimizedTransition(j).serializationType !== 1 /* EPSILON */
                        || intermediate.getOptimizedTransition(j).outermostPrecedenceReturn !== -1) {
                        if (optimizedTransitions != null) {
                            optimizedTransitions.push(transition);
                        }
                        continue nextTransition;
                    }
                }
                removedEdges++;
                if (optimizedTransitions == null) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(j));
                    }
                }
                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    let target = intermediate.getOptimizedTransition(j).target;
                    optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(target));
                }
            }
            if (optimizedTransitions != null) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }
                for (let transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + removedEdges + " transitions by combining chained epsilon transitions.");
        }
        return removedEdges;
    }
    static optimizeSets(atn, preserveOrder) {
        if (preserveOrder) {
            // this optimization currently doesn't preserve edge order.
            return 0;
        }
        let removedPaths = 0;
        let decisions = atn.decisionToState;
        for (let decision of decisions) {
            let setTransitions = new IntervalSet_1.IntervalSet();
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                let epsTransition = decision.getOptimizedTransition(i);
                if (!(epsTransition instanceof EpsilonTransition_1.EpsilonTransition)) {
                    continue;
                }
                if (epsTransition.target.numberOfOptimizedTransitions !== 1) {
                    continue;
                }
                let transition = epsTransition.target.getOptimizedTransition(0);
                if (!(transition.target instanceof BlockEndState_1.BlockEndState)) {
                    continue;
                }
                if (transition instanceof NotSetTransition_1.NotSetTransition) {
                    // TODO: not yet implemented
                    continue;
                }
                if (transition instanceof AtomTransition_1.AtomTransition
                    || transition instanceof RangeTransition_1.RangeTransition
                    || transition instanceof SetTransition_1.SetTransition) {
                    setTransitions.add(i);
                }
            }
            if (setTransitions.size <= 1) {
                continue;
            }
            let optimizedTransitions = [];
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                if (!setTransitions.contains(i)) {
                    optimizedTransitions.push(decision.getOptimizedTransition(i));
                }
            }
            let blockEndState = decision.getOptimizedTransition(setTransitions.minElement).target.getOptimizedTransition(0).target;
            let matchSet = new IntervalSet_1.IntervalSet();
            for (let interval of setTransitions.intervals) {
                for (let j = interval.a; j <= interval.b; j++) {
                    let matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);
                    if (matchTransition instanceof NotSetTransition_1.NotSetTransition) {
                        throw new Error("Not yet implemented.");
                    }
                    else {
                        matchSet.addAll(matchTransition.label);
                    }
                }
            }
            let newTransition;
            if (matchSet.intervals.length === 1) {
                if (matchSet.size === 1) {
                    newTransition = new AtomTransition_1.AtomTransition(blockEndState, matchSet.minElement);
                }
                else {
                    let matchInterval = matchSet.intervals[0];
                    newTransition = new RangeTransition_1.RangeTransition(blockEndState, matchInterval.a, matchInterval.b);
                }
            }
            else {
                newTransition = new SetTransition_1.SetTransition(blockEndState, matchSet);
            }
            let setOptimizedState = new BasicState_1.BasicState();
            setOptimizedState.setRuleIndex(decision.ruleIndex);
            atn.addState(setOptimizedState);
            setOptimizedState.addTransition(newTransition);
            optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(setOptimizedState));
            removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;
            if (decision.isOptimized) {
                while (decision.numberOfOptimizedTransitions > 0) {
                    decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);
                }
            }
            for (let transition of optimizedTransitions) {
                decision.addOptimizedTransition(transition);
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + removedPaths + " paths by collapsing sets.");
        }
        return removedPaths;
    }
    static identifyTailCalls(atn) {
        for (let state of atn.states) {
            for (let i = 0; i < state.numberOfTransitions; i++) {
                let transition = state.transition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                transition.tailCall = this.testTailCall(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall(atn, transition, true);
            }
            if (!state.isOptimized) {
                continue;
            }
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                transition.tailCall = this.testTailCall(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall(atn, transition, true);
            }
        }
    }
    static testTailCall(atn, transition, optimizedPath) {
        if (!optimizedPath && transition.tailCall) {
            return true;
        }
        if (optimizedPath && transition.optimizedTailCall) {
            return true;
        }
        let reachable = new BitSet_1.BitSet(atn.states.length);
        let worklist = [];
        worklist.push(transition.followState);
        while (true) {
            let state = worklist.pop();
            if (!state) {
                break;
            }
            if (reachable.get(state.stateNumber)) {
                continue;
            }
            if (state instanceof RuleStopState_1.RuleStopState) {
                continue;
            }
            if (!state.onlyHasEpsilonTransitions) {
                return false;
            }
            let transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;
            for (let i = 0; i < transitionCount; i++) {
                let t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);
                if (t.serializationType !== 1 /* EPSILON */) {
                    return false;
                }
                worklist.push(t.target);
            }
        }
        return true;
    }
    static toInt(c) {
        return c;
    }
    static toInt32(data, offset) {
        return (data[offset] | (data[offset + 1] << 16)) >>> 0;
    }
    static toUUID(data, offset) {
        let leastSigBits = ATNDeserializer.toInt32(data, offset);
        let lessSigBits = ATNDeserializer.toInt32(data, offset + 2);
        let moreSigBits = ATNDeserializer.toInt32(data, offset + 4);
        let mostSigBits = ATNDeserializer.toInt32(data, offset + 6);
        return new UUID_1.UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
        let target = atn.states[trg];
        switch (type) {
            case 1 /* EPSILON */: return new EpsilonTransition_1.EpsilonTransition(target);
            case 2 /* RANGE */:
                if (arg3 !== 0) {
                    return new RangeTransition_1.RangeTransition(target, Token_1.Token.EOF, arg2);
                }
                else {
                    return new RangeTransition_1.RangeTransition(target, arg1, arg2);
                }
            case 3 /* RULE */:
                let rt = new RuleTransition_1.RuleTransition(atn.states[arg1], arg2, arg3, target);
                return rt;
            case 4 /* PREDICATE */:
                let pt = new PredicateTransition_1.PredicateTransition(target, arg1, arg2, arg3 !== 0);
                return pt;
            case 10 /* PRECEDENCE */:
                return new PrecedencePredicateTransition_1.PrecedencePredicateTransition(target, arg1);
            case 5 /* ATOM */:
                if (arg3 !== 0) {
                    return new AtomTransition_1.AtomTransition(target, Token_1.Token.EOF);
                }
                else {
                    return new AtomTransition_1.AtomTransition(target, arg1);
                }
            case 6 /* ACTION */:
                let a = new ActionTransition_1.ActionTransition(target, arg1, arg2, arg3 !== 0);
                return a;
            case 7 /* SET */: return new SetTransition_1.SetTransition(target, sets[arg1]);
            case 8 /* NOT_SET */: return new NotSetTransition_1.NotSetTransition(target, sets[arg1]);
            case 9 /* WILDCARD */: return new WildcardTransition_1.WildcardTransition(target);
        }
        throw new Error("The specified transition type is not valid.");
    }
    stateFactory(type, ruleIndex) {
        let s;
        switch (type) {
            case ATNStateType_1.ATNStateType.INVALID_TYPE: return new InvalidState_1.InvalidState();
            case ATNStateType_1.ATNStateType.BASIC:
                s = new BasicState_1.BasicState();
                break;
            case ATNStateType_1.ATNStateType.RULE_START:
                s = new RuleStartState_1.RuleStartState();
                break;
            case ATNStateType_1.ATNStateType.BLOCK_START:
                s = new BasicBlockStartState_1.BasicBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
                s = new PlusBlockStartState_1.PlusBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
                s = new StarBlockStartState_1.StarBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.TOKEN_START:
                s = new TokensStartState_1.TokensStartState();
                break;
            case ATNStateType_1.ATNStateType.RULE_STOP:
                s = new RuleStopState_1.RuleStopState();
                break;
            case ATNStateType_1.ATNStateType.BLOCK_END:
                s = new BlockEndState_1.BlockEndState();
                break;
            case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                s = new StarLoopbackState_1.StarLoopbackState();
                break;
            case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                s = new StarLoopEntryState_1.StarLoopEntryState();
                break;
            case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
                s = new PlusLoopbackState_1.PlusLoopbackState();
                break;
            case ATNStateType_1.ATNStateType.LOOP_END:
                s = new LoopEndState_1.LoopEndState();
                break;
            default:
                let message = `The specified state type ${type} is not valid.`;
                throw new Error(message);
        }
        s.ruleIndex = ruleIndex;
        return s;
    }
    lexerActionFactory(type, data1, data2) {
        switch (type) {
            case 0 /* CHANNEL */:
                return new LexerChannelAction_1.LexerChannelAction(data1);
            case 1 /* CUSTOM */:
                return new LexerCustomAction_1.LexerCustomAction(data1, data2);
            case 2 /* MODE */:
                return new LexerModeAction_1.LexerModeAction(data1);
            case 3 /* MORE */:
                return LexerMoreAction_1.LexerMoreAction.INSTANCE;
            case 4 /* POP_MODE */:
                return LexerPopModeAction_1.LexerPopModeAction.INSTANCE;
            case 5 /* PUSH_MODE */:
                return new LexerPushModeAction_1.LexerPushModeAction(data1);
            case 6 /* SKIP */:
                return LexerSkipAction_1.LexerSkipAction.INSTANCE;
            case 7 /* TYPE */:
                return new LexerTypeAction_1.LexerTypeAction(data1);
            default:
                let message = `The specified lexer action type ${type} is not valid.`;
                throw new Error(message);
        }
    }
}
/* WARNING: DO NOT MERGE THESE LINES. If UUIDs differ during a merge,
 * resolve the conflict by generating a new ID!
 */
/**
 * This is the earliest supported serialized UUID.
 */
ATNDeserializer.BASE_SERIALIZED_UUID = UUID_1.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3");
/**
 * This UUID indicates an extension of {@link #ADDED_PRECEDENCE_TRANSITIONS}
 * for the addition of lexer actions encoded as a sequence of
 * {@link LexerAction} instances.
 */
ATNDeserializer.ADDED_LEXER_ACTIONS = UUID_1.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D");
/**
 * This UUID indicates the serialized ATN contains two sets of
 * IntervalSets, where the second set's values are encoded as
 * 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
 */
ATNDeserializer.ADDED_UNICODE_SMP = UUID_1.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B");
/**
 * This list contains all of the currently supported UUIDs, ordered by when
 * the feature first appeared in this branch.
 */
ATNDeserializer.SUPPORTED_UUIDS = [
    ATNDeserializer.BASE_SERIALIZED_UUID,
    ATNDeserializer.ADDED_LEXER_ACTIONS,
    ATNDeserializer.ADDED_UNICODE_SMP,
];
/**
 * This is the current serialized UUID.
 */
ATNDeserializer.SERIALIZED_UUID = ATNDeserializer.ADDED_UNICODE_SMP;
__decorate([
    Decorators_1.NotNull
], ATNDeserializer.prototype, "deserializationOptions", void 0);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "deserialize", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "markPrecedenceDecisions", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "edgeFactory", null);
exports.ATNDeserializer = ATNDeserializer;

},{"../Decorators":13,"../Token":37,"../dfa/DFA":105,"../misc/Array2DHashSet":111,"../misc/BitSet":114,"../misc/IntervalSet":120,"../misc/UUID":125,"./ATN":40,"./ATNDeserializationOptions":43,"./ATNStateType":47,"./ActionTransition":49,"./AtomTransition":51,"./BasicBlockStartState":52,"./BasicState":53,"./BlockEndState":54,"./BlockStartState":55,"./DecisionState":60,"./EpsilonTransition":61,"./InvalidState":63,"./LexerChannelAction":67,"./LexerCustomAction":68,"./LexerModeAction":70,"./LexerMoreAction":71,"./LexerPopModeAction":72,"./LexerPushModeAction":73,"./LexerSkipAction":74,"./LexerTypeAction":75,"./LoopEndState":77,"./NotSetTransition":78,"./ParserATNSimulator":81,"./PlusBlockStartState":82,"./PlusLoopbackState":83,"./PrecedencePredicateTransition":84,"./PredicateTransition":86,"./RangeTransition":91,"./RuleStartState":92,"./RuleStopState":93,"./RuleTransition":94,"./SetTransition":96,"./StarBlockStartState":98,"./StarLoopEntryState":99,"./StarLoopbackState":100,"./TokensStartState":101,"./WildcardTransition":103}],45:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNConfigSet_1 = require("./ATNConfigSet");
const DFAState_1 = require("../dfa/DFAState");
const Decorators_1 = require("../Decorators");
const PredictionContext_1 = require("./PredictionContext");
let ATNSimulator = class ATNSimulator {
    constructor(atn) {
        this.atn = atn;
    }
    static get ERROR() {
        if (!ATNSimulator._ERROR) {
            ATNSimulator._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
            ATNSimulator._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
        }
        return ATNSimulator._ERROR;
    }
    /**
     * Clear the DFA cache used by the current instance. Since the DFA cache may
     * be shared by multiple ATN simulators, this method may affect the
     * performance (but not accuracy) of other parsers which are being used
     * concurrently.
     *
     * @ if the current instance does not
     * support clearing the DFA.
     *
     * @since 4.3
     */
    clearDFA() {
        this.atn.clearDFA();
    }
};
__decorate([
    Decorators_1.NotNull
], ATNSimulator.prototype, "atn", void 0);
__decorate([
    Decorators_1.NotNull
], ATNSimulator, "ERROR", null);
ATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], ATNSimulator);
exports.ATNSimulator = ATNSimulator;
(function (ATNSimulator) {
    const RULE_VARIANT_DELIMITER = "$";
    const RULE_LF_VARIANT_MARKER = "$lf$";
    const RULE_NOLF_VARIANT_MARKER = "$nolf$";
})(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));
exports.ATNSimulator = ATNSimulator;

},{"../Decorators":13,"../dfa/DFAState":107,"./ATNConfigSet":42,"./PredictionContext":87}],46:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const INITIAL_NUM_TRANSITIONS = 4;
/**
 * The following images show the relation of states and
 * {@link ATNState#transitions} for various grammar constructs.
 *
 * * Solid edges marked with an &#0949; indicate a required
 *   {@link EpsilonTransition}.
 *
 * * Dashed edges indicate locations where any transition derived from
 *   {@link Transition} might appear.
 *
 * * Dashed nodes are place holders for either a sequence of linked
 *   {@link BasicState} states or the inclusion of a block representing a nested
 *   construct in one of the forms below.
 *
 * * Nodes showing multiple outgoing alternatives with a `...` support
 *   any number of alternatives (one or more). Nodes without the `...` only
 *   support the exact number of alternatives shown in the diagram.
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: `(...)*`</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: `(...)+`</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: `(...)?`</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: `(...)*?`</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: `(...)+?`</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: `(...)??`</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
class ATNState {
    constructor() {
        this.stateNumber = ATNState.INVALID_STATE_NUMBER;
        this.ruleIndex = 0; // at runtime, we don't have Rule objects
        this.epsilonOnlyTransitions = false;
        /** Track the transitions emanating from this ATN state. */
        this.transitions = [];
        this.optimizedTransitions = this.transitions;
    }
    /**
     * Gets the state number.
     *
     * @returns the state number
     */
    getStateNumber() {
        return this.stateNumber;
    }
    /**
     * For all states except {@link RuleStopState}, this returns the state
     * number. Returns -1 for stop states.
     *
     * @returns -1 for {@link RuleStopState}, otherwise the state number
     */
    get nonStopStateNumber() {
        return this.getStateNumber();
    }
    hashCode() {
        return this.stateNumber;
    }
    equals(o) {
        // are these states same object?
        if (o instanceof ATNState) {
            return this.stateNumber === o.stateNumber;
        }
        return false;
    }
    get isNonGreedyExitState() {
        return false;
    }
    toString() {
        return String(this.stateNumber);
    }
    getTransitions() {
        return this.transitions.slice(0);
    }
    get numberOfTransitions() {
        return this.transitions.length;
    }
    addTransition(e, index) {
        if (this.transitions.length === 0) {
            this.epsilonOnlyTransitions = e.isEpsilon;
        }
        else if (this.epsilonOnlyTransitions !== e.isEpsilon) {
            this.epsilonOnlyTransitions = false;
            throw new Error("ATN state " + this.stateNumber + " has both epsilon and non-epsilon transitions.");
        }
        this.transitions.splice(index !== undefined ? index : this.transitions.length, 0, e);
    }
    transition(i) {
        return this.transitions[i];
    }
    setTransition(i, e) {
        this.transitions[i] = e;
    }
    removeTransition(index) {
        return this.transitions.splice(index, 1)[0];
    }
    get onlyHasEpsilonTransitions() {
        return this.epsilonOnlyTransitions;
    }
    setRuleIndex(ruleIndex) {
        this.ruleIndex = ruleIndex;
    }
    get isOptimized() {
        return this.optimizedTransitions !== this.transitions;
    }
    get numberOfOptimizedTransitions() {
        return this.optimizedTransitions.length;
    }
    getOptimizedTransition(i) {
        return this.optimizedTransitions[i];
    }
    addOptimizedTransition(e) {
        if (!this.isOptimized) {
            this.optimizedTransitions = new Array();
        }
        this.optimizedTransitions.push(e);
    }
    setOptimizedTransition(i, e) {
        if (!this.isOptimized) {
            throw new Error("This ATNState is not optimized.");
        }
        this.optimizedTransitions[i] = e;
    }
    removeOptimizedTransition(i) {
        if (!this.isOptimized) {
            throw new Error("This ATNState is not optimized.");
        }
        this.optimizedTransitions.splice(i, 1);
    }
}
__decorate([
    Decorators_1.Override
], ATNState.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ATNState.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNState.prototype, "toString", null);
exports.ATNState = ATNState;
(function (ATNState) {
    ATNState.INVALID_STATE_NUMBER = -1;
})(ATNState = exports.ATNState || (exports.ATNState = {}));

},{"../Decorators":13}],47:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:27.4734328-07:00
var ATNStateType;
(function (ATNStateType) {
    ATNStateType[ATNStateType["INVALID_TYPE"] = 0] = "INVALID_TYPE";
    ATNStateType[ATNStateType["BASIC"] = 1] = "BASIC";
    ATNStateType[ATNStateType["RULE_START"] = 2] = "RULE_START";
    ATNStateType[ATNStateType["BLOCK_START"] = 3] = "BLOCK_START";
    ATNStateType[ATNStateType["PLUS_BLOCK_START"] = 4] = "PLUS_BLOCK_START";
    ATNStateType[ATNStateType["STAR_BLOCK_START"] = 5] = "STAR_BLOCK_START";
    ATNStateType[ATNStateType["TOKEN_START"] = 6] = "TOKEN_START";
    ATNStateType[ATNStateType["RULE_STOP"] = 7] = "RULE_STOP";
    ATNStateType[ATNStateType["BLOCK_END"] = 8] = "BLOCK_END";
    ATNStateType[ATNStateType["STAR_LOOP_BACK"] = 9] = "STAR_LOOP_BACK";
    ATNStateType[ATNStateType["STAR_LOOP_ENTRY"] = 10] = "STAR_LOOP_ENTRY";
    ATNStateType[ATNStateType["PLUS_LOOP_BACK"] = 11] = "PLUS_LOOP_BACK";
    ATNStateType[ATNStateType["LOOP_END"] = 12] = "LOOP_END";
})(ATNStateType = exports.ATNStateType || (exports.ATNStateType = {}));

},{}],48:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Transition_1 = require("./Transition");
/**
 *
 * @author Sam Harwell
 */
class AbstractPredicateTransition extends Transition_1.Transition {
    constructor(target) {
        super(target);
    }
}
exports.AbstractPredicateTransition = AbstractPredicateTransition;

},{"./Transition":102}],49:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
let ActionTransition = class ActionTransition extends Transition_1.Transition {
    constructor(target, ruleIndex, actionIndex = -1, isCtxDependent = false) {
        super(target);
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex;
        this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
        return 6 /* ACTION */;
    }
    get isEpsilon() {
        return true; // we are to be ignored by analysis 'cept for predicates
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    toString() {
        return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
};
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "toString", null);
ActionTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], ActionTransition);
exports.ActionTransition = ActionTransition;

},{"../Decorators":13,"./Transition":102}],50:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const DecisionEventInfo_1 = require("./DecisionEventInfo");
const Decorators_1 = require("../Decorators");
/**
 * This class represents profiling event information for an ambiguity.
 * Ambiguities are decisions where a particular input resulted in an SLL
 * conflict, followed by LL prediction also reaching a conflict state
 * (indicating a true ambiguity in the grammar).
 *
 * This event may be reported during SLL prediction in cases where the
 * conflicting SLL configuration set provides sufficient information to
 * determine that the SLL conflict is truly an ambiguity. For example, if none
 * of the ATN configurations in the conflicting SLL configuration set have
 * traversed a global follow transition (i.e.
 * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all
 * configurations), then the result of SLL prediction for that input is known to
 * be equivalent to the result of LL prediction for that input.
 *
 * In some cases, the minimum represented alternative in the conflicting LL
 * configuration set is not equal to the minimum represented alternative in the
 * conflicting SLL configuration set. Grammars and inputs which result in this
 * scenario are unable to use {@link PredictionMode#SLL}, which in turn means
 * they cannot use the two-stage parsing strategy to improve parsing performance
 * for that input.
 *
 * @see ParserATNSimulator#reportAmbiguity
 * @see ParserErrorListener#reportAmbiguity
 *
 * @since 4.3
 */
let AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link AmbiguityInfo} class with the
     * specified detailed ambiguity information.
     *
     * @param decision The decision number
     * @param state The final simulator state identifying the ambiguous
     * alternatives for the current input
     * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.
     *                  The predicted alt is the min(ambigAlts)
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the ambiguity was identified during
     * prediction
     */
    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
        this.ambigAlts = ambigAlts;
    }
    /**
     * Gets the set of alternatives in the decision that lead to a valid parse.
     *
     * @since 4.5
     */
    get ambiguousAlternatives() {
        return this.ambigAlts;
    }
};
__decorate([
    Decorators_1.NotNull
], AmbiguityInfo.prototype, "ambigAlts", void 0);
__decorate([
    Decorators_1.NotNull
], AmbiguityInfo.prototype, "ambiguousAlternatives", null);
AmbiguityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], AmbiguityInfo);
exports.AmbiguityInfo = AmbiguityInfo;

},{"../Decorators":13,"./DecisionEventInfo":58}],51:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const IntervalSet_1 = require("../misc/IntervalSet");
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
/** TODO: make all transitions sets? no, should remove set edges */
let AtomTransition = class AtomTransition extends Transition_1.Transition {
    constructor(target, label) {
        super(target);
        this._label = label;
    }
    get serializationType() {
        return 5 /* ATOM */;
    }
    get label() {
        return IntervalSet_1.IntervalSet.of(this._label);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this._label === symbol;
    }
    toString() {
        return String(this.label);
    }
};
__decorate([
    Decorators_1.Override
], AtomTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], AtomTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], AtomTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], AtomTransition.prototype, "toString", null);
AtomTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], AtomTransition);
exports.AtomTransition = AtomTransition;

},{"../Decorators":13,"../misc/IntervalSet":120,"./Transition":102}],52:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:27.7669801-07:00
const ATNStateType_1 = require("./ATNStateType");
const BlockStartState_1 = require("./BlockStartState");
const Decorators_1 = require("../Decorators");
/**
 *
 * @author Sam Harwell
 */
class BasicBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], BasicBlockStartState.prototype, "stateType", null);
exports.BasicBlockStartState = BasicBlockStartState;

},{"../Decorators":13,"./ATNStateType":47,"./BlockStartState":55}],53:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:27.8389930-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
/**
 *
 * @author Sam Harwell
 */
class BasicState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BASIC;
    }
}
__decorate([
    Decorators_1.Override
], BasicState.prototype, "stateType", null);
exports.BasicState = BasicState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],54:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:27.9125304-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
/** Terminal node of a simple `(a|b|c)` block. */
class BlockEndState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BLOCK_END;
    }
}
__decorate([
    Decorators_1.Override
], BlockEndState.prototype, "stateType", null);
exports.BlockEndState = BlockEndState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],55:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const DecisionState_1 = require("./DecisionState");
/**  The start of a regular `(...)` block. */
class BlockStartState extends DecisionState_1.DecisionState {
}
exports.BlockStartState = BlockStartState;

},{"./DecisionState":60}],56:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const Utils = require("../misc/Utils");
/**
 * This class stores information about a configuration conflict.
 *
 * @author Sam Harwell
 */
class ConflictInfo {
    constructor(conflictedAlts, exact) {
        this._conflictedAlts = conflictedAlts;
        this.exact = exact;
    }
    /**
     * Gets the set of conflicting alternatives for the configuration set.
     */
    get conflictedAlts() {
        return this._conflictedAlts;
    }
    /**
     * Gets whether or not the configuration conflict is an exact conflict.
     * An exact conflict occurs when the prediction algorithm determines that
     * the represented alternatives for a particular configuration set cannot be
     * further reduced by consuming additional input. After reaching an exact
     * conflict during an SLL prediction, only switch to full-context prediction
     * could reduce the set of viable alternatives. In LL prediction, an exact
     * conflict indicates a true ambiguity in the input.
     *
     * For the {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} prediction mode,
     * accept states are conflicting but not exact are treated as non-accept
     * states.
     */
    get isExact() {
        return this.exact;
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof ConflictInfo)) {
            return false;
        }
        return this.isExact === obj.isExact
            && Utils.equals(this.conflictedAlts, obj.conflictedAlts);
    }
    hashCode() {
        return this.conflictedAlts.hashCode();
    }
}
__decorate([
    Decorators_1.Override
], ConflictInfo.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ConflictInfo.prototype, "hashCode", null);
exports.ConflictInfo = ConflictInfo;

},{"../Decorators":13,"../misc/Utils":126}],57:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:28.1575933-07:00
const DecisionEventInfo_1 = require("./DecisionEventInfo");
const Decorators_1 = require("../Decorators");
/**
 * This class represents profiling event information for a context sensitivity.
 * Context sensitivities are decisions where a particular input resulted in an
 * SLL conflict, but LL prediction produced a single unique alternative.
 *
 * In some cases, the unique alternative identified by LL prediction is not
 * equal to the minimum represented alternative in the conflicting SLL
 * configuration set. Grammars and inputs which result in this scenario are
 * unable to use {@link PredictionMode#SLL}, which in turn means they cannot use
 * the two-stage parsing strategy to improve parsing performance for that
 * input.
 *
 * @see ParserATNSimulator#reportContextSensitivity
 * @see ParserErrorListener#reportContextSensitivity
 *
 * @since 4.3
 */
let ContextSensitivityInfo = class ContextSensitivityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link ContextSensitivityInfo} class
     * with the specified detailed context sensitivity information.
     *
     * @param decision The decision number
     * @param state The final simulator state containing the unique
     * alternative identified by full-context prediction
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the context sensitivity was
     * identified during full-context prediction
     */
    constructor(decision, state, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, true);
    }
};
ContextSensitivityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ContextSensitivityInfo);
exports.ContextSensitivityInfo = ContextSensitivityInfo;

},{"../Decorators":13,"./DecisionEventInfo":58}],58:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00
const Decorators_1 = require("../Decorators");
/**
 * This is the base class for gathering detailed information about prediction
 * events which occur during parsing.
 *
 * Note that we could record the parser call stack at the time this event
 * occurred but in the presence of left recursive rules, the stack is kind of
 * meaningless. It's better to look at the individual configurations for their
 * individual stacks. Of course that is a {@link PredictionContext} object
 * not a parse tree node and so it does not have information about the extent
 * (start...stop) of the various subtrees. Examining the stack tops of all
 * configurations provide the return states for the rule invocations.
 * From there you can get the enclosing rule.
 *
 * @since 4.3
 */
let DecisionEventInfo = class DecisionEventInfo {
    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {
        this.decision = decision;
        this.fullCtx = fullCtx;
        this.stopIndex = stopIndex;
        this.input = input;
        this.startIndex = startIndex;
        this.state = state;
    }
};
__decorate([
    Decorators_1.NotNull
], DecisionEventInfo.prototype, "input", void 0);
DecisionEventInfo = __decorate([
    __param(2, Decorators_1.NotNull)
], DecisionEventInfo);
exports.DecisionEventInfo = DecisionEventInfo;

},{"../Decorators":13}],59:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
/**
 * This class contains profiling gathered for a particular decision.
 *
 * Parsing performance in ANTLR 4 is heavily influenced by both static factors
 * (e.g. the form of the rules in the grammar) and dynamic factors (e.g. the
 * choice of input and the state of the DFA cache at the time profiling
 * operations are started). For best results, gather and use aggregate
 * statistics from a large sample of inputs representing the inputs expected in
 * production before using the results to make changes in the grammar.
 *
 * @since 4.3
 */
class DecisionInfo {
    /**
     * Constructs a new instance of the {@link DecisionInfo} class to contain
     * statistics for a particular decision.
     *
     * @param decision The decision number
     */
    constructor(decision) {
        /**
         * The total number of times {@link ParserATNSimulator#adaptivePredict} was
         * invoked for this decision.
         */
        this.invocations = 0;
        /**
         * The total time spent in {@link ParserATNSimulator#adaptivePredict} for
         * this decision, in nanoseconds.
         *
         * The value of this field contains the sum of differential results obtained
         * by {@link System#nanoTime()}, and is not adjusted to compensate for JIT
         * and/or garbage collection overhead. For best accuracy, use a modern JVM
         * implementation that provides precise results from
         * {@link System#nanoTime()}, and perform profiling in a separate process
         * which is warmed up by parsing the input prior to profiling. If desired,
         * call {@link ATNSimulator#clearDFA} to reset the DFA cache to its initial
         * state before starting the profiling measurement pass.
         */
        this.timeInPrediction = 0;
        /**
         * The sum of the lookahead required for SLL prediction for this decision.
         * Note that SLL prediction is used before LL prediction for performance
         * reasons even when {@link PredictionMode#LL} or
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} is used.
         */
        this.SLL_TotalLook = 0;
        /**
         * Gets the minimum lookahead required for any single SLL prediction to
         * complete for this decision, by reaching a unique prediction, reaching an
         * SLL conflict state, or encountering a syntax error.
         */
        this.SLL_MinLook = 0;
        /**
         * Gets the maximum lookahead required for any single SLL prediction to
         * complete for this decision, by reaching a unique prediction, reaching an
         * SLL conflict state, or encountering a syntax error.
         */
        this.SLL_MaxLook = 0;
        /**
         * The sum of the lookahead required for LL prediction for this decision.
         * Note that LL prediction is only used when SLL prediction reaches a
         * conflict state.
         */
        this.LL_TotalLook = 0;
        /**
         * Gets the minimum lookahead required for any single LL prediction to
         * complete for this decision. An LL prediction completes when the algorithm
         * reaches a unique prediction, a conflict state (for
         * {@link PredictionMode#LL}, an ambiguity state (for
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
         */
        this.LL_MinLook = 0;
        /**
         * Gets the maximum lookahead required for any single LL prediction to
         * complete for this decision. An LL prediction completes when the algorithm
         * reaches a unique prediction, a conflict state (for
         * {@link PredictionMode#LL}, an ambiguity state (for
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
         */
        this.LL_MaxLook = 0;
        /**
         * A collection of {@link ContextSensitivityInfo} instances describing the
         * context sensitivities encountered during LL prediction for this decision.
         *
         * @see ContextSensitivityInfo
         */
        this.contextSensitivities = [];
        /**
         * A collection of {@link ErrorInfo} instances describing the parse errors
         * identified during calls to {@link ParserATNSimulator#adaptivePredict} for
         * this decision.
         *
         * @see ErrorInfo
         */
        this.errors = [];
        /**
         * A collection of {@link AmbiguityInfo} instances describing the
         * ambiguities encountered during LL prediction for this decision.
         *
         * @see AmbiguityInfo
         */
        this.ambiguities = [];
        /**
         * A collection of {@link PredicateEvalInfo} instances describing the
         * results of evaluating individual predicates during prediction for this
         * decision.
         *
         * @see PredicateEvalInfo
         */
        this.predicateEvals = [];
        /**
         * The total number of ATN transitions required during SLL prediction for
         * this decision. An ATN transition is determined by the number of times the
         * DFA does not contain an edge that is required for prediction, resulting
         * in on-the-fly computation of that edge.
         *
         * If DFA caching of SLL transitions is employed by the implementation, ATN
         * computation may cache the computed edge for efficient lookup during
         * future parsing of this decision. Otherwise, the SLL parsing algorithm
         * will use ATN transitions exclusively.
         *
         * @see #SLL_ATNTransitions
         * @see ParserATNSimulator#computeTargetState
         * @see LexerATNSimulator#computeTargetState
         */
        this.SLL_ATNTransitions = 0;
        /**
         * The total number of DFA transitions required during SLL prediction for
         * this decision.
         *
         * If the ATN simulator implementation does not use DFA caching for SLL
         * transitions, this value will be 0.
         *
         * @see ParserATNSimulator#getExistingTargetState
         * @see LexerATNSimulator#getExistingTargetState
         */
        this.SLL_DFATransitions = 0;
        /**
         * Gets the total number of times SLL prediction completed in a conflict
         * state, resulting in fallback to LL prediction.
         *
         * Note that this value is not related to whether or not
         * {@link PredictionMode#SLL} may be used successfully with a particular
         * grammar. If the ambiguity resolution algorithm applied to the SLL
         * conflicts for this decision produce the same result as LL prediction for
         * this decision, {@link PredictionMode#SLL} would produce the same overall
         * parsing result as {@link PredictionMode#LL}.
         */
        this.LL_Fallback = 0;
        /**
         * The total number of ATN transitions required during LL prediction for
         * this decision. An ATN transition is determined by the number of times the
         * DFA does not contain an edge that is required for prediction, resulting
         * in on-the-fly computation of that edge.
         *
         * If DFA caching of LL transitions is employed by the implementation, ATN
         * computation may cache the computed edge for efficient lookup during
         * future parsing of this decision. Otherwise, the LL parsing algorithm will
         * use ATN transitions exclusively.
         *
         * @see #LL_DFATransitions
         * @see ParserATNSimulator#computeTargetState
         * @see LexerATNSimulator#computeTargetState
         */
        this.LL_ATNTransitions = 0;
        /**
         * The total number of DFA transitions required during LL prediction for
         * this decision.
         *
         * If the ATN simulator implementation does not use DFA caching for LL
         * transitions, this value will be 0.
         *
         * @see ParserATNSimulator#getExistingTargetState
         * @see LexerATNSimulator#getExistingTargetState
         */
        this.LL_DFATransitions = 0;
        this.decision = decision;
    }
    toString() {
        return "{" +
            "decision=" + this.decision +
            ", contextSensitivities=" + this.contextSensitivities.length +
            ", errors=" + this.errors.length +
            ", ambiguities=" + this.ambiguities.length +
            ", SLL_lookahead=" + this.SLL_TotalLook +
            ", SLL_ATNTransitions=" + this.SLL_ATNTransitions +
            ", SLL_DFATransitions=" + this.SLL_DFATransitions +
            ", LL_Fallback=" + this.LL_Fallback +
            ", LL_lookahead=" + this.LL_TotalLook +
            ", LL_ATNTransitions=" + this.LL_ATNTransitions +
            "}";
    }
}
__decorate([
    Decorators_1.Override
], DecisionInfo.prototype, "toString", null);
exports.DecisionInfo = DecisionInfo;

},{"../Decorators":13}],60:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:28.4381103-07:00
const ATNState_1 = require("./ATNState");
class DecisionState extends ATNState_1.ATNState {
    constructor() {
        super(...arguments);
        this.decision = -1;
        this.nonGreedy = false;
        this.sll = false;
    }
}
exports.DecisionState = DecisionState;

},{"./ATNState":46}],61:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
let EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {
    constructor(target, outermostPrecedenceReturn = -1) {
        super(target);
        this._outermostPrecedenceReturn = outermostPrecedenceReturn;
    }
    /**
     * @returns the rule index of a precedence rule for which this transition is
     * returning from, where the precedence value is 0; otherwise, -1.
     *
     * @see ATNConfig.isPrecedenceFilterSuppressed
     * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)
     * @since 4.4.1
     */
    get outermostPrecedenceReturn() {
        return this._outermostPrecedenceReturn;
    }
    get serializationType() {
        return 1 /* EPSILON */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    toString() {
        return "epsilon";
    }
};
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], EpsilonTransition.prototype, "toString", null);
EpsilonTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], EpsilonTransition);
exports.EpsilonTransition = EpsilonTransition;

},{"../Decorators":13,"./Transition":102}],62:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:28.7213647-07:00
const DecisionEventInfo_1 = require("./DecisionEventInfo");
const Decorators_1 = require("../Decorators");
/**
 * This class represents profiling event information for a syntax error
 * identified during prediction. Syntax errors occur when the prediction
 * algorithm is unable to identify an alternative which would lead to a
 * successful parse.
 *
 * @see Parser#notifyErrorListeners(Token, String, RecognitionException)
 * @see ANTLRErrorListener#syntaxError
 *
 * @since 4.3
 */
let ErrorInfo = class ErrorInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link ErrorInfo} class with the
     * specified detailed syntax error information.
     *
     * @param decision The decision number
     * @param state The final simulator state reached during prediction
     * prior to reaching the {@link ATNSimulator#ERROR} state
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the syntax error was identified
     */
    constructor(decision, state, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
    }
};
ErrorInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ErrorInfo);
exports.ErrorInfo = ErrorInfo;

},{"../Decorators":13,"./DecisionEventInfo":58}],63:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNStateType_1 = require("./ATNStateType");
const BasicState_1 = require("./BasicState");
const Decorators_1 = require("../Decorators");
/**
 *
 * @author Sam Harwell
 */
class InvalidState extends BasicState_1.BasicState {
    get stateType() {
        return ATNStateType_1.ATNStateType.INVALID_TYPE;
    }
}
__decorate([
    Decorators_1.Override
], InvalidState.prototype, "stateType", null);
exports.InvalidState = InvalidState;

},{"../Decorators":13,"./ATNStateType":47,"./BasicState":53}],64:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:30.4445360-07:00
const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const ATNConfig_1 = require("./ATNConfig");
const BitSet_1 = require("../misc/BitSet");
const IntervalSet_1 = require("../misc/IntervalSet");
const Decorators_1 = require("../Decorators");
const NotSetTransition_1 = require("./NotSetTransition");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const PredictionContext_1 = require("./PredictionContext");
const RuleStopState_1 = require("./RuleStopState");
const RuleTransition_1 = require("./RuleTransition");
const Token_1 = require("../Token");
const WildcardTransition_1 = require("./WildcardTransition");
let LL1Analyzer = class LL1Analyzer {
    constructor(atn) { this.atn = atn; }
    /**
     * Calculates the SLL(1) expected lookahead set for each outgoing transition
     * of an {@link ATNState}. The returned array has one element for each
     * outgoing transition in `s`. If the closure from transition
     * *i* leads to a semantic predicate before matching a symbol, the
     * element at index *i* of the result will be `undefined`.
     *
     * @param s the ATN state
     * @returns the expected symbols for each outgoing transition of `s`.
     */
    getDecisionLookahead(s) {
        //		System.out.println("LOOK("+s.stateNumber+")");
        if (s == null) {
            return undefined;
        }
        let look = new Array(s.numberOfTransitions);
        for (let alt = 0; alt < s.numberOfTransitions; alt++) {
            let current = new IntervalSet_1.IntervalSet();
            look[alt] = current;
            let lookBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            let seeThruPreds = false; // fail to get lookahead upon pred
            this._LOOK(s.transition(alt).target, undefined, PredictionContext_1.PredictionContext.EMPTY_LOCAL, current, lookBusy, new BitSet_1.BitSet(), seeThruPreds, false);
            // Wipe out lookahead for this alternative if we found nothing
            // or we had a predicate when we !seeThruPreds
            if (current.size === 0 || current.contains(LL1Analyzer.HIT_PRED)) {
                current = undefined;
                look[alt] = current;
            }
        }
        return look;
    }
    LOOK(s, ctx, stopState) {
        if (stopState === undefined) {
            if (s.atn == null) {
                throw new Error("Illegal state");
            }
            stopState = s.atn.ruleToStopState[s.ruleIndex];
        }
        else if (stopState === null) {
            // This is an explicit request to pass undefined as the stopState to _LOOK. Used to distinguish an overload
            // from the method which simply omits the stopState parameter.
            stopState = undefined;
        }
        let r = new IntervalSet_1.IntervalSet();
        let seeThruPreds = true; // ignore preds; get all lookahead
        let addEOF = true;
        this._LOOK(s, stopState, ctx, r, new Array2DHashSet_1.Array2DHashSet(), new BitSet_1.BitSet(), seeThruPreds, addEOF);
        return r;
    }
    /**
     * Compute set of tokens that can follow `s` in the ATN in the
     * specified `ctx`.
     * <p/>
     * If `ctx` is {@link PredictionContext#EMPTY_LOCAL} and
     * `stopState` or the end of the rule containing `s` is reached,
     * {@link Token#EPSILON} is added to the result set. If `ctx` is not
     * {@link PredictionContext#EMPTY_LOCAL} and `addEOF` is `true`
     * and `stopState` or the end of the outermost rule is reached,
     * {@link Token#EOF} is added to the result set.
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@link PredictionContext#EMPTY_LOCAL} if
     * the outer context should not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * `new HashSet<ATNConfig>` for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * `new BitSet()` for this argument.
     * @param seeThruPreds `true` to true semantic predicates as
     * implicitly `true` and "see through them", otherwise `false`
     * to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token#EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if `ctx`
     * is {@link PredictionContext#EMPTY_LOCAL}.
     */
    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
        //		System.out.println("_LOOK("+s.stateNumber+", ctx="+ctx);
        let c = ATNConfig_1.ATNConfig.create(s, 0, ctx);
        if (!lookBusy.add(c)) {
            return;
        }
        if (s === stopState) {
            if (PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                look.add(Token_1.Token.EPSILON);
                return;
            }
            else if (ctx.isEmpty) {
                if (addEOF) {
                    look.add(Token_1.Token.EOF);
                }
                return;
            }
        }
        if (s instanceof RuleStopState_1.RuleStopState) {
            if (ctx.isEmpty && !PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                if (addEOF) {
                    look.add(Token_1.Token.EOF);
                }
                return;
            }
            let removed = calledRuleStack.get(s.ruleIndex);
            try {
                calledRuleStack.clear(s.ruleIndex);
                for (let i = 0; i < ctx.size; i++) {
                    if (ctx.getReturnState(i) === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        continue;
                    }
                    let returnState = this.atn.states[ctx.getReturnState(i)];
                    //					System.out.println("popping back to "+retState);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
            }
            finally {
                if (removed) {
                    calledRuleStack.set(s.ruleIndex);
                }
            }
        }
        let n = s.numberOfTransitions;
        for (let i = 0; i < n; i++) {
            let t = s.transition(i);
            if (t instanceof RuleTransition_1.RuleTransition) {
                if (calledRuleStack.get(t.ruleIndex)) {
                    continue;
                }
                let newContext = ctx.getChild(t.followState.stateNumber);
                try {
                    calledRuleStack.set(t.ruleIndex);
                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
                finally {
                    calledRuleStack.clear(t.ruleIndex);
                }
            }
            else if (t instanceof AbstractPredicateTransition_1.AbstractPredicateTransition) {
                if (seeThruPreds) {
                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
                else {
                    look.add(LL1Analyzer.HIT_PRED);
                }
            }
            else if (t.isEpsilon) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            }
            else if (t instanceof WildcardTransition_1.WildcardTransition) {
                look.addAll(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
            }
            else {
                //				System.out.println("adding "+ t);
                let set = t.label;
                if (set != null) {
                    if (t instanceof NotSetTransition_1.NotSetTransition) {
                        set = set.complement(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                    }
                    look.addAll(set);
                }
            }
        }
    }
};
/** Special value added to the lookahead sets to indicate that we hit
 *  a predicate during analysis if `seeThruPreds==false`.
 */
LL1Analyzer.HIT_PRED = Token_1.Token.INVALID_TYPE;
__decorate([
    Decorators_1.NotNull
], LL1Analyzer.prototype, "atn", void 0);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LL1Analyzer.prototype, "LOOK", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], LL1Analyzer.prototype, "_LOOK", null);
LL1Analyzer = __decorate([
    __param(0, Decorators_1.NotNull)
], LL1Analyzer);
exports.LL1Analyzer = LL1Analyzer;

},{"../Decorators":13,"../Token":37,"../misc/Array2DHashSet":111,"../misc/BitSet":114,"../misc/IntervalSet":120,"../misc/ObjectEqualityComparator":123,"./ATNConfig":41,"./AbstractPredicateTransition":48,"./NotSetTransition":78,"./PredictionContext":87,"./RuleStopState":93,"./RuleTransition":94,"./WildcardTransition":103}],65:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:29.1083066-07:00
const AcceptStateInfo_1 = require("../dfa/AcceptStateInfo");
const ATN_1 = require("./ATN");
const ATNConfig_1 = require("./ATNConfig");
const ATNConfigSet_1 = require("./ATNConfigSet");
const ATNSimulator_1 = require("./ATNSimulator");
const DFAState_1 = require("../dfa/DFAState");
const Interval_1 = require("../misc/Interval");
const IntStream_1 = require("../IntStream");
const Lexer_1 = require("../Lexer");
const LexerActionExecutor_1 = require("./LexerActionExecutor");
const LexerNoViableAltException_1 = require("../LexerNoViableAltException");
const Decorators_1 = require("../Decorators");
const OrderedATNConfigSet_1 = require("./OrderedATNConfigSet");
const PredictionContext_1 = require("./PredictionContext");
const RuleStopState_1 = require("./RuleStopState");
const Token_1 = require("../Token");
const assert = require("assert");
/** "dup" of ParserInterpreter */
let LexerATNSimulator = class LexerATNSimulator extends ATNSimulator_1.ATNSimulator {
    constructor(atn, recog) {
        super(atn);
        this.optimize_tail_calls = true;
        /** The current token's starting index into the character stream.
         *  Shared across DFA to ATN simulation in case the ATN fails and the
         *  DFA did not have a previous accept state. In this case, we use the
         *  ATN-generated exception object.
         */
        this.startIndex = -1;
        /** line number 1..n within the input */
        this._line = 1;
        /** The index of the character relative to the beginning of the line 0..n-1 */
        this._charPositionInLine = 0;
        this.mode = Lexer_1.Lexer.DEFAULT_MODE;
        /** Used during DFA/ATN exec to record the most recent accept configuration info */
        this.prevAccept = new LexerATNSimulator.SimState();
        this.recog = recog;
    }
    copyState(simulator) {
        this._charPositionInLine = simulator.charPositionInLine;
        this._line = simulator._line;
        this.mode = simulator.mode;
        this.startIndex = simulator.startIndex;
    }
    match(input, mode) {
        LexerATNSimulator.match_calls++;
        this.mode = mode;
        let mark = input.mark();
        try {
            this.startIndex = input.index;
            this.prevAccept.reset();
            let s0 = this.atn.modeToDFA[mode].s0;
            if (s0 == null) {
                return this.matchATN(input);
            }
            else {
                return this.execATN(input, s0);
            }
        }
        finally {
            input.release(mark);
        }
    }
    reset() {
        this.prevAccept.reset();
        this.startIndex = -1;
        this._line = 1;
        this._charPositionInLine = 0;
        this.mode = Lexer_1.Lexer.DEFAULT_MODE;
    }
    matchATN(input) {
        let startState = this.atn.modeToStartState[this.mode];
        if (LexerATNSimulator.debug) {
            console.log(`matchATN mode ${this.mode} start: ${startState}`);
        }
        let old_mode = this.mode;
        let s0_closure = this.computeStartState(input, startState);
        let suppressEdge = s0_closure.hasSemanticContext;
        if (suppressEdge) {
            s0_closure.hasSemanticContext = false;
        }
        let next = this.addDFAState(s0_closure);
        if (!suppressEdge) {
            let dfa = this.atn.modeToDFA[this.mode];
            if (!dfa.s0) {
                dfa.s0 = next;
            }
            else {
                next = dfa.s0;
            }
        }
        let predict = this.execATN(input, next);
        if (LexerATNSimulator.debug) {
            console.log(`DFA after matchATN: ${this.atn.modeToDFA[old_mode].toLexerString()}`);
        }
        return predict;
    }
    execATN(input, ds0) {
        // console.log("enter exec index "+input.index+" from "+ds0.configs);
        if (LexerATNSimulator.debug) {
            console.log(`start state closure=${ds0.configs}`);
        }
        if (ds0.isAcceptState) {
            // allow zero-length tokens
            this.captureSimState(this.prevAccept, input, ds0);
        }
        let t = input.LA(1);
        // @NotNull
        let s = ds0; // s is current/from DFA state
        while (true) { // while more work
            if (LexerATNSimulator.debug) {
                console.log(`execATN loop starting closure: ${s.configs}`);
            }
            // As we move src->trg, src->trg, we keep track of the previous trg to
            // avoid looking up the DFA state again, which is expensive.
            // If the previous target was already part of the DFA, we might
            // be able to avoid doing a reach operation upon t. If s!=null,
            // it means that semantic predicates didn't prevent us from
            // creating a DFA state. Once we know s!=null, we check to see if
            // the DFA state has an edge already for t. If so, we can just reuse
            // it's configuration set; there's no point in re-computing it.
            // This is kind of like doing DFA simulation within the ATN
            // simulation because DFA simulation is really just a way to avoid
            // computing reach/closure sets. Technically, once we know that
            // we have a previously added DFA state, we could jump over to
            // the DFA simulator. But, that would mean popping back and forth
            // a lot and making things more complicated algorithmically.
            // This optimization makes a lot of sense for loops within DFA.
            // A character will take us back to an existing DFA state
            // that already has lots of edges out of it. e.g., .* in comments.
            let target = this.getExistingTargetState(s, t);
            if (target == null) {
                target = this.computeTargetState(input, s, t);
            }
            if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                break;
            }
            // If this is a consumable input element, make sure to consume before
            // capturing the accept state so the input index, line, and char
            // position accurately reflect the state of the interpreter at the
            // end of the token.
            if (t !== IntStream_1.IntStream.EOF) {
                this.consume(input);
            }
            if (target.isAcceptState) {
                this.captureSimState(this.prevAccept, input, target);
                if (t === IntStream_1.IntStream.EOF) {
                    break;
                }
            }
            t = input.LA(1);
            s = target; // flip; current DFA target becomes new src/from state
        }
        return this.failOrAccept(this.prevAccept, input, s.configs, t);
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns `undefined`.
     *
     * @param s The current DFA state
     * @param t The next input symbol
     * @returns The existing target DFA state for the given input symbol
     * `t`, or `undefined` if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(s, t) {
        let target = s.getTarget(t);
        if (LexerATNSimulator.debug && target != null) {
            console.log("reuse state " + s.stateNumber +
                " edge to " + target.stateNumber);
        }
        return target;
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param input The input stream
     * @param s The current DFA state
     * @param t The next input symbol
     *
     * @returns The computed target DFA state for the given input symbol
     * `t`. If `t` does not lead to a valid DFA state, this method
     * returns {@link #ERROR}.
     */
    computeTargetState(input, s, t) {
        let reach = new OrderedATNConfigSet_1.OrderedATNConfigSet();
        // if we don't find an existing DFA state
        // Fill reach starting from closure, following t transitions
        this.getReachableConfigSet(input, s.configs, reach, t);
        if (reach.isEmpty) { // we got nowhere on t from s
            if (!reach.hasSemanticContext) {
                // we got nowhere on t, don't throw out this knowledge; it'd
                // cause a failover from DFA later.
                this.addDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
            }
            // stop when we can't match any more char
            return ATNSimulator_1.ATNSimulator.ERROR;
        }
        // Add an edge from s to target DFA found/created for reach
        return this.addDFAEdge(s, t, reach);
    }
    failOrAccept(prevAccept, input, reach, t) {
        if (prevAccept.dfaState != null) {
            let lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
            this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
            return prevAccept.dfaState.prediction;
        }
        else {
            // if no accept and EOF is first char, return EOF
            if (t === IntStream_1.IntStream.EOF && input.index === this.startIndex) {
                return Token_1.Token.EOF;
            }
            throw new LexerNoViableAltException_1.LexerNoViableAltException(this.recog, input, this.startIndex, reach);
        }
    }
    /** Given a starting configuration set, figure out all ATN configurations
     *  we can reach upon input `t`. Parameter `reach` is a return
     *  parameter.
     */
    getReachableConfigSet(input, closure, reach, t) {
        // this is used to skip processing for configs which have a lower priority
        // than a config that already reached an accept state for the same rule
        let skipAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        for (let c of closure) {
            let currentAltReachedAcceptState = c.alt === skipAlt;
            if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision) {
                continue;
            }
            if (LexerATNSimulator.debug) {
                console.log(`testing ${this.getTokenName(t)} at ${c.toString(this.recog, true)}`);
            }
            let n = c.state.numberOfOptimizedTransitions;
            for (let ti = 0; ti < n; ti++) { // for each optimized transition
                let trans = c.state.getOptimizedTransition(ti);
                let target = this.getReachableTarget(trans, t);
                if (target != null) {
                    let lexerActionExecutor = c.lexerActionExecutor;
                    let config;
                    if (lexerActionExecutor != null) {
                        lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
                        config = c.transform(target, true, lexerActionExecutor);
                    }
                    else {
                        assert(c.lexerActionExecutor == null);
                        config = c.transform(target, true);
                    }
                    let treatEofAsEpsilon = t === IntStream_1.IntStream.EOF;
                    if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
                        // any remaining configs for this alt have a lower priority than
                        // the one that just reached an accept state.
                        skipAlt = c.alt;
                        break;
                    }
                }
            }
        }
    }
    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
        if (LexerATNSimulator.debug) {
            console.log(`ACTION ${lexerActionExecutor}`);
        }
        // seek to after last char in token
        input.seek(index);
        this._line = line;
        this._charPositionInLine = charPos;
        if (lexerActionExecutor != null && this.recog != null) {
            lexerActionExecutor.execute(this.recog, input, startIndex);
        }
    }
    getReachableTarget(trans, t) {
        if (trans.matches(t, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
            return trans.target;
        }
        return undefined;
    }
    computeStartState(input, p) {
        let initialContext = PredictionContext_1.PredictionContext.EMPTY_FULL;
        let configs = new OrderedATNConfigSet_1.OrderedATNConfigSet();
        for (let i = 0; i < p.numberOfTransitions; i++) {
            let target = p.transition(i).target;
            let c = ATNConfig_1.ATNConfig.create(target, i + 1, initialContext);
            this.closure(input, c, configs, false, false, false);
        }
        return configs;
    }
    /**
     * Since the alternatives within any lexer decision are ordered by
     * preference, this method stops pursuing the closure as soon as an accept
     * state is reached. After the first accept state is reached by depth-first
     * search from `config`, all other (potentially reachable) states for
     * this rule would have a lower priority.
     *
     * @returns `true` if an accept state is reached, otherwise
     * `false`.
     */
    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
        if (LexerATNSimulator.debug) {
            console.log("closure(" + config.toString(this.recog, true) + ")");
        }
        if (config.state instanceof RuleStopState_1.RuleStopState) {
            if (LexerATNSimulator.debug) {
                if (this.recog != null) {
                    console.log(`closure at ${this.recog.ruleNames[config.state.ruleIndex]} rule stop ${config}`);
                }
                else {
                    console.log(`closure at rule stop ${config}`);
                }
            }
            let context = config.context;
            if (context.isEmpty) {
                configs.add(config);
                return true;
            }
            else if (context.hasEmpty) {
                configs.add(config.transform(config.state, true, PredictionContext_1.PredictionContext.EMPTY_FULL));
                currentAltReachedAcceptState = true;
            }
            for (let i = 0; i < context.size; i++) {
                let returnStateNumber = context.getReturnState(i);
                if (returnStateNumber === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    continue;
                }
                let newContext = context.getParent(i); // "pop" return state
                let returnState = this.atn.states[returnStateNumber];
                let c = config.transform(returnState, false, newContext);
                currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
            return currentAltReachedAcceptState;
        }
        // optimization
        if (!config.state.onlyHasEpsilonTransitions) {
            if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision) {
                configs.add(config);
            }
        }
        let p = config.state;
        for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
            let t = p.getOptimizedTransition(i);
            let c = this.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);
            if (c != null) {
                currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
        }
        return currentAltReachedAcceptState;
    }
    // side-effect: can alter configs.hasSemanticContext
    getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon) {
        let c;
        switch (t.serializationType) {
            case 3 /* RULE */:
                let ruleTransition = t;
                if (this.optimize_tail_calls && ruleTransition.optimizedTailCall && !config.context.hasEmpty) {
                    c = config.transform(t.target, true);
                }
                else {
                    let newContext = config.context.getChild(ruleTransition.followState.stateNumber);
                    c = config.transform(t.target, true, newContext);
                }
                break;
            case 10 /* PRECEDENCE */:
                throw new Error("Precedence predicates are not supported in lexers.");
            case 4 /* PREDICATE */:
                /*  Track traversing semantic predicates. If we traverse,
                    we cannot add a DFA state for this "reach" computation
                    because the DFA would not test the predicate again in the
                    future. Rather than creating collections of semantic predicates
                    like v3 and testing them on prediction, v4 will test them on the
                    fly all the time using the ATN not the DFA. This is slower but
                    semantically it's not used that often. One of the key elements to
                    this predicate mechanism is not adding DFA states that see
                    predicates immediately afterwards in the ATN. For example,
    
                    a : ID {p1}? | ID {p2}? ;
    
                    should create the start state for rule 'a' (to save start state
                    competition), but should not create target of ID state. The
                    collection of ATN states the following ID references includes
                    states reached by traversing predicates. Since this is when we
                    test them, we cannot cash the DFA state target of ID.
                */
                let pt = t;
                if (LexerATNSimulator.debug) {
                    console.log("EVAL rule " + pt.ruleIndex + ":" + pt.predIndex);
                }
                configs.hasSemanticContext = true;
                if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {
                    c = config.transform(t.target, true);
                }
                else {
                    c = undefined;
                }
                break;
            case 6 /* ACTION */:
                if (config.context.hasEmpty) {
                    // execute actions anywhere in the start rule for a token.
                    //
                    // TODO: if the entry rule is invoked recursively, some
                    // actions may be executed during the recursive call. The
                    // problem can appear when hasEmpty is true but
                    // isEmpty is false. In this case, the config needs to be
                    // split into two contexts - one with just the empty path
                    // and another with everything but the empty path.
                    // Unfortunately, the current algorithm does not allow
                    // getEpsilonTarget to return two configurations, so
                    // additional modifications are needed before we can support
                    // the split operation.
                    let lexerActionExecutor = LexerActionExecutor_1.LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[t.actionIndex]);
                    c = config.transform(t.target, true, lexerActionExecutor);
                    break;
                }
                else {
                    // ignore actions in referenced rules
                    c = config.transform(t.target, true);
                    break;
                }
            case 1 /* EPSILON */:
                c = config.transform(t.target, true);
                break;
            case 5 /* ATOM */:
            case 2 /* RANGE */:
            case 7 /* SET */:
                if (treatEofAsEpsilon) {
                    if (t.matches(IntStream_1.IntStream.EOF, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
                        c = config.transform(t.target, false);
                        break;
                    }
                }
                c = undefined;
                break;
            default:
                c = undefined;
                break;
        }
        return c;
    }
    /**
     * Evaluate a predicate specified in the lexer.
     *
     * If `speculative` is `true`, this method was called before
     * {@link #consume} for the matched character. This method should call
     * {@link #consume} before evaluating the predicate to ensure position
     * sensitive values, including {@link Lexer#getText}, {@link Lexer#getLine},
     * and {@link Lexer#getCharPositionInLine}, properly reflect the current
     * lexer state. This method should restore `input` and the simulator
     * to the original state before returning (i.e. undo the actions made by the
     * call to {@link #consume}.
     *
     * @param input The input stream.
     * @param ruleIndex The rule containing the predicate.
     * @param predIndex The index of the predicate within the rule.
     * @param speculative `true` if the current index in `input` is
     * one character before the predicate's location.
     *
     * @returns `true` if the specified predicate evaluates to
     * `true`.
     */
    evaluatePredicate(input, ruleIndex, predIndex, speculative) {
        // assume true if no recognizer was provided
        if (this.recog == null) {
            return true;
        }
        if (!speculative) {
            return this.recog.sempred(undefined, ruleIndex, predIndex);
        }
        let savedCharPositionInLine = this._charPositionInLine;
        let savedLine = this._line;
        let index = input.index;
        let marker = input.mark();
        try {
            this.consume(input);
            return this.recog.sempred(undefined, ruleIndex, predIndex);
        }
        finally {
            this._charPositionInLine = savedCharPositionInLine;
            this._line = savedLine;
            input.seek(index);
            input.release(marker);
        }
    }
    captureSimState(settings, input, dfaState) {
        settings.index = input.index;
        settings.line = this._line;
        settings.charPos = this._charPositionInLine;
        settings.dfaState = dfaState;
    }
    addDFAEdge(p, t, q) {
        if (q instanceof ATNConfigSet_1.ATNConfigSet) {
            /* leading to this call, ATNConfigSet.hasSemanticContext is used as a
            * marker indicating dynamic predicate evaluation makes this edge
            * dependent on the specific input sequence, so the static edge in the
            * DFA should be omitted. The target DFAState is still created since
            * execATN has the ability to resynchronize with the DFA state cache
            * following the predicate evaluation step.
            *
            * TJP notes: next time through the DFA, we see a pred again and eval.
            * If that gets us to a previously created (but dangling) DFA
            * state, we can continue in pure DFA mode from there.
            */
            let suppressEdge = q.hasSemanticContext;
            if (suppressEdge) {
                q.hasSemanticContext = false;
            }
            // @NotNull
            let to = this.addDFAState(q);
            if (suppressEdge) {
                return to;
            }
            this.addDFAEdge(p, t, to);
            return to;
        }
        else {
            if (LexerATNSimulator.debug) {
                console.log("EDGE " + p + " -> " + q + " upon " + String.fromCharCode(t));
            }
            if (p != null) {
                p.setTarget(t, q);
            }
        }
    }
    /** Add a new DFA state if there isn't one with this set of
     * 	configurations already. This method also detects the first
     * 	configuration containing an ATN rule stop state. Later, when
     * 	traversing the DFA, we will know which rule to accept.
     */
    addDFAState(configs) {
        /* the lexer evaluates predicates on-the-fly; by this point configs
         * should not contain any configurations with unevaluated predicates.
         */
        assert(!configs.hasSemanticContext);
        let proposed = new DFAState_1.DFAState(configs);
        let existing = this.atn.modeToDFA[this.mode].states.get(proposed);
        if (existing != null) {
            return existing;
        }
        configs.optimizeConfigs(this);
        let newState = new DFAState_1.DFAState(configs.clone(true));
        let firstConfigWithRuleStopState;
        for (let c of configs) {
            if (c.state instanceof RuleStopState_1.RuleStopState) {
                firstConfigWithRuleStopState = c;
                break;
            }
        }
        if (firstConfigWithRuleStopState != null) {
            let prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
            let lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
            newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(prediction, lexerActionExecutor);
        }
        return this.atn.modeToDFA[this.mode].addState(newState);
    }
    getDFA(mode) {
        return this.atn.modeToDFA[mode];
    }
    /** Get the text matched so far for the current token.
     */
    getText(input) {
        // index is first lookahead char, don't include.
        return input.getText(Interval_1.Interval.of(this.startIndex, input.index - 1));
    }
    get line() {
        return this._line;
    }
    set line(line) {
        this._line = line;
    }
    get charPositionInLine() {
        return this._charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
        this._charPositionInLine = charPositionInLine;
    }
    consume(input) {
        let curChar = input.LA(1);
        if (curChar === "\n".charCodeAt(0)) {
            this._line++;
            this._charPositionInLine = 0;
        }
        else {
            this._charPositionInLine++;
        }
        input.consume();
    }
    getTokenName(t) {
        if (t === -1) {
            return "EOF";
        }
        //if ( atn.g!=null ) return atn.g.getTokenDisplayName(t);
        return "'" + String.fromCharCode(t) + "'";
    }
};
LexerATNSimulator.match_calls = 0;
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "prevAccept", void 0);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "copyState", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "match", null);
__decorate([
    Decorators_1.Override
], LexerATNSimulator.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "matchATN", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "execATN", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "computeTargetState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getReachableConfigSet", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "accept", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "computeStartState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "closure", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getEpsilonTarget", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "evaluatePredicate", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "captureSimState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "addDFAState", null);
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "getDFA", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getText", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "consume", null);
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "getTokenName", null);
LexerATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator);
exports.LexerATNSimulator = LexerATNSimulator;
(function (LexerATNSimulator) {
    LexerATNSimulator.debug = false;
    LexerATNSimulator.dfa_debug = false;
    /** When we hit an accept state in either the DFA or the ATN, we
     *  have to notify the character stream to start buffering characters
     *  via {@link IntStream#mark} and record the current state. The current sim state
     *  includes the current index into the input, the current line,
     *  and current character position in that line. Note that the Lexer is
     *  tracking the starting line and characterization of the token. These
     *  variables track the "state" of the simulator when it hits an accept state.
     *
     *  We track these variables separately for the DFA and ATN simulation
     *  because the DFA simulation often has to fail over to the ATN
     *  simulation. If the ATN simulation fails, we need the DFA to fall
     *  back to its previously accepted state, if any. If the ATN succeeds,
     *  then the ATN does the accept and the DFA simulator that invoked it
     *  can simply return the predicted token type.
     */
    class SimState {
        constructor() {
            this.index = -1;
            this.line = 0;
            this.charPos = -1;
        }
        reset() {
            this.index = -1;
            this.line = 0;
            this.charPos = -1;
            this.dfaState = undefined;
        }
    }
    LexerATNSimulator.SimState = SimState;
})(LexerATNSimulator = exports.LexerATNSimulator || (exports.LexerATNSimulator = {}));
exports.LexerATNSimulator = LexerATNSimulator;

},{"../Decorators":13,"../IntStream":19,"../Lexer":21,"../LexerNoViableAltException":23,"../Token":37,"../dfa/AcceptStateInfo":104,"../dfa/DFAState":107,"../misc/Interval":119,"./ATN":40,"./ATNConfig":41,"./ATNConfigSet":42,"./ATNSimulator":45,"./LexerActionExecutor":66,"./OrderedATNConfigSet":79,"./PredictionContext":87,"./RuleStopState":93,"assert":153}],66:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:28.8810453-07:00
const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
const LexerIndexedCustomAction_1 = require("./LexerIndexedCustomAction");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Represents an executor for a sequence of lexer actions which traversed during
 * the matching operation of a lexer rule (token).
 *
 * The executor tracks position information for position-dependent lexer actions
 * efficiently, ensuring that actions appearing only at the end of the rule do
 * not cause bloating of the {@link DFA} created for the lexer.
 *
 * @author Sam Harwell
 * @since 4.2
 */
let LexerActionExecutor = class LexerActionExecutor {
    /**
     * Constructs an executor for a sequence of {@link LexerAction} actions.
     * @param lexerActions The lexer actions to execute.
     */
    constructor(lexerActions) {
        this._lexerActions = lexerActions;
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let lexerAction of lexerActions) {
            hash = MurmurHash_1.MurmurHash.update(hash, lexerAction);
        }
        this.cachedHashCode = MurmurHash_1.MurmurHash.finish(hash, lexerActions.length);
    }
    /**
     * Creates a {@link LexerActionExecutor} which executes the actions for
     * the input `lexerActionExecutor` followed by a specified
     * `lexerAction`.
     *
     * @param lexerActionExecutor The executor for actions already traversed by
     * the lexer while matching a token within a particular
     * {@link ATNConfig}. If this is `undefined`, the method behaves as though
     * it were an empty executor.
     * @param lexerAction The lexer action to execute after the actions
     * specified in `lexerActionExecutor`.
     *
     * @returns A {@link LexerActionExecutor} for executing the combine actions
     * of `lexerActionExecutor` and `lexerAction`.
     */
    static append(lexerActionExecutor, lexerAction) {
        if (!lexerActionExecutor) {
            return new LexerActionExecutor([lexerAction]);
        }
        let lexerActions = lexerActionExecutor._lexerActions.slice(0);
        lexerActions.push(lexerAction);
        return new LexerActionExecutor(lexerActions);
    }
    /**
     * Creates a {@link LexerActionExecutor} which encodes the current offset
     * for position-dependent lexer actions.
     *
     * Normally, when the executor encounters lexer actions where
     * {@link LexerAction#isPositionDependent} returns `true`, it calls
     * {@link IntStream#seek} on the input {@link CharStream} to set the input
     * position to the *end* of the current token. This behavior provides
     * for efficient DFA representation of lexer actions which appear at the end
     * of a lexer rule, even when the lexer rule matches a variable number of
     * characters.
     *
     * Prior to traversing a match transition in the ATN, the current offset
     * from the token start index is assigned to all position-dependent lexer
     * actions which have not already been assigned a fixed offset. By storing
     * the offsets relative to the token start index, the DFA representation of
     * lexer actions which appear in the middle of tokens remains efficient due
     * to sharing among tokens of the same length, regardless of their absolute
     * position in the input stream.
     *
     * If the current executor already has offsets assigned to all
     * position-dependent lexer actions, the method returns `this`.
     *
     * @param offset The current offset to assign to all position-dependent
     * lexer actions which do not already have offsets assigned.
     *
     * @returns A {@link LexerActionExecutor} which stores input stream offsets
     * for all position-dependent lexer actions.
     */
    fixOffsetBeforeMatch(offset) {
        let updatedLexerActions;
        for (let i = 0; i < this._lexerActions.length; i++) {
            if (this._lexerActions[i].isPositionDependent && !(this._lexerActions[i] instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction)) {
                if (!updatedLexerActions) {
                    updatedLexerActions = this._lexerActions.slice(0);
                }
                updatedLexerActions[i] = new LexerIndexedCustomAction_1.LexerIndexedCustomAction(offset, this._lexerActions[i]);
            }
        }
        if (!updatedLexerActions) {
            return this;
        }
        return new LexerActionExecutor(updatedLexerActions);
    }
    /**
     * Gets the lexer actions to be executed by this executor.
     * @returns The lexer actions to be executed by this executor.
     */
    get lexerActions() {
        return this._lexerActions;
    }
    /**
     * Execute the actions encapsulated by this executor within the context of a
     * particular {@link Lexer}.
     *
     * This method calls {@link IntStream#seek} to set the position of the
     * `input` {@link CharStream} prior to calling
     * {@link LexerAction#execute} on a position-dependent action. Before the
     * method returns, the input position will be restored to the same position
     * it was in when the method was invoked.
     *
     * @param lexer The lexer instance.
     * @param input The input stream which is the source for the current token.
     * When this method is called, the current {@link IntStream#index} for
     * `input` should be the start of the following token, i.e. 1
     * character past the end of the current token.
     * @param startIndex The token start index. This value may be passed to
     * {@link IntStream#seek} to set the `input` position to the beginning
     * of the token.
     */
    execute(lexer, input, startIndex) {
        let requiresSeek = false;
        let stopIndex = input.index;
        try {
            for (let lexerAction of this._lexerActions) {
                if (lexerAction instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction) {
                    let offset = lexerAction.offset;
                    input.seek(startIndex + offset);
                    lexerAction = lexerAction.action;
                    requiresSeek = (startIndex + offset) !== stopIndex;
                }
                else if (lexerAction.isPositionDependent) {
                    input.seek(stopIndex);
                    requiresSeek = false;
                }
                lexerAction.execute(lexer);
            }
        }
        finally {
            if (requiresSeek) {
                input.seek(stopIndex);
            }
        }
    }
    hashCode() {
        return this.cachedHashCode;
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerActionExecutor)) {
            return false;
        }
        return this.cachedHashCode === obj.cachedHashCode
            && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions, obj._lexerActions);
    }
};
__decorate([
    Decorators_1.NotNull
], LexerActionExecutor.prototype, "_lexerActions", void 0);
__decorate([
    Decorators_1.NotNull
], LexerActionExecutor.prototype, "lexerActions", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerActionExecutor.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerActionExecutor.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerActionExecutor.prototype, "equals", null);
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], LexerActionExecutor, "append", null);
LexerActionExecutor = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerActionExecutor);
exports.LexerActionExecutor = LexerActionExecutor;

},{"../Decorators":13,"../misc/ArrayEqualityComparator":112,"../misc/MurmurHash":122,"./LexerIndexedCustomAction":69}],67:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `channel` lexer action by calling
 * {@link Lexer#setChannel} with the assigned channel.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerChannelAction {
    /**
     * Constructs a new `channel` action with the specified channel value.
     * @param channel The channel value to pass to {@link Lexer#setChannel}.
     */
    constructor(channel) {
        this._channel = channel;
    }
    /**
     * Gets the channel to use for the {@link Token} created by the lexer.
     *
     * @returns The channel to use for the {@link Token} created by the lexer.
     */
    get channel() {
        return this._channel;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#CHANNEL}.
     */
    get actionType() {
        return 0 /* CHANNEL */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#setChannel} with the
     * value provided by {@link #getChannel}.
     */
    execute(lexer) {
        lexer.channel = this._channel;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._channel);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerChannelAction)) {
            return false;
        }
        return this._channel === obj._channel;
    }
    toString() {
        return `channel(${this._channel})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerChannelAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "toString", null);
exports.LexerChannelAction = LexerChannelAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],68:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Executes a custom lexer action by calling {@link Recognizer#action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer#action} when the grammar is compiled.
 *
 * This class may represent embedded actions created with the `{...}`
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerCustomAction {
    /**
     * Constructs a custom lexer action with the specified rule and action
     * indexes.
     *
     * @param ruleIndex The rule index to use for calls to
     * {@link Recognizer#action}.
     * @param actionIndex The action index to use for calls to
     * {@link Recognizer#action}.
     */
    constructor(ruleIndex, actionIndex) {
        this._ruleIndex = ruleIndex;
        this._actionIndex = actionIndex;
    }
    /**
     * Gets the rule index to use for calls to {@link Recognizer#action}.
     *
     * @returns The rule index for the custom action.
     */
    get ruleIndex() {
        return this._ruleIndex;
    }
    /**
     * Gets the action index to use for calls to {@link Recognizer#action}.
     *
     * @returns The action index for the custom action.
     */
    get actionIndex() {
        return this._actionIndex;
    }
    /**
     * {@inheritDoc}
     *
     * @returns This method returns {@link LexerActionType#CUSTOM}.
     */
    get actionType() {
        return 1 /* CUSTOM */;
    }
    /**
     * Gets whether the lexer action is position-dependent. Position-dependent
     * actions may have different semantics depending on the {@link CharStream}
     * index at the time the action is executed.
     *
     * Custom actions are position-dependent since they may represent a
     * user-defined embedded action which makes calls to methods like
     * {@link Lexer#getText}.
     *
     * @returns This method returns `true`.
     */
    get isPositionDependent() {
        return true;
    }
    /**
     * {@inheritDoc}
     *
     * Custom actions are implemented by calling {@link Lexer#action} with the
     * appropriate rule and action indexes.
     */
    execute(lexer) {
        lexer.action(undefined, this._ruleIndex, this._actionIndex);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);
        hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);
        return MurmurHash_1.MurmurHash.finish(hash, 3);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerCustomAction)) {
            return false;
        }
        return this._ruleIndex === obj._ruleIndex
            && this._actionIndex === obj._actionIndex;
    }
}
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerCustomAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "equals", null);
exports.LexerCustomAction = LexerCustomAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],69:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * This implementation of {@link LexerAction} is used for tracking input offsets
 * for position-dependent actions within a {@link LexerActionExecutor}.
 *
 * This action is not serialized as part of the ATN, and is only required for
 * position-dependent lexer actions which appear at a location other than the
 * end of a rule. For more information about DFA optimizations employed for
 * lexer actions, see {@link LexerActionExecutor#append} and
 * {@link LexerActionExecutor#fixOffsetBeforeMatch}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
let LexerIndexedCustomAction = class LexerIndexedCustomAction {
    /**
     * Constructs a new indexed custom action by associating a character offset
     * with a {@link LexerAction}.
     *
     * Note: This class is only required for lexer actions for which
     * {@link LexerAction#isPositionDependent} returns `true`.
     *
     * @param offset The offset into the input {@link CharStream}, relative to
     * the token start index, at which the specified lexer action should be
     * executed.
     * @param action The lexer action to execute at a particular offset in the
     * input {@link CharStream}.
     */
    constructor(offset, action) {
        this._offset = offset;
        this._action = action;
    }
    /**
     * Gets the location in the input {@link CharStream} at which the lexer
     * action should be executed. The value is interpreted as an offset relative
     * to the token start index.
     *
     * @returns The location in the input {@link CharStream} at which the lexer
     * action should be executed.
     */
    get offset() {
        return this._offset;
    }
    /**
     * Gets the lexer action to execute.
     *
     * @returns A {@link LexerAction} object which executes the lexer action.
     */
    get action() {
        return this._action;
    }
    /**
     * {@inheritDoc}
     *
     * @returns This method returns the result of calling {@link #getActionType}
     * on the {@link LexerAction} returned by {@link #getAction}.
     */
    get actionType() {
        return this._action.actionType;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `true`.
     */
    get isPositionDependent() {
        return true;
    }
    /**
     * {@inheritDoc}
     *
     * This method calls {@link #execute} on the result of {@link #getAction}
     * using the provided `lexer`.
     */
    execute(lexer) {
        // assume the input stream position was properly set by the calling code
        this._action.execute(lexer);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this._offset);
        hash = MurmurHash_1.MurmurHash.update(hash, this._action);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerIndexedCustomAction)) {
            return false;
        }
        return this._offset === obj._offset
            && this._action.equals(obj._action);
    }
};
__decorate([
    Decorators_1.NotNull
], LexerIndexedCustomAction.prototype, "action", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "equals", null);
LexerIndexedCustomAction = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerIndexedCustomAction);
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],70:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `mode` lexer action by calling {@link Lexer#mode} with
 * the assigned mode.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerModeAction {
    /**
     * Constructs a new `mode` action with the specified mode value.
     * @param mode The mode value to pass to {@link Lexer#mode}.
     */
    constructor(mode) {
        this._mode = mode;
    }
    /**
     * Get the lexer mode this action should transition the lexer to.
     *
     * @returns The lexer mode for this `mode` command.
     */
    get mode() {
        return this._mode;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#MODE}.
     */
    get actionType() {
        return 2 /* MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#mode} with the
     * value provided by {@link #getMode}.
     */
    execute(lexer) {
        lexer.mode(this._mode);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerModeAction)) {
            return false;
        }
        return this._mode === obj._mode;
    }
    toString() {
        return `mode(${this._mode})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "toString", null);
exports.LexerModeAction = LexerModeAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],71:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `more` lexer action by calling {@link Lexer#more}.
 *
 * The `more` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerMoreAction {
    /**
     * Constructs the singleton instance of the lexer `more` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#MORE}.
     */
    get actionType() {
        return 3 /* MORE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#more}.
     */
    execute(lexer) {
        lexer.more();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "more";
    }
}
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerMoreAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "toString", null);
exports.LexerMoreAction = LexerMoreAction;
(function (LexerMoreAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerMoreAction.INSTANCE = new LexerMoreAction();
})(LexerMoreAction = exports.LexerMoreAction || (exports.LexerMoreAction = {}));

},{"../Decorators":13,"../misc/MurmurHash":122}],72:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `popMode` lexer action by calling {@link Lexer#popMode}.
 *
 * The `popMode` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerPopModeAction {
    /**
     * Constructs the singleton instance of the lexer `popMode` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#POP_MODE}.
     */
    get actionType() {
        return 4 /* POP_MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#popMode}.
     */
    execute(lexer) {
        lexer.popMode();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "popMode";
    }
}
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerPopModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "toString", null);
exports.LexerPopModeAction = LexerPopModeAction;
(function (LexerPopModeAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerPopModeAction.INSTANCE = new LexerPopModeAction();
})(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));

},{"../Decorators":13,"../misc/MurmurHash":122}],73:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `pushMode` lexer action by calling
 * {@link Lexer#pushMode} with the assigned mode.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerPushModeAction {
    /**
     * Constructs a new `pushMode` action with the specified mode value.
     * @param mode The mode value to pass to {@link Lexer#pushMode}.
     */
    constructor(mode) {
        this._mode = mode;
    }
    /**
     * Get the lexer mode this action should transition the lexer to.
     *
     * @returns The lexer mode for this `pushMode` command.
     */
    get mode() {
        return this._mode;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#PUSH_MODE}.
     */
    get actionType() {
        return 5 /* PUSH_MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#pushMode} with the
     * value provided by {@link #getMode}.
     */
    execute(lexer) {
        lexer.pushMode(this._mode);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerPushModeAction)) {
            return false;
        }
        return this._mode === obj._mode;
    }
    toString() {
        return `pushMode(${this._mode})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerPushModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "toString", null);
exports.LexerPushModeAction = LexerPushModeAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],74:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `skip` lexer action by calling {@link Lexer#skip}.
 *
 * The `skip` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerSkipAction {
    /**
     * Constructs the singleton instance of the lexer `skip` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#SKIP}.
     */
    get actionType() {
        return 6 /* SKIP */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#skip}.
     */
    execute(lexer) {
        lexer.skip();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "skip";
    }
}
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerSkipAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "toString", null);
exports.LexerSkipAction = LexerSkipAction;
(function (LexerSkipAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerSkipAction.INSTANCE = new LexerSkipAction();
})(LexerSkipAction = exports.LexerSkipAction || (exports.LexerSkipAction = {}));

},{"../Decorators":13,"../misc/MurmurHash":122}],75:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
/**
 * Implements the `type` lexer action by setting `Lexer.type`
 * with the assigned type.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerTypeAction {
    /**
     * Constructs a new `type` action with the specified token type value.
     * @param type The type to assign to the token using `Lexer.type`.
     */
    constructor(type) {
        this._type = type;
    }
    /**
     * Gets the type to assign to a token created by the lexer.
     * @returns The type to assign to a token created by the lexer.
     */
    get type() {
        return this._type;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#TYPE}.
     */
    get actionType() {
        return 7 /* TYPE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by setting `Lexer.type` with the
     * value provided by `type`.
     */
    execute(lexer) {
        lexer.type = this._type;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._type);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerTypeAction)) {
            return false;
        }
        return this._type === obj._type;
    }
    toString() {
        return `type(${this._type})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerTypeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "toString", null);
exports.LexerTypeAction = LexerTypeAction;

},{"../Decorators":13,"../misc/MurmurHash":122}],76:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00
const DecisionEventInfo_1 = require("./DecisionEventInfo");
const Decorators_1 = require("../Decorators");
/**
 * This class represents profiling event information for tracking the lookahead
 * depth required in order to make a prediction.
 *
 * @since 4.3
 */
let LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link LookaheadEventInfo} class with
     * the specified detailed lookahead information.
     *
     * @param decision The decision number
     * @param state The final simulator state containing the necessary
     * information to determine the result of a prediction, or `undefined` if
     * the final state is not available
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the prediction was finally made
     * @param fullCtx `true` if the current lookahead is part of an LL
     * prediction; otherwise, `false` if the current lookahead is part of
     * an SLL prediction
     */
    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {
        super(decision, state, input, startIndex, stopIndex, fullCtx);
        this.predictedAlt = predictedAlt;
    }
};
LookaheadEventInfo = __decorate([
    __param(3, Decorators_1.NotNull)
], LookaheadEventInfo);
exports.LookaheadEventInfo = LookaheadEventInfo;

},{"../Decorators":13,"./DecisionEventInfo":58}],77:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:30.7737978-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
/** Mark the end of a * or + loop. */
class LoopEndState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.LOOP_END;
    }
}
__decorate([
    Decorators_1.Override
], LoopEndState.prototype, "stateType", null);
exports.LoopEndState = LoopEndState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],78:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const SetTransition_1 = require("./SetTransition");
let NotSetTransition = class NotSetTransition extends SetTransition_1.SetTransition {
    constructor(target, set) {
        super(target, set);
    }
    get serializationType() {
        return 8 /* NOT_SET */;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol
            && symbol <= maxVocabSymbol
            && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }
    toString() {
        return "~" + super.toString();
    }
};
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "toString", null);
NotSetTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
], NotSetTransition);
exports.NotSetTransition = NotSetTransition;

},{"../Decorators":13,"./SetTransition":96}],79:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNConfigSet_1 = require("./ATNConfigSet");
const Decorators_1 = require("../Decorators");
/**
 *
 * @author Sam Harwell
 */
class OrderedATNConfigSet extends ATNConfigSet_1.ATNConfigSet {
    constructor(set, readonly) {
        if (set != null && readonly != null) {
            super(set, readonly);
        }
        else {
            super();
        }
    }
    clone(readonly) {
        let copy = new OrderedATNConfigSet(this, readonly);
        if (!readonly && this.isReadOnly) {
            copy.addAll(this);
        }
        return copy;
    }
    getKey(e) {
        // This is a specially crafted key to ensure configurations are only merged if they are equal
        return { state: 0, alt: e.hashCode() };
    }
    canMerge(left, leftKey, right) {
        return left.equals(right);
    }
}
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "clone", null);
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "getKey", null);
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "canMerge", null);
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"../Decorators":13,"./ATNConfigSet":42}],80:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
/**
 * This class provides access to specific and aggregate statistics gathered
 * during profiling of a parser.
 *
 * @since 4.3
 */
let ParseInfo = class ParseInfo {
    constructor(atnSimulator) {
        this.atnSimulator = atnSimulator;
    }
    /**
     * Gets an array of {@link DecisionInfo} instances containing the profiling
     * information gathered for each decision in the ATN.
     *
     * @returns An array of {@link DecisionInfo} instances, indexed by decision
     * number.
     */
    getDecisionInfo() {
        return this.atnSimulator.getDecisionInfo();
    }
    /**
     * Gets the decision numbers for decisions that required one or more
     * full-context predictions during parsing. These are decisions for which
     * {@link DecisionInfo#LL_Fallback} is non-zero.
     *
     * @returns A list of decision numbers which required one or more
     * full-context predictions during parsing.
     */
    getLLDecisions() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let LL = [];
        for (let i = 0; i < decisions.length; i++) {
            let fallBack = decisions[i].LL_Fallback;
            if (fallBack > 0) {
                LL.push(i);
            }
        }
        return LL;
    }
    /**
     * Gets the total time spent during prediction across all decisions made
     * during parsing. This value is the sum of
     * {@link DecisionInfo#timeInPrediction} for all decisions.
     */
    getTotalTimeInPrediction() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let t = 0;
        for (let decision of decisions) {
            t += decision.timeInPrediction;
        }
        return t;
    }
    /**
     * Gets the total number of SLL lookahead operations across all decisions
     * made during parsing. This value is the sum of
     * {@link DecisionInfo#SLL_TotalLook} for all decisions.
     */
    getTotalSLLLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_TotalLook;
        }
        return k;
    }
    /**
     * Gets the total number of LL lookahead operations across all decisions
     * made during parsing. This value is the sum of
     * {@link DecisionInfo#LL_TotalLook} for all decisions.
     */
    getTotalLLLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.LL_TotalLook;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for SLL prediction
     * across all decisions made during parsing.
     */
    getTotalSLLATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_ATNTransitions;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for LL prediction
     * across all decisions made during parsing.
     */
    getTotalLLATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.LL_ATNTransitions;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for SLL and LL
     * prediction across all decisions made during parsing.
     *
     * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and
     * {@link #getTotalLLATNLookaheadOps}.
     */
    getTotalATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_ATNTransitions;
            k += decision.LL_ATNTransitions;
        }
        return k;
    }
    getDFASize(decision) {
        if (decision) {
            let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];
            return decisionToDFA.states.size;
        }
        else {
            let n = 0;
            let decisionToDFA = this.atnSimulator.atn.decisionToDFA;
            for (let i = 0; i < decisionToDFA.length; i++) {
                n += this.getDFASize(i);
            }
            return n;
        }
    }
};
__decorate([
    Decorators_1.NotNull
], ParseInfo.prototype, "getDecisionInfo", null);
__decorate([
    Decorators_1.NotNull
], ParseInfo.prototype, "getLLDecisions", null);
ParseInfo = __decorate([
    __param(0, Decorators_1.NotNull)
], ParseInfo);
exports.ParseInfo = ParseInfo;

},{"../Decorators":13}],81:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:31.1989835-07:00
const AcceptStateInfo_1 = require("../dfa/AcceptStateInfo");
const ActionTransition_1 = require("./ActionTransition");
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const Arrays_1 = require("../misc/Arrays");
const ATN_1 = require("./ATN");
const ATNConfig_1 = require("./ATNConfig");
const ATNConfigSet_1 = require("./ATNConfigSet");
const ATNSimulator_1 = require("./ATNSimulator");
const ATNStateType_1 = require("./ATNStateType");
const AtomTransition_1 = require("./AtomTransition");
const BitSet_1 = require("../misc/BitSet");
const ConflictInfo_1 = require("./ConflictInfo");
const DecisionState_1 = require("./DecisionState");
const DFAState_1 = require("../dfa/DFAState");
const IntegerList_1 = require("../misc/IntegerList");
const Interval_1 = require("../misc/Interval");
const IntStream_1 = require("../IntStream");
const Decorators_1 = require("../Decorators");
const NotSetTransition_1 = require("./NotSetTransition");
const NoViableAltException_1 = require("../NoViableAltException");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const ParserRuleContext_1 = require("../ParserRuleContext");
const PredictionContext_1 = require("./PredictionContext");
const PredictionContextCache_1 = require("./PredictionContextCache");
const PredictionMode_1 = require("./PredictionMode");
const RuleStopState_1 = require("./RuleStopState");
const RuleTransition_1 = require("./RuleTransition");
const SemanticContext_1 = require("./SemanticContext");
const SetTransition_1 = require("./SetTransition");
const SimulatorState_1 = require("./SimulatorState");
const Token_1 = require("../Token");
const VocabularyImpl_1 = require("../VocabularyImpl");
const assert = require("assert");
const MAX_SHORT_VALUE = 0xFFFF;
const MIN_INTEGER_VALUE = -((1 << 31) >>> 0);
/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).
 *
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).
 *
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)
 *
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.
 *
 * **CACHING FULL CONTEXT PREDICTIONS**
 *
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.
 *
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.
 *
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.
 *
 * **AVOIDING FULL CONTEXT PREDICTION**
 *
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.
 *
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:
 *
 * ```antlr
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * ```
 *
 * Or, you might see something like
 *
 * ```antlr
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * ```
 *
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.
 *
 * **PREDICATES**
 *
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.
 *
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.
 *
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.
 *
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.
 *
 * **SHARING DFA**
 *
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link ATN#decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.
 *
 * **THREAD SAFETY**
 *
 * The {@link ParserATNSimulator} locks on the {@link ATN#decisionToDFA} field when
 * it adds a new DFA object to that array. {@link #addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState#edges} field. {@link #addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link #addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * `s.edge[t]` get the same physical target {@link DFAState}, or
 * `undefined`. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA#states} map. It follows the {@link DFAState#edges} field to new
 * targets. The DFA simulator will either find {@link DFAState#edges} to be
 * `undefined`, to be non-`undefined` and `dfa.edges[t]` undefined, or
 * `dfa.edges[t]` to be non-undefined. The
 * {@link #addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if `undefined`, and requests ATN
 * simulation. It could also race trying to get `dfa.edges[t]`, but either
 * way it will work because it's not doing a test and set operation.
 *
 * **Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)**
 *
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:
 *
 * ```
 * parser.interpreter.{@link #setPredictionMode setPredictionMode}`(`{@link PredictionMode#SLL}`)`;
 * parser.{@link Parser#setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * ```
 *
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.
 *
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.
 *
 * Let's say we have a set of SLL conflicting alternatives `{1, 2, 3}` and
 * a smaller LL set called *s*. If *s* is `{2, 3}`, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * *s* is `{1, 2}` or `{1, 3}` then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If *s* is `{2}` or `{3}` then SLL will get a syntax
 * error. If *s* is `{1}` then SLL will succeed.
 *
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.
 */
let ParserATNSimulator = class ParserATNSimulator extends ATNSimulator_1.ATNSimulator {
    constructor(atn, parser) {
        super(atn);
        this.predictionMode = PredictionMode_1.PredictionMode.LL;
        this.force_global_context = false;
        this.always_try_local_context = true;
        /**
         * Determines whether the DFA is used for full-context predictions. When
         * `true`, the DFA stores transition information for both full-context
         * and SLL parsing; otherwise, the DFA only stores SLL transition
         * information.
         *
         * For some grammars, enabling the full-context DFA can result in a
         * substantial performance improvement. However, this improvement typically
         * comes at the expense of memory used for storing the cached DFA states,
         * configuration sets, and prediction contexts.
         *
         * The default value is `false`.
         */
        this.enable_global_context_dfa = false;
        this.optimize_unique_closure = true;
        this.optimize_ll1 = true;
        this.optimize_tail_calls = true;
        this.tail_call_preserves_sll = true;
        this.treat_sllk1_conflict_as_ambiguity = false;
        /**
         * When `true`, ambiguous alternatives are reported when they are
         * encountered within {@link #execATN}. When `false`, these messages
         * are suppressed. The default is `false`.
         *
         * When messages about ambiguous alternatives are not required, setting this
         * to `false` enables additional internal optimizations which may lose
         * this information.
         */
        this.reportAmbiguities = false;
        /** By default we do full context-sensitive LL(*) parsing not
         *  Strong LL(*) parsing. If we fail with Strong LL(*) we
         *  try full LL(*). That means we rewind and use context information
         *  when closure operations fall off the end of the rule that
         *  holds the decision were evaluating.
         */
        this.userWantsCtxSensitive = true;
        this._parser = parser;
    }
    getPredictionMode() {
        return this.predictionMode;
    }
    setPredictionMode(predictionMode) {
        this.predictionMode = predictionMode;
    }
    reset() {
        // intentionally empty
    }
    adaptivePredict(input, decision, outerContext, useContext) {
        if (useContext === undefined) {
            useContext = false;
        }
        let dfa = this.atn.decisionToDFA[decision];
        assert(dfa != null);
        if (this.optimize_ll1 && !dfa.isPrecedenceDfa && !dfa.isEmpty) {
            let ll_1 = input.LA(1);
            if (ll_1 >= 0 && ll_1 <= 0xFFFF) {
                let key = ((decision << 16) >>> 0) + ll_1;
                let alt = this.atn.LL1Table.get(key);
                if (alt != null) {
                    return alt;
                }
            }
        }
        this.dfa = dfa;
        if (this.force_global_context) {
            useContext = true;
        }
        else if (!this.always_try_local_context) {
            useContext = useContext || dfa.isContextSensitive;
        }
        this.userWantsCtxSensitive = useContext || (this.predictionMode !== PredictionMode_1.PredictionMode.SLL && outerContext != null && !this.atn.decisionToState[decision].sll);
        if (outerContext == null) {
            outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
        }
        let state;
        if (!dfa.isEmpty) {
            state = this.getStartState(dfa, input, outerContext, useContext);
        }
        if (state == null) {
            if (outerContext == null) {
                outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
            }
            if (ParserATNSimulator.debug) {
                console.log("ATN decision " + dfa.decision +
                    " exec LA(1)==" + this.getLookaheadName(input) +
                    ", outerContext=" + outerContext.toString(this._parser));
            }
            state = this.computeStartState(dfa, outerContext, useContext);
        }
        let m = input.mark();
        let index = input.index;
        try {
            let alt = this.execDFA(dfa, input, index, state);
            if (ParserATNSimulator.debug) {
                console.log("DFA after predictATN: " + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
            }
            return alt;
        }
        finally {
            this.dfa = undefined;
            input.seek(index);
            input.release(m);
        }
    }
    getStartState(dfa, input, outerContext, useContext) {
        if (!useContext) {
            if (dfa.isPrecedenceDfa) {
                // the start state for a precedence DFA depends on the current
                // parser precedence, and is provided by a DFA method.
                let state = dfa.getPrecedenceStartState(this._parser.precedence, false);
                if (state == null) {
                    return undefined;
                }
                return new SimulatorState_1.SimulatorState(outerContext, state, false, outerContext);
            }
            else {
                if (dfa.s0 == null) {
                    return undefined;
                }
                return new SimulatorState_1.SimulatorState(outerContext, dfa.s0, false, outerContext);
            }
        }
        if (!this.enable_global_context_dfa) {
            return undefined;
        }
        let remainingContext = outerContext;
        assert(outerContext != null);
        let s0;
        if (dfa.isPrecedenceDfa) {
            s0 = dfa.getPrecedenceStartState(this._parser.precedence, true);
        }
        else {
            s0 = dfa.s0full;
        }
        while (remainingContext != null && s0 != null && s0.isContextSensitive) {
            remainingContext = this.skipTailCalls(remainingContext);
            s0 = s0.getContextTarget(this.getReturnState(remainingContext));
            if (remainingContext.isEmpty) {
                assert(s0 == null || !s0.isContextSensitive);
            }
            else {
                remainingContext = remainingContext.parent;
            }
        }
        if (s0 == null) {
            return undefined;
        }
        return new SimulatorState_1.SimulatorState(outerContext, s0, useContext, remainingContext);
    }
    execDFA(dfa, input, startIndex, state) {
        let outerContext = state.outerContext;
        if (ParserATNSimulator.dfa_debug) {
            console.log("DFA decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                ", outerContext=" + outerContext.toString(this._parser));
        }
        if (ParserATNSimulator.dfa_debug) {
            console.log(dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
        }
        let s = state.s0;
        let t = input.LA(1);
        let remainingOuterContext = state.remainingOuterContext;
        while (true) {
            if (ParserATNSimulator.dfa_debug) {
                console.log("DFA state " + s.stateNumber + " LA(1)==" + this.getLookaheadName(input));
            }
            if (state.useContext) {
                while (s.isContextSymbol(t)) {
                    let next;
                    if (remainingOuterContext != null) {
                        remainingOuterContext = this.skipTailCalls(remainingOuterContext);
                        next = s.getContextTarget(this.getReturnState(remainingOuterContext));
                    }
                    if (next == null) {
                        // fail over to ATN
                        let initialState = new SimulatorState_1.SimulatorState(state.outerContext, s, state.useContext, remainingOuterContext);
                        return this.execATN(dfa, input, startIndex, initialState);
                    }
                    assert(remainingOuterContext != null);
                    remainingOuterContext = remainingOuterContext.parent;
                    s = next;
                }
            }
            if (this.isAcceptState(s, state.useContext)) {
                if (s.predicates != null) {
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("accept " + s);
                    }
                }
                else {
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("accept; predict " + s.prediction + " in state " + s.stateNumber);
                    }
                }
                // keep going unless we're at EOF or state only has one alt number
                // mentioned in configs; check if something else could match
                // TODO: don't we always stop? only lexer would keep going
                // TODO: v3 dfa don't do this.
                break;
            }
            // t is not updated if one of these states is reached
            assert(!this.isAcceptState(s, state.useContext));
            // if no edge, pop over to ATN interpreter, update DFA and return
            let target = this.getExistingTargetState(s, t);
            if (target == null) {
                if (ParserATNSimulator.dfa_debug && t >= 0) {
                    console.log("no edge for " + this._parser.vocabulary.getDisplayName(t));
                }
                let alt;
                if (ParserATNSimulator.dfa_debug) {
                    let interval = Interval_1.Interval.of(startIndex, this._parser.inputStream.index);
                    console.log("ATN exec upon " +
                        this._parser.inputStream.getText(interval) +
                        " at DFA state " + s.stateNumber);
                }
                let initialState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                alt = this.execATN(dfa, input, startIndex, initialState);
                if (ParserATNSimulator.dfa_debug) {
                    console.log("back from DFA update, alt=" + alt + ", dfa=\n" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
                    //dump(dfa);
                }
                // action already executed
                if (ParserATNSimulator.dfa_debug) {
                    console.log("DFA decision " + dfa.decision +
                        " predicts " + alt);
                }
                return alt; // we've updated DFA, exec'd action, and have our deepest answer
            }
            else if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                let errorState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                return this.handleNoViableAlt(input, startIndex, errorState);
            }
            s = target;
            if (!this.isAcceptState(s, state.useContext) && t !== IntStream_1.IntStream.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
        //		if ( acceptState==null ) {
        //			if ( debug ) System.out.println("!!! no viable alt in dfa");
        //			return -1;
        //		}
        if (!state.useContext && s.configs.conflictInfo != null) {
            if (dfa.atnStartState instanceof DecisionState_1.DecisionState) {
                if (!this.userWantsCtxSensitive ||
                    (!s.configs.dipsIntoOuterContext && s.configs.isExactConflict) ||
                    (this.treat_sllk1_conflict_as_ambiguity && input.index === startIndex)) {
                    // we don't report the ambiguity again
                    //if ( !this.acceptState.configset.hasSemanticContext ) {
                    // 	this.reportAmbiguity(dfa, acceptState, startIndex, input.index, acceptState.configset.conflictingAlts, acceptState.configset);
                    //}
                }
                else {
                    assert(!state.useContext);
                    // Before attempting full context prediction, check to see if there are
                    // disambiguating or validating predicates to evaluate which allow an
                    // immediate decision
                    let conflictingAlts;
                    let predicates = s.predicates;
                    if (predicates != null) {
                        let conflictIndex = input.index;
                        if (conflictIndex !== startIndex) {
                            input.seek(startIndex);
                        }
                        conflictingAlts = this.evalSemanticContext(predicates, outerContext, true);
                        if (conflictingAlts.cardinality() === 1) {
                            return conflictingAlts.nextSetBit(0);
                        }
                        if (conflictIndex !== startIndex) {
                            // restore the index so reporting the fallback to full
                            // context occurs with the index at the correct spot
                            input.seek(conflictIndex);
                        }
                    }
                    if (this.reportAmbiguities) {
                        let conflictState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                        this.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, input.index);
                    }
                    input.seek(startIndex);
                    return this.adaptivePredict(input, dfa.decision, outerContext, true);
                }
            }
        }
        // Before jumping to prediction, check to see if there are
        // disambiguating or validating predicates to evaluate
        let predicates = s.predicates;
        if (predicates != null) {
            let stopIndex = input.index;
            if (startIndex !== stopIndex) {
                input.seek(startIndex);
            }
            let alts = this.evalSemanticContext(predicates, outerContext, this.reportAmbiguities && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION);
            switch (alts.cardinality()) {
                case 0:
                    throw this.noViableAlt(input, outerContext, s.configs, startIndex);
                case 1:
                    return alts.nextSetBit(0);
                default:
                    // report ambiguity after predicate evaluation to make sure the correct
                    // set of ambig alts is reported.
                    if (startIndex !== stopIndex) {
                        input.seek(stopIndex);
                    }
                    this.reportAmbiguity(dfa, s, startIndex, stopIndex, s.configs.isExactConflict, alts, s.configs);
                    return alts.nextSetBit(0);
            }
        }
        if (ParserATNSimulator.dfa_debug) {
            console.log("DFA decision " + dfa.decision +
                " predicts " + s.prediction);
        }
        return s.prediction;
    }
    /**
     * Determines if a particular DFA state should be treated as an accept state
     * for the current prediction mode. In addition to the `useContext`
     * parameter, the {@link #getPredictionMode()} method provides the
     * prediction mode controlling the prediction algorithm as a whole.
     *
     * The default implementation simply returns the value of
     * `DFAState.isAcceptState` except for conflict states when
     * `useContext` is `true` and {@link #getPredictionMode()} is
     * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}. In that case, only
     * conflict states where {@link ATNConfigSet#isExactConflict} is
     * `true` are considered accept states.
     *
     * @param state The DFA state to check.
     * @param useContext `true` if the prediction algorithm is currently
     * considering the full parser context; otherwise, `false` if the
     * algorithm is currently performing a local context prediction.
     *
     * @returns `true` if the specified `state` is an accept state;
     * otherwise, `false`.
     */
    isAcceptState(state, useContext) {
        if (!state.isAcceptState) {
            return false;
        }
        if (state.configs.conflictingAlts == null) {
            // unambiguous
            return true;
        }
        // More picky when we need exact conflicts
        if (useContext && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            return state.configs.isExactConflict;
        }
        return true;
    }
    /** Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *
     * * if the set is empty, there is no viable alternative for current symbol
     * * does the state uniquely predict an alternative?
     * * does the state have a conflict that would prevent us from
     *   putting it on the work list?
     * * if in non-greedy decision is there a config at a rule stop state?
     *
     * We also have some key operations to do:
     *
     * * add an edge from previous DFA state to potentially new DFA state, D,
     *   upon current symbol but only if adding to work list, which means in all
     *   cases except no viable alternative (and possibly non-greedy decisions?)
     * * collecting predicates and adding semantic context to DFA accept states
     * * adding rule context to context-sensitive DFA accept states
     * * consuming an input symbol
     * * reporting a conflict
     * * reporting an ambiguity
     * * reporting a context sensitivity
     * * reporting insufficient predicates
     *
     * We should isolate those operations, which are side-effecting, to the
     * main work loop. We can isolate lots of code into other functions, but
     * they should be side effect free. They can return package that
     * indicates whether we should report something, whether we need to add a
     * DFA edge, whether we need to augment accept state with semantic
     * context or rule invocation context. Actually, it seems like we always
     * add predicates if they exist, so that can simply be done in the main
     * loop for any accept state creation or modification request.
     *
     * cover these cases:
     *   dead end
     *   single alt
     *   single alt + preds
     *   conflict
     *   conflict + preds
     *
     * TODO: greedy + those
     */
    execATN(dfa, input, startIndex, initialState) {
        if (ParserATNSimulator.debug) {
            console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input));
        }
        let outerContext = initialState.outerContext;
        let useContext = initialState.useContext;
        let t = input.LA(1);
        let previous = initialState;
        let contextCache = new PredictionContextCache_1.PredictionContextCache();
        while (true) { // while more work
            let nextState = this.computeReachSet(dfa, previous, t, contextCache);
            if (nextState == null) {
                this.setDFAEdge(previous.s0, input.LA(1), ATNSimulator_1.ATNSimulator.ERROR);
                return this.handleNoViableAlt(input, startIndex, previous);
            }
            let D = nextState.s0;
            // predicted alt => accept state
            assert(D.isAcceptState || D.prediction === ATN_1.ATN.INVALID_ALT_NUMBER);
            // conflicted => accept state
            assert(D.isAcceptState || D.configs.conflictInfo == null);
            if (this.isAcceptState(D, useContext)) {
                let conflictingAlts = D.configs.conflictingAlts;
                let predictedAlt = conflictingAlts == null ? D.prediction : ATN_1.ATN.INVALID_ALT_NUMBER;
                if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (this.optimize_ll1
                        && input.index === startIndex
                        && !dfa.isPrecedenceDfa
                        && nextState.outerContext === nextState.remainingOuterContext
                        && dfa.decision >= 0
                        && !D.configs.hasSemanticContext) {
                        if (t >= 0 && t <= MAX_SHORT_VALUE) {
                            let key = ((dfa.decision << 16) >>> 0) + t;
                            this.atn.LL1Table.set(key, predictedAlt);
                        }
                    }
                    if (useContext && this.always_try_local_context) {
                        this.reportContextSensitivity(dfa, predictedAlt, nextState, startIndex, input.index);
                    }
                }
                predictedAlt = D.prediction;
                //				int k = input.index - startIndex + 1; // how much input we used
                //				System.out.println("used k="+k);
                let attemptFullContext = conflictingAlts != null && this.userWantsCtxSensitive;
                if (attemptFullContext) {
                    // Only exact conflicts are known to be ambiguous when local
                    // prediction does not step out of the decision rule.
                    attemptFullContext = !useContext
                        && (D.configs.dipsIntoOuterContext || !D.configs.isExactConflict)
                        && (!this.treat_sllk1_conflict_as_ambiguity || input.index !== startIndex);
                }
                if (D.configs.hasSemanticContext) {
                    let predPredictions = D.predicates;
                    if (predPredictions != null) {
                        let conflictIndex = input.index;
                        if (conflictIndex !== startIndex) {
                            input.seek(startIndex);
                        }
                        // use complete evaluation here if we'll want to retry with full context if still ambiguous
                        conflictingAlts = this.evalSemanticContext(predPredictions, outerContext, attemptFullContext || this.reportAmbiguities);
                        switch (conflictingAlts.cardinality()) {
                            case 0:
                                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                            case 1:
                                return conflictingAlts.nextSetBit(0);
                            default:
                                break;
                        }
                        if (conflictIndex !== startIndex) {
                            // restore the index so reporting the fallback to full
                            // context occurs with the index at the correct spot
                            input.seek(conflictIndex);
                        }
                    }
                }
                if (!attemptFullContext) {
                    if (conflictingAlts != null) {
                        if (this.reportAmbiguities && conflictingAlts.cardinality() > 1) {
                            this.reportAmbiguity(dfa, D, startIndex, input.index, D.configs.isExactConflict, conflictingAlts, D.configs);
                        }
                        predictedAlt = conflictingAlts.nextSetBit(0);
                    }
                    return predictedAlt;
                }
                else {
                    assert(!useContext);
                    assert(this.isAcceptState(D, false));
                    if (ParserATNSimulator.debug) {
                        console.log("RETRY with outerContext=" + outerContext);
                    }
                    let fullContextState = this.computeStartState(dfa, outerContext, true);
                    if (this.reportAmbiguities) {
                        this.reportAttemptingFullContext(dfa, conflictingAlts, nextState, startIndex, input.index);
                    }
                    input.seek(startIndex);
                    return this.execATN(dfa, input, startIndex, fullContextState);
                }
            }
            previous = nextState;
            if (t !== IntStream_1.IntStream.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
    }
    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link #ERROR} state was reached during ATN simulation.
     *
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.
     *
     * * If no configuration in `configs` reached the end of the
     *   decision rule, return {@link ATN#INVALID_ALT_NUMBER}.
     * * If all configurations in `configs` which reached the end of the
     *   decision rule predict the same alternative, return that alternative.
     * * If the configurations in `configs` which reached the end of the
     *   decision rule predict multiple alternatives (call this *S*),
     *   choose an alternative in the following order.
     *
     *     1. Filter the configurations in `configs` to only those
     *        configurations which remain viable after evaluating semantic predicates.
     *        If the set of these filtered configurations which also reached the end of
     *        the decision rule is not empty, return the minimum alternative
     *        represented in this set.
     *     1. Otherwise, choose the minimum alternative in *S*.
     *
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * parser. Specifically, this could occur if the *only* configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link #adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     *
     * @param input The input {@link TokenStream}
     * @param startIndex The start index for the current prediction, which is
     * the input index where any semantic context in `configs` should be
     * evaluated
     * @param previous The ATN simulation state immediately before the
     * {@link #ERROR} state was reached
     *
     * @returns The value to return from {@link #adaptivePredict}, or
     * {@link ATN#INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link #adaptivePredict} should report an error instead.
     */
    handleNoViableAlt(input, startIndex, previous) {
        if (previous.s0 != null) {
            let alts = new BitSet_1.BitSet();
            let maxAlt = 0;
            for (let config of previous.s0.configs) {
                if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                    alts.set(config.alt);
                    maxAlt = Math.max(maxAlt, config.alt);
                }
            }
            switch (alts.cardinality()) {
                case 0:
                    break;
                case 1:
                    return alts.nextSetBit(0);
                default:
                    if (!previous.s0.configs.hasSemanticContext) {
                        // configs doesn't contain any predicates, so the predicate
                        // filtering code below would be pointless
                        return alts.nextSetBit(0);
                    }
                    /*
                     * Try to find a configuration set that not only dipped into the outer
                     * context, but also isn't eliminated by a predicate.
                     */
                    let filteredConfigs = new ATNConfigSet_1.ATNConfigSet();
                    for (let config of previous.s0.configs) {
                        if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                            filteredConfigs.add(config);
                        }
                    }
                    /* The following code blocks are adapted from predicateDFAState with
                     * the following key changes.
                     *
                     *  1. The code operates on an ATNConfigSet rather than a DFAState.
                     *  2. Predicates are collected for all alternatives represented in
                     *     filteredConfigs, rather than restricting the evaluation to
                     *     conflicting and/or unique configurations.
                     */
                    let altToPred = this.getPredsForAmbigAlts(alts, filteredConfigs, maxAlt);
                    if (altToPred != null) {
                        let predicates = this.getPredicatePredictions(alts, altToPred);
                        if (predicates != null) {
                            let stopIndex = input.index;
                            try {
                                input.seek(startIndex);
                                let filteredAlts = this.evalSemanticContext(predicates, previous.outerContext, false);
                                if (!filteredAlts.isEmpty) {
                                    return filteredAlts.nextSetBit(0);
                                }
                            }
                            finally {
                                input.seek(stopIndex);
                            }
                        }
                    }
                    return alts.nextSetBit(0);
            }
        }
        throw this.noViableAlt(input, previous.outerContext, previous.s0.configs, startIndex);
    }
    computeReachSet(dfa, previous, t, contextCache) {
        let useContext = previous.useContext;
        let remainingGlobalContext = previous.remainingOuterContext;
        let s = previous.s0;
        if (useContext) {
            while (s.isContextSymbol(t)) {
                let next;
                if (remainingGlobalContext != null) {
                    remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                    next = s.getContextTarget(this.getReturnState(remainingGlobalContext));
                }
                if (next == null) {
                    break;
                }
                assert(remainingGlobalContext != null);
                remainingGlobalContext = remainingGlobalContext.parent;
                s = next;
            }
        }
        assert(!this.isAcceptState(s, useContext));
        if (this.isAcceptState(s, useContext)) {
            return new SimulatorState_1.SimulatorState(previous.outerContext, s, useContext, remainingGlobalContext);
        }
        let s0 = s;
        let target = this.getExistingTargetState(s0, t);
        if (target == null) {
            let result = this.computeTargetState(dfa, s0, remainingGlobalContext, t, useContext, contextCache);
            target = result[0];
            remainingGlobalContext = result[1];
        }
        if (target === ATNSimulator_1.ATNSimulator.ERROR) {
            return undefined;
        }
        assert(!useContext || !target.configs.dipsIntoOuterContext);
        return new SimulatorState_1.SimulatorState(previous.outerContext, target, useContext, remainingGlobalContext);
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns `undefined`.
     *
     * @param s The current DFA state
     * @param t The next input symbol
     * @returns The existing target DFA state for the given input symbol
     * `t`, or `undefined` if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(s, t) {
        return s.getTarget(t);
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa
     * @param s The current DFA state
     * @param remainingGlobalContext
     * @param t The next input symbol
     * @param useContext
     * @param contextCache
     *
     * @returns The computed target DFA state for the given input symbol
     * `t`. If `t` does not lead to a valid DFA state, this method
     * returns {@link #ERROR}.
     */
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
        let closureConfigs = s.configs.toArray();
        let contextElements;
        let reach = new ATNConfigSet_1.ATNConfigSet();
        let stepIntoGlobal;
        do {
            let hasMoreContext = !useContext || remainingGlobalContext != null;
            if (!hasMoreContext) {
                reach.isOutermostConfigSet = true;
            }
            let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
            /* Configurations already in a rule stop state indicate reaching the end
             * of the decision rule (local context) or end of the start rule (full
             * context). Once reached, these configurations are never updated by a
             * closure operation, so they are handled separately for the performance
             * advantage of having a smaller intermediate set when calling closure.
             *
             * For full-context reach operations, separate handling is required to
             * ensure that the alternative matching the longest overall sequence is
             * chosen when multiple such configurations can match the input.
             */
            let skippedStopStates;
            for (let c of closureConfigs) {
                if (ParserATNSimulator.debug) {
                    console.log("testing " + this.getTokenName(t) + " at " + c.toString());
                }
                if (c.state instanceof RuleStopState_1.RuleStopState) {
                    assert(c.context.isEmpty);
                    if (useContext && !c.reachesIntoOuterContext || t === IntStream_1.IntStream.EOF) {
                        if (skippedStopStates == null) {
                            skippedStopStates = [];
                        }
                        skippedStopStates.push(c);
                    }
                    continue;
                }
                let n = c.state.numberOfOptimizedTransitions;
                for (let ti = 0; ti < n; ti++) { // for each optimized transition
                    let trans = c.state.getOptimizedTransition(ti);
                    let target = this.getReachableTarget(c, trans, t);
                    if (target != null) {
                        reachIntermediate.add(c.transform(target, false), contextCache);
                    }
                }
            }
            /* This block optimizes the reach operation for intermediate sets which
             * trivially indicate a termination state for the overall
             * adaptivePredict operation.
             *
             * The conditions assume that intermediate
             * contains all configurations relevant to the reach set, but this
             * condition is not true when one or more configurations have been
             * withheld in skippedStopStates, or when the current symbol is EOF.
             */
            if (this.optimize_unique_closure && skippedStopStates == null && t !== Token_1.Token.EOF && reachIntermediate.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                reachIntermediate.isOutermostConfigSet = reach.isOutermostConfigSet;
                reach = reachIntermediate;
                break;
            }
            /* If the reach set could not be trivially determined, perform a closure
             * operation on the intermediate set to compute its initial value.
             */
            let collectPredicates = false;
            let treatEofAsEpsilon = t === Token_1.Token.EOF;
            this.closure(reachIntermediate, reach, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon);
            stepIntoGlobal = reach.dipsIntoOuterContext;
            if (t === IntStream_1.IntStream.EOF) {
                /* After consuming EOF no additional input is possible, so we are
                 * only interested in configurations which reached the end of the
                 * decision rule (local context) or end of the start rule (full
                 * context). Update reach to contain only these configurations. This
                 * handles both explicit EOF transitions in the grammar and implicit
                 * EOF transitions following the end of the decision or start rule.
                 *
                 * This is handled before the configurations in skippedStopStates,
                 * because any configurations potentially added from that list are
                 * already guaranteed to meet this condition whether or not it's
                 * required.
                 */
                reach = this.removeAllConfigsNotInRuleStopState(reach, contextCache);
            }
            /* If skippedStopStates is not undefined, then it contains at least one
             * configuration. For full-context reach operations, these
             * configurations reached the end of the start rule, in which case we
             * only add them back to reach if no configuration during the current
             * closure operation reached such a state. This ensures adaptivePredict
             * chooses an alternative matching the longest overall sequence when
             * multiple alternatives are viable.
             */
            if (skippedStopStates != null && (!useContext || !PredictionMode_1.PredictionMode.hasConfigInRuleStopState(reach))) {
                assert(skippedStopStates.length > 0);
                for (let c of skippedStopStates) {
                    reach.add(c, contextCache);
                }
            }
            if (useContext && stepIntoGlobal) {
                reach.clear();
                // We know remainingGlobalContext is not undefined at this point (why?)
                remainingGlobalContext = remainingGlobalContext;
                remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                let nextContextElement = this.getReturnState(remainingGlobalContext);
                if (contextElements == null) {
                    contextElements = new IntegerList_1.IntegerList();
                }
                if (remainingGlobalContext.isEmpty) {
                    remainingGlobalContext = undefined;
                }
                else {
                    remainingGlobalContext = remainingGlobalContext.parent;
                }
                contextElements.add(nextContextElement);
                if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    for (let i = 0; i < closureConfigs.length; i++) {
                        closureConfigs[i] = closureConfigs[i].appendContext(nextContextElement, contextCache);
                    }
                }
            }
        } while (useContext && stepIntoGlobal);
        if (reach.isEmpty) {
            this.setDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
            return [ATNSimulator_1.ATNSimulator.ERROR, remainingGlobalContext];
        }
        let result = this.addDFAEdge(dfa, s, t, contextElements, reach, contextCache);
        return [result, remainingGlobalContext];
    }
    /**
     * Return a configuration set containing only the configurations from
     * `configs` which are in a {@link RuleStopState}. If all
     * configurations in `configs` are already in a rule stop state, this
     * method simply returns `configs`.
     *
     * @param configs the configuration set to update
     * @param contextCache the {@link PredictionContext} cache
     *
     * @returns `configs` if all configurations in `configs` are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from `configs` which are in a rule stop state
     */
    removeAllConfigsNotInRuleStopState(configs, contextCache) {
        if (PredictionMode_1.PredictionMode.allConfigsInRuleStopStates(configs)) {
            return configs;
        }
        let result = new ATNConfigSet_1.ATNConfigSet();
        for (let config of configs) {
            if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            result.add(config, contextCache);
        }
        return result;
    }
    computeStartState(dfa, globalContext, useContext) {
        let s0 = dfa.isPrecedenceDfa ? dfa.getPrecedenceStartState(this._parser.precedence, useContext) :
            useContext ? dfa.s0full :
                dfa.s0;
        if (s0 != null) {
            if (!useContext) {
                return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, globalContext);
            }
            s0.setContextSensitive(this.atn);
        }
        let decision = dfa.decision;
        // @NotNull
        let p = dfa.atnStartState;
        let previousContext = 0;
        let remainingGlobalContext = globalContext;
        let initialContext = useContext ? PredictionContext_1.PredictionContext.EMPTY_FULL : PredictionContext_1.PredictionContext.EMPTY_LOCAL; // always at least the implicit call to start rule
        let contextCache = new PredictionContextCache_1.PredictionContextCache();
        if (useContext) {
            if (!this.enable_global_context_dfa) {
                while (remainingGlobalContext != null) {
                    if (remainingGlobalContext.isEmpty) {
                        previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                        remainingGlobalContext = undefined;
                    }
                    else {
                        previousContext = this.getReturnState(remainingGlobalContext);
                        initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                        remainingGlobalContext = remainingGlobalContext.parent;
                    }
                }
            }
            while (s0 != null && s0.isContextSensitive && remainingGlobalContext != null) {
                let next;
                remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                if (remainingGlobalContext.isEmpty) {
                    next = s0.getContextTarget(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY);
                    previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                    remainingGlobalContext = undefined;
                }
                else {
                    previousContext = this.getReturnState(remainingGlobalContext);
                    next = s0.getContextTarget(previousContext);
                    initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                    remainingGlobalContext = remainingGlobalContext.parent;
                }
                if (next == null) {
                    break;
                }
                s0 = next;
            }
        }
        if (s0 != null && !s0.isContextSensitive) {
            return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
        }
        let configs = new ATNConfigSet_1.ATNConfigSet();
        while (true) {
            let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
            let n = p.numberOfTransitions;
            for (let ti = 0; ti < n; ti++) {
                // for each transition
                let target = p.transition(ti).target;
                reachIntermediate.add(ATNConfig_1.ATNConfig.create(target, ti + 1, initialContext));
            }
            let hasMoreContext = remainingGlobalContext != null;
            if (!hasMoreContext) {
                configs.isOutermostConfigSet = true;
            }
            let collectPredicates = true;
            this.closure(reachIntermediate, configs, collectPredicates, hasMoreContext, contextCache, false);
            let stepIntoGlobal = configs.dipsIntoOuterContext;
            let next;
            if (useContext && !this.enable_global_context_dfa) {
                s0 = this.addDFAState(dfa, configs, contextCache);
                break;
            }
            else if (s0 == null) {
                if (!dfa.isPrecedenceDfa) {
                    next = this.addDFAState(dfa, configs, contextCache);
                    if (useContext) {
                        if (!dfa.s0full) {
                            dfa.s0full = next;
                        }
                        else {
                            next = dfa.s0full;
                        }
                    }
                    else {
                        if (!dfa.s0) {
                            dfa.s0 = next;
                        }
                        else {
                            next = dfa.s0;
                        }
                    }
                }
                else {
                    /* If this is a precedence DFA, we use applyPrecedenceFilter
                     * to convert the computed start state to a precedence start
                     * state. We then use DFA.setPrecedenceStartState to set the
                     * appropriate start state for the precedence level rather
                     * than simply setting DFA.s0.
                     */
                    configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                    next = this.addDFAState(dfa, configs, contextCache);
                    dfa.setPrecedenceStartState(this._parser.precedence, useContext, next);
                }
            }
            else {
                if (dfa.isPrecedenceDfa) {
                    configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                }
                next = this.addDFAState(dfa, configs, contextCache);
                s0.setContextTarget(previousContext, next);
            }
            s0 = next;
            if (!useContext || !stepIntoGlobal) {
                break;
            }
            // TODO: make sure it distinguishes empty stack states
            next.setContextSensitive(this.atn);
            // We know remainingGlobalContext is not undefined at this point (why?)
            remainingGlobalContext = remainingGlobalContext;
            configs.clear();
            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
            let nextContextElement = this.getReturnState(remainingGlobalContext);
            if (remainingGlobalContext.isEmpty) {
                remainingGlobalContext = undefined;
            }
            else {
                remainingGlobalContext = remainingGlobalContext.parent;
            }
            if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                initialContext = initialContext.appendSingleContext(nextContextElement, contextCache);
            }
            previousContext = nextContextElement;
        }
        return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
    }
    /**
     * This method transforms the start state computed by
     * {@link #computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * 1. Evaluate the precedence predicates for each configuration using
     *    {@link SemanticContext#evalPrecedence}.
     * 1. When {@link ATNConfig#isPrecedenceFilterSuppressed} is `false`,
     *    remove all configurations which predict an alternative greater than 1,
     *    for which another configuration that predicts alternative 1 is in the
     *    same ATN state with the same prediction context. This transformation is
     *    valid for the following reasons:
     *
     *     * The closure block cannot contain any epsilon transitions which bypass
     *       the body of the closure, so all states reachable via alternative 1 are
     *       part of the precedence alternatives of the transformed left-recursive
     *       rule.
     *     * The "primary" portion of a left recursive rule cannot contain an
     *       epsilon transition, so the only way an alternative other than 1 can exist
     *       in a state that is also reachable via alternative 1 is by nesting calls
     *       to the left-recursive rule, with the outer calls not being at the
     *       preferred precedence level. The
     *       {@link ATNConfig#isPrecedenceFilterSuppressed} property marks ATN
     *       configurations which do not meet this condition, and therefore are not
     *       eligible for elimination during the filtering process.
     *
     * The prediction context must be considered by this filter to address
     * situations like the following.
     *
     * ```antlr
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * ```
     *
     * If the above grammar, the ATN state immediately before the token
     * reference `'a'` in `letterA` is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * `statement`. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to `prog` (and then back in to `statement`
     * from being eliminated by the filter.
     *
     * @param configs The configuration set computed by
     * {@link #computeStartState} as the start state for the DFA.
     * @returns The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser#getPrecedence}).
     */
    applyPrecedenceFilter(configs, globalContext, contextCache) {
        let statesFromAlt1 = new Map();
        let configSet = new ATNConfigSet_1.ATNConfigSet();
        for (let config of configs) {
            // handle alt 1 first
            if (config.alt !== 1) {
                continue;
            }
            let updatedContext = config.semanticContext.evalPrecedence(this._parser, globalContext);
            if (updatedContext == null) {
                // the configuration was eliminated
                continue;
            }
            statesFromAlt1.set(config.state.stateNumber, config.context);
            if (updatedContext !== config.semanticContext) {
                configSet.add(config.transform(config.state, false, updatedContext), contextCache);
            }
            else {
                configSet.add(config, contextCache);
            }
        }
        for (let config of configs) {
            if (config.alt === 1) {
                // already handled
                continue;
            }
            if (!config.isPrecedenceFilterSuppressed) {
                /* In the future, this elimination step could be updated to also
                 * filter the prediction context for alternatives predicting alt>1
                 * (basically a graph subtraction algorithm).
                 */
                let context = statesFromAlt1.get(config.state.stateNumber);
                if (context != null && context.equals(config.context)) {
                    // eliminated
                    continue;
                }
            }
            configSet.add(config, contextCache);
        }
        return configSet;
    }
    getReachableTarget(source, trans, ttype) {
        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
            return trans.target;
        }
        return undefined;
    }
    /** collect and set D's semantic context */
    predicateDFAState(D, configs, nalts) {
        let conflictingAlts = this.getConflictingAltsFromConfigSet(configs);
        if (!conflictingAlts) {
            throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");
        }
        if (ParserATNSimulator.debug) {
            console.log("predicateDFAState " + D);
        }
        let altToPred = this.getPredsForAmbigAlts(conflictingAlts, configs, nalts);
        // altToPred[uniqueAlt] is now our validating predicate (if any)
        let predPredictions;
        if (altToPred != null) {
            // we have a validating predicate; test it
            // Update DFA so reach becomes accept state with predicate
            predPredictions = this.getPredicatePredictions(conflictingAlts, altToPred);
            D.predicates = predPredictions;
        }
        return predPredictions;
    }
    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        /* altToPred starts as an array of all undefined contexts. The entry at index i
         * corresponds to alternative i. altToPred[i] may have one of three values:
         *   1. undefined: no ATNConfig c is found such that c.alt===i
         *   2. SemanticContext.NONE: At least one ATNConfig c exists such that
         *      c.alt===i and c.semanticContext===SemanticContext.NONE. In other words,
         *      alt i has at least one unpredicated config.
         *   3. Non-NONE Semantic Context: There exists at least one, and for all
         *      ATNConfig c such that c.alt===i, c.semanticContext!==SemanticContext.NONE.
         *
         * From this, it is clear that NONE||anything==NONE.
         */
        let altToPred = new Array(nalts + 1);
        let n = altToPred.length;
        for (let c of configs) {
            if (ambigAlts.get(c.alt)) {
                altToPred[c.alt] = SemanticContext_1.SemanticContext.or(altToPred[c.alt], c.semanticContext);
            }
        }
        let nPredAlts = 0;
        for (let i = 0; i < n; i++) {
            if (altToPred[i] == null) {
                altToPred[i] = SemanticContext_1.SemanticContext.NONE;
            }
            else if (altToPred[i] !== SemanticContext_1.SemanticContext.NONE) {
                nPredAlts++;
            }
        }
        // At this point we know `altToPred` doesn't contain any undefined entries
        let result = altToPred;
        // nonambig alts are undefined in result
        if (nPredAlts === 0) {
            result = undefined;
        }
        if (ParserATNSimulator.debug) {
            console.log("getPredsForAmbigAlts result " + (result ? Arrays_1.Arrays.toString(result) : "undefined"));
        }
        return result;
    }
    getPredicatePredictions(ambigAlts, altToPred) {
        let pairs = [];
        let containsPredicate = false;
        for (let i = 1; i < altToPred.length; i++) {
            let pred = altToPred[i];
            // unpredicated is indicated by SemanticContext.NONE
            assert(pred != null);
            // find first unpredicated but ambig alternative, if any.
            // Only ambiguous alternatives will have SemanticContext.NONE.
            // Any unambig alts or ambig naked alts after first ambig naked are ignored
            // (undefined, i) means alt i is the default prediction
            // if no (undefined, i), then no default prediction.
            if (ambigAlts != null && ambigAlts.get(i) && pred === SemanticContext_1.SemanticContext.NONE) {
                pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
            }
            else if (pred !== SemanticContext_1.SemanticContext.NONE) {
                containsPredicate = true;
                pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
            }
        }
        if (!containsPredicate) {
            return undefined;
        }
        //		System.out.println(Arrays.toString(altToPred)+"->"+pairs);
        return pairs;
    }
    /** Look through a list of predicate/alt pairs, returning alts for the
     *  pairs that win. An `undefined` predicate indicates an alt containing an
     *  unpredicated config which behaves as "always true."
     */
    evalSemanticContext(predPredictions, outerContext, complete) {
        let predictions = new BitSet_1.BitSet();
        for (let pair of predPredictions) {
            if (pair.pred === SemanticContext_1.SemanticContext.NONE) {
                predictions.set(pair.alt);
                if (!complete) {
                    break;
                }
                continue;
            }
            let evaluatedResult = this.evalSemanticContextImpl(pair.pred, outerContext, pair.alt);
            if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                console.log("eval pred " + pair + "=" + evaluatedResult);
            }
            if (evaluatedResult) {
                if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                    console.log("PREDICT " + pair.alt);
                }
                predictions.set(pair.alt);
                if (!complete) {
                    break;
                }
            }
        }
        return predictions;
    }
    /**
     * Evaluate a semantic context within a specific parser context.
     *
     * This method might not be called for every semantic context evaluated
     * during the prediction process. In particular, we currently do not
     * evaluate the following but it may change in the future:
     *
     * * Precedence predicates (represented by
     *   {@link SemanticContext.PrecedencePredicate}) are not currently evaluated
     *   through this method.
     * * Operator predicates (represented by {@link SemanticContext.AND} and
     *   {@link SemanticContext.OR}) are evaluated as a single semantic
     *   context, rather than evaluating the operands individually.
     *   Implementations which require evaluation results from individual
     *   predicates should override this method to explicitly handle evaluation of
     *   the operands within operator predicates.
     *
     * @param pred The semantic context to evaluate
     * @param parserCallStack The parser context in which to evaluate the
     * semantic context
     * @param alt The alternative which is guarded by `pred`
     *
     * @since 4.3
     */
    evalSemanticContextImpl(pred, parserCallStack, alt) {
        return pred.eval(this._parser, parserCallStack);
    }
    /* TODO: If we are doing predicates, there is no point in pursuing
         closure operations if we reach a DFA state that uniquely predicts
         alternative. We will not be caching that DFA state and it is a
         waste to pursue the closure. Might have to advance when we do
         ambig detection thought :(
          */
    closure(sourceConfigs, configs, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon) {
        if (contextCache == null) {
            contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
        }
        let currentConfigs = sourceConfigs;
        let closureBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        while (currentConfigs.size > 0) {
            let intermediate = new ATNConfigSet_1.ATNConfigSet();
            for (let config of currentConfigs) {
                this.closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContext, contextCache, 0, treatEofAsEpsilon);
            }
            currentConfigs = intermediate;
        }
    }
    closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth, treatEofAsEpsilon) {
        if (ParserATNSimulator.debug) {
            console.log("closure(" + config.toString(this._parser, true) + ")");
        }
        if (config.state instanceof RuleStopState_1.RuleStopState) {
            // We hit rule end. If we have context info, use it
            if (!config.context.isEmpty) {
                let hasEmpty = config.context.hasEmpty;
                let nonEmptySize = config.context.size - (hasEmpty ? 1 : 0);
                for (let i = 0; i < nonEmptySize; i++) {
                    let newContext = config.context.getParent(i); // "pop" return state
                    let returnState = this.atn.states[config.context.getReturnState(i)];
                    let c = ATNConfig_1.ATNConfig.create(returnState, config.alt, newContext, config.semanticContext);
                    // While we have context to pop back from, we may have
                    // gotten that context AFTER having fallen off a rule.
                    // Make sure we track that we are now out of context.
                    c.outerContextDepth = config.outerContextDepth;
                    c.isPrecedenceFilterSuppressed = config.isPrecedenceFilterSuppressed;
                    assert(depth > MIN_INTEGER_VALUE);
                    this.closureImpl(c, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth - 1, treatEofAsEpsilon);
                }
                if (!hasEmpty || !hasMoreContexts) {
                    return;
                }
                config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
            }
            else if (!hasMoreContexts) {
                configs.add(config, contextCache);
                return;
            }
            else {
                // else if we have no context info, just chase follow links (if greedy)
                if (ParserATNSimulator.debug) {
                    console.log("FALLING off rule " +
                        this.getRuleName(config.state.ruleIndex));
                }
                if (config.context === PredictionContext_1.PredictionContext.EMPTY_FULL) {
                    // no need to keep full context overhead when we step out
                    config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
                }
                else if (!config.reachesIntoOuterContext && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                    // add stop state when leaving decision rule for the first time
                    configs.add(config, contextCache);
                }
            }
        }
        let p = config.state;
        // optimization
        if (!p.onlyHasEpsilonTransitions) {
            configs.add(config, contextCache);
            // make sure to not return here, because EOF transitions can act as
            // both epsilon transitions and non-epsilon transitions.
            if (ParserATNSimulator.debug) {
                console.log("added config " + configs);
            }
        }
        for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
            // This block implements first-edge elimination of ambiguous LR
            // alternatives as part of dynamic disambiguation during prediction.
            // See antlr/antlr4#1398.
            if (i === 0
                && p.stateType === ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY
                && p.precedenceRuleDecision
                && !config.context.hasEmpty) {
                let precedenceDecision = p;
                // When suppress is true, it means the outgoing edge i==0 is
                // ambiguous with the outgoing edge i==1, and thus the closure
                // operation can dynamically disambiguate by suppressing this
                // edge during the closure operation.
                let suppress = true;
                for (let j = 0; j < config.context.size; j++) {
                    if (!precedenceDecision.precedenceLoopbackStates.get(config.context.getReturnState(j))) {
                        suppress = false;
                        break;
                    }
                }
                if (suppress) {
                    continue;
                }
            }
            let t = p.getOptimizedTransition(i);
            let continueCollecting = !(t instanceof ActionTransition_1.ActionTransition) && collectPredicates;
            let c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, contextCache, treatEofAsEpsilon);
            if (c != null) {
                if (t instanceof RuleTransition_1.RuleTransition) {
                    if (intermediate != null && !collectPredicates) {
                        intermediate.add(c, contextCache);
                        continue;
                    }
                }
                let newDepth = depth;
                if (config.state instanceof RuleStopState_1.RuleStopState) {
                    // target fell off end of rule; mark resulting c as having dipped into outer context
                    // We can't get here if incoming config was rule stop and we had context
                    // track how far we dip into outer context.  Might
                    // come in handy and we avoid evaluating context dependent
                    // preds if this is > 0.
                    if (this.dfa != null && this.dfa.isPrecedenceDfa) {
                        let outermostPrecedenceReturn = t.outermostPrecedenceReturn;
                        if (outermostPrecedenceReturn === this.dfa.atnStartState.ruleIndex) {
                            c.isPrecedenceFilterSuppressed = true;
                        }
                    }
                    c.outerContextDepth = c.outerContextDepth + 1;
                    if (!closureBusy.add(c)) {
                        // avoid infinite recursion for right-recursive rules
                        continue;
                    }
                    assert(newDepth > MIN_INTEGER_VALUE);
                    newDepth--;
                    if (ParserATNSimulator.debug) {
                        console.log("dips into outer ctx: " + c);
                    }
                }
                else if (t instanceof RuleTransition_1.RuleTransition) {
                    if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
                        assert(c.context === config.context);
                        if (newDepth === 0) {
                            // the pop/push of a tail call would keep the depth
                            // constant, except we latch if it goes negative
                            newDepth--;
                            if (!this.tail_call_preserves_sll && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                                // make sure the SLL config "dips into the outer context" or prediction may not fall back to LL on conflict
                                c.outerContextDepth = c.outerContextDepth + 1;
                            }
                        }
                    }
                    else {
                        // latch when newDepth goes negative - once we step out of the entry context we can't return
                        if (newDepth >= 0) {
                            newDepth++;
                        }
                    }
                }
                else {
                    if (!t.isEpsilon && !closureBusy.add(c)) {
                        // avoid infinite recursion for EOF* and EOF+
                        continue;
                    }
                }
                this.closureImpl(c, configs, intermediate, closureBusy, continueCollecting, hasMoreContexts, contextCache, newDepth, treatEofAsEpsilon);
            }
        }
    }
    getRuleName(index) {
        if (this._parser != null && index >= 0) {
            return this._parser.ruleNames[index];
        }
        return "<rule " + index + ">";
    }
    getEpsilonTarget(config, t, collectPredicates, inContext, contextCache, treatEofAsEpsilon) {
        switch (t.serializationType) {
            case 3 /* RULE */:
                return this.ruleTransition(config, t, contextCache);
            case 10 /* PRECEDENCE */:
                return this.precedenceTransition(config, t, collectPredicates, inContext);
            case 4 /* PREDICATE */:
                return this.predTransition(config, t, collectPredicates, inContext);
            case 6 /* ACTION */:
                return this.actionTransition(config, t);
            case 1 /* EPSILON */:
                return config.transform(t.target, false);
            case 5 /* ATOM */:
            case 2 /* RANGE */:
            case 7 /* SET */:
                // EOF transitions act like epsilon transitions after the first EOF
                // transition is traversed
                if (treatEofAsEpsilon) {
                    if (t.matches(Token_1.Token.EOF, 0, 1)) {
                        return config.transform(t.target, false);
                    }
                }
                return undefined;
            default:
                return undefined;
        }
    }
    actionTransition(config, t) {
        if (ParserATNSimulator.debug) {
            console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
        }
        return config.transform(t.target, false);
    }
    precedenceTransition(config, pt, collectPredicates, inContext) {
        if (ParserATNSimulator.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p" +
                ", ctx dependent=true");
            if (this._parser != null) {
                console.log("context surrounding pred is " +
                    this._parser.getRuleInvocationStack());
            }
        }
        let c;
        if (collectPredicates && inContext) {
            let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
            c = config.transform(pt.target, false, newSemCtx);
        }
        else {
            c = config.transform(pt.target, false);
        }
        if (ParserATNSimulator.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }
    predTransition(config, pt, collectPredicates, inContext) {
        if (ParserATNSimulator.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.ruleIndex + ":" + pt.predIndex +
                ", ctx dependent=" + pt.isCtxDependent);
            if (this._parser != null) {
                console.log("context surrounding pred is " +
                    this._parser.getRuleInvocationStack());
            }
        }
        let c;
        if (collectPredicates &&
            (!pt.isCtxDependent || (pt.isCtxDependent && inContext))) {
            let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
            c = config.transform(pt.target, false, newSemCtx);
        }
        else {
            c = config.transform(pt.target, false);
        }
        if (ParserATNSimulator.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }
    ruleTransition(config, t, contextCache) {
        if (ParserATNSimulator.debug) {
            console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) +
                ", ctx=" + config.context);
        }
        let returnState = t.followState;
        let newContext;
        if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
            newContext = config.context;
        }
        else if (contextCache != null) {
            newContext = contextCache.getChild(config.context, returnState.stateNumber);
        }
        else {
            newContext = config.context.getChild(returnState.stateNumber);
        }
        return config.transform(t.target, false, newContext);
    }
    isConflicted(configset, contextCache) {
        if (configset.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER || configset.size <= 1) {
            return undefined;
        }
        let configs = configset.toArray();
        configs.sort(ParserATNSimulator.STATE_ALT_SORT_COMPARATOR);
        let exact = !configset.dipsIntoOuterContext;
        let alts = new BitSet_1.BitSet();
        let minAlt = configs[0].alt;
        alts.set(minAlt);
        /* Quick checks come first (single pass, no context joining):
         *  1. Make sure first config in the sorted list predicts the minimum
         *     represented alternative.
         *  2. Make sure every represented state has at least one configuration
         *     which predicts the minimum represented alternative.
         *  3. (exact only) make sure every represented state has at least one
         *     configuration which predicts each represented alternative.
         */
        // quick check 1 & 2 => if we assume #1 holds and check #2 against the
        // minAlt from the first state, #2 will fail if the assumption was
        // incorrect
        let currentState = configs[0].state.nonStopStateNumber;
        for (let config of configs) {
            let stateNumber = config.state.nonStopStateNumber;
            if (stateNumber !== currentState) {
                if (config.alt !== minAlt) {
                    return undefined;
                }
                currentState = stateNumber;
            }
        }
        let representedAlts;
        if (exact) {
            currentState = configs[0].state.nonStopStateNumber;
            // get the represented alternatives of the first state
            representedAlts = new BitSet_1.BitSet();
            let maxAlt = minAlt;
            for (let config of configs) {
                if (config.state.nonStopStateNumber !== currentState) {
                    break;
                }
                let alt = config.alt;
                representedAlts.set(alt);
                maxAlt = alt;
            }
            // quick check #3:
            currentState = configs[0].state.nonStopStateNumber;
            let currentAlt = minAlt;
            for (let config of configs) {
                let stateNumber = config.state.nonStopStateNumber;
                let alt = config.alt;
                if (stateNumber !== currentState) {
                    if (currentAlt !== maxAlt) {
                        exact = false;
                        break;
                    }
                    currentState = stateNumber;
                    currentAlt = minAlt;
                }
                else if (alt !== currentAlt) {
                    if (alt !== representedAlts.nextSetBit(currentAlt + 1)) {
                        exact = false;
                        break;
                    }
                    currentAlt = alt;
                }
            }
        }
        currentState = configs[0].state.nonStopStateNumber;
        let firstIndexCurrentState = 0;
        let lastIndexCurrentStateMinAlt = 0;
        let joinedCheckContext = configs[0].context;
        for (let i = 1; i < configs.length; i++) {
            let config = configs[i];
            if (config.alt !== minAlt) {
                break;
            }
            if (config.state.nonStopStateNumber !== currentState) {
                break;
            }
            lastIndexCurrentStateMinAlt = i;
            joinedCheckContext = contextCache.join(joinedCheckContext, configs[i].context);
        }
        for (let i = lastIndexCurrentStateMinAlt + 1; i < configs.length; i++) {
            let config = configs[i];
            let state = config.state;
            alts.set(config.alt);
            if (state.nonStopStateNumber !== currentState) {
                currentState = state.nonStopStateNumber;
                firstIndexCurrentState = i;
                lastIndexCurrentStateMinAlt = i;
                joinedCheckContext = config.context;
                for (let j = firstIndexCurrentState + 1; j < configs.length; j++) {
                    let config2 = configs[j];
                    if (config2.alt !== minAlt) {
                        break;
                    }
                    if (config2.state.nonStopStateNumber !== currentState) {
                        break;
                    }
                    lastIndexCurrentStateMinAlt = j;
                    joinedCheckContext = contextCache.join(joinedCheckContext, config2.context);
                }
                i = lastIndexCurrentStateMinAlt;
                continue;
            }
            let joinedCheckContext2 = config.context;
            let currentAlt = config.alt;
            let lastIndexCurrentStateCurrentAlt = i;
            for (let j = lastIndexCurrentStateCurrentAlt + 1; j < configs.length; j++) {
                let config2 = configs[j];
                if (config2.alt !== currentAlt) {
                    break;
                }
                if (config2.state.nonStopStateNumber !== currentState) {
                    break;
                }
                lastIndexCurrentStateCurrentAlt = j;
                joinedCheckContext2 = contextCache.join(joinedCheckContext2, config2.context);
            }
            i = lastIndexCurrentStateCurrentAlt;
            let check = contextCache.join(joinedCheckContext, joinedCheckContext2);
            if (!joinedCheckContext.equals(check)) {
                return undefined;
            }
            // update exact if necessary
            exact = exact && joinedCheckContext.equals(joinedCheckContext2);
        }
        return new ConflictInfo_1.ConflictInfo(alts, exact);
    }
    getConflictingAltsFromConfigSet(configs) {
        let conflictingAlts = configs.conflictingAlts;
        if (conflictingAlts == null && configs.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            conflictingAlts = new BitSet_1.BitSet();
            conflictingAlts.set(configs.uniqueAlt);
        }
        return conflictingAlts;
    }
    getTokenName(t) {
        if (t === Token_1.Token.EOF) {
            return "EOF";
        }
        let vocabulary = this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        let displayName = vocabulary.getDisplayName(t);
        if (displayName === String(t)) {
            return displayName;
        }
        return displayName + "<" + t + ">";
    }
    getLookaheadName(input) {
        return this.getTokenName(input.LA(1));
    }
    dumpDeadEndConfigs(nvae) {
        console.log("dead end configs: ");
        let deadEndConfigs = nvae.deadEndConfigs;
        if (!deadEndConfigs) {
            return;
        }
        for (let c of deadEndConfigs) {
            let trans = "no edges";
            if (c.state.numberOfOptimizedTransitions > 0) {
                let t = c.state.getOptimizedTransition(0);
                if (t instanceof AtomTransition_1.AtomTransition) {
                    trans = "Atom " + this.getTokenName(t._label);
                }
                else if (t instanceof SetTransition_1.SetTransition) {
                    let not = t instanceof NotSetTransition_1.NotSetTransition;
                    trans = (not ? "~" : "") + "Set " + t.set.toString();
                }
            }
            console.log(c.toString(this._parser, true) + ":" + trans);
        }
    }
    noViableAlt(input, outerContext, configs, startIndex) {
        return new NoViableAltException_1.NoViableAltException(this._parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }
    getUniqueAlt(configs) {
        let alt = ATN_1.ATN.INVALID_ALT_NUMBER;
        for (let c of configs) {
            if (alt === ATN_1.ATN.INVALID_ALT_NUMBER) {
                alt = c.alt; // found first alt
            }
            else if (c.alt !== alt) {
                return ATN_1.ATN.INVALID_ALT_NUMBER;
            }
        }
        return alt;
    }
    configWithAltAtStopState(configs, alt) {
        for (let c of configs) {
            if (c.alt === alt) {
                if (c.state instanceof RuleStopState_1.RuleStopState) {
                    return true;
                }
            }
        }
        return false;
    }
    addDFAEdge(dfa, fromState, t, contextTransitions, toConfigs, contextCache) {
        assert(contextTransitions == null || contextTransitions.isEmpty || dfa.isContextSensitive);
        let from = fromState;
        let to = this.addDFAState(dfa, toConfigs, contextCache);
        if (contextTransitions != null) {
            for (let context of contextTransitions.toArray()) {
                if (context === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    if (from.configs.isOutermostConfigSet) {
                        continue;
                    }
                }
                from.setContextSensitive(this.atn);
                from.setContextSymbol(t);
                let next = from.getContextTarget(context);
                if (next != null) {
                    from = next;
                    continue;
                }
                next = this.addDFAContextState(dfa, from.configs, context, contextCache);
                assert(context !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY || next.configs.isOutermostConfigSet);
                from.setContextTarget(context, next);
                from = next;
            }
        }
        if (ParserATNSimulator.debug) {
            console.log("EDGE " + from + " -> " + to + " upon " + this.getTokenName(t));
        }
        this.setDFAEdge(from, t, to);
        if (ParserATNSimulator.debug) {
            console.log("DFA=\n" + dfa.toString(this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY, this._parser != null ? this._parser.ruleNames : undefined));
        }
        return to;
    }
    setDFAEdge(p, t, q) {
        if (p != null) {
            p.setTarget(t, q);
        }
    }
    /** See comment on LexerInterpreter.addDFAState. */
    addDFAContextState(dfa, configs, returnContext, contextCache) {
        if (returnContext !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            let contextConfigs = new ATNConfigSet_1.ATNConfigSet();
            for (let config of configs) {
                contextConfigs.add(config.appendContext(returnContext, contextCache));
            }
            return this.addDFAState(dfa, contextConfigs, contextCache);
        }
        else {
            assert(!configs.isOutermostConfigSet, "Shouldn't be adding a duplicate edge.");
            configs = configs.clone(true);
            configs.isOutermostConfigSet = true;
            return this.addDFAState(dfa, configs, contextCache);
        }
    }
    /** See comment on LexerInterpreter.addDFAState. */
    addDFAState(dfa, configs, contextCache) {
        let enableDfa = this.enable_global_context_dfa || !configs.isOutermostConfigSet;
        if (enableDfa) {
            if (!configs.isReadOnly) {
                configs.optimizeConfigs(this);
            }
            let proposed = this.createDFAState(dfa, configs);
            let existing = dfa.states.get(proposed);
            if (existing != null) {
                return existing;
            }
        }
        if (!configs.isReadOnly) {
            if (configs.conflictInfo == null) {
                configs.conflictInfo = this.isConflicted(configs, contextCache);
            }
        }
        let newState = this.createDFAState(dfa, configs.clone(true));
        // getDecisionState won't return undefined when we request a known valid decision
        let decisionState = this.atn.getDecisionState(dfa.decision);
        let predictedAlt = this.getUniqueAlt(configs);
        if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(predictedAlt);
        }
        else if (configs.conflictingAlts != null) {
            let conflictingAlts = configs.conflictingAlts;
            if (conflictingAlts) {
                newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(conflictingAlts.nextSetBit(0));
            }
        }
        if (newState.isAcceptState && configs.hasSemanticContext) {
            this.predicateDFAState(newState, configs, decisionState.numberOfTransitions);
        }
        if (!enableDfa) {
            return newState;
        }
        let added = dfa.addState(newState);
        if (ParserATNSimulator.debug && added === newState) {
            console.log("adding new DFA state: " + newState);
        }
        return added;
    }
    createDFAState(dfa, configs) {
        return new DFAState_1.DFAState(configs);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + conflictState.s0.configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportAttemptingFullContext) {
                listener.reportAttemptingFullContext(this._parser, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
            }
        }
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportContextSensitivity decision=" + dfa.decision + ":" + acceptState.s0.configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportContextSensitivity) {
                listener.reportContextSensitivity(this._parser, dfa, startIndex, stopIndex, prediction, acceptState);
            }
        }
    }
    /** If context sensitive parsing, we know it's ambiguity not conflict */
    reportAmbiguity(dfa, D, // the DFA state from execATN(): void that had SLL conflicts
    startIndex, stopIndex, exact, ambigAlts, configs) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportAmbiguity " +
                ambigAlts + ":" + configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportAmbiguity) {
                listener.reportAmbiguity(this._parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
            }
        }
    }
    getReturnState(context) {
        if (context.isEmpty) {
            return PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
        }
        let state = this.atn.states[context.invokingState];
        let transition = state.transition(0);
        return transition.followState.stateNumber;
    }
    skipTailCalls(context) {
        if (!this.optimize_tail_calls) {
            return context;
        }
        while (!context.isEmpty) {
            let state = this.atn.states[context.invokingState];
            assert(state.numberOfTransitions === 1 && state.transition(0).serializationType === 3 /* RULE */);
            let transition = state.transition(0);
            if (!transition.tailCall) {
                break;
            }
            // This method requires that the root ancestor of the ParserRuleContext be empty. If we make it to this
            // line, we know the current node is not empty, which means it does have a parent.
            context = context.parent;
        }
        return context;
    }
    /**
     * @since 4.3
     */
    get parser() {
        return this._parser;
    }
};
ParserATNSimulator.debug = false;
ParserATNSimulator.dfa_debug = false;
ParserATNSimulator.retry_debug = false;
ParserATNSimulator.STATE_ALT_SORT_COMPARATOR = (o1, o2) => {
    let diff = o1.state.nonStopStateNumber - o2.state.nonStopStateNumber;
    if (diff !== 0) {
        return diff;
    }
    diff = o1.alt - o2.alt;
    if (diff !== 0) {
        return diff;
    }
    return 0;
};
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "predictionMode", void 0);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getPredictionMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "setPredictionMode", null);
__decorate([
    Decorators_1.Override
], ParserATNSimulator.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "adaptivePredict", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getStartState", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "execDFA", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "execATN", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "handleNoViableAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "computeTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "removeAllConfigsNotInRuleStopState", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "computeStartState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "applyPrecedenceFilter", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getReachableTarget", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getPredsForAmbigAlts", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "evalSemanticContext", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "evalSemanticContextImpl", null);
__decorate([
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "closure", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.Nullable),
    __param(3, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "closureImpl", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getRuleName", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getEpsilonTarget", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "actionTransition", null);
__decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "precedenceTransition", null);
__decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "predTransition", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "ruleTransition", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "isConflicted", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getTokenName", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "dumpDeadEndConfigs", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "noViableAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getUniqueAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "configWithAltAtStopState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAEdge", null);
__decorate([
    __param(0, Decorators_1.Nullable), __param(2, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "setDFAEdge", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAContextState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "createDFAState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportAttemptingFullContext", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportContextSensitivity", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportAmbiguity", null);
ParserATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator);
exports.ParserATNSimulator = ParserATNSimulator;

},{"../Decorators":13,"../IntStream":19,"../NoViableAltException":25,"../ParserRuleContext":28,"../Token":37,"../VocabularyImpl":39,"../dfa/AcceptStateInfo":104,"../dfa/DFAState":107,"../misc/Array2DHashSet":111,"../misc/Arrays":113,"../misc/BitSet":114,"../misc/IntegerList":117,"../misc/Interval":119,"../misc/ObjectEqualityComparator":123,"./ATN":40,"./ATNConfig":41,"./ATNConfigSet":42,"./ATNSimulator":45,"./ATNStateType":47,"./ActionTransition":49,"./AtomTransition":51,"./ConflictInfo":56,"./DecisionState":60,"./NotSetTransition":78,"./PredictionContext":87,"./PredictionContextCache":88,"./PredictionMode":89,"./RuleStopState":93,"./RuleTransition":94,"./SemanticContext":95,"./SetTransition":96,"./SimulatorState":97,"assert":153}],82:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:34.9572142-07:00
const ATNStateType_1 = require("./ATNStateType");
const BlockStartState_1 = require("./BlockStartState");
const Decorators_1 = require("../Decorators");
/** Start of `(A|B|...)+` loop. Technically a decision state, but
 *  we don't use for code generation; somebody might need it, so I'm defining
 *  it for completeness. In reality, the {@link PlusLoopbackState} node is the
 *  real decision-making note for `A+`.
 */
class PlusBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.PLUS_BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], PlusBlockStartState.prototype, "stateType", null);
exports.PlusBlockStartState = PlusBlockStartState;

},{"../Decorators":13,"./ATNStateType":47,"./BlockStartState":55}],83:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.0257730-07:00
const ATNStateType_1 = require("./ATNStateType");
const DecisionState_1 = require("./DecisionState");
const Decorators_1 = require("../Decorators");
/** Decision state for `A+` and `(A|B)+`.  It has two transitions:
 *  one to the loop back to start of the block and one to exit.
 */
class PlusLoopbackState extends DecisionState_1.DecisionState {
    get stateType() {
        return ATNStateType_1.ATNStateType.PLUS_LOOP_BACK;
    }
}
__decorate([
    Decorators_1.Override
], PlusLoopbackState.prototype, "stateType", null);
exports.PlusLoopbackState = PlusLoopbackState;

},{"../Decorators":13,"./ATNStateType":47,"./DecisionState":60}],84:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00
const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
const Decorators_1 = require("../Decorators");
const SemanticContext_1 = require("./SemanticContext");
/**
 *
 * @author Sam Harwell
 */
let PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, precedence) {
        super(target);
        this.precedence = precedence;
    }
    get serializationType() {
        return 10 /* PRECEDENCE */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    get predicate() {
        return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);
    }
    toString() {
        return this.precedence + " >= _p";
    }
};
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "toString", null);
PrecedencePredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], PrecedencePredicateTransition);
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;

},{"../Decorators":13,"./AbstractPredicateTransition":48,"./SemanticContext":95}],85:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00
const DecisionEventInfo_1 = require("./DecisionEventInfo");
const Decorators_1 = require("../Decorators");
/**
 * This class represents profiling event information for semantic predicate
 * evaluations which occur during prediction.
 *
 * @see ParserATNSimulator#evalSemanticContext
 *
 * @since 4.3
 */
let PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link PredicateEvalInfo} class with the
     * specified detailed predicate evaluation information.
     *
     * @param state The simulator state
     * @param decision The decision number
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the predicate evaluation was
     * triggered. Note that the input stream may be reset to other positions for
     * the actual evaluation of individual predicates.
     * @param semctx The semantic context which was evaluated
     * @param evalResult The results of evaluating the semantic context
     * @param predictedAlt The alternative number for the decision which is
     * guarded by the semantic context `semctx`. See {@link #predictedAlt}
     * for more information.
     *
     * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)
     * @see SemanticContext#eval(Recognizer, RuleContext)
     */
    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
        this.semctx = semctx;
        this.evalResult = evalResult;
        this.predictedAlt = predictedAlt;
    }
};
PredicateEvalInfo = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], PredicateEvalInfo);
exports.PredicateEvalInfo = PredicateEvalInfo;

},{"../Decorators":13,"./DecisionEventInfo":58}],86:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.2826960-07:00
const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
const Decorators_1 = require("../Decorators");
const SemanticContext_1 = require("./SemanticContext");
/** TODO: this is old comment:
 *  A tree of semantic predicates from the grammar AST if label==SEMPRED.
 *  In the ATN, labels will always be exactly one predicate, but the DFA
 *  may have to combine a bunch of them as it collects predicates from
 *  multiple ATN configurations into a single DFA state.
 */
let PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
        super(target);
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
        return 4 /* PREDICATE */;
    }
    get isEpsilon() { return true; }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    get predicate() {
        return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    toString() {
        return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
};
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], PredicateTransition.prototype, "toString", null);
PredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], PredicateTransition);
exports.PredicateTransition = PredicateTransition;

},{"../Decorators":13,"./AbstractPredicateTransition":48,"./SemanticContext":95}],87:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.3812636-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const Arrays_1 = require("../misc/Arrays");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
const PredictionContextCache_1 = require("./PredictionContextCache");
const assert = require("assert");
const INITIAL_HASH = 1;
class PredictionContext {
    constructor(cachedHashCode) {
        this.cachedHashCode = cachedHashCode;
    }
    static calculateEmptyHashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        hash = MurmurHash_1.MurmurHash.finish(hash, 0);
        return hash;
    }
    static calculateSingleHashCode(parent, returnState) {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        hash = MurmurHash_1.MurmurHash.update(hash, parent);
        hash = MurmurHash_1.MurmurHash.update(hash, returnState);
        hash = MurmurHash_1.MurmurHash.finish(hash, 2);
        return hash;
    }
    static calculateHashCode(parents, returnStates) {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        for (let parent of parents) {
            hash = MurmurHash_1.MurmurHash.update(hash, parent);
        }
        for (let returnState of returnStates) {
            hash = MurmurHash_1.MurmurHash.update(hash, returnState);
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, 2 * parents.length);
        return hash;
    }
    static fromRuleContext(atn, outerContext, fullContext = true) {
        if (outerContext.isEmpty) {
            return fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
        }
        let parent;
        if (outerContext._parent) {
            parent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);
        }
        else {
            parent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
        }
        let state = atn.states[outerContext.invokingState];
        let transition = state.transition(0);
        return parent.getChild(transition.followState.stateNumber);
    }
    static addEmptyContext(context) {
        return context.addEmptyContext();
    }
    static removeEmptyContext(context) {
        return context.removeEmptyContext();
    }
    static join(context0, context1, contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED) {
        if (context0 === context1) {
            return context0;
        }
        if (context0.isEmpty) {
            return PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);
        }
        else if (context1.isEmpty) {
            return PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);
        }
        let context0size = context0.size;
        let context1size = context1.size;
        if (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {
            let merged = contextCache.join(context0.getParent(0), context1.getParent(0));
            if (merged === context0.getParent(0)) {
                return context0;
            }
            else if (merged === context1.getParent(0)) {
                return context1;
            }
            else {
                return merged.getChild(context0.getReturnState(0));
            }
        }
        let count = 0;
        let parentsList = new Array(context0size + context1size);
        let returnStatesList = new Array(parentsList.length);
        let leftIndex = 0;
        let rightIndex = 0;
        let canReturnLeft = true;
        let canReturnRight = true;
        while (leftIndex < context0size && rightIndex < context1size) {
            if (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {
                parentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));
                returnStatesList[count] = context0.getReturnState(leftIndex);
                canReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);
                canReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);
                leftIndex++;
                rightIndex++;
            }
            else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {
                parentsList[count] = context0.getParent(leftIndex);
                returnStatesList[count] = context0.getReturnState(leftIndex);
                canReturnRight = false;
                leftIndex++;
            }
            else {
                assert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));
                parentsList[count] = context1.getParent(rightIndex);
                returnStatesList[count] = context1.getReturnState(rightIndex);
                canReturnLeft = false;
                rightIndex++;
            }
            count++;
        }
        while (leftIndex < context0size) {
            parentsList[count] = context0.getParent(leftIndex);
            returnStatesList[count] = context0.getReturnState(leftIndex);
            leftIndex++;
            canReturnRight = false;
            count++;
        }
        while (rightIndex < context1size) {
            parentsList[count] = context1.getParent(rightIndex);
            returnStatesList[count] = context1.getReturnState(rightIndex);
            rightIndex++;
            canReturnLeft = false;
            count++;
        }
        if (canReturnLeft) {
            return context0;
        }
        else if (canReturnRight) {
            return context1;
        }
        if (count < parentsList.length) {
            parentsList = parentsList.slice(0, count);
            returnStatesList = returnStatesList.slice(0, count);
        }
        if (parentsList.length === 0) {
            // if one of them was EMPTY_LOCAL, it would be empty and handled at the beginning of the method
            return PredictionContext.EMPTY_FULL;
        }
        else if (parentsList.length === 1) {
            return new SingletonPredictionContext(parentsList[0], returnStatesList[0]);
        }
        else {
            return new ArrayPredictionContext(parentsList, returnStatesList);
        }
    }
    static isEmptyLocal(context) {
        return context === PredictionContext.EMPTY_LOCAL;
    }
    static getCachedContext(context, contextCache, visited) {
        if (context.isEmpty) {
            return context;
        }
        let existing = visited.get(context);
        if (existing) {
            return existing;
        }
        existing = contextCache.get(context);
        if (existing) {
            visited.put(context, existing);
            return existing;
        }
        let changed = false;
        let parents = new Array(context.size);
        for (let i = 0; i < parents.length; i++) {
            let parent = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);
            if (changed || parent !== context.getParent(i)) {
                if (!changed) {
                    parents = new Array(context.size);
                    for (let j = 0; j < context.size; j++) {
                        parents[j] = context.getParent(j);
                    }
                    changed = true;
                }
                parents[i] = parent;
            }
        }
        if (!changed) {
            existing = contextCache.putIfAbsent(context, context);
            visited.put(context, existing != null ? existing : context);
            return context;
        }
        // We know parents.length>0 because context.isEmpty is checked at the beginning of the method.
        let updated;
        if (parents.length === 1) {
            updated = new SingletonPredictionContext(parents[0], context.getReturnState(0));
        }
        else {
            let returnStates = new Array(context.size);
            for (let i = 0; i < context.size; i++) {
                returnStates[i] = context.getReturnState(i);
            }
            updated = new ArrayPredictionContext(parents, returnStates, context.hashCode());
        }
        existing = contextCache.putIfAbsent(updated, updated);
        visited.put(updated, existing || updated);
        visited.put(context, existing || updated);
        return updated;
    }
    appendSingleContext(returnContext, contextCache) {
        return this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);
    }
    getChild(returnState) {
        return new SingletonPredictionContext(this, returnState);
    }
    hashCode() {
        return this.cachedHashCode;
    }
    toStrings(recognizer, currentState, stop = PredictionContext.EMPTY_FULL) {
        let result = [];
        outer: for (let perm = 0;; perm++) {
            let offset = 0;
            let last = true;
            let p = this;
            let stateNumber = currentState;
            let localBuffer = "";
            localBuffer += "[";
            while (!p.isEmpty && p !== stop) {
                let index = 0;
                if (p.size > 0) {
                    let bits = 1;
                    while (((1 << bits) >>> 0) < p.size) {
                        bits++;
                    }
                    let mask = ((1 << bits) >>> 0) - 1;
                    index = (perm >> offset) & mask;
                    last = last && index >= p.size - 1;
                    if (index >= p.size) {
                        continue outer;
                    }
                    offset += bits;
                }
                if (recognizer) {
                    if (localBuffer.length > 1) {
                        // first char is '[', if more than that this isn't the first rule
                        localBuffer += " ";
                    }
                    let atn = recognizer.atn;
                    let s = atn.states[stateNumber];
                    let ruleName = recognizer.ruleNames[s.ruleIndex];
                    localBuffer += ruleName;
                }
                else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {
                    if (!p.isEmpty) {
                        if (localBuffer.length > 1) {
                            // first char is '[', if more than that this isn't the first rule
                            localBuffer += " ";
                        }
                        localBuffer += p.getReturnState(index);
                    }
                }
                stateNumber = p.getReturnState(index);
                p = p.getParent(index);
            }
            localBuffer += "]";
            result.push(localBuffer);
            if (last) {
                break;
            }
        }
        return result;
    }
}
__decorate([
    Decorators_1.Override
], PredictionContext.prototype, "hashCode", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], PredictionContext, "join", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], PredictionContext, "getCachedContext", null);
exports.PredictionContext = PredictionContext;
class EmptyPredictionContext extends PredictionContext {
    constructor(fullContext) {
        super(PredictionContext.calculateEmptyHashCode());
        this.fullContext = fullContext;
    }
    get isFullContext() {
        return this.fullContext;
    }
    addEmptyContext() {
        return this;
    }
    removeEmptyContext() {
        throw new Error("Cannot remove the empty context from itself.");
    }
    getParent(index) {
        throw new Error("index out of bounds");
    }
    getReturnState(index) {
        throw new Error("index out of bounds");
    }
    findReturnState(returnState) {
        return -1;
    }
    get size() {
        return 0;
    }
    appendSingleContext(returnContext, contextCache) {
        return contextCache.getChild(this, returnContext);
    }
    appendContext(suffix, contextCache) {
        return suffix;
    }
    get isEmpty() {
        return true;
    }
    get hasEmpty() {
        return true;
    }
    equals(o) {
        return this === o;
    }
    toStrings(recognizer, currentState, stop) {
        return ["[]"];
    }
}
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "appendSingleContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "toStrings", null);
let ArrayPredictionContext = class ArrayPredictionContext extends PredictionContext {
    constructor(parents, returnStates, hashCode) {
        super(hashCode || PredictionContext.calculateHashCode(parents, returnStates));
        assert(parents.length === returnStates.length);
        assert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, "Should be using PredictionContext.EMPTY instead.");
        this.parents = parents;
        this.returnStates = returnStates;
    }
    getParent(index) {
        return this.parents[index];
    }
    getReturnState(index) {
        return this.returnStates[index];
    }
    findReturnState(returnState) {
        return Arrays_1.Arrays.binarySearch(this.returnStates, returnState);
    }
    get size() {
        return this.returnStates.length;
    }
    get isEmpty() {
        return false;
    }
    get hasEmpty() {
        return this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;
    }
    addEmptyContext() {
        if (this.hasEmpty) {
            return this;
        }
        let parents2 = this.parents.slice(0);
        let returnStates2 = this.returnStates.slice(0);
        parents2.push(PredictionContext.EMPTY_FULL);
        returnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);
        return new ArrayPredictionContext(parents2, returnStates2);
    }
    removeEmptyContext() {
        if (!this.hasEmpty) {
            return this;
        }
        if (this.returnStates.length === 2) {
            return new SingletonPredictionContext(this.parents[0], this.returnStates[0]);
        }
        else {
            let parents2 = this.parents.slice(0, this.parents.length - 1);
            let returnStates2 = this.returnStates.slice(0, this.returnStates.length - 1);
            return new ArrayPredictionContext(parents2, returnStates2);
        }
    }
    appendContext(suffix, contextCache) {
        return ArrayPredictionContext.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());
    }
    static appendContextImpl(context, suffix, visited) {
        if (suffix.isEmpty) {
            if (PredictionContext.isEmptyLocal(suffix)) {
                if (context.hasEmpty) {
                    return PredictionContext.EMPTY_LOCAL;
                }
                throw new Error("what to do here?");
            }
            return context;
        }
        if (suffix.size !== 1) {
            throw new Error("Appending a tree suffix is not yet supported.");
        }
        let result = visited.get(context);
        if (!result) {
            if (context.isEmpty) {
                result = suffix;
            }
            else {
                let parentCount = context.size;
                if (context.hasEmpty) {
                    parentCount--;
                }
                let updatedParents = new Array(parentCount);
                let updatedReturnStates = new Array(parentCount);
                for (let i = 0; i < parentCount; i++) {
                    updatedReturnStates[i] = context.getReturnState(i);
                }
                for (let i = 0; i < parentCount; i++) {
                    updatedParents[i] = ArrayPredictionContext.appendContextImpl(context.getParent(i), suffix, visited);
                }
                if (updatedParents.length === 1) {
                    result = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);
                }
                else {
                    assert(updatedParents.length > 1);
                    result = new ArrayPredictionContext(updatedParents, updatedReturnStates);
                }
                if (context.hasEmpty) {
                    result = PredictionContext.join(result, suffix);
                }
            }
            visited.put(context, result);
        }
        return result;
    }
    equals(o) {
        if (this === o) {
            return true;
        }
        else if (!(o instanceof ArrayPredictionContext)) {
            return false;
        }
        if (this.hashCode() !== o.hashCode()) {
            // can't be same if hash is different
            return false;
        }
        let other = o;
        return this.equalsImpl(other, new Array2DHashSet_1.Array2DHashSet());
    }
    equalsImpl(other, visited) {
        let selfWorkList = [];
        let otherWorkList = [];
        selfWorkList.push(this);
        otherWorkList.push(other);
        while (true) {
            let currentSelf = selfWorkList.pop();
            let currentOther = otherWorkList.pop();
            if (!currentSelf || !currentOther) {
                break;
            }
            let operands = new PredictionContextCache_1.PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);
            if (!visited.add(operands)) {
                continue;
            }
            let selfSize = operands.x.size;
            if (selfSize === 0) {
                if (!operands.x.equals(operands.y)) {
                    return false;
                }
                continue;
            }
            let otherSize = operands.y.size;
            if (selfSize !== otherSize) {
                return false;
            }
            for (let i = 0; i < selfSize; i++) {
                if (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {
                    return false;
                }
                let selfParent = operands.x.getParent(i);
                let otherParent = operands.y.getParent(i);
                if (selfParent.hashCode() !== otherParent.hashCode()) {
                    return false;
                }
                if (selfParent !== otherParent) {
                    selfWorkList.push(selfParent);
                    otherWorkList.push(otherParent);
                }
            }
        }
        return true;
    }
};
__decorate([
    Decorators_1.NotNull
], ArrayPredictionContext.prototype, "parents", void 0);
__decorate([
    Decorators_1.NotNull
], ArrayPredictionContext.prototype, "returnStates", void 0);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "equals", null);
ArrayPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
], ArrayPredictionContext);
let SingletonPredictionContext = class SingletonPredictionContext extends PredictionContext {
    constructor(parent, returnState) {
        super(PredictionContext.calculateSingleHashCode(parent, returnState));
        // assert(returnState != PredictionContext.EMPTY_FULL_STATE_KEY && returnState != PredictionContext.EMPTY_LOCAL_STATE_KEY);
        this.parent = parent;
        this.returnState = returnState;
    }
    getParent(index) {
        // assert(index == 0);
        return this.parent;
    }
    getReturnState(index) {
        // assert(index == 0);
        return this.returnState;
    }
    findReturnState(returnState) {
        return this.returnState === returnState ? 0 : -1;
    }
    get size() {
        return 1;
    }
    get isEmpty() {
        return false;
    }
    get hasEmpty() {
        return false;
    }
    appendContext(suffix, contextCache) {
        return contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);
    }
    addEmptyContext() {
        let parents = [this.parent, PredictionContext.EMPTY_FULL];
        let returnStates = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];
        return new ArrayPredictionContext(parents, returnStates);
    }
    removeEmptyContext() {
        return this;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        else if (!(o instanceof SingletonPredictionContext)) {
            return false;
        }
        let other = o;
        if (this.hashCode() !== other.hashCode()) {
            return false;
        }
        return this.returnState === other.returnState
            && this.parent.equals(other.parent);
    }
};
__decorate([
    Decorators_1.NotNull
], SingletonPredictionContext.prototype, "parent", void 0);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "equals", null);
SingletonPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
], SingletonPredictionContext);
exports.SingletonPredictionContext = SingletonPredictionContext;
(function (PredictionContext) {
    PredictionContext.EMPTY_LOCAL = new EmptyPredictionContext(false);
    PredictionContext.EMPTY_FULL = new EmptyPredictionContext(true);
    PredictionContext.EMPTY_LOCAL_STATE_KEY = -((1 << 31) >>> 0);
    PredictionContext.EMPTY_FULL_STATE_KEY = ((1 << 31) >>> 0) - 1;
    class IdentityHashMap extends Array2DHashMap_1.Array2DHashMap {
        constructor() {
            super(IdentityEqualityComparator.INSTANCE);
        }
    }
    PredictionContext.IdentityHashMap = IdentityHashMap;
    class IdentityEqualityComparator {
        IdentityEqualityComparator() {
            // intentionally empty
        }
        hashCode(obj) {
            return obj.hashCode();
        }
        equals(a, b) {
            return a === b;
        }
    }
    IdentityEqualityComparator.INSTANCE = new IdentityEqualityComparator();
    __decorate([
        Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "equals", null);
    PredictionContext.IdentityEqualityComparator = IdentityEqualityComparator;
})(PredictionContext = exports.PredictionContext || (exports.PredictionContext = {}));

},{"../Decorators":13,"../misc/Array2DHashMap":110,"../misc/Array2DHashSet":111,"../misc/Arrays":113,"../misc/MurmurHash":122,"./PredictionContextCache":88,"assert":153}],88:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:35.6390614-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const PredictionContext_1 = require("./PredictionContext");
const assert = require("assert");
/** Used to cache {@link PredictionContext} objects. Its used for the shared
 *  context cash associated with contexts in DFA states. This cache
 *  can be used for both lexers and parsers.
 *
 * @author Sam Harwell
 */
class PredictionContextCache {
    constructor(enableCache = true) {
        this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.enableCache = enableCache;
    }
    getAsCached(context) {
        if (!this.enableCache) {
            return context;
        }
        let result = this.contexts.get(context);
        if (!result) {
            result = context;
            this.contexts.put(context, context);
        }
        return result;
    }
    getChild(context, invokingState) {
        if (!this.enableCache) {
            return context.getChild(invokingState);
        }
        let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);
        let result = this.childContexts.get(operands);
        if (!result) {
            result = context.getChild(invokingState);
            result = this.getAsCached(result);
            this.childContexts.put(operands, result);
        }
        return result;
    }
    join(x, y) {
        if (!this.enableCache) {
            return PredictionContext_1.PredictionContext.join(x, y, this);
        }
        let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);
        let result = this.joinContexts.get(operands);
        if (result) {
            return result;
        }
        result = PredictionContext_1.PredictionContext.join(x, y, this);
        result = this.getAsCached(result);
        this.joinContexts.put(operands, result);
        return result;
    }
}
PredictionContextCache.UNCACHED = new PredictionContextCache(false);
exports.PredictionContextCache = PredictionContextCache;
(function (PredictionContextCache) {
    class PredictionContextAndInt {
        constructor(obj, value) {
            this.obj = obj;
            this.value = value;
        }
        equals(obj) {
            if (!(obj instanceof PredictionContextAndInt)) {
                return false;
            }
            else if (obj === this) {
                return true;
            }
            let other = obj;
            return this.value === other.value
                && (this.obj === other.obj || (this.obj != null && this.obj.equals(other.obj)));
        }
        hashCode() {
            let hashCode = 5;
            hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);
            hashCode = 7 * hashCode + this.value;
            return hashCode;
        }
    }
    __decorate([
        Decorators_1.Override
    ], PredictionContextAndInt.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], PredictionContextAndInt.prototype, "hashCode", null);
    PredictionContextCache.PredictionContextAndInt = PredictionContextAndInt;
    class IdentityCommutativePredictionContextOperands {
        constructor(x, y) {
            assert(x != null);
            assert(y != null);
            this._x = x;
            this._y = y;
        }
        get x() {
            return this._x;
        }
        get y() {
            return this._y;
        }
        equals(o) {
            if (!(o instanceof IdentityCommutativePredictionContextOperands)) {
                return false;
            }
            else if (this === o) {
                return true;
            }
            let other = o;
            return (this._x === other._x && this._y === other._y) || (this._x === other._y && this._y === other._x);
        }
        hashCode() {
            return this._x.hashCode() ^ this._y.hashCode();
        }
    }
    __decorate([
        Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "hashCode", null);
    PredictionContextCache.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;
})(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));

},{"../Decorators":13,"../misc/Array2DHashMap":110,"../misc/ObjectEqualityComparator":123,"./PredictionContext":87,"assert":153}],89:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:36.2673893-07:00
const Array2DHashMap_1 = require("../misc/Array2DHashMap");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
const RuleStopState_1 = require("./RuleStopState");
/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
var PredictionMode;
(function (PredictionMode) {
    /**
     * The SLL(*) prediction mode. This prediction mode ignores the current
     * parser context when making predictions. This is the fastest prediction
     * mode, and provides correct results for many grammars. This prediction
     * mode is more powerful than the prediction mode provided by ANTLR 3, but
     * may result in syntax errors for grammar and input combinations which are
     * not SLL.
     *
     * When using this prediction mode, the parser will either return a correct
     * parse tree (i.e. the same parse tree that would be returned with the
     * {@link #LL} prediction mode), or it will report a syntax error. If a
     * syntax error is encountered when using the {@link #SLL} prediction mode,
     * it may be due to either an actual syntax error in the input or indicate
     * that the particular combination of grammar and input requires the more
     * powerful {@link #LL} prediction abilities to complete successfully.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["SLL"] = 0] = "SLL";
    /**
     * The LL(*) prediction mode. This prediction mode allows the current parser
     * context to be used for resolving SLL conflicts that occur during
     * prediction. This is the fastest prediction mode that guarantees correct
     * parse results for all combinations of grammars with syntactically correct
     * inputs.
     *
     * When using this prediction mode, the parser will make correct decisions
     * for all syntactically-correct grammar and input combinations. However, in
     * cases where the grammar is truly ambiguous this prediction mode might not
     * report a precise answer for *exactly which* alternatives are
     * ambiguous.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["LL"] = 1] = "LL";
    /**
     * The LL(*) prediction mode with exact ambiguity detection. In addition to
     * the correctness guarantees provided by the {@link #LL} prediction mode,
     * this prediction mode instructs the prediction algorithm to determine the
     * complete and exact set of ambiguous alternatives for every ambiguous
     * decision encountered while parsing.
     *
     * This prediction mode may be used for diagnosing ambiguities during
     * grammar development. Due to the performance overhead of calculating sets
     * of ambiguous alternatives, this prediction mode should be avoided when
     * the exact results are not necessary.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["LL_EXACT_AMBIG_DETECTION"] = 2] = "LL_EXACT_AMBIG_DETECTION";
})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
(function (PredictionMode) {
    /** A Map that uses just the state and the stack context as the key. */
    // NOTE: Base type used to be FlexibleHashMap<ATNConfig, BitSet>
    class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {
        constructor() {
            super(AltAndContextConfigEqualityComparator.INSTANCE);
        }
    }
    class AltAndContextConfigEqualityComparator {
        AltAndContextConfigEqualityComparator() {
            // intentionally empty
        }
        /**
         * The hash code is only a function of the {@link ATNState#stateNumber}
         * and {@link ATNConfig#context}.
         */
        hashCode(o) {
            let hashCode = MurmurHash_1.MurmurHash.initialize(7);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);
            hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);
            return hashCode;
        }
        equals(a, b) {
            if (a === b) {
                return true;
            }
            if (a == null || b == null) {
                return false;
            }
            return a.state.stateNumber === b.state.stateNumber
                && a.context.equals(b.context);
        }
    }
    AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();
    __decorate([
        Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "equals", null);
    /**
     * Checks if any configuration in `configs` is in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @returns `true` if any configuration in `configs` is in a
     * {@link RuleStopState}, otherwise `false`
     */
    function hasConfigInRuleStopState(configs) {
        for (let c of configs) {
            if (c.state instanceof RuleStopState_1.RuleStopState) {
                return true;
            }
        }
        return false;
    }
    PredictionMode.hasConfigInRuleStopState = hasConfigInRuleStopState;
    /**
     * Checks if all configurations in `configs` are in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @returns `true` if all configurations in `configs` are in a
     * {@link RuleStopState}, otherwise `false`
     */
    function allConfigsInRuleStopStates(/*@NotNull*/ configs) {
        for (let config of configs) {
            if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                return false;
            }
        }
        return true;
    }
    PredictionMode.allConfigsInRuleStopStates = allConfigsInRuleStopStates;
})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));

},{"../Decorators":13,"../misc/Array2DHashMap":110,"../misc/MurmurHash":122,"./RuleStopState":93}],90:[function(require,module,exports){
(function (process){(function (){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:36.4188352-07:00
const AmbiguityInfo_1 = require("./AmbiguityInfo");
const ATN_1 = require("./ATN");
const ATNSimulator_1 = require("./ATNSimulator");
const ContextSensitivityInfo_1 = require("./ContextSensitivityInfo");
const DecisionInfo_1 = require("./DecisionInfo");
const ErrorInfo_1 = require("./ErrorInfo");
const Decorators_1 = require("../Decorators");
const LookaheadEventInfo_1 = require("./LookaheadEventInfo");
const ParserATNSimulator_1 = require("./ParserATNSimulator");
const PredicateEvalInfo_1 = require("./PredicateEvalInfo");
const SemanticContext_1 = require("./SemanticContext");
const SimulatorState_1 = require("./SimulatorState");
/**
 * @since 4.3
 */
class ProfilingATNSimulator extends ParserATNSimulator_1.ParserATNSimulator {
    constructor(parser) {
        super(parser.interpreter.atn, parser);
        this._startIndex = 0;
        this._sllStopIndex = 0;
        this._llStopIndex = 0;
        this.currentDecision = 0;
        /** At the point of LL failover, we record how SLL would resolve the conflict so that
         *  we can determine whether or not a decision / input pair is context-sensitive.
         *  If LL gives a different result than SLL's predicted alternative, we have a
         *  context sensitivity for sure. The converse is not necessarily true, however.
         *  It's possible that after conflict resolution chooses minimum alternatives,
         *  SLL could get the same answer as LL. Regardless of whether or not the result indicates
         *  an ambiguity, it is not treated as a context sensitivity because LL prediction
         *  was not required in order to produce a correct prediction for this decision and input sequence.
         *  It may in fact still be a context sensitivity but we don't know by looking at the
         *  minimum alternatives for the current input.
         */
        this.conflictingAltResolvedBySLL = 0;
        this.optimize_ll1 = false;
        this.reportAmbiguities = true;
        this.numDecisions = this.atn.decisionToState.length;
        this.decisions = [];
        for (let i = 0; i < this.numDecisions; i++) {
            this.decisions.push(new DecisionInfo_1.DecisionInfo(i));
        }
    }
    adaptivePredict(input, decision, outerContext, useContext) {
        if (useContext !== undefined) {
            return super.adaptivePredict(input, decision, outerContext, useContext);
        }
        try {
            this._input = input;
            this._startIndex = input.index;
            // it's possible for SLL to reach a conflict state without consuming any input
            this._sllStopIndex = this._startIndex - 1;
            this._llStopIndex = -1;
            this.currentDecision = decision;
            this.currentState = undefined;
            this.conflictingAltResolvedBySLL = ATN_1.ATN.INVALID_ALT_NUMBER;
            let start = process.hrtime();
            let alt = super.adaptivePredict(input, decision, outerContext);
            let stop = process.hrtime();
            let nanoseconds = (stop[0] - start[0]) * 1000000000;
            if (nanoseconds === 0) {
                nanoseconds = stop[1] - start[1];
            }
            else {
                // Add nanoseconds from start to end of that second, plus start of the end second to end
                nanoseconds += (1000000000 - start[1]) + stop[1];
            }
            this.decisions[decision].timeInPrediction += nanoseconds;
            this.decisions[decision].invocations++;
            let SLL_k = this._sllStopIndex - this._startIndex + 1;
            this.decisions[decision].SLL_TotalLook += SLL_k;
            this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);
            if (SLL_k > this.decisions[decision].SLL_MaxLook) {
                this.decisions[decision].SLL_MaxLook = SLL_k;
                this.decisions[decision].SLL_MaxLookEvent =
                    new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._sllStopIndex, false);
            }
            if (this._llStopIndex >= 0) {
                let LL_k = this._llStopIndex - this._startIndex + 1;
                this.decisions[decision].LL_TotalLook += LL_k;
                this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);
                if (LL_k > this.decisions[decision].LL_MaxLook) {
                    this.decisions[decision].LL_MaxLook = LL_k;
                    this.decisions[decision].LL_MaxLookEvent =
                        new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._llStopIndex, true);
                }
            }
            return alt;
        }
        finally {
            this._input = undefined;
            this.currentDecision = -1;
        }
    }
    getStartState(dfa, input, outerContext, useContext) {
        let state = super.getStartState(dfa, input, outerContext, useContext);
        this.currentState = state;
        return state;
    }
    computeStartState(dfa, globalContext, useContext) {
        let state = super.computeStartState(dfa, globalContext, useContext);
        this.currentState = state;
        return state;
    }
    computeReachSet(dfa, previous, t, contextCache) {
        if (this._input === undefined) {
            throw new Error("Invalid state");
        }
        let reachState = super.computeReachSet(dfa, previous, t, contextCache);
        if (reachState == null) {
            // no reach on current lookahead symbol. ERROR.
            this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, previous, this._input, this._startIndex, this._input.index));
        }
        this.currentState = reachState;
        return reachState;
    }
    getExistingTargetState(previousD, t) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        // this method is called after each time the input position advances
        if (this.currentState.useContext) {
            this._llStopIndex = this._input.index;
        }
        else {
            this._sllStopIndex = this._input.index;
        }
        let existingTargetState = super.getExistingTargetState(previousD, t);
        if (existingTargetState != null) {
            // this method is directly called by execDFA; must construct a SimulatorState
            // to represent the current state for this case
            this.currentState = new SimulatorState_1.SimulatorState(this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);
            if (this.currentState.useContext) {
                this.decisions[this.currentDecision].LL_DFATransitions++;
            }
            else {
                this.decisions[this.currentDecision].SLL_DFATransitions++; // count only if we transition over a DFA state
            }
            if (existingTargetState === ATNSimulator_1.ATNSimulator.ERROR) {
                let state = new SimulatorState_1.SimulatorState(this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);
                this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, state, this._input, this._startIndex, this._input.index));
            }
        }
        return existingTargetState;
    }
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
        let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);
        if (useContext) {
            this.decisions[this.currentDecision].LL_ATNTransitions++;
        }
        else {
            this.decisions[this.currentDecision].SLL_ATNTransitions++;
        }
        return targetState;
    }
    evalSemanticContextImpl(pred, parserCallStack, alt) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);
        if (!(pred instanceof SemanticContext_1.SemanticContext.PrecedencePredicate)) {
            let fullContext = this._llStopIndex >= 0;
            let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;
            this.decisions[this.currentDecision].predicateEvals.push(new PredicateEvalInfo_1.PredicateEvalInfo(this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));
        }
        return result;
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
        if (this._input === undefined) {
            throw new Error("Invalid state");
        }
        if (prediction !== this.conflictingAltResolvedBySLL) {
            this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, acceptState, this._input, startIndex, stopIndex));
        }
        super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
        if (conflictingAlts != null) {
            this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);
        }
        else {
            this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);
        }
        this.decisions[this.currentDecision].LL_Fallback++;
        super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);
    }
    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        let prediction;
        if (ambigAlts != null) {
            prediction = ambigAlts.nextSetBit(0);
        }
        else {
            prediction = configs.getRepresentedAlternatives().nextSetBit(0);
        }
        if (this.conflictingAltResolvedBySLL !== ATN_1.ATN.INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {
            // Even though this is an ambiguity we are reporting, we can
            // still detect some context sensitivities.  Both SLL and LL
            // are showing a conflict, hence an ambiguity, but if they resolve
            // to different minimum alternatives we have also identified a
            // context sensitivity.
            this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, this.currentState, this._input, startIndex, stopIndex));
        }
        this.decisions[this.currentDecision].ambiguities.push(new AmbiguityInfo_1.AmbiguityInfo(this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));
        super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);
    }
    // ---------------------------------------------------------------------
    getDecisionInfo() {
        return this.decisions;
    }
    getCurrentState() {
        return this.currentState;
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], ProfilingATNSimulator.prototype, "adaptivePredict", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "getStartState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeStartState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeReachSet", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeTargetState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "evalSemanticContextImpl", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "reportContextSensitivity", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull), __param(5, Decorators_1.NotNull), __param(6, Decorators_1.NotNull)
], ProfilingATNSimulator.prototype, "reportAmbiguity", null);
exports.ProfilingATNSimulator = ProfilingATNSimulator;

}).call(this)}).call(this,require('_process'))
},{"../Decorators":13,"./ATN":40,"./ATNSimulator":45,"./AmbiguityInfo":50,"./ContextSensitivityInfo":57,"./DecisionInfo":59,"./ErrorInfo":62,"./LookaheadEventInfo":76,"./ParserATNSimulator":81,"./PredicateEvalInfo":85,"./SemanticContext":95,"./SimulatorState":97,"_process":205}],91:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const IntervalSet_1 = require("../misc/IntervalSet");
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
let RangeTransition = class RangeTransition extends Transition_1.Transition {
    constructor(target, from, to) {
        super(target);
        this.from = from;
        this.to = to;
    }
    get serializationType() {
        return 2 /* RANGE */;
    }
    get label() {
        return IntervalSet_1.IntervalSet.of(this.from, this.to);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= this.from && symbol <= this.to;
    }
    toString() {
        return "'" + String.fromCodePoint(this.from) + "'..'" + String.fromCodePoint(this.to) + "'";
    }
};
__decorate([
    Decorators_1.Override
], RangeTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], RangeTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], RangeTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], RangeTransition.prototype, "toString", null);
RangeTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], RangeTransition);
exports.RangeTransition = RangeTransition;

},{"../Decorators":13,"../misc/IntervalSet":120,"./Transition":102}],92:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:36.6806851-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
class RuleStartState extends ATNState_1.ATNState {
    constructor() {
        super(...arguments);
        this.isPrecedenceRule = false;
        this.leftFactored = false;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.RULE_START;
    }
}
__decorate([
    Decorators_1.Override
], RuleStartState.prototype, "stateType", null);
exports.RuleStartState = RuleStartState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],93:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:36.7513856-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
/** The last node in the ATN for a rule, unless that rule is the start symbol.
 *  In that case, there is one transition to EOF. Later, we might encode
 *  references to all calls to this rule to compute FOLLOW sets for
 *  error handling.
 */
class RuleStopState extends ATNState_1.ATNState {
    get nonStopStateNumber() {
        return -1;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.RULE_STOP;
    }
}
__decorate([
    Decorators_1.Override
], RuleStopState.prototype, "nonStopStateNumber", null);
__decorate([
    Decorators_1.Override
], RuleStopState.prototype, "stateType", null);
exports.RuleStopState = RuleStopState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],94:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
/** */
let RuleTransition = class RuleTransition extends Transition_1.Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
        super(ruleStart);
        this.tailCall = false;
        this.optimizedTailCall = false;
        this.ruleIndex = ruleIndex;
        this.precedence = precedence;
        this.followState = followState;
    }
    get serializationType() {
        return 3 /* RULE */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
};
__decorate([
    Decorators_1.NotNull
], RuleTransition.prototype, "followState", void 0);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "matches", null);
RuleTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
], RuleTransition);
exports.RuleTransition = RuleTransition;

},{"../Decorators":13,"./Transition":102}],95:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:36.9521478-07:00
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const Utils = require("../misc/Utils");
function max(items) {
    let result;
    for (let current of items) {
        if (result === undefined) {
            result = current;
            continue;
        }
        let comparison = result.compareTo(current);
        if (comparison < 0) {
            result = current;
        }
    }
    return result;
}
function min(items) {
    let result;
    for (let current of items) {
        if (result === undefined) {
            result = current;
            continue;
        }
        let comparison = result.compareTo(current);
        if (comparison > 0) {
            result = current;
        }
    }
    return result;
}
/** A tree structure used to record the semantic context in which
 *  an ATN configuration is valid.  It's either a single predicate,
 *  a conjunction `p1&&p2`, or a sum of products `p1||p2`.
 *
 *  I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 *  {@link SemanticContext} within the scope of this outer class.
 */
class SemanticContext {
    /**
     * The default {@link SemanticContext}, which is semantically equivalent to
     * a predicate of the form `{true}?`.
     */
    static get NONE() {
        if (SemanticContext._NONE === undefined) {
            SemanticContext._NONE = new SemanticContext.Predicate();
        }
        return SemanticContext._NONE;
    }
    /**
     * Evaluate the precedence predicates for the context and reduce the result.
     *
     * @param parser The parser instance.
     * @param parserCallStack
     * @returns The simplified semantic context after precedence predicates are
     * evaluated, which will be one of the following values.
     *
     * * {@link #NONE}: if the predicate simplifies to `true` after
     *   precedence predicates are evaluated.
     * * `undefined`: if the predicate simplifies to `false` after
     *   precedence predicates are evaluated.
     * * `this`: if the semantic context is not changed as a result of
     *   precedence predicate evaluation.
     * * A non-`undefined` {@link SemanticContext}: the new simplified
     *   semantic context after precedence predicates are evaluated.
     */
    evalPrecedence(parser, parserCallStack) {
        return this;
    }
    static and(a, b) {
        if (!a || a === SemanticContext.NONE) {
            return b;
        }
        if (b === SemanticContext.NONE) {
            return a;
        }
        let result = new SemanticContext.AND(a, b);
        if (result.opnds.length === 1) {
            return result.opnds[0];
        }
        return result;
    }
    /**
     *
     *  @see ParserATNSimulator#getPredsForAmbigAlts
     */
    static or(a, b) {
        if (!a) {
            return b;
        }
        if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
            return SemanticContext.NONE;
        }
        let result = new SemanticContext.OR(a, b);
        if (result.opnds.length === 1) {
            return result.opnds[0];
        }
        return result;
    }
}
exports.SemanticContext = SemanticContext;
(function (SemanticContext) {
    /**
     * This random 30-bit prime represents the value of `AND.class.hashCode()`.
     */
    const AND_HASHCODE = 40363613;
    /**
     * This random 30-bit prime represents the value of `OR.class.hashCode()`.
     */
    const OR_HASHCODE = 486279973;
    function filterPrecedencePredicates(collection) {
        let result = [];
        for (let i = 0; i < collection.length; i++) {
            let context = collection[i];
            if (context instanceof SemanticContext.PrecedencePredicate) {
                result.push(context);
                // Remove the item from 'collection' and move i back so we look at the same index again
                collection.splice(i, 1);
                i--;
            }
        }
        return result;
    }
    class Predicate extends SemanticContext {
        constructor(ruleIndex = -1, predIndex = -1, isCtxDependent = false) {
            super();
            this.ruleIndex = ruleIndex;
            this.predIndex = predIndex;
            this.isCtxDependent = isCtxDependent;
        }
        eval(parser, parserCallStack) {
            let localctx = this.isCtxDependent ? parserCallStack : undefined;
            return parser.sempred(localctx, this.ruleIndex, this.predIndex);
        }
        hashCode() {
            let hashCode = MurmurHash_1.MurmurHash.initialize();
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.ruleIndex);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.predIndex);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);
            hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 3);
            return hashCode;
        }
        equals(obj) {
            if (!(obj instanceof Predicate)) {
                return false;
            }
            if (this === obj) {
                return true;
            }
            return this.ruleIndex === obj.ruleIndex &&
                this.predIndex === obj.predIndex &&
                this.isCtxDependent === obj.isCtxDependent;
        }
        toString() {
            return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
        }
    }
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "toString", null);
    SemanticContext.Predicate = Predicate;
    class PrecedencePredicate extends SemanticContext {
        constructor(precedence) {
            super();
            this.precedence = precedence;
        }
        eval(parser, parserCallStack) {
            return parser.precpred(parserCallStack, this.precedence);
        }
        evalPrecedence(parser, parserCallStack) {
            if (parser.precpred(parserCallStack, this.precedence)) {
                return SemanticContext.NONE;
            }
            else {
                return undefined;
            }
        }
        compareTo(o) {
            return this.precedence - o.precedence;
        }
        hashCode() {
            let hashCode = 1;
            hashCode = 31 * hashCode + this.precedence;
            return hashCode;
        }
        equals(obj) {
            if (!(obj instanceof PrecedencePredicate)) {
                return false;
            }
            if (this === obj) {
                return true;
            }
            return this.precedence === obj.precedence;
        }
        toString() {
            return "{" + this.precedence + ">=prec}?";
        }
    }
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "compareTo", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
        // precedence >= _precedenceStack.peek()
    ], PrecedencePredicate.prototype, "toString", null);
    SemanticContext.PrecedencePredicate = PrecedencePredicate;
    /**
     * This is the base class for semantic context "operators", which operate on
     * a collection of semantic context "operands".
     *
     * @since 4.3
     */
    class Operator extends SemanticContext {
    }
    SemanticContext.Operator = Operator;
    /**
     * A semantic context which is true whenever none of the contained contexts
     * is false.
     */
    let AND = class AND extends Operator {
        constructor(a, b) {
            super();
            let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            if (a instanceof AND) {
                operands.addAll(a.opnds);
            }
            else {
                operands.add(a);
            }
            if (b instanceof AND) {
                operands.addAll(b.opnds);
            }
            else {
                operands.add(b);
            }
            this.opnds = operands.toArray();
            let precedencePredicates = filterPrecedencePredicates(this.opnds);
            // interested in the transition with the lowest precedence
            let reduced = min(precedencePredicates);
            if (reduced) {
                this.opnds.push(reduced);
            }
        }
        get operands() {
            return this.opnds;
        }
        equals(obj) {
            if (this === obj) {
                return true;
            }
            if (!(obj instanceof AND)) {
                return false;
            }
            return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
        }
        hashCode() {
            return MurmurHash_1.MurmurHash.hashCode(this.opnds, AND_HASHCODE);
        }
        /**
         * {@inheritDoc}
         *
         * The evaluation of predicates by this context is short-circuiting, but
         * unordered.
         */
        eval(parser, parserCallStack) {
            for (let opnd of this.opnds) {
                if (!opnd.eval(parser, parserCallStack)) {
                    return false;
                }
            }
            return true;
        }
        evalPrecedence(parser, parserCallStack) {
            let differs = false;
            let operands = [];
            for (let context of this.opnds) {
                let evaluated = context.evalPrecedence(parser, parserCallStack);
                differs = differs || (evaluated !== context);
                if (evaluated == null) {
                    // The AND context is false if any element is false
                    return undefined;
                }
                else if (evaluated !== SemanticContext.NONE) {
                    // Reduce the result by skipping true elements
                    operands.push(evaluated);
                }
            }
            if (!differs) {
                return this;
            }
            if (operands.length === 0) {
                // all elements were true, so the AND context is true
                return SemanticContext.NONE;
            }
            let result = operands[0];
            for (let i = 1; i < operands.length; i++) {
                result = SemanticContext.and(result, operands[i]);
            }
            return result;
        }
        toString() {
            return Utils.join(this.opnds, "&&");
        }
    };
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "operands", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "toString", null);
    AND = __decorate([
        __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
    ], AND);
    SemanticContext.AND = AND;
    /**
     * A semantic context which is true whenever at least one of the contained
     * contexts is true.
     */
    let OR = class OR extends Operator {
        constructor(a, b) {
            super();
            let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            if (a instanceof OR) {
                operands.addAll(a.opnds);
            }
            else {
                operands.add(a);
            }
            if (b instanceof OR) {
                operands.addAll(b.opnds);
            }
            else {
                operands.add(b);
            }
            this.opnds = operands.toArray();
            let precedencePredicates = filterPrecedencePredicates(this.opnds);
            // interested in the transition with the highest precedence
            let reduced = max(precedencePredicates);
            if (reduced) {
                this.opnds.push(reduced);
            }
        }
        get operands() {
            return this.opnds;
        }
        equals(obj) {
            if (this === obj) {
                return true;
            }
            if (!(obj instanceof OR)) {
                return false;
            }
            return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
        }
        hashCode() {
            return MurmurHash_1.MurmurHash.hashCode(this.opnds, OR_HASHCODE);
        }
        /**
         * {@inheritDoc}
         *
         * The evaluation of predicates by this context is short-circuiting, but
         * unordered.
         */
        eval(parser, parserCallStack) {
            for (let opnd of this.opnds) {
                if (opnd.eval(parser, parserCallStack)) {
                    return true;
                }
            }
            return false;
        }
        evalPrecedence(parser, parserCallStack) {
            let differs = false;
            let operands = [];
            for (let context of this.opnds) {
                let evaluated = context.evalPrecedence(parser, parserCallStack);
                differs = differs || (evaluated !== context);
                if (evaluated === SemanticContext.NONE) {
                    // The OR context is true if any element is true
                    return SemanticContext.NONE;
                }
                else if (evaluated) {
                    // Reduce the result by skipping false elements
                    operands.push(evaluated);
                }
            }
            if (!differs) {
                return this;
            }
            if (operands.length === 0) {
                // all elements were false, so the OR context is false
                return undefined;
            }
            let result = operands[0];
            for (let i = 1; i < operands.length; i++) {
                result = SemanticContext.or(result, operands[i]);
            }
            return result;
        }
        toString() {
            return Utils.join(this.opnds, "||");
        }
    };
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "operands", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "toString", null);
    OR = __decorate([
        __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
    ], OR);
    SemanticContext.OR = OR;
})(SemanticContext = exports.SemanticContext || (exports.SemanticContext = {}));

},{"../Decorators":13,"../misc/Array2DHashSet":111,"../misc/ArrayEqualityComparator":112,"../misc/MurmurHash":122,"../misc/ObjectEqualityComparator":123,"../misc/Utils":126}],96:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const IntervalSet_1 = require("../misc/IntervalSet");
const Decorators_1 = require("../Decorators");
const Token_1 = require("../Token");
const Transition_1 = require("./Transition");
/** A transition containing a set of values. */
let SetTransition = class SetTransition extends Transition_1.Transition {
    // TODO (sam): should we really allow undefined here?
    constructor(target, set) {
        super(target);
        if (set == null) {
            set = IntervalSet_1.IntervalSet.of(Token_1.Token.INVALID_TYPE);
        }
        this.set = set;
    }
    get serializationType() {
        return 7 /* SET */;
    }
    get label() {
        return this.set;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.set.contains(symbol);
    }
    toString() {
        return this.set.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], SetTransition.prototype, "set", void 0);
__decorate([
    Decorators_1.Override
], SetTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], SetTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], SetTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], SetTransition.prototype, "toString", null);
SetTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
], SetTransition);
exports.SetTransition = SetTransition;

},{"../Decorators":13,"../Token":37,"../misc/IntervalSet":120,"./Transition":102}],97:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const ParserRuleContext_1 = require("../ParserRuleContext");
/**
 *
 * @author Sam Harwell
 */
let SimulatorState = class SimulatorState {
    constructor(outerContext, s0, useContext, remainingOuterContext) {
        this.outerContext = outerContext != null ? outerContext : ParserRuleContext_1.ParserRuleContext.emptyContext();
        this.s0 = s0;
        this.useContext = useContext;
        this.remainingOuterContext = remainingOuterContext;
    }
};
SimulatorState = __decorate([
    __param(1, Decorators_1.NotNull)
], SimulatorState);
exports.SimulatorState = SimulatorState;

},{"../Decorators":13,"../ParserRuleContext":28}],98:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNStateType_1 = require("./ATNStateType");
const BlockStartState_1 = require("./BlockStartState");
const Decorators_1 = require("../Decorators");
/** The block that begins a closure loop. */
class StarBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], StarBlockStartState.prototype, "stateType", null);
exports.StarBlockStartState = StarBlockStartState;

},{"../Decorators":13,"./ATNStateType":47,"./BlockStartState":55}],99:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:37.7099201-07:00
const ATNStateType_1 = require("./ATNStateType");
const BitSet_1 = require("../misc/BitSet");
const DecisionState_1 = require("./DecisionState");
const Decorators_1 = require("../Decorators");
class StarLoopEntryState extends DecisionState_1.DecisionState {
    constructor() {
        super(...arguments);
        /**
         * Indicates whether this state can benefit from a precedence DFA during SLL
         * decision making.
         *
         * This is a computed property that is calculated during ATN deserialization
         * and stored for use in {@link ParserATNSimulator} and
         * {@link ParserInterpreter}.
         *
         * @see `DFA.isPrecedenceDfa`
         */
        this.precedenceRuleDecision = false;
        /**
         * For precedence decisions, this set marks states *S* which have all
         * of the following characteristics:
         *
         * * One or more invocation sites of the current rule returns to
         *   *S*.
         * * The closure from *S* includes the current decision without
         *   passing through any rule invocations or stepping out of the current
         *   rule.
         *
         * This field is not used when {@link #precedenceRuleDecision} is
         * `false`.
         */
        this.precedenceLoopbackStates = new BitSet_1.BitSet();
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;
    }
}
__decorate([
    Decorators_1.Override
], StarLoopEntryState.prototype, "stateType", null);
exports.StarLoopEntryState = StarLoopEntryState;

},{"../Decorators":13,"../misc/BitSet":114,"./ATNStateType":47,"./DecisionState":60}],100:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:37.6368726-07:00
const ATNState_1 = require("./ATNState");
const ATNStateType_1 = require("./ATNStateType");
const Decorators_1 = require("../Decorators");
class StarLoopbackState extends ATNState_1.ATNState {
    get loopEntryState() {
        return this.transition(0).target;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_LOOP_BACK;
    }
}
__decorate([
    Decorators_1.Override
], StarLoopbackState.prototype, "stateType", null);
exports.StarLoopbackState = StarLoopbackState;

},{"../Decorators":13,"./ATNState":46,"./ATNStateType":47}],101:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:37.7814046-07:00
const ATNStateType_1 = require("./ATNStateType");
const DecisionState_1 = require("./DecisionState");
const Decorators_1 = require("../Decorators");
/** The Tokens rule start state linking to each lexer rule start state */
class TokensStartState extends DecisionState_1.DecisionState {
    get stateType() {
        return ATNStateType_1.ATNStateType.TOKEN_START;
    }
}
__decorate([
    Decorators_1.Override
], TokensStartState.prototype, "stateType", null);
exports.TokensStartState = TokensStartState;

},{"../Decorators":13,"./ATNStateType":47,"./DecisionState":60}],102:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
/** An ATN transition between any two ATN states.  Subclasses define
 *  atom, set, epsilon, action, predicate, rule transitions.
 *
 *  This is a one way link.  It emanates from a state (usually via a list of
 *  transitions) and has a target state.
 *
 *  Since we never have to change the ATN transitions once we construct it,
 *  we can fix these transitions as specific classes. The DFA transitions
 *  on the other hand need to update the labels as it adds transitions to
 *  the states. We'll use the term Edge for the DFA to distinguish them from
 *  ATN transitions.
 */
let Transition = class Transition {
    constructor(target) {
        if (target == null) {
            throw new Error("target cannot be null.");
        }
        this.target = target;
    }
    /**
     * Determines if the transition is an "epsilon" transition.
     *
     * The default implementation returns `false`.
     *
     * @returns `true` if traversing this transition in the ATN does not
     * consume an input symbol; otherwise, `false` if traversing this
     * transition consumes (matches) an input symbol.
     */
    get isEpsilon() {
        return false;
    }
    get label() {
        return undefined;
    }
};
Transition.serializationNames = [
    "INVALID",
    "EPSILON",
    "RANGE",
    "RULE",
    "PREDICATE",
    "ATOM",
    "ACTION",
    "SET",
    "NOT_SET",
    "WILDCARD",
    "PRECEDENCE",
];
__decorate([
    Decorators_1.NotNull
], Transition.prototype, "target", void 0);
Transition = __decorate([
    __param(0, Decorators_1.NotNull)
], Transition);
exports.Transition = Transition;

},{"../Decorators":13}],103:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const Transition_1 = require("./Transition");
let WildcardTransition = class WildcardTransition extends Transition_1.Transition {
    constructor(target) {
        super(target);
    }
    get serializationType() {
        return 9 /* WILDCARD */;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }
    toString() {
        return ".";
    }
};
__decorate([
    Decorators_1.Override
], WildcardTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], WildcardTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], WildcardTransition.prototype, "toString", null);
WildcardTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], WildcardTransition);
exports.WildcardTransition = WildcardTransition;

},{"../Decorators":13,"./Transition":102}],104:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Stores information about a {@link DFAState} which is an accept state under
 * some condition. Certain settings, such as
 * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to
 * this information to determine whether or not a particular state is an accept
 * state.
 *
 * @author Sam Harwell
 */
class AcceptStateInfo {
    constructor(prediction, lexerActionExecutor) {
        this._prediction = prediction;
        this._lexerActionExecutor = lexerActionExecutor;
    }
    /**
     * Gets the prediction made by this accept state. Note that this value
     * assumes the predicates, if any, in the {@link DFAState} evaluate to
     * `true`. If predicate evaluation is enabled, the final prediction of
     * the accept state will be determined by the result of predicate
     * evaluation.
     */
    get prediction() {
        return this._prediction;
    }
    /**
     * Gets the {@link LexerActionExecutor} which can be used to execute actions
     * and/or commands after the lexer matches a token.
     */
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
}
exports.AcceptStateInfo = AcceptStateInfo;

},{}],105:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:38.3567094-07:00
const Array2DHashSet_1 = require("../misc/Array2DHashSet");
const ATNConfigSet_1 = require("../atn/ATNConfigSet");
const DFASerializer_1 = require("./DFASerializer");
const DFAState_1 = require("./DFAState");
const LexerDFASerializer_1 = require("./LexerDFASerializer");
const Decorators_1 = require("../Decorators");
const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
const StarLoopEntryState_1 = require("../atn/StarLoopEntryState");
const VocabularyImpl_1 = require("../VocabularyImpl");
let DFA = class DFA {
    constructor(atnStartState, decision = 0) {
        /**
         * A set of all states in the `DFA`.
         *
         * Note that this collection of states holds the DFA states for both SLL and LL prediction. Only the start state
         * needs to be differentiated for these cases, which is tracked by the `s0` and `s0full` fields.
         */
        this.states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.nextStateNumber = 0;
        if (!atnStartState.atn) {
            throw new Error("The ATNState must be associated with an ATN");
        }
        this.atnStartState = atnStartState;
        this.atn = atnStartState.atn;
        this.decision = decision;
        // Precedence DFAs are associated with the special precedence decision created for left-recursive rules which
        // evaluate their alternatives using a precedence hierarchy. When such a decision is encountered, we mark this
        // DFA instance as a precedence DFA and initialize the initial states s0 and s0full to special DFAState
        // instances which use outgoing edges to link to the actual start state used for each precedence level.
        let isPrecedenceDfa = false;
        if (atnStartState instanceof StarLoopEntryState_1.StarLoopEntryState) {
            if (atnStartState.precedenceRuleDecision) {
                isPrecedenceDfa = true;
                this.s0 = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
                this.s0full = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
            }
        }
        this.precedenceDfa = isPrecedenceDfa;
    }
    /**
     * Gets whether this DFA is a precedence DFA. Precedence DFAs use a special
     * start state {@link #s0} which is not stored in {@link #states}. The
     * {@link DFAState#edges} array for this start state contains outgoing edges
     * supplying individual start states corresponding to specific precedence
     * values.
     *
     * @returns `true` if this is a precedence DFA; otherwise,
     * `false`.
     * @see Parser.precedence
     */
    get isPrecedenceDfa() {
        return this.precedenceDfa;
    }
    /**
     * Get the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @returns The start state corresponding to the specified precedence, or
     * `undefined` if no start state exists for the specified precedence.
     *
     * @ if this is not a precedence DFA.
     * @see `isPrecedenceDfa`
     */
    getPrecedenceStartState(precedence, fullContext) {
        if (!this.isPrecedenceDfa) {
            throw new Error("Only precedence DFAs may contain a precedence start state.");
        }
        // s0 and s0full are never null for a precedence DFA
        if (fullContext) {
            return this.s0full.getTarget(precedence);
        }
        else {
            return this.s0.getTarget(precedence);
        }
    }
    /**
     * Set the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @param startState The start state corresponding to the specified
     * precedence.
     *
     * @ if this is not a precedence DFA.
     * @see `isPrecedenceDfa`
     */
    setPrecedenceStartState(precedence, fullContext, startState) {
        if (!this.isPrecedenceDfa) {
            throw new Error("Only precedence DFAs may contain a precedence start state.");
        }
        if (precedence < 0) {
            return;
        }
        if (fullContext) {
            // s0full is never null for a precedence DFA
            this.s0full.setTarget(precedence, startState);
        }
        else {
            // s0 is never null for a precedence DFA
            this.s0.setTarget(precedence, startState);
        }
    }
    get isEmpty() {
        if (this.isPrecedenceDfa) {
            // s0 and s0full are never null for a precedence DFA
            return this.s0.getEdgeMap().size === 0 && this.s0full.getEdgeMap().size === 0;
        }
        return this.s0 == null && this.s0full == null;
    }
    get isContextSensitive() {
        if (this.isPrecedenceDfa) {
            // s0full is never null for a precedence DFA
            return this.s0full.getEdgeMap().size > 0;
        }
        return this.s0full != null;
    }
    addState(state) {
        state.stateNumber = this.nextStateNumber++;
        return this.states.getOrAdd(state);
    }
    toString(vocabulary, ruleNames) {
        if (!vocabulary) {
            vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        }
        if (!this.s0) {
            return "";
        }
        let serializer;
        if (ruleNames) {
            serializer = new DFASerializer_1.DFASerializer(this, vocabulary, ruleNames, this.atnStartState.atn);
        }
        else {
            serializer = new DFASerializer_1.DFASerializer(this, vocabulary);
        }
        return serializer.toString();
    }
    toLexerString() {
        if (!this.s0) {
            return "";
        }
        let serializer = new LexerDFASerializer_1.LexerDFASerializer(this);
        return serializer.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "states", void 0);
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "atnStartState", void 0);
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "atn", void 0);
DFA = __decorate([
    __param(0, Decorators_1.NotNull)
], DFA);
exports.DFA = DFA;

},{"../Decorators":13,"../VocabularyImpl":39,"../atn/ATNConfigSet":42,"../atn/StarLoopEntryState":99,"../misc/Array2DHashSet":111,"../misc/ObjectEqualityComparator":123,"./DFASerializer":106,"./DFAState":107,"./LexerDFASerializer":108}],106:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATNSimulator_1 = require("../atn/ATNSimulator");
const Decorators_1 = require("../Decorators");
const PredictionContext_1 = require("../atn/PredictionContext");
const Recognizer_1 = require("../Recognizer");
const VocabularyImpl_1 = require("../VocabularyImpl");
/** A DFA walker that knows how to dump them to serialized strings. */
class DFASerializer {
    constructor(dfa, vocabulary, ruleNames, atn) {
        if (vocabulary instanceof Recognizer_1.Recognizer) {
            ruleNames = vocabulary.ruleNames;
            atn = vocabulary.atn;
            vocabulary = vocabulary.vocabulary;
        }
        else if (!vocabulary) {
            vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        }
        this.dfa = dfa;
        this.vocabulary = vocabulary;
        this.ruleNames = ruleNames;
        this.atn = atn;
    }
    toString() {
        if (!this.dfa.s0) {
            return "";
        }
        let buf = "";
        if (this.dfa.states) {
            let states = new Array(...this.dfa.states.toArray());
            states.sort((o1, o2) => o1.stateNumber - o2.stateNumber);
            for (let s of states) {
                let edges = s.getEdgeMap();
                let edgeKeys = [...edges.keys()].sort((a, b) => a - b);
                let contextEdges = s.getContextEdgeMap();
                let contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);
                for (let entry of edgeKeys) {
                    let value = edges.get(entry);
                    if ((value == null || value === ATNSimulator_1.ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {
                        continue;
                    }
                    let contextSymbol = false;
                    buf += (this.getStateString(s)) + ("-") + (this.getEdgeLabel(entry)) + ("->");
                    if (s.isContextSymbol(entry)) {
                        buf += ("!");
                        contextSymbol = true;
                    }
                    let t = value;
                    if (t && t.stateNumber !== ATNSimulator_1.ATNSimulator.ERROR.stateNumber) {
                        buf += (this.getStateString(t)) + ("\n");
                    }
                    else if (contextSymbol) {
                        buf += ("ctx\n");
                    }
                }
                if (s.isContextSensitive) {
                    for (let entry of contextEdgeKeys) {
                        buf += (this.getStateString(s))
                            + ("-")
                            + (this.getContextLabel(entry))
                            + ("->")
                            + (this.getStateString(contextEdges.get(entry)))
                            + ("\n");
                    }
                }
            }
        }
        let output = buf;
        if (output.length === 0) {
            return "";
        }
        //return Utils.sortLinesInString(output);
        return output;
    }
    getContextLabel(i) {
        if (i === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            return "ctx:EMPTY_FULL";
        }
        else if (i === PredictionContext_1.PredictionContext.EMPTY_LOCAL_STATE_KEY) {
            return "ctx:EMPTY_LOCAL";
        }
        if (this.atn && i > 0 && i <= this.atn.states.length) {
            let state = this.atn.states[i];
            let ruleIndex = state.ruleIndex;
            if (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {
                return "ctx:" + String(i) + "(" + this.ruleNames[ruleIndex] + ")";
            }
        }
        return "ctx:" + String(i);
    }
    getEdgeLabel(i) {
        return this.vocabulary.getDisplayName(i);
    }
    getStateString(s) {
        if (s === ATNSimulator_1.ATNSimulator.ERROR) {
            return "ERROR";
        }
        let n = s.stateNumber;
        let stateStr = "s" + n;
        if (s.isAcceptState) {
            if (s.predicates) {
                stateStr = ":s" + n + "=>" + s.predicates;
            }
            else {
                stateStr = ":s" + n + "=>" + s.prediction;
            }
        }
        if (s.isContextSensitive) {
            stateStr += "*";
            for (let config of s.configs) {
                if (config.reachesIntoOuterContext) {
                    stateStr += "*";
                    break;
                }
            }
        }
        return stateStr;
    }
}
__decorate([
    Decorators_1.NotNull
], DFASerializer.prototype, "dfa", void 0);
__decorate([
    Decorators_1.NotNull
], DFASerializer.prototype, "vocabulary", void 0);
__decorate([
    Decorators_1.Override
], DFASerializer.prototype, "toString", null);
exports.DFASerializer = DFASerializer;

},{"../Decorators":13,"../Recognizer":32,"../VocabularyImpl":39,"../atn/ATNSimulator":45,"../atn/PredictionContext":87}],107:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATN_1 = require("../atn/ATN");
const BitSet_1 = require("../misc/BitSet");
const MurmurHash_1 = require("../misc/MurmurHash");
const Decorators_1 = require("../Decorators");
const PredictionContext_1 = require("../atn/PredictionContext");
const assert = require("assert");
/** A DFA state represents a set of possible ATN configurations.
 *  As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 *  to keep track of all possible states the ATN can be in after
 *  reading each input symbol.  That is to say, after reading
 *  input a1a2..an, the DFA is in a state that represents the
 *  subset T of the states of the ATN that are reachable from the
 *  ATN's start state along some path labeled a1a2..an."
 *  In conventional NFA&rarr;DFA conversion, therefore, the subset T
 *  would be a bitset representing the set of states the
 *  ATN could be in.  We need to track the alt predicted by each
 *  state as well, however.  More importantly, we need to maintain
 *  a stack of states, tracking the closure operations as they
 *  jump from rule to rule, emulating rule invocations (method calls).
 *  I have to add a stack to simulate the proper lookahead sequences for
 *  the underlying LL grammar from which the ATN was derived.
 *
 *  I use a set of ATNConfig objects not simple states.  An ATNConfig
 *  is both a state (ala normal conversion) and a RuleContext describing
 *  the chain of rules (if any) followed to arrive at that state.
 *
 *  A DFA state may have multiple references to a particular state,
 *  but with different ATN contexts (with same or different alts)
 *  meaning that state was reached via a different set of rule invocations.
 */
class DFAState {
    /**
     * Constructs a new `DFAState`.
     *
     * @param configs The set of ATN configurations defining this state.
     */
    constructor(configs) {
        this.stateNumber = -1;
        this.configs = configs;
        this.edges = new Map();
        this.contextEdges = new Map();
    }
    get isContextSensitive() {
        return !!this.contextSymbols;
    }
    isContextSymbol(symbol) {
        if (!this.isContextSensitive) {
            return false;
        }
        return this.contextSymbols.get(symbol);
    }
    setContextSymbol(symbol) {
        assert(this.isContextSensitive);
        this.contextSymbols.set(symbol);
    }
    setContextSensitive(atn) {
        assert(!this.configs.isOutermostConfigSet);
        if (this.isContextSensitive) {
            return;
        }
        if (!this.contextSymbols) {
            this.contextSymbols = new BitSet_1.BitSet();
        }
    }
    get acceptStateInfo() {
        return this._acceptStateInfo;
    }
    set acceptStateInfo(acceptStateInfo) {
        this._acceptStateInfo = acceptStateInfo;
    }
    get isAcceptState() {
        return !!this._acceptStateInfo;
    }
    get prediction() {
        if (!this._acceptStateInfo) {
            return ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        return this._acceptStateInfo.prediction;
    }
    get lexerActionExecutor() {
        if (!this._acceptStateInfo) {
            return undefined;
        }
        return this._acceptStateInfo.lexerActionExecutor;
    }
    getTarget(symbol) {
        return this.edges.get(symbol);
    }
    setTarget(symbol, target) {
        this.edges.set(symbol, target);
    }
    getEdgeMap() {
        return this.edges;
    }
    getContextTarget(invokingState) {
        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            invokingState = -1;
        }
        return this.contextEdges.get(invokingState);
    }
    setContextTarget(invokingState, target) {
        if (!this.isContextSensitive) {
            throw new Error("The state is not context sensitive.");
        }
        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            invokingState = -1;
        }
        this.contextEdges.set(invokingState, target);
    }
    getContextEdgeMap() {
        let map = new Map(this.contextEdges);
        let existing = map.get(-1);
        if (existing !== undefined) {
            if (map.size === 1) {
                let result = new Map();
                result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
                return result;
            }
            else {
                map.delete(-1);
                map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
            }
        }
        return map;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize(7);
        hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());
        hash = MurmurHash_1.MurmurHash.finish(hash, 1);
        return hash;
    }
    /**
     * Two {@link DFAState} instances are equal if their ATN configuration sets
     * are the same. This method is used to see if a state already exists.
     *
     * Because the number of alternatives and number of ATN configurations are
     * finite, there is a finite number of DFA states that can be processed.
     * This is necessary to show that the algorithm terminates.
     *
     * Cannot test the DFA state numbers here because in
     * {@link ParserATNSimulator#addDFAState} we need to know if any other state
     * exists that has this exact set of ATN configurations. The
     * {@link #stateNumber} is irrelevant.
     */
    equals(o) {
        // compare set of ATN configurations in this set with other
        if (this === o) {
            return true;
        }
        if (!(o instanceof DFAState)) {
            return false;
        }
        let other = o;
        let sameSet = this.configs.equals(other.configs);
        //		System.out.println("DFAState.equals: "+configs+(sameSet?"==":"!=")+other.configs);
        return sameSet;
    }
    toString() {
        let buf = "";
        buf += (this.stateNumber) + (":") + (this.configs);
        if (this.isAcceptState) {
            buf += ("=>");
            if (this.predicates) {
                buf += this.predicates;
            }
            else {
                buf += (this.prediction);
            }
        }
        return buf.toString();
    }
}
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "configs", void 0);
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "edges", void 0);
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "contextEdges", void 0);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "toString", null);
exports.DFAState = DFAState;
(function (DFAState) {
    /** Map a predicate to a predicted alternative. */
    let PredPrediction = class PredPrediction {
        constructor(pred, alt) {
            this.alt = alt;
            this.pred = pred;
        }
        toString() {
            return "(" + this.pred + ", " + this.alt + ")";
        }
    };
    __decorate([
        Decorators_1.NotNull
    ], PredPrediction.prototype, "pred", void 0);
    __decorate([
        Decorators_1.Override
    ], PredPrediction.prototype, "toString", null);
    PredPrediction = __decorate([
        __param(0, Decorators_1.NotNull)
    ], PredPrediction);
    DFAState.PredPrediction = PredPrediction;
})(DFAState = exports.DFAState || (exports.DFAState = {}));

},{"../Decorators":13,"../atn/ATN":40,"../atn/PredictionContext":87,"../misc/BitSet":114,"../misc/MurmurHash":122,"assert":153}],108:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const DFASerializer_1 = require("./DFASerializer");
const Decorators_1 = require("../Decorators");
const VocabularyImpl_1 = require("../VocabularyImpl");
let LexerDFASerializer = class LexerDFASerializer extends DFASerializer_1.DFASerializer {
    constructor(dfa) {
        super(dfa, VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY);
    }
    getEdgeLabel(i) {
        return "'" + String.fromCodePoint(i) + "'";
    }
};
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], LexerDFASerializer.prototype, "getEdgeLabel", null);
LexerDFASerializer = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerDFASerializer);
exports.LexerDFASerializer = LexerDFASerializer;

},{"../Decorators":13,"../VocabularyImpl":39,"./DFASerializer":106}],109:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// export * from "./ANTLRFileStream";
__export(require("./ANTLRInputStream"));
__export(require("./BailErrorStrategy"));
__export(require("./BufferedTokenStream"));
__export(require("./CharStreams"));
__export(require("./CodePointBuffer"));
__export(require("./CodePointCharStream"));
__export(require("./CommonToken"));
__export(require("./CommonTokenFactory"));
__export(require("./CommonTokenStream"));
__export(require("./ConsoleErrorListener"));
__export(require("./DefaultErrorStrategy"));
__export(require("./Dependents"));
__export(require("./DiagnosticErrorListener"));
__export(require("./FailedPredicateException"));
__export(require("./InputMismatchException"));
__export(require("./InterpreterRuleContext"));
__export(require("./IntStream"));
__export(require("./Lexer"));
__export(require("./LexerInterpreter"));
__export(require("./LexerNoViableAltException"));
__export(require("./ListTokenSource"));
__export(require("./NoViableAltException"));
__export(require("./Parser"));
__export(require("./ParserInterpreter"));
__export(require("./ParserRuleContext"));
__export(require("./ProxyErrorListener"));
__export(require("./ProxyParserErrorListener"));
__export(require("./RecognitionException"));
__export(require("./Recognizer"));
__export(require("./RuleContext"));
__export(require("./RuleContextWithAltNum"));
__export(require("./RuleDependency"));
__export(require("./RuleVersion"));
__export(require("./Token"));
__export(require("./TokenStreamRewriter"));
__export(require("./VocabularyImpl"));

},{"./ANTLRInputStream":3,"./BailErrorStrategy":4,"./BufferedTokenStream":5,"./CharStreams":6,"./CodePointBuffer":7,"./CodePointCharStream":8,"./CommonToken":9,"./CommonTokenFactory":10,"./CommonTokenStream":11,"./ConsoleErrorListener":12,"./DefaultErrorStrategy":14,"./Dependents":15,"./DiagnosticErrorListener":16,"./FailedPredicateException":17,"./InputMismatchException":18,"./IntStream":19,"./InterpreterRuleContext":20,"./Lexer":21,"./LexerInterpreter":22,"./LexerNoViableAltException":23,"./ListTokenSource":24,"./NoViableAltException":25,"./Parser":26,"./ParserInterpreter":27,"./ParserRuleContext":28,"./ProxyErrorListener":29,"./ProxyParserErrorListener":30,"./RecognitionException":31,"./Recognizer":32,"./RuleContext":33,"./RuleContextWithAltNum":34,"./RuleDependency":35,"./RuleVersion":36,"./Token":37,"./TokenStreamRewriter":38,"./VocabularyImpl":39}],110:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Array2DHashSet_1 = require("./Array2DHashSet");
class MapKeyEqualityComparator {
    constructor(keyComparator) {
        this.keyComparator = keyComparator;
    }
    hashCode(obj) {
        return this.keyComparator.hashCode(obj.key);
    }
    equals(a, b) {
        return this.keyComparator.equals(a.key, b.key);
    }
}
class Array2DHashMap {
    constructor(keyComparer) {
        if (keyComparer instanceof Array2DHashMap) {
            this.backingStore = new Array2DHashSet_1.Array2DHashSet(keyComparer.backingStore);
        }
        else {
            this.backingStore = new Array2DHashSet_1.Array2DHashSet(new MapKeyEqualityComparator(keyComparer));
        }
    }
    clear() {
        this.backingStore.clear();
    }
    containsKey(key) {
        return this.backingStore.contains({ key });
    }
    get(key) {
        let bucket = this.backingStore.get({ key });
        if (!bucket) {
            return undefined;
        }
        return bucket.value;
    }
    get isEmpty() {
        return this.backingStore.isEmpty;
    }
    put(key, value) {
        let element = this.backingStore.get({ key, value });
        let result;
        if (!element) {
            this.backingStore.add({ key, value });
        }
        else {
            result = element.value;
            element.value = value;
        }
        return result;
    }
    putIfAbsent(key, value) {
        let element = this.backingStore.get({ key, value });
        let result;
        if (!element) {
            this.backingStore.add({ key, value });
        }
        else {
            result = element.value;
        }
        return result;
    }
    get size() {
        return this.backingStore.size;
    }
    hashCode() {
        return this.backingStore.hashCode();
    }
    equals(o) {
        if (!(o instanceof Array2DHashMap)) {
            return false;
        }
        return this.backingStore.equals(o.backingStore);
    }
}
exports.Array2DHashMap = Array2DHashMap;

},{"./Array2DHashSet":111}],111:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00
const assert = require("assert");
const DefaultEqualityComparator_1 = require("./DefaultEqualityComparator");
const Decorators_1 = require("../Decorators");
const MurmurHash_1 = require("./MurmurHash");
/** {@link Set} implementation with closed hashing (open addressing). */
// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:
// 		  e.g. the return type of add() differs!
//        For this reason I've commented tweaked the implements clause
const INITAL_CAPACITY = 16; // must be power of 2
const LOAD_FACTOR = 0.75;
class Array2DHashSet {
    constructor(comparatorOrSet, initialCapacity = INITAL_CAPACITY) {
        /** How many elements in set */
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand
        if (comparatorOrSet instanceof Array2DHashSet) {
            this.comparator = comparatorOrSet.comparator;
            this.buckets = comparatorOrSet.buckets.slice(0);
            for (let i = 0; i < this.buckets.length; i++) {
                let bucket = this.buckets[i];
                if (bucket) {
                    this.buckets[i] = bucket.slice(0);
                }
            }
            this.n = comparatorOrSet.n;
            this.threshold = comparatorOrSet.threshold;
        }
        else {
            this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;
            this.buckets = this.createBuckets(initialCapacity);
        }
    }
    /**
     * Add `o` to set if not there; return existing value if already
     * there. This method performs the same operation as {@link #add} aside from
     * the return value.
     */
    getOrAdd(o) {
        if (this.n > this.threshold) {
            this.expand();
        }
        return this.getOrAddImpl(o);
    }
    getOrAddImpl(o) {
        let b = this.getBucket(o);
        let bucket = this.buckets[b];
        // NEW BUCKET
        if (!bucket) {
            bucket = [o];
            this.buckets[b] = bucket;
            this.n++;
            return o;
        }
        // LOOK FOR IT IN BUCKET
        for (let existing of bucket) {
            if (this.comparator.equals(existing, o)) {
                return existing; // found existing, quit
            }
        }
        // FULL BUCKET, expand and add to end
        bucket.push(o);
        this.n++;
        return o;
    }
    get(o) {
        if (o == null) {
            return o;
        }
        let b = this.getBucket(o);
        let bucket = this.buckets[b];
        if (!bucket) {
            // no bucket
            return undefined;
        }
        for (let e of bucket) {
            if (this.comparator.equals(e, o)) {
                return e;
            }
        }
        return undefined;
    }
    getBucket(o) {
        let hash = this.comparator.hashCode(o);
        let b = hash & (this.buckets.length - 1); // assumes len is power of 2
        return b;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));
            }
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, this.size);
        return hash;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        if (!(o instanceof Array2DHashSet)) {
            return false;
        }
        if (o.size !== this.size) {
            return false;
        }
        let same = this.containsAll(o);
        return same;
    }
    expand() {
        let old = this.buckets;
        let newCapacity = this.buckets.length * 2;
        let newTable = this.createBuckets(newCapacity);
        this.buckets = newTable;
        this.threshold = Math.floor(newCapacity * LOAD_FACTOR);
        //		System.out.println("new size="+newCapacity+", thres="+threshold);
        // rehash all existing entries
        let oldSize = this.size;
        for (let bucket of old) {
            if (!bucket) {
                continue;
            }
            for (let o of bucket) {
                let b = this.getBucket(o);
                let newBucket = this.buckets[b];
                if (!newBucket) {
                    newBucket = [];
                    this.buckets[b] = newBucket;
                }
                newBucket.push(o);
            }
        }
        assert(this.n === oldSize);
    }
    add(t) {
        let existing = this.getOrAdd(t);
        return existing === t;
    }
    get size() {
        return this.n;
    }
    get isEmpty() {
        return this.n === 0;
    }
    contains(o) {
        return this.containsFast(this.asElementType(o));
    }
    containsFast(obj) {
        if (obj == null) {
            return false;
        }
        return this.get(obj) != null;
    }
    *[Symbol.iterator]() {
        yield* this.toArray();
    }
    toArray() {
        const a = new Array(this.size);
        // Copy elements from the nested arrays into the destination array
        let i = 0; // Position within destination array
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                a[i++] = o;
            }
        }
        return a;
    }
    containsAll(collection) {
        if (collection instanceof Array2DHashSet) {
            let s = collection;
            for (let bucket of s.buckets) {
                if (bucket == null) {
                    continue;
                }
                for (let o of bucket) {
                    if (o == null) {
                        break;
                    }
                    if (!this.containsFast(this.asElementType(o))) {
                        return false;
                    }
                }
            }
        }
        else {
            for (let o of collection) {
                if (!this.containsFast(this.asElementType(o))) {
                    return false;
                }
            }
        }
        return true;
    }
    addAll(c) {
        let changed = false;
        for (let o of c) {
            let existing = this.getOrAdd(o);
            if (existing !== o) {
                changed = true;
            }
        }
        return changed;
    }
    clear() {
        this.buckets = this.createBuckets(INITAL_CAPACITY);
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
    }
    toString() {
        if (this.size === 0) {
            return "{}";
        }
        let buf = "{";
        let first = true;
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                if (first) {
                    first = false;
                }
                else {
                    buf += ", ";
                }
                buf += o.toString();
            }
        }
        buf += "}";
        return buf;
    }
    toTableString() {
        let buf = "";
        for (let bucket of this.buckets) {
            if (bucket == null) {
                buf += "null\n";
                continue;
            }
            buf += "[";
            let first = true;
            for (let o of bucket) {
                if (first) {
                    first = false;
                }
                else {
                    buf += " ";
                }
                if (o == null) {
                    buf += "_";
                }
                else {
                    buf += o.toString();
                }
            }
            buf += "]\n";
        }
        return buf;
    }
    /**
     * Return `o` as an instance of the element type `T`. If
     * `o` is non-undefined but known to not be an instance of `T`, this
     * method returns `undefined`. The base implementation does not perform any
     * type checks; override this method to provide strong type checks for the
     * {@link #contains} and {@link #remove} methods to ensure the arguments to
     * the {@link EqualityComparator} for the set always have the expected
     * types.
     *
     * @param o the object to try and cast to the element type of the set
     * @returns `o` if it could be an instance of `T`, otherwise
     * `undefined`.
     */
    asElementType(o) {
        return o;
    }
    /**
     * Return an array of `T[]` with length `capacity`.
     *
     * @param capacity the length of the array to return
     * @returns the newly constructed array
     */
    createBuckets(capacity) {
        return new Array(capacity);
    }
}
__decorate([
    Decorators_1.NotNull
], Array2DHashSet.prototype, "comparator", void 0);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "add", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "contains", null);
__decorate([
    __param(0, Decorators_1.Nullable)
], Array2DHashSet.prototype, "containsFast", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, Symbol.iterator, null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "toArray", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "containsAll", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "addAll", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "clear", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "toString", null);
__decorate([
    Decorators_1.SuppressWarnings("unchecked")
], Array2DHashSet.prototype, "asElementType", null);
__decorate([
    Decorators_1.SuppressWarnings("unchecked")
], Array2DHashSet.prototype, "createBuckets", null);
exports.Array2DHashSet = Array2DHashSet;

},{"../Decorators":13,"./DefaultEqualityComparator":116,"./MurmurHash":122,"assert":153}],112:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const MurmurHash_1 = require("./MurmurHash");
const ObjectEqualityComparator_1 = require("./ObjectEqualityComparator");
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class ArrayEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        return MurmurHash_1.MurmurHash.hashCode(obj, 0);
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined`, this method returns `true`. Otherwise if only
     * `a` is `undefined`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        else if (b == null) {
            return false;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
}
ArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();
__decorate([
    Decorators_1.Override
], ArrayEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ArrayEqualityComparator.prototype, "equals", null);
exports.ArrayEqualityComparator = ArrayEqualityComparator;

},{"../Decorators":13,"./MurmurHash":122,"./ObjectEqualityComparator":123}],113:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Arrays;
(function (Arrays) {
    /**
     * Searches the specified array of numbers for the specified value using the binary search algorithm. The array must
     * be sorted prior to making this call. If it is not sorted, the results are unspecified. If the array contains
     * multiple elements with the specified value, there is no guarantee which one will be found.
     *
     * @returns index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The
     * insertion point is defined as the point at which the key would be inserted into the array: the index of the first
     * element greater than the key, or array.length if all elements in the array are less than the specified key. Note
     * that this guarantees that the return value will be >= 0 if and only if the key is found.
     */
    function binarySearch(array, key, fromIndex, toIndex) {
        return binarySearch0(array, fromIndex !== undefined ? fromIndex : 0, toIndex !== undefined ? toIndex : array.length, key);
    }
    Arrays.binarySearch = binarySearch;
    function binarySearch0(array, fromIndex, toIndex, key) {
        let low = fromIndex;
        let high = toIndex - 1;
        while (low <= high) {
            let mid = (low + high) >>> 1;
            let midVal = array[mid];
            if (midVal < key) {
                low = mid + 1;
            }
            else if (midVal > key) {
                high = mid - 1;
            }
            else {
                // key found
                return mid;
            }
        }
        // key not found.
        return -(low + 1);
    }
    function toString(array) {
        let result = "[";
        let first = true;
        for (let element of array) {
            if (first) {
                first = false;
            }
            else {
                result += ", ";
            }
            if (element === null) {
                result += "null";
            }
            else if (element === undefined) {
                result += "undefined";
            }
            else {
                result += element;
            }
        }
        result += "]";
        return result;
    }
    Arrays.toString = toString;
})(Arrays = exports.Arrays || (exports.Arrays = {}));

},{}],114:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const MurmurHash_1 = require("./MurmurHash");
/**
 * Private empty array used to construct empty BitSets
 */
const EMPTY_DATA = new Uint16Array(0);
/**
 * Gets the word index of the `UInt16` element in `BitSet.data` containing the bit with the specified index.
 */
function getIndex(bitNumber) {
    return bitNumber >>> 4;
}
/**
 * Convert a word index into the bit index of the LSB of that word
 */
function unIndex(n) {
    return n * 16;
}
/**
 * Get's the bit number of the least signficant bit set LSB which is set in a word non-zero word;
 * Bit numbers run from LSB to MSB starting with 0.
 */
function findLSBSet(word) {
    let bit = 1;
    for (let i = 0; i < 16; i++) {
        if ((word & bit) !== 0) {
            return i;
        }
        bit = (bit << 1) >>> 0;
    }
    throw new RangeError("No specified bit found");
}
function findMSBSet(word) {
    let bit = (1 << 15) >>> 0;
    for (let i = 15; i >= 0; i--) {
        if ((word & bit) !== 0) {
            return i;
        }
        bit = bit >>> 1;
    }
    throw new RangeError("No specified bit found");
}
/**
 * Gets a 16-bit mask with bit numbers fromBit to toBit (inclusive) set.
 * Bit numbers run from LSB to MSB starting with 0.
 */
function bitsFor(fromBit, toBit) {
    fromBit &= 0xF;
    toBit &= 0xF;
    if (fromBit === toBit) {
        return (1 << fromBit) >>> 0;
    }
    return ((0xFFFF >>> (15 - toBit)) ^ (0xFFFF >>> (16 - fromBit)));
}
/**
 * A lookup table for number of set bits in a 16-bit integer.   This is used to quickly count the cardinality (number of unique elements) of a BitSet.
 */
const POP_CNT = new Uint8Array(65536);
for (let i = 0; i < 16; i++) {
    const stride = (1 << i) >>> 0;
    let index = 0;
    while (index < POP_CNT.length) {
        // skip the numbers where the bit isn't set
        index += stride;
        // increment the ones where the bit is set
        for (let j = 0; j < stride; j++) {
            POP_CNT[index]++;
            index++;
        }
    }
}
class BitSet {
    /*
    ** constructor implementation
    */
    constructor(arg) {
        if (!arg) {
            // covering the case of unspecified and nbits===0
            this.data = EMPTY_DATA;
        }
        else if (typeof arg === "number") {
            if (arg < 0) {
                throw new RangeError("nbits cannot be negative");
            }
            else {
                this.data = new Uint16Array(getIndex(arg - 1) + 1);
            }
        }
        else {
            if (arg instanceof BitSet) {
                this.data = arg.data.slice(0); // Clone the data
            }
            else {
                let max = -1;
                for (let v of arg) {
                    if (max < v) {
                        max = v;
                    }
                }
                this.data = new Uint16Array(getIndex(max - 1) + 1);
                for (let v of arg) {
                    this.set(v);
                }
            }
        }
    }
    /**
     * Performs a logical **AND** of this target bit set with the argument bit set. This bit set is modified so that
     * each bit in it has the value `true` if and only if it both initially had the value `true` and the corresponding
     * bit in the bit set argument also had the value `true`.
     */
    and(set) {
        const data = this.data;
        const other = set.data;
        const words = Math.min(data.length, other.length);
        let lastWord = -1; // Keep track of index of last non-zero word
        for (let i = 0; i < words; i++) {
            let value = data[i] &= other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        if (lastWord < data.length - 1) {
            this.data = data.slice(0, lastWord + 1);
        }
    }
    /**
     * Clears all of the bits in this `BitSet` whose corresponding bit is set in the specified `BitSet`.
     */
    andNot(set) {
        const data = this.data;
        const other = set.data;
        const words = Math.min(data.length, other.length);
        let lastWord = -1; // Keep track of index of last non-zero word
        for (let i = 0; i < words; i++) {
            let value = data[i] &= (other[i] ^ 0xFFFF);
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        if (lastWord < data.length - 1) {
            this.data = data.slice(0, lastWord + 1);
        }
    }
    /**
     * Returns the number of bits set to `true` in this `BitSet`.
     */
    cardinality() {
        if (this.isEmpty) {
            return 0;
        }
        const data = this.data;
        const length = data.length;
        let result = 0;
        for (let i = 0; i < length; i++) {
            result += POP_CNT[data[i]];
        }
        return result;
    }
    clear(fromIndex, toIndex) {
        if (fromIndex == null) {
            this.data.fill(0);
        }
        else if (toIndex == null) {
            this.set(fromIndex, false);
        }
        else {
            this.set(fromIndex, toIndex, false);
        }
    }
    flip(fromIndex, toIndex) {
        if (toIndex == null) {
            toIndex = fromIndex;
        }
        if (fromIndex < 0 || toIndex < fromIndex) {
            throw new RangeError();
        }
        let word = getIndex(fromIndex);
        const lastWord = getIndex(toIndex);
        if (word === lastWord) {
            this.data[word] ^= bitsFor(fromIndex, toIndex);
        }
        else {
            this.data[word++] ^= bitsFor(fromIndex, 15);
            while (word < lastWord) {
                this.data[word++] ^= 0xFFFF;
            }
            this.data[word++] ^= bitsFor(0, toIndex);
        }
    }
    get(fromIndex, toIndex) {
        if (toIndex === undefined) {
            return !!(this.data[getIndex(fromIndex)] & bitsFor(fromIndex, fromIndex));
        }
        else {
            // return a BitSet
            let result = new BitSet(toIndex + 1);
            for (let i = fromIndex; i <= toIndex; i++) {
                result.set(i, this.get(i));
            }
            return result;
        }
    }
    /**
     * Returns true if the specified `BitSet` has any bits set to `true` that are also set to `true` in this `BitSet`.
     *
     * @param set `BitSet` to intersect with
     */
    intersects(set) {
        let smallerLength = Math.min(this.length(), set.length());
        if (smallerLength === 0) {
            return false;
        }
        let bound = getIndex(smallerLength - 1);
        for (let i = 0; i <= bound; i++) {
            if ((this.data[i] & set.data[i]) !== 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * Returns true if this `BitSet` contains no bits that are set to `true`.
     */
    get isEmpty() {
        return this.length() === 0;
    }
    /**
     * Returns the "logical size" of this `BitSet`: the index of the highest set bit in the `BitSet` plus one. Returns
     * zero if the `BitSet` contains no set bits.
     */
    length() {
        if (!this.data.length) {
            return 0;
        }
        return this.previousSetBit(unIndex(this.data.length) - 1) + 1;
    }
    /**
     * Returns the index of the first bit that is set to `false` that occurs on or after the specified starting index,
     * If no such bit exists then `-1` is returned.
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is negative
     */
    nextClearBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word > length) {
            return -1;
        }
        let ignore = 0xFFFF ^ bitsFor(fromIndex, 15);
        if ((data[word] | ignore) === 0xFFFF) {
            word++;
            ignore = 0;
            for (; word < length; word++) {
                if (data[word] !== 0xFFFF) {
                    break;
                }
            }
            if (word === length) {
                // Hit the end
                return -1;
            }
        }
        return unIndex(word) + findLSBSet((data[word] | ignore) ^ 0xFFFF);
    }
    /**
     * Returns the index of the first bit that is set to `true` that occurs on or after the specified starting index.
     * If no such bit exists then `-1` is returned.
     *
     * To iterate over the `true` bits in a `BitSet`, use the following loop:
     *
     * ```
     * for (let i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i + 1)) {
     *   // operate on index i here
     * }
     * ```
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is negative
     */
    nextSetBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word > length) {
            return -1;
        }
        let mask = bitsFor(fromIndex, 15);
        if ((data[word] & mask) === 0) {
            word++;
            mask = 0xFFFF;
            for (; word < length; word++) {
                if (data[word] !== 0) {
                    break;
                }
            }
            if (word >= length) {
                return -1;
            }
        }
        return unIndex(word) + findLSBSet(data[word] & mask);
    }
    /**
     * Performs a logical **OR** of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value `true` if and only if it either already had the value `true` or the corresponding bit in the bit
     * set argument has the value `true`.
     */
    or(set) {
        const data = this.data;
        const other = set.data;
        const minWords = Math.min(data.length, other.length);
        const words = Math.max(data.length, other.length);
        const dest = data.length === words ? data : new Uint16Array(words);
        let lastWord = -1;
        // Or those words both sets have in common
        for (let i = 0; i < minWords; i++) {
            let value = dest[i] = data[i] | other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        // Copy words from larger set (if there is one)
        const longer = data.length > other.length ? data : other;
        for (let i = minWords; i < words; i++) {
            let value = dest[i] = longer[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        else if (dest.length === lastWord + 1) {
            this.data = dest;
        }
        else {
            this.data = dest.slice(0, lastWord);
        }
    }
    /**
     * Returns the index of the nearest bit that is set to `false` that occurs on or before the specified starting
     * index. If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is less than `-1`
     */
    previousClearBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word >= length) {
            word = length - 1;
        }
        let ignore = 0xFFFF ^ bitsFor(0, fromIndex);
        if ((data[word] | ignore) === 0xFFFF) {
            ignore = 0;
            word--;
            for (; word >= 0; word--) {
                if (data[word] !== 0xFFFF) {
                    break;
                }
            }
            if (word < 0) {
                // Hit the end
                return -1;
            }
        }
        return unIndex(word) + findMSBSet((data[word] | ignore) ^ 0xFFFF);
    }
    /**
     * Returns the index of the nearest bit that is set to `true` that occurs on or before the specified starting index.
     * If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
     *
     * To iterate over the `true` bits in a `BitSet`, use the following loop:
     *
     * ```
     * for (let i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {
     *   // operate on index i here
     * }
     * ```
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is less than `-1`
     */
    previousSetBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word >= length) {
            word = length - 1;
        }
        let mask = bitsFor(0, fromIndex);
        if ((data[word] & mask) === 0) {
            word--;
            mask = 0xFFFF;
            for (; word >= 0; word--) {
                if (data[word] !== 0) {
                    break;
                }
            }
            if (word < 0) {
                return -1;
            }
        }
        return unIndex(word) + findMSBSet(data[word] & mask);
    }
    set(fromIndex, toIndex, value) {
        if (toIndex === undefined) {
            toIndex = fromIndex;
            value = true;
        }
        else if (typeof toIndex === "boolean") {
            value = toIndex;
            toIndex = fromIndex;
        }
        if (value === undefined) {
            value = true;
        }
        if (fromIndex < 0 || fromIndex > toIndex) {
            throw new RangeError();
        }
        let word = getIndex(fromIndex);
        let lastWord = getIndex(toIndex);
        if (value && lastWord >= this.data.length) {
            // Grow array "just enough" for bits we need to set
            let temp = new Uint16Array(lastWord + 1);
            this.data.forEach((value, index) => temp[index] = value);
            this.data = temp;
        }
        else if (!value) {
            // But there is no need to grow array to clear bits.
            if (word >= this.data.length) {
                // Early exit
                return;
            }
            if (lastWord >= this.data.length) {
                // Adjust work to fit array
                lastWord = this.data.length - 1;
                toIndex = this.data.length * 16 - 1;
            }
        }
        if (word === lastWord) {
            this._setBits(word, value, bitsFor(fromIndex, toIndex));
        }
        else {
            this._setBits(word++, value, bitsFor(fromIndex, 15));
            while (word < lastWord) {
                this.data[word++] = value ? 0xFFFF : 0;
            }
            this._setBits(word, value, bitsFor(0, toIndex));
        }
    }
    _setBits(word, value, mask) {
        if (value) {
            this.data[word] |= mask;
        }
        else {
            this.data[word] &= 0xFFFF ^ mask;
        }
    }
    /**
     * Returns the number of bits of space actually in use by this `BitSet` to represent bit values. The maximum element
     * in the set is the size - 1st element.
     */
    get size() {
        return this.data.byteLength * 8;
    }
    /**
     * Returns a new byte array containing all the bits in this bit set.
     *
     * More precisely, if
     * `let bytes = s.toByteArray();`
     * then `bytes.length === (s.length()+7)/8` and `s.get(n) === ((bytes[n/8] & (1<<(n%8))) != 0)` for all
     * `n < 8 * bytes.length`.
     */
    // toByteArray(): Int8Array {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    /**
     * Returns a new integer array containing all the bits in this bit set.
     *
     * More precisely, if
     * `let integers = s.toIntegerArray();`
     * then `integers.length === (s.length()+31)/32` and `s.get(n) === ((integers[n/32] & (1<<(n%32))) != 0)` for all
     * `n < 32 * integers.length`.
     */
    // toIntegerArray(): Int32Array {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    hashCode() {
        return MurmurHash_1.MurmurHash.hashCode(this.data, 22);
    }
    /**
     * Compares this object against the specified object. The result is `true` if and only if the argument is not
     * `undefined` and is a `Bitset` object that has exactly the same set of bits set to `true` as this bit set. That
     * is, for every nonnegative index `k`,
     *
     * ```
     * ((BitSet)obj).get(k) == this.get(k)
     * ```
     *
     * must be true. The current sizes of the two bit sets are not compared.
     */
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof BitSet)) {
            return false;
        }
        const len = this.length();
        if (len !== obj.length()) {
            return false;
        }
        if (len === 0) {
            return true;
        }
        let bound = getIndex(len - 1);
        for (let i = 0; i <= bound; i++) {
            if (this.data[i] !== obj.data[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns a string representation of this bit set. For every index for which this `BitSet` contains a bit in the
     * set state, the decimal representation of that index is included in the result. Such indices are listed in order
     * from lowest to highest, separated by ", " (a comma and a space) and surrounded by braces, resulting in the usual
     * mathematical notation for a set of integers.
     *
     * Example:
     *
     *     BitSet drPepper = new BitSet();
     *
     * Now `drPepper.toString()` returns `"{}"`.
     *
     *     drPepper.set(2);
     *
     * Now `drPepper.toString()` returns `"{2}"`.
     *
     *     drPepper.set(4);
     *     drPepper.set(10);
     *
     * Now `drPepper.toString()` returns `"{2, 4, 10}"`.
     */
    toString() {
        let result = "{";
        let first = true;
        for (let i = this.nextSetBit(0); i >= 0; i = this.nextSetBit(i + 1)) {
            if (first) {
                first = false;
            }
            else {
                result += ", ";
            }
            result += i;
        }
        result += "}";
        return result;
    }
    // static valueOf(bytes: Int8Array): BitSet;
    // static valueOf(buffer: ArrayBuffer): BitSet;
    // static valueOf(integers: Int32Array): BitSet;
    // static valueOf(data: Int8Array | Int32Array | ArrayBuffer): BitSet {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    /**
     * Performs a logical **XOR** of this bit set with the bit set argument. This bit set is modified so that a bit in
     * it has the value `true` if and only if one of the following statements holds:
     *
     * * The bit initially has the value `true`, and the corresponding bit in the argument has the value `false`.
     * * The bit initially has the value `false`, and the corresponding bit in the argument has the value `true`.
     */
    xor(set) {
        const data = this.data;
        const other = set.data;
        const minWords = Math.min(data.length, other.length);
        const words = Math.max(data.length, other.length);
        const dest = data.length === words ? data : new Uint16Array(words);
        let lastWord = -1;
        // Xor those words both sets have in common
        for (let i = 0; i < minWords; i++) {
            let value = dest[i] = data[i] ^ other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        // Copy words from larger set (if there is one)
        const longer = data.length > other.length ? data : other;
        for (let i = minWords; i < words; i++) {
            let value = dest[i] = longer[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        else if (dest.length === lastWord + 1) {
            this.data = dest;
        }
        else {
            this.data = dest.slice(0, lastWord + 1);
        }
    }
    clone() {
        return new BitSet(this);
    }
    [Symbol.iterator]() {
        return new BitSetIterator(this.data);
    }
    // Overrides formatting for nodejs assert etc.
    [util.inspect.custom]() {
        return "BitSet " + this.toString();
    }
}
exports.BitSet = BitSet;
class BitSetIterator {
    constructor(data) {
        this.data = data;
        this.index = 0;
        this.mask = 0xFFFF;
    }
    next() {
        while (this.index < this.data.length) {
            const bits = this.data[this.index] & this.mask;
            if (bits !== 0) {
                const bitNumber = unIndex(this.index) + findLSBSet(bits);
                this.mask = bitsFor(bitNumber + 1, 15);
                return { done: false, value: bitNumber };
            }
            this.index++;
            this.mask = 0xFFFF;
        }
        return { done: true, value: -1 };
    }
    [Symbol.iterator]() { return this; }
}

},{"./MurmurHash":122,"util":208}],115:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function isHighSurrogate(ch) {
    return ch >= 0xD800 && ch <= 0xDBFF;
}
exports.isHighSurrogate = isHighSurrogate;
function isLowSurrogate(ch) {
    return ch >= 0xDC00 && ch <= 0xDFFF;
}
exports.isLowSurrogate = isLowSurrogate;
function isSupplementaryCodePoint(ch) {
    return ch >= 0x10000;
}
exports.isSupplementaryCodePoint = isSupplementaryCodePoint;

},{}],116:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
const MurmurHash_1 = require("./MurmurHash");
const ObjectEqualityComparator_1 = require("./ObjectEqualityComparator");
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class DefaultEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        else if (typeof obj === "string" || typeof obj === "number") {
            return MurmurHash_1.MurmurHash.hashCode([obj]);
        }
        else {
            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);
        }
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined` or `null`, this method returns `true`. Otherwise if only
     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        else if (typeof a === "string" || typeof a === "number") {
            return a === b;
        }
        else {
            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);
        }
    }
}
DefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();
__decorate([
    Decorators_1.Override
], DefaultEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], DefaultEqualityComparator.prototype, "equals", null);
exports.DefaultEqualityComparator = DefaultEqualityComparator;

},{"../Decorators":13,"./MurmurHash":122,"./ObjectEqualityComparator":123}],117:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:40.5099429-07:00
const Arrays_1 = require("./Arrays");
const Decorators_1 = require("../Decorators");
const EMPTY_DATA = new Int32Array(0);
const INITIAL_SIZE = 4;
const MAX_ARRAY_SIZE = (((1 << 31) >>> 0) - 1) - 8;
/**
 *
 * @author Sam Harwell
 */
class IntegerList {
    constructor(arg) {
        if (!arg) {
            this._data = EMPTY_DATA;
            this._size = 0;
        }
        else if (arg instanceof IntegerList) {
            this._data = arg._data.slice(0);
            this._size = arg._size;
        }
        else if (typeof arg === "number") {
            if (arg === 0) {
                this._data = EMPTY_DATA;
                this._size = 0;
            }
            else {
                this._data = new Int32Array(arg);
                this._size = 0;
            }
        }
        else {
            // arg is Iterable<number>
            this._data = EMPTY_DATA;
            this._size = 0;
            for (let value of arg) {
                this.add(value);
            }
        }
    }
    add(value) {
        if (this._data.length === this._size) {
            this.ensureCapacity(this._size + 1);
        }
        this._data[this._size] = value;
        this._size++;
    }
    addAll(list) {
        if (Array.isArray(list)) {
            this.ensureCapacity(this._size + list.length);
            this._data.subarray(this._size, this._size + list.length).set(list);
            this._size += list.length;
        }
        else if (list instanceof IntegerList) {
            this.ensureCapacity(this._size + list._size);
            this._data.subarray(this._size, this._size + list.size).set(list._data);
            this._size += list._size;
        }
        else {
            // list is JavaCollection<number>
            this.ensureCapacity(this._size + list.size);
            let current = 0;
            for (let xi of list) {
                this._data[this._size + current] = xi;
                current++;
            }
            this._size += list.size;
        }
    }
    get(index) {
        if (index < 0 || index >= this._size) {
            throw RangeError();
        }
        return this._data[index];
    }
    contains(value) {
        for (let i = 0; i < this._size; i++) {
            if (this._data[i] === value) {
                return true;
            }
        }
        return false;
    }
    set(index, value) {
        if (index < 0 || index >= this._size) {
            throw RangeError();
        }
        let previous = this._data[index];
        this._data[index] = value;
        return previous;
    }
    removeAt(index) {
        let value = this.get(index);
        this._data.copyWithin(index, index + 1, this._size);
        this._data[this._size - 1] = 0;
        this._size--;
        return value;
    }
    removeRange(fromIndex, toIndex) {
        if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
            throw RangeError();
        }
        if (fromIndex > toIndex) {
            throw RangeError();
        }
        this._data.copyWithin(toIndex, fromIndex, this._size);
        this._data.fill(0, this._size - (toIndex - fromIndex), this._size);
        this._size -= (toIndex - fromIndex);
    }
    get isEmpty() {
        return this._size === 0;
    }
    get size() {
        return this._size;
    }
    trimToSize() {
        if (this._data.length === this._size) {
            return;
        }
        this._data = this._data.slice(0, this._size);
    }
    clear() {
        this._data.fill(0, 0, this._size);
        this._size = 0;
    }
    toArray() {
        if (this._size === 0) {
            return [];
        }
        return Array.from(this._data.subarray(0, this._size));
    }
    sort() {
        this._data.subarray(0, this._size).sort();
    }
    /**
     * Compares the specified object with this list for equality.  Returns
     * `true` if and only if the specified object is also an {@link IntegerList},
     * both lists have the same size, and all corresponding pairs of elements in
     * the two lists are equal.  In other words, two lists are defined to be
     * equal if they contain the same elements in the same order.
     *
     * This implementation first checks if the specified object is this
     * list. If so, it returns `true`; if not, it checks if the
     * specified object is an {@link IntegerList}. If not, it returns `false`;
     * if so, it checks the size of both lists. If the lists are not the same size,
     * it returns `false`; otherwise it iterates over both lists, comparing
     * corresponding pairs of elements.  If any comparison returns `false`,
     * this method returns `false`.
     *
     * @param o the object to be compared for equality with this list
     * @returns `true` if the specified object is equal to this list
     */
    equals(o) {
        if (o === this) {
            return true;
        }
        if (!(o instanceof IntegerList)) {
            return false;
        }
        if (this._size !== o._size) {
            return false;
        }
        for (let i = 0; i < this._size; i++) {
            if (this._data[i] !== o._data[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns the hash code value for this list.
     *
     * This implementation uses exactly the code that is used to define the
     * list hash function in the documentation for the {@link List#hashCode}
     * method.
     *
     * @returns the hash code value for this list
     */
    hashCode() {
        let hashCode = 1;
        for (let i = 0; i < this._size; i++) {
            hashCode = 31 * hashCode + this._data[i];
        }
        return hashCode;
    }
    /**
     * Returns a string representation of this list.
     */
    toString() {
        return this._data.toString();
    }
    binarySearch(key, fromIndex, toIndex) {
        if (fromIndex === undefined) {
            fromIndex = 0;
        }
        if (toIndex === undefined) {
            toIndex = this._size;
        }
        if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
            throw new RangeError();
        }
        if (fromIndex > toIndex) {
            throw new RangeError();
        }
        return Arrays_1.Arrays.binarySearch(this._data, key, fromIndex, toIndex);
    }
    ensureCapacity(capacity) {
        if (capacity < 0 || capacity > MAX_ARRAY_SIZE) {
            throw new RangeError();
        }
        let newLength;
        if (this._data.length === 0) {
            newLength = INITIAL_SIZE;
        }
        else {
            newLength = this._data.length;
        }
        while (newLength < capacity) {
            newLength = newLength * 2;
            if (newLength < 0 || newLength > MAX_ARRAY_SIZE) {
                newLength = MAX_ARRAY_SIZE;
            }
        }
        let tmp = new Int32Array(newLength);
        tmp.set(this._data);
        this._data = tmp;
    }
    /** Convert the list to a UTF-16 encoded char array. If all values are less
     *  than the 0xFFFF 16-bit code point limit then this is just a char array
     *  of 16-bit char as usual. For values in the supplementary range, encode
     * them as two UTF-16 code units.
     */
    toCharArray() {
        // Optimize for the common case (all data values are < 0xFFFF) to avoid an extra scan
        let resultArray = new Uint16Array(this._size);
        let resultIdx = 0;
        let calculatedPreciseResultSize = false;
        for (let i = 0; i < this._size; i++) {
            let codePoint = this._data[i];
            if (codePoint >= 0 && codePoint < 0x10000) {
                resultArray[resultIdx] = codePoint;
                resultIdx++;
                continue;
            }
            // Calculate the precise result size if we encounter a code point > 0xFFFF
            if (!calculatedPreciseResultSize) {
                let newResultArray = new Uint16Array(this.charArraySize());
                newResultArray.set(resultArray, 0);
                resultArray = newResultArray;
                calculatedPreciseResultSize = true;
            }
            // This will throw RangeError if the code point is not a valid Unicode code point
            let pair = String.fromCodePoint(codePoint);
            resultArray[resultIdx] = pair.charCodeAt(0);
            resultArray[resultIdx + 1] = pair.charCodeAt(1);
            resultIdx += 2;
        }
        return resultArray;
    }
    charArraySize() {
        let result = 0;
        for (let i = 0; i < this._size; i++) {
            result += this._data[i] >= 0x10000 ? 2 : 1;
        }
        return result;
    }
}
__decorate([
    Decorators_1.NotNull
], IntegerList.prototype, "_data", void 0);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "toString", null);
exports.IntegerList = IntegerList;

},{"../Decorators":13,"./Arrays":113}],118:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:40.6647101-07:00
const IntegerList_1 = require("./IntegerList");
/**
 *
 * @author Sam Harwell
 */
class IntegerStack extends IntegerList_1.IntegerList {
    constructor(arg) {
        super(arg);
    }
    push(value) {
        this.add(value);
    }
    pop() {
        return this.removeAt(this.size - 1);
    }
    peek() {
        return this.get(this.size - 1);
    }
}
exports.IntegerStack = IntegerStack;

},{"./IntegerList":117}],119:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:40.7402214-07:00
const Decorators_1 = require("../Decorators");
const INTERVAL_POOL_MAX_VALUE = 1000;
/** An immutable inclusive interval a..b */
class Interval {
    /**
     * @param a The start of the interval
     * @param b The end of the interval (inclusive)
     */
    constructor(a, b) {
        this.a = a;
        this.b = b;
    }
    static get INVALID() {
        return Interval._INVALID;
    }
    /** Interval objects are used readonly so share all with the
     *  same single value a==b up to some max size.  Use an array as a perfect hash.
     *  Return shared object for 0..INTERVAL_POOL_MAX_VALUE or a new
     *  Interval object with a..a in it.  On Java.g4, 218623 IntervalSets
     *  have a..a (set with 1 element).
     */
    static of(a, b) {
        // cache just a..a
        if (a !== b || a < 0 || a > INTERVAL_POOL_MAX_VALUE) {
            return new Interval(a, b);
        }
        if (Interval.cache[a] == null) {
            Interval.cache[a] = new Interval(a, a);
        }
        return Interval.cache[a];
    }
    /** return number of elements between a and b inclusively. x..x is length 1.
     *  if b &lt; a, then length is 0.  9..10 has length 2.
     */
    get length() {
        if (this.b < this.a) {
            return 0;
        }
        return this.b - this.a + 1;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        else if (!(o instanceof Interval)) {
            return false;
        }
        return this.a === o.a && this.b === o.b;
    }
    hashCode() {
        let hash = 23;
        hash = hash * 31 + this.a;
        hash = hash * 31 + this.b;
        return hash;
    }
    /** Does this start completely before other? Disjoint */
    startsBeforeDisjoint(other) {
        return this.a < other.a && this.b < other.a;
    }
    /** Does this start at or before other? Nondisjoint */
    startsBeforeNonDisjoint(other) {
        return this.a <= other.a && this.b >= other.a;
    }
    /** Does this.a start after other.b? May or may not be disjoint */
    startsAfter(other) {
        return this.a > other.a;
    }
    /** Does this start completely after other? Disjoint */
    startsAfterDisjoint(other) {
        return this.a > other.b;
    }
    /** Does this start after other? NonDisjoint */
    startsAfterNonDisjoint(other) {
        return this.a > other.a && this.a <= other.b; // this.b>=other.b implied
    }
    /** Are both ranges disjoint? I.e., no overlap? */
    disjoint(other) {
        return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);
    }
    /** Are two intervals adjacent such as 0..41 and 42..42? */
    adjacent(other) {
        return this.a === other.b + 1 || this.b === other.a - 1;
    }
    properlyContains(other) {
        return other.a >= this.a && other.b <= this.b;
    }
    /** Return the interval computed from combining this and other */
    union(other) {
        return Interval.of(Math.min(this.a, other.a), Math.max(this.b, other.b));
    }
    /** Return the interval in common between this and o */
    intersection(other) {
        return Interval.of(Math.max(this.a, other.a), Math.min(this.b, other.b));
    }
    /** Return the interval with elements from `this` not in `other`;
     *  `other` must not be totally enclosed (properly contained)
     *  within `this`, which would result in two disjoint intervals
     *  instead of the single one returned by this method.
     */
    differenceNotProperlyContained(other) {
        let diff;
        if (other.startsBeforeNonDisjoint(this)) {
            // other.a to left of this.a (or same)
            diff = Interval.of(Math.max(this.a, other.b + 1), this.b);
        }
        else if (other.startsAfterNonDisjoint(this)) {
            // other.a to right of this.a
            diff = Interval.of(this.a, other.a - 1);
        }
        return diff;
    }
    toString() {
        return this.a + ".." + this.b;
    }
}
Interval._INVALID = new Interval(-1, -2);
Interval.cache = new Array(INTERVAL_POOL_MAX_VALUE + 1);
__decorate([
    Decorators_1.Override
], Interval.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], Interval.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], Interval.prototype, "toString", null);
exports.Interval = Interval;

},{"../Decorators":13}],120:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:40.8683480-07:00
const ArrayEqualityComparator_1 = require("./ArrayEqualityComparator");
const IntegerList_1 = require("./IntegerList");
const Interval_1 = require("./Interval");
const Lexer_1 = require("../Lexer");
const MurmurHash_1 = require("./MurmurHash");
const Decorators_1 = require("../Decorators");
const Token_1 = require("../Token");
/**
 * This class implements the {@link IntSet} backed by a sorted array of
 * non-overlapping intervals. It is particularly efficient for representing
 * large collections of numbers, where the majority of elements appear as part
 * of a sequential range of numbers that are all part of the set. For example,
 * the set { 1, 2, 3, 4, 7, 8 } may be represented as { [1, 4], [7, 8] }.
 *
 * This class is able to represent sets containing any combination of values in
 * the range {@link Integer#MIN_VALUE} to {@link Integer#MAX_VALUE}
 * (inclusive).
 */
class IntervalSet {
    constructor(intervals) {
        this.readonly = false;
        if (intervals != null) {
            this._intervals = intervals.slice(0);
        }
        else {
            this._intervals = [];
        }
    }
    static get COMPLETE_CHAR_SET() {
        if (IntervalSet._COMPLETE_CHAR_SET === undefined) {
            IntervalSet._COMPLETE_CHAR_SET = IntervalSet.of(Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE);
            IntervalSet._COMPLETE_CHAR_SET.setReadonly(true);
        }
        return IntervalSet._COMPLETE_CHAR_SET;
    }
    static get EMPTY_SET() {
        if (IntervalSet._EMPTY_SET == null) {
            IntervalSet._EMPTY_SET = new IntervalSet();
            IntervalSet._EMPTY_SET.setReadonly(true);
        }
        return IntervalSet._EMPTY_SET;
    }
    /**
     * Create a set with all ints within range [a..b] (inclusive). If b is omitted, the set contains the single element
     * a.
     */
    static of(a, b = a) {
        let s = new IntervalSet();
        s.add(a, b);
        return s;
    }
    clear() {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        this._intervals.length = 0;
    }
    /** Add interval; i.e., add all integers from a to b to set.
     *  If b&lt;a, do nothing.
     *  Keep list in sorted order (by left range value).
     *  If overlap, combine ranges.  For example,
     *  If this is {1..5, 10..20}, adding 6..7 yields
     *  {1..5, 6..7, 10..20}.  Adding 4..8 yields {1..8, 10..20}.
     */
    add(a, b = a) {
        this.addRange(Interval_1.Interval.of(a, b));
    }
    // copy on write so we can cache a..a intervals and sets of that
    addRange(addition) {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        //System.out.println("add "+addition+" to "+intervals.toString());
        if (addition.b < addition.a) {
            return;
        }
        // find position in list
        // Use iterators as we modify list in place
        for (let i = 0; i < this._intervals.length; i++) {
            let r = this._intervals[i];
            if (addition.equals(r)) {
                return;
            }
            if (addition.adjacent(r) || !addition.disjoint(r)) {
                // next to each other, make a single larger interval
                let bigger = addition.union(r);
                this._intervals[i] = bigger;
                // make sure we didn't just create an interval that
                // should be merged with next interval in list
                while (i < this._intervals.length - 1) {
                    i++;
                    let next = this._intervals[i];
                    if (!bigger.adjacent(next) && bigger.disjoint(next)) {
                        break;
                    }
                    // if we bump up against or overlap next, merge
                    // remove this one
                    this._intervals.splice(i, 1);
                    i--;
                    // move backwards to what we just set
                    this._intervals[i] = bigger.union(next);
                    // set to 3 merged ones
                }
                // first call to next after previous duplicates the result
                return;
            }
            if (addition.startsBeforeDisjoint(r)) {
                // insert before r
                this._intervals.splice(i, 0, addition);
                return;
            }
            // if disjoint and after r, a future iteration will handle it
        }
        // ok, must be after last interval (and disjoint from last interval)
        // just add it
        this._intervals.push(addition);
    }
    /** combine all sets in the array returned the or'd value */
    static or(sets) {
        let r = new IntervalSet();
        for (let s of sets) {
            r.addAll(s);
        }
        return r;
    }
    addAll(set) {
        if (set == null) {
            return this;
        }
        if (set instanceof IntervalSet) {
            let other = set;
            // walk set and add each interval
            let n = other._intervals.length;
            for (let i = 0; i < n; i++) {
                let I = other._intervals[i];
                this.add(I.a, I.b);
            }
        }
        else {
            for (let value of set.toArray()) {
                this.add(value);
            }
        }
        return this;
    }
    complementRange(minElement, maxElement) {
        return this.complement(IntervalSet.of(minElement, maxElement));
    }
    /** {@inheritDoc} */
    complement(vocabulary) {
        if (vocabulary.isNil) {
            // nothing in common with null set
            return IntervalSet.EMPTY_SET;
        }
        let vocabularyIS;
        if (vocabulary instanceof IntervalSet) {
            vocabularyIS = vocabulary;
        }
        else {
            vocabularyIS = new IntervalSet();
            vocabularyIS.addAll(vocabulary);
        }
        return vocabularyIS.subtract(this);
    }
    subtract(a) {
        if (a == null || a.isNil) {
            return new IntervalSet(this._intervals);
        }
        if (a instanceof IntervalSet) {
            return IntervalSet.subtract(this, a);
        }
        let other = new IntervalSet();
        other.addAll(a);
        return IntervalSet.subtract(this, other);
    }
    /**
     * Compute the set difference between two interval sets. The specific
     * operation is `left - right`.
     */
    static subtract(left, right) {
        if (left.isNil) {
            return new IntervalSet();
        }
        let result = new IntervalSet(left._intervals);
        if (right.isNil) {
            // right set has no elements; just return the copy of the current set
            return result;
        }
        let resultI = 0;
        let rightI = 0;
        while (resultI < result._intervals.length && rightI < right._intervals.length) {
            let resultInterval = result._intervals[resultI];
            let rightInterval = right._intervals[rightI];
            // operation: (resultInterval - rightInterval) and update indexes
            if (rightInterval.b < resultInterval.a) {
                rightI++;
                continue;
            }
            if (rightInterval.a > resultInterval.b) {
                resultI++;
                continue;
            }
            let beforeCurrent;
            let afterCurrent;
            if (rightInterval.a > resultInterval.a) {
                beforeCurrent = new Interval_1.Interval(resultInterval.a, rightInterval.a - 1);
            }
            if (rightInterval.b < resultInterval.b) {
                afterCurrent = new Interval_1.Interval(rightInterval.b + 1, resultInterval.b);
            }
            if (beforeCurrent) {
                if (afterCurrent) {
                    // split the current interval into two
                    result._intervals[resultI] = beforeCurrent;
                    result._intervals.splice(resultI + 1, 0, afterCurrent);
                    resultI++;
                    rightI++;
                    continue;
                }
                else {
                    // replace the current interval
                    result._intervals[resultI] = beforeCurrent;
                    resultI++;
                    continue;
                }
            }
            else {
                if (afterCurrent) {
                    // replace the current interval
                    result._intervals[resultI] = afterCurrent;
                    rightI++;
                    continue;
                }
                else {
                    // remove the current interval (thus no need to increment resultI)
                    result._intervals.splice(resultI, 1);
                    continue;
                }
            }
        }
        // If rightI reached right.intervals.size, no more intervals to subtract from result.
        // If resultI reached result.intervals.size, we would be subtracting from an empty set.
        // Either way, we are done.
        return result;
    }
    or(a) {
        let o = new IntervalSet();
        o.addAll(this);
        o.addAll(a);
        return o;
    }
    /** {@inheritDoc} */
    and(other) {
        if (other.isNil) { //|| !(other instanceof IntervalSet) ) {
            // nothing in common with null set
            return new IntervalSet();
        }
        let myIntervals = this._intervals;
        let theirIntervals = other._intervals;
        let intersection;
        let mySize = myIntervals.length;
        let theirSize = theirIntervals.length;
        let i = 0;
        let j = 0;
        // iterate down both interval lists looking for nondisjoint intervals
        while (i < mySize && j < theirSize) {
            let mine = myIntervals[i];
            let theirs = theirIntervals[j];
            //System.out.println("mine="+mine+" and theirs="+theirs);
            if (mine.startsBeforeDisjoint(theirs)) {
                // move this iterator looking for interval that might overlap
                i++;
            }
            else if (theirs.startsBeforeDisjoint(mine)) {
                // move other iterator looking for interval that might overlap
                j++;
            }
            else if (mine.properlyContains(theirs)) {
                // overlap, add intersection, get next theirs
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                j++;
            }
            else if (theirs.properlyContains(mine)) {
                // overlap, add intersection, get next mine
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                i++;
            }
            else if (!mine.disjoint(theirs)) {
                // overlap, add intersection
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                // Move the iterator of lower range [a..b], but not
                // the upper range as it may contain elements that will collide
                // with the next iterator. So, if mine=[0..115] and
                // theirs=[115..200], then intersection is 115 and move mine
                // but not theirs as theirs may collide with the next range
                // in thisIter.
                // move both iterators to next ranges
                if (mine.startsAfterNonDisjoint(theirs)) {
                    j++;
                }
                else if (theirs.startsAfterNonDisjoint(mine)) {
                    i++;
                }
            }
        }
        if (!intersection) {
            return new IntervalSet();
        }
        return intersection;
    }
    /** {@inheritDoc} */
    contains(el) {
        let n = this._intervals.length;
        let l = 0;
        let r = n - 1;
        // Binary search for the element in the (sorted, disjoint) array of intervals.
        while (l <= r) {
            let m = (l + r) >> 1;
            let I = this._intervals[m];
            let a = I.a;
            let b = I.b;
            if (b < el) {
                l = m + 1;
            }
            else if (a > el) {
                r = m - 1;
            }
            else {
                // el >= a && el <= b
                return true;
            }
        }
        return false;
    }
    /** {@inheritDoc} */
    get isNil() {
        return this._intervals == null || this._intervals.length === 0;
    }
    /**
     * Returns the maximum value contained in the set if not isNil.
     *
     * @return the maximum value contained in the set.
     * @throws RangeError if set is empty
     */
    get maxElement() {
        if (this.isNil) {
            throw new RangeError("set is empty");
        }
        let last = this._intervals[this._intervals.length - 1];
        return last.b;
    }
    /**
     * Returns the minimum value contained in the set if not isNil.
     *
     * @return the minimum value contained in the set.
     * @throws RangeError if set is empty
     */
    get minElement() {
        if (this.isNil) {
            throw new RangeError("set is empty");
        }
        return this._intervals[0].a;
    }
    /** Return a list of Interval objects. */
    get intervals() {
        return this._intervals;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let I of this._intervals) {
            hash = MurmurHash_1.MurmurHash.update(hash, I.a);
            hash = MurmurHash_1.MurmurHash.update(hash, I.b);
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, this._intervals.length * 2);
        return hash;
    }
    /** Are two IntervalSets equal?  Because all intervals are sorted
     *  and disjoint, equals is a simple linear walk over both lists
     *  to make sure they are the same.  Interval.equals() is used
     *  by the List.equals() method to check the ranges.
     */
    equals(o) {
        if (o == null || !(o instanceof IntervalSet)) {
            return false;
        }
        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._intervals, o._intervals);
    }
    toString(elemAreChar = false) {
        let buf = "";
        if (this._intervals == null || this._intervals.length === 0) {
            return "{}";
        }
        if (this.size > 1) {
            buf += "{";
        }
        let first = true;
        for (let I of this._intervals) {
            if (first) {
                first = false;
            }
            else {
                buf += ", ";
            }
            let a = I.a;
            let b = I.b;
            if (a === b) {
                if (a === Token_1.Token.EOF) {
                    buf += "<EOF>";
                }
                else if (elemAreChar) {
                    buf += "'" + String.fromCodePoint(a) + "'";
                }
                else {
                    buf += a;
                }
            }
            else {
                if (elemAreChar) {
                    buf += "'" + String.fromCodePoint(a) + "'..'" + String.fromCodePoint(b) + "'";
                }
                else {
                    buf += a + ".." + b;
                }
            }
        }
        if (this.size > 1) {
            buf += "}";
        }
        return buf;
    }
    toStringVocabulary(vocabulary) {
        if (this._intervals == null || this._intervals.length === 0) {
            return "{}";
        }
        let buf = "";
        if (this.size > 1) {
            buf += "{";
        }
        let first = true;
        for (let I of this._intervals) {
            if (first) {
                first = false;
            }
            else {
                buf += ", ";
            }
            let a = I.a;
            let b = I.b;
            if (a === b) {
                buf += this.elementName(vocabulary, a);
            }
            else {
                for (let i = a; i <= b; i++) {
                    if (i > a) {
                        buf += ", ";
                    }
                    buf += this.elementName(vocabulary, i);
                }
            }
        }
        if (this.size > 1) {
            buf += "}";
        }
        return buf;
    }
    elementName(vocabulary, a) {
        if (a === Token_1.Token.EOF) {
            return "<EOF>";
        }
        else if (a === Token_1.Token.EPSILON) {
            return "<EPSILON>";
        }
        else {
            return vocabulary.getDisplayName(a);
        }
    }
    get size() {
        let n = 0;
        let numIntervals = this._intervals.length;
        if (numIntervals === 1) {
            let firstInterval = this._intervals[0];
            return firstInterval.b - firstInterval.a + 1;
        }
        for (let i = 0; i < numIntervals; i++) {
            let I = this._intervals[i];
            n += (I.b - I.a + 1);
        }
        return n;
    }
    toIntegerList() {
        let values = new IntegerList_1.IntegerList(this.size);
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                values.add(v);
            }
        }
        return values;
    }
    toSet() {
        let s = new Set();
        for (let I of this._intervals) {
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                s.add(v);
            }
        }
        return s;
    }
    toArray() {
        let values = new Array();
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                values.push(v);
            }
        }
        return values;
    }
    remove(el) {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            if (el < a) {
                break; // list is sorted and el is before this interval; not here
            }
            // if whole interval x..x, rm
            if (el === a && el === b) {
                this._intervals.splice(i, 1);
                break;
            }
            // if on left edge x..b, adjust left
            if (el === a) {
                this._intervals[i] = Interval_1.Interval.of(I.a + 1, I.b);
                break;
            }
            // if on right edge a..x, adjust right
            if (el === b) {
                this._intervals[i] = Interval_1.Interval.of(I.a, I.b - 1);
                break;
            }
            // if in middle a..x..b, split interval
            if (el > a && el < b) { // found in this interval
                let oldb = I.b;
                this._intervals[i] = Interval_1.Interval.of(I.a, el - 1); // [a..x-1]
                this.add(el + 1, oldb); // add [x+1..b]
            }
        }
    }
    get isReadonly() {
        return this.readonly;
    }
    setReadonly(readonly) {
        if (this.readonly && !readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        this.readonly = readonly;
    }
}
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "addAll", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "complement", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "subtract", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "or", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "and", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "contains", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "isNil", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "equals", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], IntervalSet.prototype, "toStringVocabulary", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], IntervalSet.prototype, "elementName", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "remove", null);
__decorate([
    Decorators_1.NotNull
], IntervalSet, "of", null);
__decorate([
    Decorators_1.NotNull
], IntervalSet, "subtract", null);
exports.IntervalSet = IntervalSet;

},{"../Decorators":13,"../Lexer":21,"../Token":37,"./ArrayEqualityComparator":112,"./IntegerList":117,"./Interval":119,"./MurmurHash":122}],121:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:42.1346951-07:00
class MultiMap extends Map {
    constructor() {
        super();
    }
    map(key, value) {
        let elementsForKey = super.get(key);
        if (!elementsForKey) {
            elementsForKey = [];
            super.set(key, elementsForKey);
        }
        elementsForKey.push(value);
    }
    getPairs() {
        let pairs = [];
        this.forEach((values, key) => {
            values.forEach((v) => {
                pairs.push([key, v]);
            });
        });
        return pairs;
    }
}
exports.MultiMap = MultiMap;

},{}],122:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @author Sam Harwell
 */
var MurmurHash;
(function (MurmurHash) {
    const DEFAULT_SEED = 0;
    /**
     * Initialize the hash using the specified `seed`.
     *
     * @param seed the seed (optional)
     * @returns the intermediate hash value
     */
    function initialize(seed = DEFAULT_SEED) {
        return seed;
    }
    MurmurHash.initialize = initialize;
    /**
     * Update the intermediate hash value for the next input `value`.
     *
     * @param hash the intermediate hash value
     * @param value the value to add to the current hash
     * @returns the updated intermediate hash value
     */
    function update(hash, value) {
        const c1 = 0xCC9E2D51;
        const c2 = 0x1B873593;
        const r1 = 15;
        const r2 = 13;
        const m = 5;
        const n = 0xE6546B64;
        if (value == null) {
            value = 0;
        }
        else if (typeof value === "string") {
            value = hashString(value);
        }
        else if (typeof value === "object") {
            value = value.hashCode();
        }
        let k = value;
        k = Math.imul(k, c1);
        k = (k << r1) | (k >>> (32 - r1));
        k = Math.imul(k, c2);
        hash = hash ^ k;
        hash = (hash << r2) | (hash >>> (32 - r2));
        hash = Math.imul(hash, m) + n;
        return hash & 0xFFFFFFFF;
    }
    MurmurHash.update = update;
    /**
     * Apply the final computation steps to the intermediate value `hash`
     * to form the final result of the MurmurHash 3 hash function.
     *
     * @param hash the intermediate hash value
     * @param numberOfWords the number of integer values added to the hash
     * @returns the final hash result
     */
    function finish(hash, numberOfWords) {
        hash = hash ^ (numberOfWords * 4);
        hash = hash ^ (hash >>> 16);
        hash = Math.imul(hash, 0x85EBCA6B);
        hash = hash ^ (hash >>> 13);
        hash = Math.imul(hash, 0xC2B2AE35);
        hash = hash ^ (hash >>> 16);
        return hash;
    }
    MurmurHash.finish = finish;
    /**
     * Utility function to compute the hash code of an array using the
     * MurmurHash algorithm.
     *
     * @param <T> the array element type
     * @param data the array data
     * @param seed the seed for the MurmurHash algorithm
     * @returns the hash code of the data
     */
    function hashCode(data, seed = DEFAULT_SEED) {
        let hash = initialize(seed);
        let length = 0;
        for (let value of data) {
            hash = update(hash, value);
            length++;
        }
        hash = finish(hash, length);
        return hash;
    }
    MurmurHash.hashCode = hashCode;
    /**
     * Function to hash a string. Based on the implementation found here:
     * http://stackoverflow.com/a/7616484
     */
    function hashString(str) {
        let len = str.length;
        if (len === 0) {
            return 0;
        }
        let hash = 0;
        for (let i = 0; i < len; i++) {
            let c = str.charCodeAt(i);
            hash = (((hash << 5) >>> 0) - hash) + c;
            hash |= 0;
        }
        return hash;
    }
})(MurmurHash = exports.MurmurHash || (exports.MurmurHash = {}));

},{}],123:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class ObjectEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        return obj.hashCode();
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined` or `null`, this method returns `true`. Otherwise if only
     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        return a.equals(b);
    }
}
ObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();
__decorate([
    Decorators_1.Override
], ObjectEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ObjectEqualityComparator.prototype, "equals", null);
exports.ObjectEqualityComparator = ObjectEqualityComparator;

},{"../Decorators":13}],124:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:42.5447085-07:00
/**
 * This exception is thrown to cancel a parsing operation. This exception does
 * not extend {@link RecognitionException}, allowing it to bypass the standard
 * error recovery mechanisms. {@link BailErrorStrategy} throws this exception in
 * response to a parse error.
 *
 * @author Sam Harwell
 */
class ParseCancellationException extends Error {
    constructor(cause) {
        super(cause.message);
        this.cause = cause;
        this.stack = cause.stack;
    }
    getCause() {
        return this.cause;
    }
}
exports.ParseCancellationException = ParseCancellationException;

},{}],125:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const MurmurHash_1 = require("./MurmurHash");
class UUID {
    constructor(mostSigBits, moreSigBits, lessSigBits, leastSigBits) {
        this.data = new Uint32Array(4);
        this.data[0] = mostSigBits;
        this.data[1] = moreSigBits;
        this.data[2] = lessSigBits;
        this.data[3] = leastSigBits;
    }
    static fromString(data) {
        if (!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(data)) {
            throw new Error("Incorrectly formatted UUID");
        }
        let segments = data.split("-");
        let mostSigBits = parseInt(segments[0], 16);
        let moreSigBits = ((parseInt(segments[1], 16) << 16) >>> 0) + parseInt(segments[2], 16);
        let lessSigBits = ((parseInt(segments[3], 16) << 16) >>> 0) + parseInt(segments[4].substr(0, 4), 16);
        let leastSigBits = parseInt(segments[4].substr(-8), 16);
        return new UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    hashCode() {
        return MurmurHash_1.MurmurHash.hashCode([this.data[0], this.data[1], this.data[2], this.data[3]]);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof UUID)) {
            return false;
        }
        return this.data[0] === obj.data[0]
            && this.data[1] === obj.data[1]
            && this.data[2] === obj.data[2]
            && this.data[3] === obj.data[3];
    }
    toString() {
        return ("00000000" + this.data[0].toString(16)).substr(-8)
            + "-" + ("0000" + (this.data[1] >>> 16).toString(16)).substr(-4)
            + "-" + ("0000" + this.data[1].toString(16)).substr(-4)
            + "-" + ("0000" + (this.data[2] >>> 16).toString(16)).substr(-4)
            + "-" + ("0000" + this.data[2].toString(16)).substr(-4)
            + ("00000000" + this.data[3].toString(16)).substr(-8);
    }
}
exports.UUID = UUID;

},{"./MurmurHash":122}],126:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
function escapeWhitespace(s, escapeSpaces) {
    return escapeSpaces ? s.replace(/ /, "\u00B7") : s
        .replace(/\t/, "\\t")
        .replace(/\n/, "\\n")
        .replace(/\r/, "\\r");
}
exports.escapeWhitespace = escapeWhitespace;
// Seriously: why isn't this built in to java? ugh!
function join(collection, separator) {
    let buf = "";
    let first = true;
    for (let current of collection) {
        if (first) {
            first = false;
        }
        else {
            buf += separator;
        }
        buf += current;
    }
    return buf;
}
exports.join = join;
function equals(x, y) {
    if (x === y) {
        return true;
    }
    if (x === undefined || y === undefined) {
        return false;
    }
    return x.equals(y);
}
exports.equals = equals;
// export function numNonnull(data: any[]): number {
// 	let n: number =  0;
// 	if ( data == null ) return n;
// 	for (let o of data) {
// 		if ( o!=null ) n++;
// 	}
// 	return n;
// }
// export function removeAllElements<T>(data: Collection<T>, value: T): void {
// 	if ( data==null ) return;
// 	while ( data.contains(value) ) data.remove(value);
// }
// export function writeFile(@NotNull file: File, @NotNull content: Uint8Array): void {
// 	let fos: FileOutputStream = new FileOutputStream(file);
// 	try {
// 		fos.write(content);
// 	} finally {
// 		fos.close();
// 	}
// }
// export function writeFile(@NotNull fileName: string, @NotNull content: string): void {
// 	writeFile(fileName, content, null);
// }
// export function writeFile(@NotNull fileName: string, @NotNull content: string, @Nullable encoding: string): void {
// 	let f: File =  new File(fileName);
// 	let fos: FileOutputStream =  new FileOutputStream(f);
// 	let osw: OutputStreamWriter;
// 	if (encoding != null) {
// 		osw = new OutputStreamWriter(fos, encoding);
// 	}
// 	else {
// 		osw = new OutputStreamWriter(fos);
// 	}
// 	try {
// 		osw.write(content);
// 	}
// 	finally {
// 		osw.close();
// 	}
// }
// @NotNull
// export function readFile(@NotNull fileName: string): char[] {
// 	return readFile(fileName, null);
// }
// @NotNull
// export function readFile(@NotNull fileName: string, @Nullable encoding: string): char[] {
// 	let f: File =  new File(fileName);
// 	let size: number =  (int)f.length();
// 	let isr: InputStreamReader;
// 	let fis: FileInputStream =  new FileInputStream(fileName);
// 	if ( encoding!=null ) {
// 		isr = new InputStreamReader(fis, encoding);
// 	}
// 	else {
// 		isr = new InputStreamReader(fis);
// 	}
// 	let data: char[] =  null;
// 	try {
// 		data = new char[size];
// 		let n: number =  isr.read(data);
// 		if (n < data.length) {
// 			data = Arrays.copyOf(data, n);
// 		}
// 	}
// 	finally {
// 		isr.close();
// 	}
// 	return data;
// }
// export function removeAll<T>(@NotNull predicate: List<T> list,@NotNull Predicate<? super T>): void {
// 	let j: number =  0;
// 	for (let i = 0; i < list.size; i++) {
// 		let item: T =  list.get(i);
// 		if (!predicate.eval(item)) {
// 			if (j != i) {
// 				list.set(j, item);
// 			}
// 			j++;
// 		}
// 	}
// 	if (j < list.size) {
// 		list.subList(j, list.size).clear();
// 	}
// }
// export function removeAll<T>(@NotNull predicate: Iterable<T> iterable,@NotNull Predicate<? super T>): void {
// 	if (iterable instanceof List<?>) {
// 		removeAll((List<T>)iterable, predicate);
// 		return;
// 	}
// 	for (Iterator<T> iterator = iterable.iterator(); iterator.hasNext(); ) {
// 		let item: T =  iterator.next();
// 		if (predicate.eval(item)) {
// 			iterator.remove();
// 		}
// 	}
// }
/** Convert array of strings to string&rarr;index map. Useful for
 *  converting rulenames to name&rarr;ruleindex map.
 */
function toMap(keys) {
    let m = new Map();
    for (let i = 0; i < keys.length; i++) {
        m.set(keys[i], i);
    }
    return m;
}
exports.toMap = toMap;
function toCharArray(str) {
    if (typeof str === "string") {
        let result = new Uint16Array(str.length);
        for (let i = 0; i < str.length; i++) {
            result[i] = str.charCodeAt(i);
        }
        return result;
    }
    else {
        return str.toCharArray();
    }
}
exports.toCharArray = toCharArray;
// /**
// 	* @since 4.5
// 	*/
// @NotNull
// export function toSet(@NotNull bits: BitSet): IntervalSet {
// 	let s: IntervalSet =  new IntervalSet();
// 	let i: number =  bits.nextSetBit(0);
// 	while ( i >= 0 ) {
// 		s.add(i);
// 		i = bits.nextSetBit(i+1);
// 	}
// 	return s;
// }

},{}],127:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Decorators");
class AbstractParseTreeVisitor {
    /**
     * {@inheritDoc}
     *
     * The default implementation calls {@link ParseTree#accept} on the
     * specified tree.
     */
    visit(tree) {
        return tree.accept(this);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation initializes the aggregate result to
     * {@link #defaultResult defaultResult()}. Before visiting each child, it
     * calls {@link #shouldVisitNextChild shouldVisitNextChild}; if the result
     * is `false` no more children are visited and the current aggregate
     * result is returned. After visiting a child, the aggregate result is
     * updated by calling {@link #aggregateResult aggregateResult} with the
     * previous aggregate result and the result of visiting the child.
     *
     * The default implementation is not safe for use in visitors that modify
     * the tree structure. Visitors that modify the tree should override this
     * method to behave properly in respect to the specific algorithm in use.
     */
    visitChildren(node) {
        let result = this.defaultResult();
        let n = node.childCount;
        for (let i = 0; i < n; i++) {
            if (!this.shouldVisitNextChild(node, result)) {
                break;
            }
            let c = node.getChild(i);
            let childResult = c.accept(this);
            result = this.aggregateResult(result, childResult);
        }
        return result;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns the result of
     * {@link #defaultResult defaultResult}.
     */
    visitTerminal(node) {
        return this.defaultResult();
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns the result of
     * {@link #defaultResult defaultResult}.
     */
    visitErrorNode(node) {
        return this.defaultResult();
    }
    /**
     * Aggregates the results of visiting multiple children of a node. After
     * either all children are visited or {@link #shouldVisitNextChild} returns
     * `false`, the aggregate value is returned as the result of
     * {@link #visitChildren}.
     *
     * The default implementation returns `nextResult`, meaning
     * {@link #visitChildren} will return the result of the last child visited
     * (or return the initial value if the node has no children).
     *
     * @param aggregate The previous aggregate value. In the default
     * implementation, the aggregate value is initialized to
     * {@link #defaultResult}, which is passed as the `aggregate` argument
     * to this method after the first child node is visited.
     * @param nextResult The result of the immediately preceeding call to visit
     * a child node.
     *
     * @returns The updated aggregate result.
     */
    aggregateResult(aggregate, nextResult) {
        return nextResult;
    }
    /**
     * This method is called after visiting each child in
     * {@link #visitChildren}. This method is first called before the first
     * child is visited; at that point `currentResult` will be the initial
     * value (in the default implementation, the initial value is returned by a
     * call to {@link #defaultResult}. This method is not called after the last
     * child is visited.
     *
     * The default implementation always returns `true`, indicating that
     * `visitChildren` should only return after all children are visited.
     * One reason to override this method is to provide a "short circuit"
     * evaluation option for situations where the result of visiting a single
     * child has the potential to determine the result of the visit operation as
     * a whole.
     *
     * @param node The {@link RuleNode} whose children are currently being
     * visited.
     * @param currentResult The current aggregate result of the children visited
     * to the current point.
     *
     * @returns `true` to continue visiting children. Otherwise return
     * `false` to stop visiting children and immediately return the
     * current aggregate result from {@link #visitChildren}.
     */
    shouldVisitNextChild(node, currentResult) {
        return true;
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visit", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitChildren", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitTerminal", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitErrorNode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "shouldVisitNextChild", null);
exports.AbstractParseTreeVisitor = AbstractParseTreeVisitor;

},{"../Decorators":13}],128:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00
const Decorators_1 = require("../Decorators");
const TerminalNode_1 = require("./TerminalNode");
/** Represents a token that was consumed during resynchronization
 *  rather than during a valid match operation. For example,
 *  we will create this kind of a node during single token insertion
 *  and deletion as well as during "consume until error recovery set"
 *  upon no viable alternative exceptions.
 */
class ErrorNode extends TerminalNode_1.TerminalNode {
    constructor(token) {
        super(token);
    }
    accept(visitor) {
        return visitor.visitErrorNode(this);
    }
}
__decorate([
    Decorators_1.Override
], ErrorNode.prototype, "accept", null);
exports.ErrorNode = ErrorNode;

},{"../Decorators":13,"./TerminalNode":132}],129:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Associate a property with a parse tree node. Useful with parse tree listeners
 * that need to associate values with particular tree nodes, kind of like
 * specifying a return value for the listener event method that visited a
 * particular node. Example:
 *
 * ```
 * ParseTreeProperty<Integer> values = new ParseTreeProperty<Integer>();
 * values.put(tree, 36);
 * int x = values.get(tree);
 * values.removeFrom(tree);
 * ```
 *
 * You would make one decl (values here) in the listener and use lots of times
 * in your event methods.
 */
class ParseTreeProperty {
    constructor(name = "ParseTreeProperty") {
        this._symbol = Symbol(name);
    }
    get(node) {
        return node[this._symbol];
    }
    set(node, value) {
        node[this._symbol] = value;
    }
    removeFrom(node) {
        let result = node[this._symbol];
        delete node[this._symbol];
        return result;
    }
}
exports.ParseTreeProperty = ParseTreeProperty;

},{}],130:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ErrorNode_1 = require("./ErrorNode");
const TerminalNode_1 = require("./TerminalNode");
const RuleNode_1 = require("./RuleNode");
class ParseTreeWalker {
    walk(listener, t) {
        let nodeStack = [];
        let indexStack = [];
        let currentNode = t;
        let currentIndex = 0;
        while (currentNode) {
            // pre-order visit
            if (currentNode instanceof ErrorNode_1.ErrorNode) {
                if (listener.visitErrorNode) {
                    listener.visitErrorNode(currentNode);
                }
            }
            else if (currentNode instanceof TerminalNode_1.TerminalNode) {
                if (listener.visitTerminal) {
                    listener.visitTerminal(currentNode);
                }
            }
            else {
                this.enterRule(listener, currentNode);
            }
            // Move down to first child, if exists
            if (currentNode.childCount > 0) {
                nodeStack.push(currentNode);
                indexStack.push(currentIndex);
                currentIndex = 0;
                currentNode = currentNode.getChild(0);
                continue;
            }
            // No child nodes, so walk tree
            do {
                // post-order visit
                if (currentNode instanceof RuleNode_1.RuleNode) {
                    this.exitRule(listener, currentNode);
                }
                // No parent, so no siblings
                if (nodeStack.length === 0) {
                    currentNode = undefined;
                    currentIndex = 0;
                    break;
                }
                // Move to next sibling if possible
                let last = nodeStack[nodeStack.length - 1];
                currentIndex++;
                currentNode = currentIndex < last.childCount ? last.getChild(currentIndex) : undefined;
                if (currentNode) {
                    break;
                }
                // No next sibling, so move up
                currentNode = nodeStack.pop();
                currentIndex = indexStack.pop();
            } while (currentNode);
        }
    }
    /**
     * The discovery of a rule node, involves sending two events: the generic
     * {@link ParseTreeListener#enterEveryRule} and a
     * {@link RuleContext}-specific event. First we trigger the generic and then
     * the rule specific. We to them in reverse order upon finishing the node.
     */
    enterRule(listener, r) {
        let ctx = r.ruleContext;
        if (listener.enterEveryRule) {
            listener.enterEveryRule(ctx);
        }
        ctx.enterRule(listener);
    }
    exitRule(listener, r) {
        let ctx = r.ruleContext;
        ctx.exitRule(listener);
        if (listener.exitEveryRule) {
            listener.exitEveryRule(ctx);
        }
    }
}
exports.ParseTreeWalker = ParseTreeWalker;
(function (ParseTreeWalker) {
    ParseTreeWalker.DEFAULT = new ParseTreeWalker();
})(ParseTreeWalker = exports.ParseTreeWalker || (exports.ParseTreeWalker = {}));

},{"./ErrorNode":128,"./RuleNode":131,"./TerminalNode":132}],131:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class RuleNode {
}
exports.RuleNode = RuleNode;

},{}],132:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:48.1433686-07:00
const Interval_1 = require("../misc/Interval");
const Decorators_1 = require("../Decorators");
const Token_1 = require("../Token");
class TerminalNode {
    constructor(symbol) {
        this._symbol = symbol;
    }
    getChild(i) {
        throw new RangeError("Terminal Node has no children.");
    }
    get symbol() {
        return this._symbol;
    }
    get parent() {
        return this._parent;
    }
    setParent(parent) {
        this._parent = parent;
    }
    get payload() {
        return this._symbol;
    }
    get sourceInterval() {
        let tokenIndex = this._symbol.tokenIndex;
        return new Interval_1.Interval(tokenIndex, tokenIndex);
    }
    get childCount() {
        return 0;
    }
    accept(visitor) {
        return visitor.visitTerminal(this);
    }
    get text() {
        return this._symbol.text || "";
    }
    toStringTree(parser) {
        return this.toString();
    }
    toString() {
        if (this._symbol.type === Token_1.Token.EOF) {
            return "<EOF>";
        }
        return this._symbol.text || "";
    }
}
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "getChild", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "setParent", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "payload", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "sourceInterval", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "accept", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "toStringTree", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "toString", null);
exports.TerminalNode = TerminalNode;

},{"../Decorators":13,"../Token":37,"../misc/Interval":119}],133:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const ATN_1 = require("../atn/ATN");
const CommonToken_1 = require("../CommonToken");
const ErrorNode_1 = require("./ErrorNode");
const Decorators_1 = require("../Decorators");
const Parser_1 = require("../Parser");
const ParserRuleContext_1 = require("../ParserRuleContext");
const RuleNode_1 = require("./RuleNode");
const TerminalNode_1 = require("./TerminalNode");
const Token_1 = require("../Token");
const Utils = require("../misc/Utils");
/** A set of utility routines useful for all kinds of ANTLR trees. */
class Trees {
    static toStringTree(t, arg2) {
        let ruleNames;
        if (arg2 instanceof Parser_1.Parser) {
            ruleNames = arg2.ruleNames;
        }
        else {
            ruleNames = arg2;
        }
        let s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
        if (t.childCount === 0) {
            return s;
        }
        let buf = "";
        buf += ("(");
        s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
        buf += (s);
        buf += (" ");
        for (let i = 0; i < t.childCount; i++) {
            if (i > 0) {
                buf += (" ");
            }
            buf += (this.toStringTree(t.getChild(i), ruleNames));
        }
        buf += (")");
        return buf;
    }
    static getNodeText(t, arg2) {
        let ruleNames;
        if (arg2 instanceof Parser_1.Parser) {
            ruleNames = arg2.ruleNames;
        }
        else if (arg2) {
            ruleNames = arg2;
        }
        else {
            // no recog or rule names
            let payload = t.payload;
            if (typeof payload.text === "string") {
                return payload.text;
            }
            return t.payload.toString();
        }
        if (t instanceof RuleNode_1.RuleNode) {
            let ruleContext = t.ruleContext;
            let ruleIndex = ruleContext.ruleIndex;
            let ruleName = ruleNames[ruleIndex];
            let altNumber = ruleContext.altNumber;
            if (altNumber !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                return ruleName + ":" + altNumber;
            }
            return ruleName;
        }
        else if (t instanceof ErrorNode_1.ErrorNode) {
            return t.toString();
        }
        else if (t instanceof TerminalNode_1.TerminalNode) {
            let symbol = t.symbol;
            return symbol.text || "";
        }
        throw new TypeError("Unexpected node type");
    }
    static getChildren(t) {
        let kids = [];
        for (let i = 0; i < t.childCount; i++) {
            kids.push(t.getChild(i));
        }
        return kids;
    }
    static getAncestors(t) {
        let ancestors = [];
        let p = t.parent;
        while (p) {
            ancestors.unshift(p); // insert at start
            p = p.parent;
        }
        return ancestors;
    }
    /** Return true if t is u's parent or a node on path to root from u.
     *  Use === not equals().
     *
     *  @since 4.5.1
     */
    static isAncestorOf(t, u) {
        if (!t || !u || !t.parent) {
            return false;
        }
        let p = u.parent;
        while (p) {
            if (t === p) {
                return true;
            }
            p = p.parent;
        }
        return false;
    }
    static findAllTokenNodes(t, ttype) {
        return Trees.findAllNodes(t, ttype, true);
    }
    static findAllRuleNodes(t, ruleIndex) {
        return Trees.findAllNodes(t, ruleIndex, false);
    }
    static findAllNodes(t, index, findTokens) {
        let nodes = [];
        Trees._findAllNodes(t, index, findTokens, nodes);
        return nodes;
    }
    static _findAllNodes(t, index, findTokens, nodes) {
        // check this node (the root) first
        if (findTokens && t instanceof TerminalNode_1.TerminalNode) {
            if (t.symbol.type === index) {
                nodes.push(t);
            }
        }
        else if (!findTokens && t instanceof ParserRuleContext_1.ParserRuleContext) {
            if (t.ruleIndex === index) {
                nodes.push(t);
            }
        }
        // check children
        for (let i = 0; i < t.childCount; i++) {
            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
        }
    }
    /** Get all descendents; includes t itself.
     *
     * @since 4.5.1
     */
    static getDescendants(t) {
        let nodes = [];
        function recurse(e) {
            nodes.push(e);
            const n = e.childCount;
            for (let i = 0; i < n; i++) {
                recurse(e.getChild(i));
            }
        }
        recurse(t);
        return nodes;
    }
    /** Find smallest subtree of t enclosing range startTokenIndex..stopTokenIndex
     *  inclusively using postorder traversal.  Recursive depth-first-search.
     *
     *  @since 4.5
     */
    static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, // inclusive
    stopTokenIndex) {
        let n = t.childCount;
        for (let i = 0; i < n; i++) {
            let child = t.getChild(i);
            let r = Trees.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);
            if (r) {
                return r;
            }
        }
        if (t instanceof ParserRuleContext_1.ParserRuleContext) {
            let stopToken = t.stop;
            if (startTokenIndex >= t.start.tokenIndex && // is range fully contained in t?
                (stopToken == null || stopTokenIndex <= stopToken.tokenIndex)) {
                // note: r.stop==null likely implies that we bailed out of parser and there's nothing to the right
                return t;
            }
        }
        return undefined;
    }
    /** Replace any subtree siblings of root that are completely to left
     *  or right of lookahead range with a CommonToken(Token.INVALID_TYPE,"...")
     *  node. The source interval for t is not altered to suit smaller range!
     *
     *  WARNING: destructive to t.
     *
     *  @since 4.5.1
     */
    static stripChildrenOutOfRange(t, root, startIndex, stopIndex) {
        if (!t) {
            return;
        }
        let count = t.childCount;
        for (let i = 0; i < count; i++) {
            let child = t.getChild(i);
            let range = child.sourceInterval;
            if (child instanceof ParserRuleContext_1.ParserRuleContext && (range.b < startIndex || range.a > stopIndex)) {
                if (Trees.isAncestorOf(child, root)) { // replace only if subtree doesn't have displayed root
                    let abbrev = new CommonToken_1.CommonToken(Token_1.Token.INVALID_TYPE, "...");
                    t.children[i] = new TerminalNode_1.TerminalNode(abbrev); // HACK access to private
                }
            }
        }
    }
    static findNodeSuchThat(t, pred) {
        // No type check needed as long as users only use one of the available overloads
        if (pred(t)) {
            return t;
        }
        let n = t.childCount;
        for (let i = 0; i < n; i++) {
            let u = Trees.findNodeSuchThat(t.getChild(i), pred);
            if (u !== undefined) {
                return u;
            }
        }
        return undefined;
    }
}
__decorate([
    __param(0, Decorators_1.NotNull)
], Trees, "toStringTree", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Trees, "getAncestors", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Trees, "getRootOfSubtreeEnclosingRegion", null);
exports.Trees = Trees;

},{"../CommonToken":9,"../Decorators":13,"../Parser":26,"../ParserRuleContext":28,"../Token":37,"../atn/ATN":40,"../misc/Utils":126,"./ErrorNode":128,"./RuleNode":131,"./TerminalNode":132}],134:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./AbstractParseTreeVisitor"));
__export(require("./ErrorNode"));
__export(require("./ParseTreeProperty"));
__export(require("./ParseTreeWalker"));
__export(require("./RuleNode"));
__export(require("./TerminalNode"));
__export(require("./Trees"));

},{"./AbstractParseTreeVisitor":127,"./ErrorNode":128,"./ParseTreeProperty":129,"./ParseTreeWalker":130,"./RuleNode":131,"./TerminalNode":132,"./Trees":133}],135:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:45.2799060-07:00
/**
 * A chunk is either a token tag, a rule tag, or a span of literal text within a
 * tree pattern.
 *
 * The method {@link ParseTreePatternMatcher#split(String)} returns a list of
 * chunks in preparation for creating a token stream by
 * {@link ParseTreePatternMatcher#tokenize(String)}. From there, we get a parse
 * tree from with {@link ParseTreePatternMatcher#compile(String, int)}. These
 * chunks are converted to {@link RuleTagToken}, {@link TokenTagToken}, or the
 * regular tokens of the text surrounding the tags.
 */
class Chunk {
}
exports.Chunk = Chunk;

},{}],136:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Decorators");
/**
 * Represents the result of matching a {@link ParseTree} against a tree pattern.
 */
let ParseTreeMatch = class ParseTreeMatch {
    /**
     * Constructs a new instance of {@link ParseTreeMatch} from the specified
     * parse tree and pattern.
     *
     * @param tree The parse tree to match against the pattern.
     * @param pattern The parse tree pattern.
     * @param labels A mapping from label names to collections of
     * {@link ParseTree} objects located by the tree pattern matching process.
     * @param mismatchedNode The first node which failed to match the tree
     * pattern during the matching process.
     *
     * @throws {@link Error} if `tree` is not defined
     * @throws {@link Error} if `pattern` is not defined
     * @throws {@link Error} if `labels` is not defined
     */
    constructor(tree, pattern, labels, mismatchedNode) {
        if (!tree) {
            throw new Error("tree cannot be null");
        }
        if (!pattern) {
            throw new Error("pattern cannot be null");
        }
        if (!labels) {
            throw new Error("labels cannot be null");
        }
        this._tree = tree;
        this._pattern = pattern;
        this._labels = labels;
        this._mismatchedNode = mismatchedNode;
    }
    /**
     * Get the last node associated with a specific `label`.
     *
     * For example, for pattern `<id:ID>`, `get("id")` returns the
     * node matched for that `ID`. If more than one node
     * matched the specified label, only the last is returned. If there is
     * no node associated with the label, this returns `undefined`.
     *
     * Pattern tags like `<ID>` and `<expr>` without labels are
     * considered to be labeled with `ID` and `expr`, respectively.
     *
     * @param label The label to check.
     *
     * @returns The last {@link ParseTree} to match a tag with the specified
     * label, or `undefined` if no parse tree matched a tag with the label.
     */
    get(label) {
        let parseTrees = this._labels.get(label);
        if (!parseTrees || parseTrees.length === 0) {
            return undefined;
        }
        return parseTrees[parseTrees.length - 1]; // return last if multiple
    }
    /**
     * Return all nodes matching a rule or token tag with the specified label.
     *
     * If the `label` is the name of a parser rule or token in the
     * grammar, the resulting list will contain both the parse trees matching
     * rule or tags explicitly labeled with the label and the complete set of
     * parse trees matching the labeled and unlabeled tags in the pattern for
     * the parser rule or token. For example, if `label` is `"foo"`,
     * the result will contain *all* of the following.
     *
     * * Parse tree nodes matching tags of the form `<foo:anyRuleName>` and
     *   `<foo:AnyTokenName>`.
     * * Parse tree nodes matching tags of the form `<anyLabel:foo>`.
     * * Parse tree nodes matching tags of the form `<foo>`.
     *
     * @param label The label.
     *
     * @returns A collection of all {@link ParseTree} nodes matching tags with
     * the specified `label`. If no nodes matched the label, an empty list
     * is returned.
     */
    getAll(label) {
        const nodes = this._labels.get(label);
        if (!nodes) {
            return [];
        }
        return nodes;
    }
    /**
     * Return a mapping from label &rarr; [list of nodes].
     *
     * The map includes special entries corresponding to the names of rules and
     * tokens referenced in tags in the original pattern. For additional
     * information, see the description of {@link #getAll(String)}.
     *
     * @returns A mapping from labels to parse tree nodes. If the parse tree
     * pattern did not contain any rule or token tags, this map will be empty.
     */
    get labels() {
        return this._labels;
    }
    /**
     * Get the node at which we first detected a mismatch.
     *
     * @returns the node at which we first detected a mismatch, or `undefined`
     * if the match was successful.
     */
    get mismatchedNode() {
        return this._mismatchedNode;
    }
    /**
     * Gets a value indicating whether the match operation succeeded.
     *
     * @returns `true` if the match operation succeeded; otherwise,
     * `false`.
     */
    get succeeded() {
        return !this._mismatchedNode;
    }
    /**
     * Get the tree pattern we are matching against.
     *
     * @returns The tree pattern we are matching against.
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * Get the parse tree we are trying to match to a pattern.
     *
     * @returns The {@link ParseTree} we are trying to match to a pattern.
     */
    get tree() {
        return this._tree;
    }
    /**
     * {@inheritDoc}
     */
    toString() {
        return `Match ${this.succeeded ? "succeeded" : "failed"}; found ${this.labels.size} labels`;
    }
};
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParseTreeMatch.prototype, "getAll", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "labels", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "pattern", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "tree", null);
__decorate([
    Decorators_1.Override
], ParseTreeMatch.prototype, "toString", null);
ParseTreeMatch = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParseTreeMatch);
exports.ParseTreeMatch = ParseTreeMatch;

},{"../../Decorators":13}],137:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
const XPath_1 = require("../xpath/XPath");
/**
 * A pattern like `<ID> = <expr>;` converted to a {@link ParseTree} by
 * {@link ParseTreePatternMatcher#compile(String, int)}.
 */
let ParseTreePattern = class ParseTreePattern {
    /**
     * Construct a new instance of the {@link ParseTreePattern} class.
     *
     * @param matcher The {@link ParseTreePatternMatcher} which created this
     * tree pattern.
     * @param pattern The tree pattern in concrete syntax form.
     * @param patternRuleIndex The parser rule which serves as the root of the
     * tree pattern.
     * @param patternTree The tree pattern in {@link ParseTree} form.
     */
    constructor(matcher, pattern, patternRuleIndex, patternTree) {
        this._matcher = matcher;
        this._patternRuleIndex = patternRuleIndex;
        this._pattern = pattern;
        this._patternTree = patternTree;
    }
    /**
     * Match a specific parse tree against this tree pattern.
     *
     * @param tree The parse tree to match against this tree pattern.
     * @returns A {@link ParseTreeMatch} object describing the result of the
     * match operation. The `ParseTreeMatch.succeeded` method can be
     * used to determine whether or not the match was successful.
     */
    match(tree) {
        return this._matcher.match(tree, this);
    }
    /**
     * Determine whether or not a parse tree matches this tree pattern.
     *
     * @param tree The parse tree to match against this tree pattern.
     * @returns `true` if `tree` is a match for the current tree
     * pattern; otherwise, `false`.
     */
    matches(tree) {
        return this._matcher.match(tree, this).succeeded;
    }
    /**
     * Find all nodes using XPath and then try to match those subtrees against
     * this tree pattern.
     *
     * @param tree The {@link ParseTree} to match against this pattern.
     * @param xpath An expression matching the nodes
     *
     * @returns A collection of {@link ParseTreeMatch} objects describing the
     * successful matches. Unsuccessful matches are omitted from the result,
     * regardless of the reason for the failure.
     */
    findAll(tree, xpath) {
        let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);
        let matches = [];
        for (let t of subtrees) {
            let match = this.match(t);
            if (match.succeeded) {
                matches.push(match);
            }
        }
        return matches;
    }
    /**
     * Get the {@link ParseTreePatternMatcher} which created this tree pattern.
     *
     * @returns The {@link ParseTreePatternMatcher} which created this tree
     * pattern.
     */
    get matcher() {
        return this._matcher;
    }
    /**
     * Get the tree pattern in concrete syntax form.
     *
     * @returns The tree pattern in concrete syntax form.
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * Get the parser rule which serves as the outermost rule for the tree
     * pattern.
     *
     * @returns The parser rule which serves as the outermost rule for the tree
     * pattern.
     */
    get patternRuleIndex() {
        return this._patternRuleIndex;
    }
    /**
     * Get the tree pattern as a {@link ParseTree}. The rule and token tags from
     * the pattern are present in the parse tree as terminal nodes with a symbol
     * of type {@link RuleTagToken} or {@link TokenTagToken}.
     *
     * @returns The tree pattern as a {@link ParseTree}.
     */
    get patternTree() {
        return this._patternTree;
    }
};
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_pattern", void 0);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_patternTree", void 0);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_matcher", void 0);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParseTreePattern.prototype, "match", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParseTreePattern.prototype, "matches", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParseTreePattern.prototype, "findAll", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "matcher", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "pattern", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "patternTree", null);
ParseTreePattern = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParseTreePattern);
exports.ParseTreePattern = ParseTreePattern;

},{"../../Decorators":13,"../xpath/XPath":143}],138:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const BailErrorStrategy_1 = require("../../BailErrorStrategy");
const CharStreams_1 = require("../../CharStreams");
const CommonTokenStream_1 = require("../../CommonTokenStream");
const ListTokenSource_1 = require("../../ListTokenSource");
const MultiMap_1 = require("../../misc/MultiMap");
const Decorators_1 = require("../../Decorators");
const ParseCancellationException_1 = require("../../misc/ParseCancellationException");
const ParserInterpreter_1 = require("../../ParserInterpreter");
const ParserRuleContext_1 = require("../../ParserRuleContext");
const ParseTreeMatch_1 = require("./ParseTreeMatch");
const ParseTreePattern_1 = require("./ParseTreePattern");
const RecognitionException_1 = require("../../RecognitionException");
const RuleNode_1 = require("../RuleNode");
const RuleTagToken_1 = require("./RuleTagToken");
const TagChunk_1 = require("./TagChunk");
const TerminalNode_1 = require("../TerminalNode");
const TextChunk_1 = require("./TextChunk");
const Token_1 = require("../../Token");
const TokenTagToken_1 = require("./TokenTagToken");
/**
 * A tree pattern matching mechanism for ANTLR {@link ParseTree}s.
 *
 * Patterns are strings of source input text with special tags representing
 * token or rule references such as:
 *
 * ```
 * <ID> = <expr>;
 * ```
 *
 * Given a pattern start rule such as `statement`, this object constructs
 * a {@link ParseTree} with placeholders for the `ID` and `expr`
 * subtree. Then the {@link #match} routines can compare an actual
 * {@link ParseTree} from a parse with this pattern. Tag `<ID>` matches
 * any `ID` token and tag `<expr>` references the result of the
 * `expr` rule (generally an instance of `ExprContext`.
 *
 * Pattern `x = 0;` is a similar pattern that matches the same pattern
 * except that it requires the identifier to be `x` and the expression to
 * be `0`.
 *
 * The {@link #matches} routines return `true` or `false` based
 * upon a match for the tree rooted at the parameter sent in. The
 * {@link #match} routines return a {@link ParseTreeMatch} object that
 * contains the parse tree, the parse tree pattern, and a map from tag name to
 * matched nodes (more below). A subtree that fails to match, returns with
 * {@link ParseTreeMatch#mismatchedNode} set to the first tree node that did not
 * match.
 *
 * For efficiency, you can compile a tree pattern in string form to a
 * {@link ParseTreePattern} object.
 *
 * See `TestParseTreeMatcher` for lots of examples.
 * {@link ParseTreePattern} has two static helper methods:
 * {@link ParseTreePattern#findAll} and {@link ParseTreePattern#match} that
 * are easy to use but not super efficient because they create new
 * {@link ParseTreePatternMatcher} objects each time and have to compile the
 * pattern in string form before using it.
 *
 * The lexer and parser that you pass into the {@link ParseTreePatternMatcher}
 * constructor are used to parse the pattern in string form. The lexer converts
 * the `<ID> = <expr>;` into a sequence of four tokens (assuming lexer
 * throws out whitespace or puts it on a hidden channel). Be aware that the
 * input stream is reset for the lexer (but not the parser; a
 * {@link ParserInterpreter} is created to parse the input.). Any user-defined
 * fields you have put into the lexer might get changed when this mechanism asks
 * it to scan the pattern string.
 *
 * Normally a parser does not accept token `<expr>` as a valid
 * `expr` but, from the parser passed in, we create a special version of
 * the underlying grammar representation (an {@link ATN}) that allows imaginary
 * tokens representing rules (`<expr>`) to match entire rules. We call
 * these *bypass alternatives*.
 *
 * Delimiters are `<`} and `>`}, with `\` as the escape string
 * by default, but you can set them to whatever you want using
 * {@link #setDelimiters}. You must escape both start and stop strings
 * `\<` and `\>`.
 */
class ParseTreePatternMatcher {
    /**
     * Constructs a {@link ParseTreePatternMatcher} or from a {@link Lexer} and
     * {@link Parser} object. The lexer input stream is altered for tokenizing
     * the tree patterns. The parser is used as a convenient mechanism to get
     * the grammar name, plus token, rule names.
     */
    constructor(lexer, parser) {
        this.start = "<";
        this.stop = ">";
        this.escape = "\\"; // e.g., \< and \> must escape BOTH!
        /**
         * Regular expression corresponding to escape, for global replace
         */
        this.escapeRE = /\\/g;
        this._lexer = lexer;
        this._parser = parser;
    }
    /**
     * Set the delimiters used for marking rule and token tags within concrete
     * syntax used by the tree pattern parser.
     *
     * @param start The start delimiter.
     * @param stop The stop delimiter.
     * @param escapeLeft The escape sequence to use for escaping a start or stop delimiter.
     *
     * @throws {@link Error} if `start` is not defined or empty.
     * @throws {@link Error} if `stop` is not defined or empty.
     */
    setDelimiters(start, stop, escapeLeft) {
        if (!start) {
            throw new Error("start cannot be null or empty");
        }
        if (!stop) {
            throw new Error("stop cannot be null or empty");
        }
        this.start = start;
        this.stop = stop;
        this.escape = escapeLeft;
        this.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
    }
    matches(tree, pattern, patternRuleIndex = 0) {
        if (typeof pattern === "string") {
            let p = this.compile(pattern, patternRuleIndex);
            return this.matches(tree, p);
        }
        else {
            let labels = new MultiMap_1.MultiMap();
            let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
            return !mismatchedNode;
        }
    }
    // Implementation of match
    match(tree, pattern, patternRuleIndex = 0) {
        if (typeof pattern === "string") {
            let p = this.compile(pattern, patternRuleIndex);
            return this.match(tree, p);
        }
        else {
            let labels = new MultiMap_1.MultiMap();
            let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
            return new ParseTreeMatch_1.ParseTreeMatch(tree, pattern, labels, mismatchedNode);
        }
    }
    /**
     * For repeated use of a tree pattern, compile it to a
     * {@link ParseTreePattern} using this method.
     */
    compile(pattern, patternRuleIndex) {
        let tokenList = this.tokenize(pattern);
        let tokenSrc = new ListTokenSource_1.ListTokenSource(tokenList);
        let tokens = new CommonTokenStream_1.CommonTokenStream(tokenSrc);
        const parser = this._parser;
        let parserInterp = new ParserInterpreter_1.ParserInterpreter(parser.grammarFileName, parser.vocabulary, parser.ruleNames, parser.getATNWithBypassAlts(), tokens);
        let tree;
        try {
            parserInterp.errorHandler = new BailErrorStrategy_1.BailErrorStrategy();
            tree = parserInterp.parse(patternRuleIndex);
            //			System.out.println("pattern tree = "+tree.toStringTree(parserInterp));
        }
        catch (e) {
            if (e instanceof ParseCancellationException_1.ParseCancellationException) {
                throw e.getCause();
            }
            else if (e instanceof RecognitionException_1.RecognitionException) {
                throw e;
            }
            else if (e instanceof Error) {
                throw new ParseTreePatternMatcher.CannotInvokeStartRule(e);
            }
            else {
                throw e;
            }
        }
        // Make sure tree pattern compilation checks for a complete parse
        if (tokens.LA(1) !== Token_1.Token.EOF) {
            throw new ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern();
        }
        return new ParseTreePattern_1.ParseTreePattern(this, pattern, patternRuleIndex, tree);
    }
    /**
     * Used to convert the tree pattern string into a series of tokens. The
     * input stream is reset.
     */
    get lexer() {
        return this._lexer;
    }
    /**
     * Used to collect to the grammar file name, token names, rule names for
     * used to parse the pattern into a parse tree.
     */
    get parser() {
        return this._parser;
    }
    // ---- SUPPORT CODE ----
    /**
     * Recursively walk `tree` against `patternTree`, filling
     * `match.`{@link ParseTreeMatch#labels labels}.
     *
     * @returns the first node encountered in `tree` which does not match
     * a corresponding node in `patternTree`, or `undefined` if the match
     * was successful. The specific node returned depends on the matching
     * algorithm used by the implementation, and may be overridden.
     */
    matchImpl(tree, patternTree, labels) {
        if (!tree) {
            throw new TypeError("tree cannot be null");
        }
        if (!patternTree) {
            throw new TypeError("patternTree cannot be null");
        }
        // x and <ID>, x and y, or x and x; or could be mismatched types
        if (tree instanceof TerminalNode_1.TerminalNode && patternTree instanceof TerminalNode_1.TerminalNode) {
            let mismatchedNode;
            // both are tokens and they have same type
            if (tree.symbol.type === patternTree.symbol.type) {
                if (patternTree.symbol instanceof TokenTagToken_1.TokenTagToken) { // x and <ID>
                    let tokenTagToken = patternTree.symbol;
                    // track label->list-of-nodes for both token name and label (if any)
                    labels.map(tokenTagToken.tokenName, tree);
                    const l = tokenTagToken.label;
                    if (l) {
                        labels.map(l, tree);
                    }
                }
                else if (tree.text === patternTree.text) {
                    // x and x
                }
                else {
                    // x and y
                    if (!mismatchedNode) {
                        mismatchedNode = tree;
                    }
                }
            }
            else {
                if (!mismatchedNode) {
                    mismatchedNode = tree;
                }
            }
            return mismatchedNode;
        }
        if (tree instanceof ParserRuleContext_1.ParserRuleContext
            && patternTree instanceof ParserRuleContext_1.ParserRuleContext) {
            let mismatchedNode;
            // (expr ...) and <expr>
            let ruleTagToken = this.getRuleTagToken(patternTree);
            if (ruleTagToken) {
                let m;
                if (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {
                    // track label->list-of-nodes for both rule name and label (if any)
                    labels.map(ruleTagToken.ruleName, tree);
                    const l = ruleTagToken.label;
                    if (l) {
                        labels.map(l, tree);
                    }
                }
                else {
                    if (!mismatchedNode) {
                        mismatchedNode = tree;
                    }
                }
                return mismatchedNode;
            }
            // (expr ...) and (expr ...)
            if (tree.childCount !== patternTree.childCount) {
                if (!mismatchedNode) {
                    mismatchedNode = tree;
                }
                return mismatchedNode;
            }
            let n = tree.childCount;
            for (let i = 0; i < n; i++) {
                let childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);
                if (childMatch) {
                    return childMatch;
                }
            }
            return mismatchedNode;
        }
        // if nodes aren't both tokens or both rule nodes, can't match
        return tree;
    }
    /** Is `t` `(expr <expr>)` subtree? */
    getRuleTagToken(t) {
        if (t instanceof RuleNode_1.RuleNode) {
            if (t.childCount === 1 && t.getChild(0) instanceof TerminalNode_1.TerminalNode) {
                let c = t.getChild(0);
                if (c.symbol instanceof RuleTagToken_1.RuleTagToken) {
                    //					System.out.println("rule tag subtree "+t.toStringTree(parser));
                    return c.symbol;
                }
            }
        }
        return undefined;
    }
    tokenize(pattern) {
        // split pattern into chunks: sea (raw input) and islands (<ID>, <expr>)
        let chunks = this.split(pattern);
        // create token stream from text and tags
        let tokens = [];
        for (let chunk of chunks) {
            if (chunk instanceof TagChunk_1.TagChunk) {
                let tagChunk = chunk;
                const firstChar = tagChunk.tag.substr(0, 1);
                // add special rule token or conjure up new token from name
                if (firstChar === firstChar.toUpperCase()) {
                    let ttype = this._parser.getTokenType(tagChunk.tag);
                    if (ttype === Token_1.Token.INVALID_TYPE) {
                        throw new Error("Unknown token " + tagChunk.tag + " in pattern: " + pattern);
                    }
                    let t = new TokenTagToken_1.TokenTagToken(tagChunk.tag, ttype, tagChunk.label);
                    tokens.push(t);
                }
                else if (firstChar === firstChar.toLowerCase()) {
                    let ruleIndex = this._parser.getRuleIndex(tagChunk.tag);
                    if (ruleIndex === -1) {
                        throw new Error("Unknown rule " + tagChunk.tag + " in pattern: " + pattern);
                    }
                    let ruleImaginaryTokenType = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];
                    tokens.push(new RuleTagToken_1.RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));
                }
                else {
                    throw new Error("invalid tag: " + tagChunk.tag + " in pattern: " + pattern);
                }
            }
            else {
                let textChunk = chunk;
                this._lexer.inputStream = CharStreams_1.CharStreams.fromString(textChunk.text);
                let t = this._lexer.nextToken();
                while (t.type !== Token_1.Token.EOF) {
                    tokens.push(t);
                    t = this._lexer.nextToken();
                }
            }
        }
        //		System.out.println("tokens="+tokens);
        return tokens;
    }
    /** Split `<ID> = <e:expr> ;` into 4 chunks for tokenizing by {@link #tokenize}. */
    split(pattern) {
        let p = 0;
        let n = pattern.length;
        let chunks = [];
        let buf;
        // find all start and stop indexes first, then collect
        let starts = [];
        let stops = [];
        while (p < n) {
            if (p === pattern.indexOf(this.escape + this.start, p)) {
                p += this.escape.length + this.start.length;
            }
            else if (p === pattern.indexOf(this.escape + this.stop, p)) {
                p += this.escape.length + this.stop.length;
            }
            else if (p === pattern.indexOf(this.start, p)) {
                starts.push(p);
                p += this.start.length;
            }
            else if (p === pattern.indexOf(this.stop, p)) {
                stops.push(p);
                p += this.stop.length;
            }
            else {
                p++;
            }
        }
        //		System.out.println("");
        //		System.out.println(starts);
        //		System.out.println(stops);
        if (starts.length > stops.length) {
            throw new Error("unterminated tag in pattern: " + pattern);
        }
        if (starts.length < stops.length) {
            throw new Error("missing start tag in pattern: " + pattern);
        }
        let ntags = starts.length;
        for (let i = 0; i < ntags; i++) {
            if (starts[i] >= stops[i]) {
                throw new Error("tag delimiters out of order in pattern: " + pattern);
            }
        }
        // collect into chunks now
        if (ntags === 0) {
            let text = pattern.substring(0, n);
            chunks.push(new TextChunk_1.TextChunk(text));
        }
        if (ntags > 0 && starts[0] > 0) { // copy text up to first tag into chunks
            let text = pattern.substring(0, starts[0]);
            chunks.push(new TextChunk_1.TextChunk(text));
        }
        for (let i = 0; i < ntags; i++) {
            // copy inside of <tag>
            let tag = pattern.substring(starts[i] + this.start.length, stops[i]);
            let ruleOrToken = tag;
            let label;
            let colon = tag.indexOf(":");
            if (colon >= 0) {
                label = tag.substring(0, colon);
                ruleOrToken = tag.substring(colon + 1, tag.length);
            }
            chunks.push(new TagChunk_1.TagChunk(ruleOrToken, label));
            if (i + 1 < ntags) {
                // copy from end of <tag> to start of next
                let text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);
                chunks.push(new TextChunk_1.TextChunk(text));
            }
        }
        if (ntags > 0) {
            let afterLastTag = stops[ntags - 1] + this.stop.length;
            if (afterLastTag < n) { // copy text from end of last tag to end
                let text = pattern.substring(afterLastTag, n);
                chunks.push(new TextChunk_1.TextChunk(text));
            }
        }
        // strip out the escape sequences from text chunks but not tags
        for (let i = 0; i < chunks.length; i++) {
            let c = chunks[i];
            if (c instanceof TextChunk_1.TextChunk) {
                let unescaped = c.text.replace(this.escapeRE, "");
                if (unescaped.length < c.text.length) {
                    chunks[i] = new TextChunk_1.TextChunk(unescaped);
                }
            }
        }
        return chunks;
    }
}
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], ParseTreePatternMatcher.prototype, "match", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePatternMatcher.prototype, "lexer", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePatternMatcher.prototype, "parser", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParseTreePatternMatcher.prototype, "matchImpl", null);
exports.ParseTreePatternMatcher = ParseTreePatternMatcher;
(function (ParseTreePatternMatcher) {
    class CannotInvokeStartRule extends Error {
        constructor(error) {
            super(`CannotInvokeStartRule: ${error}`);
            this.error = error;
        }
    }
    ParseTreePatternMatcher.CannotInvokeStartRule = CannotInvokeStartRule;
    // Fixes https://github.com/antlr/antlr4/issues/413
    // "Tree pattern compilation doesn't check for a complete parse"
    class StartRuleDoesNotConsumeFullPattern extends Error {
        constructor() {
            super("StartRuleDoesNotConsumeFullPattern");
        }
    }
    ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern = StartRuleDoesNotConsumeFullPattern;
})(ParseTreePatternMatcher = exports.ParseTreePatternMatcher || (exports.ParseTreePatternMatcher = {}));

},{"../../BailErrorStrategy":4,"../../CharStreams":6,"../../CommonTokenStream":11,"../../Decorators":13,"../../ListTokenSource":24,"../../ParserInterpreter":27,"../../ParserRuleContext":28,"../../RecognitionException":31,"../../Token":37,"../../misc/MultiMap":121,"../../misc/ParseCancellationException":124,"../RuleNode":131,"../TerminalNode":132,"./ParseTreeMatch":136,"./ParseTreePattern":137,"./RuleTagToken":139,"./TagChunk":140,"./TextChunk":141,"./TokenTagToken":142}],139:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Decorators");
const Token_1 = require("../../Token");
/**
 * A {@link Token} object representing an entire subtree matched by a parser
 * rule; e.g., `<expr>`. These tokens are created for {@link TagChunk}
 * chunks where the tag corresponds to a parser rule.
 */
let RuleTagToken = class RuleTagToken {
    /**
     * Constructs a new instance of {@link RuleTagToken} with the specified rule
     * name, bypass token type, and label.
     *
     * @param ruleName The name of the parser rule this rule tag matches.
     * @param bypassTokenType The bypass token type assigned to the parser rule.
     * @param label The label associated with the rule tag, or `undefined` if
     * the rule tag is unlabeled.
     *
     * @exception IllegalArgumentException if `ruleName` is not defined
     * or empty.
     */
    constructor(ruleName, bypassTokenType, label) {
        if (ruleName == null || ruleName.length === 0) {
            throw new Error("ruleName cannot be null or empty.");
        }
        this._ruleName = ruleName;
        this.bypassTokenType = bypassTokenType;
        this._label = label;
    }
    /**
     * Gets the name of the rule associated with this rule tag.
     *
     * @returns The name of the parser rule associated with this rule tag.
     */
    get ruleName() {
        return this._ruleName;
    }
    /**
     * Gets the label associated with the rule tag.
     *
     * @returns The name of the label associated with the rule tag, or
     * `undefined` if this is an unlabeled rule tag.
     */
    get label() {
        return this._label;
    }
    /**
     * {@inheritDoc}
     *
     * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.
     */
    get channel() {
        return Token_1.Token.DEFAULT_CHANNEL;
    }
    /**
     * {@inheritDoc}
     *
     * This method returns the rule tag formatted with `<` and `>`
     * delimiters.
     */
    get text() {
        if (this._label != null) {
            return "<" + this._label + ":" + this._ruleName + ">";
        }
        return "<" + this._ruleName + ">";
    }
    /**
     * {@inheritDoc}
     *
     * Rule tag tokens have types assigned according to the rule bypass
     * transitions created during ATN deserialization.
     */
    get type() {
        return this.bypassTokenType;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns 0.
     */
    get line() {
        return 0;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get charPositionInLine() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get tokenIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get startIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get stopIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns `undefined`.
     */
    get tokenSource() {
        return undefined;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns `undefined`.
     */
    get inputStream() {
        return undefined;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} returns a string of the form
     * `ruleName:bypassTokenType`.
     */
    toString() {
        return this._ruleName + ":" + this.bypassTokenType;
    }
};
__decorate([
    Decorators_1.NotNull
], RuleTagToken.prototype, "ruleName", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "channel", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "type", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "line", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "tokenIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "startIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "stopIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "toString", null);
RuleTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
], RuleTagToken);
exports.RuleTagToken = RuleTagToken;

},{"../../Decorators":13,"../../Token":37}],140:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:46.1670669-07:00
const Chunk_1 = require("./Chunk");
const Decorators_1 = require("../../Decorators");
/**
 * Represents a placeholder tag in a tree pattern. A tag can have any of the
 * following forms.
 *
 * * `expr`: An unlabeled placeholder for a parser rule `expr`.
 * * `ID`: An unlabeled placeholder for a token of type `ID`.
 * * `e:expr`: A labeled placeholder for a parser rule `expr`.
 * * `id:ID`: A labeled placeholder for a token of type `ID`.
 *
 * This class does not perform any validation on the tag or label names aside
 * from ensuring that the tag is a defined, non-empty string.
 */
class TagChunk extends Chunk_1.Chunk {
    /**
     * Construct a new instance of {@link TagChunk} using the specified label
     * and tag.
     *
     * @param label The label for the tag. If this is `undefined`, the
     * {@link TagChunk} represents an unlabeled tag.
     * @param tag The tag, which should be the name of a parser rule or token
     * type.
     *
     * @exception IllegalArgumentException if `tag` is not defined or
     * empty.
     */
    constructor(tag, label) {
        super();
        if (tag == null || tag.length === 0) {
            throw new Error("tag cannot be null or empty");
        }
        this._tag = tag;
        this._label = label;
    }
    /**
     * Get the tag for this chunk.
     *
     * @returns The tag for the chunk.
     */
    get tag() {
        return this._tag;
    }
    /**
     * Get the label, if any, assigned to this chunk.
     *
     * @returns The label assigned to this chunk, or `undefined` if no label is
     * assigned to the chunk.
     */
    get label() {
        return this._label;
    }
    /**
     * This method returns a text representation of the tag chunk. Labeled tags
     * are returned in the form `label:tag`, and unlabeled tags are
     * returned as just the tag name.
     */
    toString() {
        if (this._label != null) {
            return this._label + ":" + this._tag;
        }
        return this._tag;
    }
}
__decorate([
    Decorators_1.NotNull
], TagChunk.prototype, "tag", null);
__decorate([
    Decorators_1.Override
], TagChunk.prototype, "toString", null);
exports.TagChunk = TagChunk;

},{"../../Decorators":13,"./Chunk":135}],141:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:46.2521448-07:00
const Chunk_1 = require("./Chunk");
const Decorators_1 = require("../../Decorators");
/**
 * Represents a span of raw text (concrete syntax) between tags in a tree
 * pattern string.
 */
let TextChunk = class TextChunk extends Chunk_1.Chunk {
    /**
     * Constructs a new instance of {@link TextChunk} with the specified text.
     *
     * @param text The text of this chunk.
     * @exception IllegalArgumentException if `text` is not defined.
     */
    constructor(text) {
        super();
        if (text == null) {
            throw new Error("text cannot be null");
        }
        this._text = text;
    }
    /**
     * Gets the raw text of this chunk.
     *
     * @returns The text of the chunk.
     */
    get text() {
        return this._text;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TextChunk} returns the result of
     * `text` in single quotes.
     */
    toString() {
        return "'" + this._text + "'";
    }
};
__decorate([
    Decorators_1.NotNull
], TextChunk.prototype, "_text", void 0);
__decorate([
    Decorators_1.NotNull
], TextChunk.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TextChunk.prototype, "toString", null);
TextChunk = __decorate([
    __param(0, Decorators_1.NotNull)
], TextChunk);
exports.TextChunk = TextChunk;

},{"../../Decorators":13,"./Chunk":135}],142:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00
const CommonToken_1 = require("../../CommonToken");
const Decorators_1 = require("../../Decorators");
/**
 * A {@link Token} object representing a token of a particular type; e.g.,
 * `<ID>`. These tokens are created for {@link TagChunk} chunks where the
 * tag corresponds to a lexer rule or token type.
 */
let TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {
    /**
     * Constructs a new instance of {@link TokenTagToken} with the specified
     * token name, type, and label.
     *
     * @param tokenName The token name.
     * @param type The token type.
     * @param label The label associated with the token tag, or `undefined` if
     * the token tag is unlabeled.
     */
    constructor(tokenName, type, label) {
        super(type);
        this._tokenName = tokenName;
        this._label = label;
    }
    /**
     * Gets the token name.
     * @returns The token name.
     */
    get tokenName() {
        return this._tokenName;
    }
    /**
     * Gets the label associated with the rule tag.
     *
     * @returns The name of the label associated with the rule tag, or
     * `undefined` if this is an unlabeled rule tag.
     */
    get label() {
        return this._label;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TokenTagToken} returns the token tag
     * formatted with `<` and `>` delimiters.
     */
    get text() {
        if (this._label != null) {
            return "<" + this._label + ":" + this._tokenName + ">";
        }
        return "<" + this._tokenName + ">";
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TokenTagToken} returns a string of the form
     * `tokenName:type`.
     */
    toString() {
        return this._tokenName + ":" + this.type;
    }
};
__decorate([
    Decorators_1.NotNull
], TokenTagToken.prototype, "_tokenName", void 0);
__decorate([
    Decorators_1.NotNull
], TokenTagToken.prototype, "tokenName", null);
__decorate([
    Decorators_1.Override
], TokenTagToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TokenTagToken.prototype, "toString", null);
TokenTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
], TokenTagToken);
exports.TokenTagToken = TokenTagToken;

},{"../../CommonToken":9,"../../Decorators":13}],143:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// ConvertTo-TS run at 2016-10-04T11:26:46.4373888-07:00
const CharStreams_1 = require("../../CharStreams");
const CommonTokenStream_1 = require("../../CommonTokenStream");
const LexerNoViableAltException_1 = require("../../LexerNoViableAltException");
const ParserRuleContext_1 = require("../../ParserRuleContext");
const Token_1 = require("../../Token");
const XPathLexer_1 = require("./XPathLexer");
const XPathLexerErrorListener_1 = require("./XPathLexerErrorListener");
const XPathRuleAnywhereElement_1 = require("./XPathRuleAnywhereElement");
const XPathRuleElement_1 = require("./XPathRuleElement");
const XPathTokenAnywhereElement_1 = require("./XPathTokenAnywhereElement");
const XPathTokenElement_1 = require("./XPathTokenElement");
const XPathWildcardAnywhereElement_1 = require("./XPathWildcardAnywhereElement");
const XPathWildcardElement_1 = require("./XPathWildcardElement");
/**
 * Represent a subset of XPath XML path syntax for use in identifying nodes in
 * parse trees.
 *
 * Split path into words and separators `/` and `//` via ANTLR
 * itself then walk path elements from left to right. At each separator-word
 * pair, find set of nodes. Next stage uses those as work list.
 *
 * The basic interface is
 * {@link XPath#findAll ParseTree.findAll}`(tree, pathString, parser)`.
 * But that is just shorthand for:
 *
 * ```
 * let p = new XPath(parser, pathString);
 * return p.evaluate(tree);
 * ```
 *
 * See `TestXPath` for descriptions. In short, this
 * allows operators:
 *
 * | | |
 * | --- | --- |
 * | `/` | root |
 * | `//` | anywhere |
 * | `!` | invert; this much appear directly after root or anywhere operator |
 *
 * and path elements:
 *
 * | | |
 * | --- | --- |
 * | `ID` | token name |
 * | `'string'` | any string literal token from the grammar |
 * | `expr` | rule name |
 * | `*` | wildcard matching any node |
 *
 * Whitespace is not allowed.
 */
class XPath {
    constructor(parser, path) {
        this.parser = parser;
        this.path = path;
        this.elements = this.split(path);
        // console.log(this.elements.toString());
    }
    // TODO: check for invalid token/rule names, bad syntax
    split(path) {
        let lexer = new XPathLexer_1.XPathLexer(CharStreams_1.CharStreams.fromString(path));
        lexer.recover = (e) => { throw e; };
        lexer.removeErrorListeners();
        lexer.addErrorListener(new XPathLexerErrorListener_1.XPathLexerErrorListener());
        let tokenStream = new CommonTokenStream_1.CommonTokenStream(lexer);
        try {
            tokenStream.fill();
        }
        catch (e) {
            if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                let pos = lexer.charPositionInLine;
                let msg = "Invalid tokens or characters at index " + pos + " in path '" + path + "' -- " + e.message;
                throw new RangeError(msg);
            }
            throw e;
        }
        let tokens = tokenStream.getTokens();
        // console.log("path=" + path + "=>" + tokens);
        let elements = [];
        let n = tokens.length;
        let i = 0;
        loop: while (i < n) {
            let el = tokens[i];
            let next;
            switch (el.type) {
                case XPathLexer_1.XPathLexer.ROOT:
                case XPathLexer_1.XPathLexer.ANYWHERE:
                    let anywhere = el.type === XPathLexer_1.XPathLexer.ANYWHERE;
                    i++;
                    next = tokens[i];
                    let invert = next.type === XPathLexer_1.XPathLexer.BANG;
                    if (invert) {
                        i++;
                        next = tokens[i];
                    }
                    let pathElement = this.getXPathElement(next, anywhere);
                    pathElement.invert = invert;
                    elements.push(pathElement);
                    i++;
                    break;
                case XPathLexer_1.XPathLexer.TOKEN_REF:
                case XPathLexer_1.XPathLexer.RULE_REF:
                case XPathLexer_1.XPathLexer.WILDCARD:
                    elements.push(this.getXPathElement(el, false));
                    i++;
                    break;
                case Token_1.Token.EOF:
                    break loop;
                default:
                    throw new Error("Unknowth path element " + el);
            }
        }
        return elements;
    }
    /**
     * Convert word like `*` or `ID` or `expr` to a path
     * element. `anywhere` is `true` if `//` precedes the
     * word.
     */
    getXPathElement(wordToken, anywhere) {
        if (wordToken.type === Token_1.Token.EOF) {
            throw new Error("Missing path element at end of path");
        }
        let word = wordToken.text;
        if (word == null) {
            throw new Error("Expected wordToken to have text content.");
        }
        let ttype = this.parser.getTokenType(word);
        let ruleIndex = this.parser.getRuleIndex(word);
        switch (wordToken.type) {
            case XPathLexer_1.XPathLexer.WILDCARD:
                return anywhere ?
                    new XPathWildcardAnywhereElement_1.XPathWildcardAnywhereElement() :
                    new XPathWildcardElement_1.XPathWildcardElement();
            case XPathLexer_1.XPathLexer.TOKEN_REF:
            case XPathLexer_1.XPathLexer.STRING:
                if (ttype === Token_1.Token.INVALID_TYPE) {
                    throw new Error(word + " at index " +
                        wordToken.startIndex +
                        " isn't a valid token name");
                }
                return anywhere ?
                    new XPathTokenAnywhereElement_1.XPathTokenAnywhereElement(word, ttype) :
                    new XPathTokenElement_1.XPathTokenElement(word, ttype);
            default:
                if (ruleIndex === -1) {
                    throw new Error(word + " at index " +
                        wordToken.startIndex +
                        " isn't a valid rule name");
                }
                return anywhere ?
                    new XPathRuleAnywhereElement_1.XPathRuleAnywhereElement(word, ruleIndex) :
                    new XPathRuleElement_1.XPathRuleElement(word, ruleIndex);
        }
    }
    static findAll(tree, xpath, parser) {
        let p = new XPath(parser, xpath);
        return p.evaluate(tree);
    }
    /**
     * Return a list of all nodes starting at `t` as root that satisfy the
     * path. The root `/` is relative to the node passed to {@link evaluate}.
     */
    evaluate(t) {
        let dummyRoot = new ParserRuleContext_1.ParserRuleContext();
        dummyRoot.addChild(t);
        let work = new Set([dummyRoot]);
        let i = 0;
        while (i < this.elements.length) {
            let next = new Set();
            for (let node of work) {
                if (node.childCount > 0) {
                    // only try to match next element if it has children
                    // e.g., //func/*/stat might have a token node for which
                    // we can't go looking for stat nodes.
                    let matching = this.elements[i].evaluate(node);
                    matching.forEach(next.add, next);
                }
            }
            i++;
            work = next;
        }
        return work;
    }
}
XPath.WILDCARD = "*"; // word not operator/separator
XPath.NOT = "!"; // word for invert operator
exports.XPath = XPath;

},{"../../CharStreams":6,"../../CommonTokenStream":11,"../../LexerNoViableAltException":23,"../../ParserRuleContext":28,"../../Token":37,"./XPathLexer":145,"./XPathLexerErrorListener":146,"./XPathRuleAnywhereElement":147,"./XPathRuleElement":148,"./XPathTokenAnywhereElement":149,"./XPathTokenElement":150,"./XPathWildcardAnywhereElement":151,"./XPathWildcardElement":152}],144:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
class XPathElement {
    /** Construct element like `/ID` or `ID` or `/*` etc...
     *  op is null if just node
     */
    constructor(nodeName) {
        this.nodeName = nodeName;
        this.invert = false;
    }
    toString() {
        let inv = this.invert ? "!" : "";
        let className = Object.constructor.name;
        return className + "[" + inv + this.nodeName + "]";
    }
}
__decorate([
    Decorators_1.Override
], XPathElement.prototype, "toString", null);
exports.XPathElement = XPathElement;

},{"../../Decorators":13}],145:[function(require,module,exports){
"use strict";
// Generated from XPathLexer.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
const ATNDeserializer_1 = require("../../atn/ATNDeserializer");
const Lexer_1 = require("../../Lexer");
const LexerATNSimulator_1 = require("../../atn/LexerATNSimulator");
const VocabularyImpl_1 = require("../../VocabularyImpl");
const Utils = require("../../misc/Utils");
class XPathLexer extends Lexer_1.Lexer {
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(XPathLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return XPathLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "XPathLexer.g4"; }
    // @Override
    get ruleNames() { return XPathLexer.ruleNames; }
    // @Override
    get serializedATN() { return XPathLexer._serializedATN; }
    // @Override
    get channelNames() { return XPathLexer.channelNames; }
    // @Override
    get modeNames() { return XPathLexer.modeNames; }
    // @Override
    action(_localctx, ruleIndex, actionIndex) {
        switch (ruleIndex) {
            case 4:
                this.ID_action(_localctx, actionIndex);
                break;
        }
    }
    ID_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 0:
                let text = this.text;
                if (text.charAt(0) === text.charAt(0).toUpperCase()) {
                    this.type = XPathLexer.TOKEN_REF;
                }
                else {
                    this.type = XPathLexer.RULE_REF;
                }
                break;
        }
    }
    static get _ATN() {
        if (!XPathLexer.__ATN) {
            XPathLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(XPathLexer._serializedATN));
        }
        return XPathLexer.__ATN;
    }
}
XPathLexer.TOKEN_REF = 1;
XPathLexer.RULE_REF = 2;
XPathLexer.ANYWHERE = 3;
XPathLexer.ROOT = 4;
XPathLexer.WILDCARD = 5;
XPathLexer.BANG = 6;
XPathLexer.ID = 7;
XPathLexer.STRING = 8;
// tslint:disable:no-trailing-whitespace
XPathLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
XPathLexer.modeNames = [
    "DEFAULT_MODE",
];
XPathLexer.ruleNames = [
    "ANYWHERE", "ROOT", "WILDCARD", "BANG", "ID", "NameChar", "NameStartChar",
    "STRING",
];
XPathLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, "'//'", "'/'", "'*'", "'!'",
];
XPathLexer._SYMBOLIC_NAMES = [
    undefined, "TOKEN_REF", "RULE_REF", "ANYWHERE", "ROOT", "WILDCARD", "BANG",
    "ID", "STRING",
];
XPathLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XPathLexer._LITERAL_NAMES, XPathLexer._SYMBOLIC_NAMES, []);
XPathLexer._serializedATNSegments = 2;
XPathLexer._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\n2\b\x01\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
    "\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06\x1F\n\x06\f\x06" +
    "\x0E\x06\"\v\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03" +
    "\t\x07\t,\n\t\f\t\x0E\t/\v\t\x03\t\x03\t\x03-\x02\x02\n\x03\x02\x05\x05" +
    "\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\x02\x0F\x02\x02\x11\x02\n\x03" +
    "\x02\x02\x04\u02B6\x02\x02\x02\n\x02\x10\x02\x1D\x022\x02;\x02C\x02\\" +
    "\x02a\x02a\x02c\x02|\x02\x81\x02\xA1\x02\xAC\x02\xAC\x02\xAF\x02\xAF\x02" +
    "\xB7\x02\xB7\x02\xBC\x02\xBC\x02\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02" +
    "\u02C3\x02\u02C8\x02\u02D3\x02\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02" +
    "\u02F0\x02\u02F0\x02\u0302\x02\u0376\x02\u0378\x02\u0379\x02\u037C\x02" +
    "\u037F\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038A\x02\u038C\x02" +
    "\u038E\x02\u038E\x02\u0390\x02\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02" +
    "\u0483\x02\u0485\x02\u0489\x02\u048C\x02\u0531\x02\u0533\x02\u0558\x02" +
    "\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u0593\x02\u05BF\x02\u05C1\x02" +
    "\u05C1\x02\u05C3\x02\u05C4\x02\u05C6\x02\u05C7\x02\u05C9\x02\u05C9\x02" +
    "\u05D2\x02\u05EC\x02\u05F2\x02\u05F4\x02\u0602\x02\u0607\x02\u0612\x02" +
    "\u061C\x02\u061E\x02\u061E\x02\u0622\x02\u066B\x02\u0670\x02\u06D5\x02" +
    "\u06D7\x02\u06DF\x02\u06E1\x02\u06EA\x02\u06EC\x02\u06FE\x02\u0701\x02" +
    "\u0701\x02\u0711\x02\u074C\x02\u074F\x02\u07B3\x02\u07C2\x02\u07F7\x02" +
    "\u07FC\x02\u07FC\x02\u0802\x02\u082F\x02\u0842\x02\u085D\x02\u08A2\x02" +
    "\u08B6\x02\u08B8\x02\u08BF\x02\u08D6\x02\u0965\x02\u0968\x02\u0971\x02" +
    "\u0973\x02\u0985\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02" +
    "\u09AA\x02\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02" +
    "\u09BE\x02\u09C6\x02\u09C9\x02\u09CA\x02\u09CD\x02\u09D0\x02\u09D9\x02" +
    "\u09D9\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E5\x02\u09E8\x02\u09F3\x02" +
    "\u0A03\x02\u0A05\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
    "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
    "\u0A3A\x02\u0A3B\x02\u0A3E\x02\u0A3E\x02\u0A40\x02\u0A44\x02\u0A49\x02" +
    "\u0A4A\x02\u0A4D\x02\u0A4F\x02\u0A53\x02\u0A53\x02\u0A5B\x02\u0A5E\x02" +
    "\u0A60\x02\u0A60\x02\u0A68\x02\u0A77\x02\u0A83\x02\u0A85\x02\u0A87\x02" +
    "\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02\u0AAC\x02\u0AB2\x02" +
    "\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABE\x02\u0AC7\x02\u0AC9\x02" +
    "\u0ACB\x02\u0ACD\x02\u0ACF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE5\x02" +
    "\u0AE8\x02\u0AF1\x02\u0AFB\x02\u0AFB\x02\u0B03\x02\u0B05\x02\u0B07\x02" +
    "\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02\u0B32\x02" +
    "\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3E\x02\u0B46\x02\u0B49\x02" +
    "\u0B4A\x02\u0B4D\x02\u0B4F\x02\u0B58\x02\u0B59\x02\u0B5E\x02\u0B5F\x02" +
    "\u0B61\x02\u0B65\x02\u0B68\x02\u0B71\x02\u0B73\x02\u0B73\x02\u0B84\x02" +
    "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
    "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
    "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BC0\x02\u0BC4\x02" +
    "\u0BC8\x02\u0BCA\x02\u0BCC\x02\u0BCF\x02\u0BD2\x02\u0BD2\x02\u0BD9\x02" +
    "\u0BD9\x02\u0BE8\x02\u0BF1\x02\u0C02\x02\u0C05\x02\u0C07\x02\u0C0E\x02" +
    "\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02\u0C3B\x02\u0C3F\x02" +
    "\u0C46\x02\u0C48\x02\u0C4A\x02\u0C4C\x02\u0C4F\x02\u0C57\x02\u0C58\x02" +
    "\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C65\x02\u0C68\x02\u0C71\x02\u0C82\x02" +
    "\u0C85\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02\u0CAA\x02" +
    "\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBE\x02\u0CC6\x02\u0CC8\x02" +
    "\u0CCA\x02\u0CCC\x02\u0CCF\x02\u0CD7\x02\u0CD8\x02\u0CE0\x02\u0CE0\x02" +
    "\u0CE2\x02\u0CE5\x02\u0CE8\x02\u0CF1\x02\u0CF3\x02\u0CF4\x02\u0D03\x02" +
    "\u0D05\x02\u0D07\x02\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02" +
    "\u0D3F\x02\u0D46\x02\u0D48\x02\u0D4A\x02\u0D4C\x02\u0D50\x02\u0D56\x02" +
    "\u0D59\x02\u0D61\x02\u0D65\x02\u0D68\x02\u0D71\x02\u0D7C\x02\u0D81\x02" +
    "\u0D84\x02\u0D85\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02" +
    "\u0DBD\x02\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0DCC\x02\u0DCC\x02" +
    "\u0DD1\x02\u0DD6\x02\u0DD8\x02\u0DD8\x02\u0DDA\x02\u0DE1\x02\u0DE8\x02" +
    "\u0DF1\x02\u0DF4\x02\u0DF5\x02\u0E03\x02\u0E3C\x02\u0E42\x02\u0E50\x02" +
    "\u0E52\x02\u0E5B\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02\u0E89\x02" +
    "\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02\u0E99\x02" +
    "\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02\u0EA9\x02" +
    "\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EBB\x02\u0EBD\x02\u0EBF\x02" +
    "\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02\u0ECA\x02\u0ECF\x02\u0ED2\x02" +
    "\u0EDB\x02\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F1A\x02\u0F1B\x02" +
    "\u0F22\x02\u0F2B\x02\u0F37\x02\u0F37\x02\u0F39\x02\u0F39\x02\u0F3B\x02" +
    "\u0F3B\x02\u0F40\x02\u0F49\x02\u0F4B\x02\u0F6E\x02\u0F73\x02\u0F86\x02" +
    "\u0F88\x02\u0F99\x02\u0F9B\x02\u0FBE\x02\u0FC8\x02\u0FC8\x02\u1002\x02" +
    "\u104B\x02\u1052\x02\u109F\x02\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02" +
    "\u10CF\x02\u10CF\x02\u10D2\x02\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02" +
    "\u124F\x02\u1252\x02\u1258\x02\u125A\x02\u125A\x02\u125C\x02\u125F\x02" +
    "\u1262\x02\u128A\x02\u128C\x02\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02" +
    "\u12B7\x02\u12BA\x02\u12C0\x02\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02" +
    "\u12CA\x02\u12D8\x02\u12DA\x02\u1312\x02\u1314\x02\u1317\x02\u131A\x02" +
    "\u135C\x02\u135F\x02\u1361\x02\u1382\x02\u1391\x02\u13A2\x02\u13F7\x02" +
    "\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02\u1681\x02\u1683\x02" +
    "\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02\u1702\x02\u170E\x02" +
    "\u1710\x02\u1716\x02\u1722\x02\u1736\x02\u1742\x02\u1755\x02\u1762\x02" +
    "\u176E\x02\u1770\x02\u1772\x02\u1774\x02\u1775\x02\u1782\x02\u17D5\x02" +
    "\u17D9\x02\u17D9\x02\u17DE\x02\u17DF\x02\u17E2\x02\u17EB\x02\u180D\x02" +
    "\u1810\x02\u1812\x02\u181B\x02\u1822\x02\u1879\x02\u1882\x02\u18AC\x02" +
    "\u18B2\x02\u18F7\x02\u1902\x02\u1920\x02\u1922\x02\u192D\x02\u1932\x02" +
    "\u193D\x02\u1948\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02\u19AD\x02" +
    "\u19B2\x02\u19CB\x02\u19D2\x02\u19DB\x02\u1A02\x02\u1A1D\x02\u1A22\x02" +
    "\u1A60\x02\u1A62\x02\u1A7E\x02\u1A81\x02\u1A8B\x02\u1A92\x02\u1A9B\x02" +
    "\u1AA9\x02\u1AA9\x02\u1AB2\x02\u1ABF\x02\u1B02\x02\u1B4D\x02\u1B52\x02" +
    "\u1B5B\x02\u1B6D\x02\u1B75\x02\u1B82\x02\u1BF5\x02\u1C02\x02\u1C39\x02" +
    "\u1C42\x02\u1C4B\x02\u1C4F\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CD2\x02" +
    "\u1CD4\x02\u1CD6\x02\u1CF8\x02\u1CFA\x02\u1CFB\x02\u1D02\x02\u1DF7\x02" +
    "\u1DFD\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
    "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
    "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
    "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
    "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
    "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u200D\x02\u2011\x02\u202C\x02\u2030\x02" +
    "\u2041\x02\u2042\x02\u2056\x02\u2056\x02\u2062\x02\u2066\x02\u2068\x02" +
    "\u2071\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209E\x02" +
    "\u20D2\x02\u20DE\x02\u20E3\x02\u20E3\x02\u20E7\x02\u20F2\x02\u2104\x02" +
    "\u2104\x02\u2109\x02\u2109\x02\u210C\x02\u2115\x02\u2117\x02\u2117\x02" +
    "\u211B\x02\u211F\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212A\x02" +
    "\u212A\x02\u212C\x02\u212F\x02\u2131\x02\u213B\x02\u213E\x02\u2141\x02" +
    "\u2147\x02\u214B\x02\u2150\x02\u2150\x02\u2162\x02\u218A\x02\u2C02\x02" +
    "\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02\u2CE6\x02\u2CED\x02\u2CF5\x02" +
    "\u2D02\x02\u2D27\x02\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02" +
    "\u2D69\x02\u2D71\x02\u2D71\x02\u2D81\x02\u2D98\x02\u2DA2\x02\u2DA8\x02" +
    "\u2DAA\x02\u2DB0\x02\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02" +
    "\u2DC8\x02\u2DCA\x02\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02" +
    "\u2DE2\x02\u2E01\x02\u2E31\x02\u2E31\x02\u3007\x02\u3009\x02\u3023\x02" +
    "\u3031\x02\u3033\x02\u3037\x02\u303A\x02\u303E\x02\u3043\x02\u3098\x02" +
    "\u309B\x02\u309C\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02\u30FE\x02" +
    "\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02\u31BC\x02" +
    "\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02\uA002\x02" +
    "\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02\uA62D\x02" +
    "\uA642\x02\uA671\x02\uA676\x02\uA67F\x02\uA681\x02\uA6F3\x02\uA719\x02" +
    "\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02\uA7B0\x02\uA7B2\x02\uA7B9\x02" +
    "\uA7F9\x02\uA829\x02\uA842\x02\uA875\x02\uA882\x02\uA8C7\x02\uA8D2\x02" +
    "\uA8DB\x02\uA8E2\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
    "\uA902\x02\uA92F\x02\uA932\x02\uA955\x02\uA962\x02\uA97E\x02\uA982\x02" +
    "\uA9C2\x02\uA9D1\x02\uA9DB\x02\uA9E2\x02\uAA00\x02\uAA02\x02\uAA38\x02" +
    "\uAA42\x02\uAA4F\x02\uAA52\x02\uAA5B\x02\uAA62\x02\uAA78\x02\uAA7C\x02" +
    "\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAF1\x02\uAAF4\x02\uAAF8\x02" +
    "\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02\uAB18\x02\uAB22\x02" +
    "\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02\uAB5E\x02\uAB67\x02" +
    "\uAB72\x02\uABEC\x02\uABEE\x02\uABEF\x02\uABF2\x02\uABFB\x02\uAC02\x02" +
    "\uD7A5\x02\uD7B2\x02\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02" +
    "\uFA72\x02\uFADB\x02\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02" +
    "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
    "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
    "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
    "\uFE02\x02\uFE11\x02\uFE22\x02\uFE31\x02\uFE35\x02\uFE36\x02\uFE4F\x02" +
    "\uFE51\x02\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF01\x02\uFF01\x02" +
    "\uFF12\x02\uFF1B\x02\uFF23\x02\uFF3C\x02\uFF41\x02\uFF41\x02\uFF43\x02" +
    "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
    "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\uFFFB\x02\uFFFD\x02\x02\x03\r" +
    "\x03\x0F\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC" +
    "\x03\u0142\x03\u0176\x03\u01FF\x03\u01FF\x03\u0282\x03\u029E\x03\u02A2" +
    "\x03\u02D2\x03\u02E2\x03\u02E2\x03\u0302\x03\u0321\x03\u0332\x03\u034C" +
    "\x03\u0352\x03\u037C\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03\u03CA" +
    "\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04A2\x03\u04AB" +
    "\x03\u04B2\x03\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532" +
    "\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769" +
    "\x03\u0802\x03\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839" +
    "\x03\u083A\x03\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878" +
    "\x03\u0882\x03\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902" +
    "\x03\u0917\x03\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1" +
    "\x03\u0A02\x03\u0A05\x03\u0A07\x03\u0A08\x03\u0A0E\x03\u0A15\x03\u0A17" +
    "\x03\u0A19\x03\u0A1B\x03\u0A35\x03\u0A3A\x03\u0A3C\x03\u0A41\x03\u0A41" +
    "\x03\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB" +
    "\x03\u0AE8\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74" +
    "\x03\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2" +
    "\x03\u0CF4\x03\u1002\x03\u1048\x03\u1068\x03\u1071\x03\u1081\x03\u10BC" +
    "\x03\u10BF\x03\u10BF\x03\u10D2\x03\u10EA\x03\u10F2\x03\u10FB\x03\u1102" +
    "\x03\u1136\x03\u1138\x03\u1141\x03\u1152\x03\u1175\x03\u1178\x03\u1178" +
    "\x03\u1182\x03\u11C6\x03\u11CC\x03\u11CE\x03\u11D2\x03\u11DC\x03\u11DE" +
    "\x03\u11DE\x03\u1202\x03\u1213\x03\u1215\x03\u1239\x03\u1240\x03\u1240" +
    "\x03\u1282\x03\u1288\x03\u128A\x03\u128A\x03\u128C\x03\u128F\x03\u1291" +
    "\x03\u129F\x03\u12A1\x03\u12AA\x03\u12B2\x03\u12EC\x03\u12F2\x03\u12FB" +
    "\x03\u1302\x03\u1305\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315" +
    "\x03\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B" +
    "\x03\u133E\x03\u1346\x03\u1349\x03\u134A\x03\u134D\x03\u134F\x03\u1352" +
    "\x03\u1352\x03\u1359\x03\u1359\x03\u135F\x03\u1365\x03\u1368\x03\u136E" +
    "\x03\u1372\x03\u1376\x03\u1402\x03\u144C\x03\u1452\x03\u145B\x03\u1482" +
    "\x03\u14C7\x03\u14C9\x03\u14C9\x03\u14D2\x03\u14DB\x03\u1582\x03\u15B7" +
    "\x03\u15BA\x03\u15C2\x03\u15DA\x03\u15DF\x03\u1602\x03\u1642\x03\u1646" +
    "\x03\u1646\x03\u1652\x03\u165B\x03\u1682\x03\u16B9\x03\u16C2\x03\u16CB" +
    "\x03\u1702\x03\u171B\x03\u171F\x03\u172D\x03\u1732\x03\u173B\x03\u18A2" +
    "\x03\u18EB\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03\u1C0A" +
    "\x03\u1C0C\x03\u1C38\x03\u1C3A\x03\u1C42\x03\u1C52\x03\u1C5B\x03\u1C74" +
    "\x03\u1C91\x03\u1C94\x03\u1CA9\x03\u1CAB\x03\u1CB8\x03\u2002\x03\u239B" +
    "\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402" +
    "\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03\u6A62\x03\u6A6B" +
    "\x03\u6AD2\x03\u6AEF\x03\u6AF2\x03\u6AF6\x03\u6B02\x03\u6B38\x03\u6B42" +
    "\x03\u6B45\x03\u6B52\x03\u6B5B\x03\u6B65\x03\u6B79\x03\u6B7F\x03\u6B91" +
    "\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F80\x03\u6F91\x03\u6FA1\x03\u6FE2" +
    "\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03\u8AF4\x03\uB002\x03\uB003" +
    "\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03\uBC82\x03\uBC8A\x03\uBC92" +
    "\x03\uBC9B\x03\uBC9F\x03\uBCA0\x03\uBCA2\x03\uBCA5\x03\uD167\x03\uD16B" +
    "\x03\uD16F\x03\uD184\x03\uD187\x03\uD18D\x03\uD1AC\x03\uD1AF\x03\uD244" +
    "\x03\uD246\x03\uD402\x03\uD456\x03\uD458\x03\uD49E\x03\uD4A0\x03\uD4A1" +
    "\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03\uD4AB\x03\uD4AE\x03\uD4B0" +
    "\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03\uD4C5\x03\uD4C7\x03\uD507" +
    "\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03\uD518\x03\uD51E\x03\uD520" +
    "\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03\uD546\x03\uD548\x03\uD548" +
    "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
    "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
    "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
    "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uD7D0\x03\uD801" +
    "\x03\uDA02\x03\uDA38\x03\uDA3D\x03\uDA6E\x03\uDA77\x03\uDA77\x03\uDA86" +
    "\x03\uDA86\x03\uDA9D\x03\uDAA1\x03\uDAA3\x03\uDAB1\x03\uE002\x03\uE008" +
    "\x03\uE00A\x03\uE01A\x03\uE01D\x03\uE023\x03\uE025\x03\uE026\x03\uE028" +
    "\x03\uE02C\x03\uE802\x03\uE8C6\x03\uE8D2\x03\uE8D8\x03\uE902\x03\uE94C" +
    "\x03\uE952\x03\uE95B\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
    "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
    "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
    "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
    "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
    "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
    "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
    "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
    "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
    "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
    "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
    "\uFA1F\x04\x03\x10\x03\x10\"\x10\x81\x10\u0102\x10\u01F1\x10\u0240\x02" +
    "C\x02\\\x02c\x02|\x02\xAC\x02\xAC\x02\xB7\x02\xB7\x02\xBC\x02\xBC\x02" +
    "\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02\u02C3\x02\u02C8\x02\u02D3\x02" +
    "\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02\u02F0\x02\u02F0\x02\u0372\x02" +
    "\u0376\x02\u0378\x02\u0379\x02\u037C\x02\u037F\x02\u0381\x02\u0381\x02" +
    "\u0388\x02\u0388\x02\u038A\x02\u038C\x02\u038E\x02\u038E\x02\u0390\x02" +
    "\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02\u0483\x02\u048C\x02\u0531\x02" +
    "\u0533\x02\u0558\x02\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u05D2\x02" +
    "\u05EC\x02\u05F2\x02\u05F4\x02\u0622\x02\u064C\x02\u0670\x02\u0671\x02" +
    "\u0673\x02\u06D5\x02\u06D7\x02\u06D7\x02\u06E7\x02\u06E8\x02\u06F0\x02" +
    "\u06F1\x02\u06FC\x02\u06FE\x02\u0701\x02\u0701\x02\u0712\x02\u0712\x02" +
    "\u0714\x02\u0731\x02\u074F\x02\u07A7\x02\u07B3\x02\u07B3\x02\u07CC\x02" +
    "\u07EC\x02\u07F6\x02\u07F7\x02\u07FC\x02\u07FC\x02\u0802\x02\u0817\x02" +
    "\u081C\x02\u081C\x02\u0826\x02\u0826\x02\u082A\x02\u082A\x02\u0842\x02" +
    "\u085A\x02\u08A2\x02\u08B6\x02\u08B8\x02\u08BF\x02\u0906\x02\u093B\x02" +
    "\u093F\x02\u093F\x02\u0952\x02\u0952\x02\u095A\x02\u0963\x02\u0973\x02" +
    "\u0982\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02\u09AA\x02" +
    "\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02\u09BF\x02" +
    "\u09BF\x02\u09D0\x02\u09D0\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E3\x02" +
    "\u09F2\x02\u09F3\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
    "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
    "\u0A3A\x02\u0A3B\x02\u0A5B\x02\u0A5E\x02\u0A60\x02\u0A60\x02\u0A74\x02" +
    "\u0A76\x02\u0A87\x02\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02" +
    "\u0AAC\x02\u0AB2\x02\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABF\x02" +
    "\u0ABF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE3\x02\u0AFB\x02\u0AFB\x02" +
    "\u0B07\x02\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02" +
    "\u0B32\x02\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3F\x02\u0B3F\x02" +
    "\u0B5E\x02\u0B5F\x02\u0B61\x02\u0B63\x02\u0B73\x02\u0B73\x02\u0B85\x02" +
    "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
    "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
    "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BD2\x02\u0BD2\x02" +
    "\u0C07\x02\u0C0E\x02\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02" +
    "\u0C3B\x02\u0C3F\x02\u0C3F\x02\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C63\x02" +
    "\u0C82\x02\u0C82\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02" +
    "\u0CAA\x02\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBF\x02\u0CBF\x02" +
    "\u0CE0\x02\u0CE0\x02\u0CE2\x02\u0CE3\x02\u0CF3\x02\u0CF4\x02\u0D07\x02" +
    "\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02\u0D3F\x02\u0D3F\x02" +
    "\u0D50\x02\u0D50\x02\u0D56\x02\u0D58\x02\u0D61\x02\u0D63\x02\u0D7C\x02" +
    "\u0D81\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02\u0DBD\x02" +
    "\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0E03\x02\u0E32\x02\u0E34\x02" +
    "\u0E35\x02\u0E42\x02\u0E48\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02" +
    "\u0E89\x02\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02" +
    "\u0E99\x02\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02" +
    "\u0EA9\x02\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EB2\x02\u0EB4\x02" +
    "\u0EB5\x02\u0EBF\x02\u0EBF\x02\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02" +
    "\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F42\x02\u0F49\x02\u0F4B\x02" +
    "\u0F6E\x02\u0F8A\x02\u0F8E\x02\u1002\x02\u102C\x02\u1041\x02\u1041\x02" +
    "\u1052\x02\u1057\x02\u105C\x02\u105F\x02\u1063\x02\u1063\x02\u1067\x02" +
    "\u1068\x02\u1070\x02\u1072\x02\u1077\x02\u1083\x02\u1090\x02\u1090\x02" +
    "\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02\u10CF\x02\u10CF\x02\u10D2\x02" +
    "\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02\u124F\x02\u1252\x02\u1258\x02" +
    "\u125A\x02\u125A\x02\u125C\x02\u125F\x02\u1262\x02\u128A\x02\u128C\x02" +
    "\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02\u12B7\x02\u12BA\x02\u12C0\x02" +
    "\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02\u12CA\x02\u12D8\x02\u12DA\x02" +
    "\u1312\x02\u1314\x02\u1317\x02\u131A\x02\u135C\x02\u1382\x02\u1391\x02" +
    "\u13A2\x02\u13F7\x02\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02" +
    "\u1681\x02\u1683\x02\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02" +
    "\u1702\x02\u170E\x02\u1710\x02\u1713\x02\u1722\x02\u1733\x02\u1742\x02" +
    "\u1753\x02\u1762\x02\u176E\x02\u1770\x02\u1772\x02\u1782\x02\u17B5\x02" +
    "\u17D9\x02\u17D9\x02\u17DE\x02\u17DE\x02\u1822\x02\u1879\x02\u1882\x02" +
    "\u1886\x02\u1889\x02\u18AA\x02\u18AC\x02\u18AC\x02\u18B2\x02\u18F7\x02" +
    "\u1902\x02\u1920\x02\u1952\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02" +
    "\u19AD\x02\u19B2\x02\u19CB\x02\u1A02\x02\u1A18\x02\u1A22\x02\u1A56\x02" +
    "\u1AA9\x02\u1AA9\x02\u1B07\x02\u1B35\x02\u1B47\x02\u1B4D\x02\u1B85\x02" +
    "\u1BA2\x02\u1BB0\x02\u1BB1\x02\u1BBC\x02\u1BE7\x02\u1C02\x02\u1C25\x02" +
    "\u1C4F\x02\u1C51\x02\u1C5C\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CEB\x02" +
    "\u1CEE\x02\u1CF0\x02\u1CF3\x02\u1CF7\x02\u1CF8\x02\u1D02\x02\u1DC1\x02" +
    "\u1E02\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
    "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
    "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
    "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
    "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
    "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02" +
    "\u2092\x02\u209E\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210C\x02" +
    "\u2115\x02\u2117\x02\u2117\x02\u211B\x02\u211F\x02\u2126\x02\u2126\x02" +
    "\u2128\x02\u2128\x02\u212A\x02\u212A\x02\u212C\x02\u212F\x02\u2131\x02" +
    "\u213B\x02\u213E\x02\u2141\x02\u2147\x02\u214B\x02\u2150\x02\u2150\x02" +
    "\u2162\x02\u218A\x02\u2C02\x02\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02" +
    "\u2CE6\x02\u2CED\x02\u2CF0\x02\u2CF4\x02\u2CF5\x02\u2D02\x02\u2D27\x02" +
    "\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02\u2D69\x02\u2D71\x02" +
    "\u2D71\x02\u2D82\x02\u2D98\x02\u2DA2\x02\u2DA8\x02\u2DAA\x02\u2DB0\x02" +
    "\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02\u2DC8\x02\u2DCA\x02" +
    "\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02\u2E31\x02\u2E31\x02" +
    "\u3007\x02\u3009\x02\u3023\x02\u302B\x02\u3033\x02\u3037\x02\u303A\x02" +
    "\u303E\x02\u3043\x02\u3098\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02" +
    "\u30FE\x02\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02" +
    "\u31BC\x02\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02" +
    "\uA002\x02\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02" +
    "\uA621\x02\uA62C\x02\uA62D\x02\uA642\x02\uA670\x02\uA681\x02\uA69F\x02" +
    "\uA6A2\x02\uA6F1\x02\uA719\x02\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02" +
    "\uA7B0\x02\uA7B2\x02\uA7B9\x02\uA7F9\x02\uA803\x02\uA805\x02\uA807\x02" +
    "\uA809\x02\uA80C\x02\uA80E\x02\uA824\x02\uA842\x02\uA875\x02\uA884\x02" +
    "\uA8B5\x02\uA8F4\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
    "\uA90C\x02\uA927\x02\uA932\x02\uA948\x02\uA962\x02\uA97E\x02\uA986\x02" +
    "\uA9B4\x02\uA9D1\x02\uA9D1\x02\uA9E2\x02\uA9E6\x02\uA9E8\x02\uA9F1\x02" +
    "\uA9FC\x02\uAA00\x02\uAA02\x02\uAA2A\x02\uAA42\x02\uAA44\x02\uAA46\x02" +
    "\uAA4D\x02\uAA62\x02\uAA78\x02\uAA7C\x02\uAA7C\x02\uAA80\x02\uAAB1\x02" +
    "\uAAB3\x02\uAAB3\x02\uAAB7\x02\uAAB8\x02\uAABB\x02\uAABF\x02\uAAC2\x02" +
    "\uAAC2\x02\uAAC4\x02\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAEC\x02" +
    "\uAAF4\x02\uAAF6\x02\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02" +
    "\uAB18\x02\uAB22\x02\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02" +
    "\uAB5E\x02\uAB67\x02\uAB72\x02\uABE4\x02\uAC02\x02\uD7A5\x02\uD7B2\x02" +
    "\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02\uFA72\x02\uFADB\x02" +
    "\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02\uFB1F\x02\uFB21\x02" +
    "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
    "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
    "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
    "\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF23\x02\uFF3C\x02\uFF43\x02" +
    "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
    "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\x02\x03\r\x03\x0F\x03(\x03*\x03" +
    "<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC\x03\u0142\x03\u0176\x03" +
    "\u0282\x03\u029E\x03\u02A2\x03\u02D2\x03\u0302\x03\u0321\x03\u0332\x03" +
    "\u034C\x03\u0352\x03\u0377\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03" +
    "\u03CA\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04B2\x03" +
    "\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03" +
    "\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03" +
    "\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839\x03\u083A\x03" +
    "\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03" +
    "\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902\x03\u0917\x03" +
    "\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1\x03\u0A02\x03" +
    "\u0A02\x03\u0A12\x03\u0A15\x03\u0A17\x03\u0A19\x03\u0A1B\x03\u0A35\x03" +
    "\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB\x03" +
    "\u0AE6\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74\x03" +
    "\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2\x03" +
    "\u0CF4\x03\u1005\x03\u1039\x03\u1085\x03\u10B1\x03\u10D2\x03\u10EA\x03" +
    "\u1105\x03\u1128\x03\u1152\x03\u1174\x03\u1178\x03\u1178\x03\u1185\x03" +
    "\u11B4\x03\u11C3\x03\u11C6\x03\u11DC\x03\u11DC\x03\u11DE\x03\u11DE\x03" +
    "\u1202\x03\u1213\x03\u1215\x03\u122D\x03\u1282\x03\u1288\x03\u128A\x03" +
    "\u128A\x03\u128C\x03\u128F\x03\u1291\x03\u129F\x03\u12A1\x03\u12AA\x03" +
    "\u12B2\x03\u12E0\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315\x03" +
    "\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B\x03" +
    "\u133F\x03\u133F\x03\u1352\x03\u1352\x03\u135F\x03\u1363\x03\u1402\x03" +
    "\u1436\x03\u1449\x03\u144C\x03\u1482\x03\u14B1\x03\u14C6\x03\u14C7\x03" +
    "\u14C9\x03\u14C9\x03\u1582\x03\u15B0\x03\u15DA\x03\u15DD\x03\u1602\x03" +
    "\u1631\x03\u1646\x03\u1646\x03\u1682\x03\u16AC\x03\u1702\x03\u171B\x03" +
    "\u18A2\x03\u18E1\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03" +
    "\u1C0A\x03\u1C0C\x03\u1C30\x03\u1C42\x03\u1C42\x03\u1C74\x03\u1C91\x03" +
    "\u2002\x03\u239B\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03" +
    "\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03" +
    "\u6AD2\x03\u6AEF\x03\u6B02\x03\u6B31\x03\u6B42\x03\u6B45\x03\u6B65\x03" +
    "\u6B79\x03\u6B7F\x03\u6B91\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F52\x03" +
    "\u6F95\x03\u6FA1\x03\u6FE2\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03" +
    "\u8AF4\x03\uB002\x03\uB003\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03" +
    "\uBC82\x03\uBC8A\x03\uBC92\x03\uBC9B\x03\uD402\x03\uD456\x03\uD458\x03" +
    "\uD49E\x03\uD4A0\x03\uD4A1\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03" +
    "\uD4AB\x03\uD4AE\x03\uD4B0\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03" +
    "\uD4C5\x03\uD4C7\x03\uD507\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03" +
    "\uD518\x03\uD51E\x03\uD520\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03" +
    "\uD546\x03\uD548\x03\uD548";
XPathLexer._serializedATNSegment1 = "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
    "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
    "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
    "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uE802\x03\uE8C6" +
    "\x03\uE902\x03\uE945\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
    "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
    "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
    "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
    "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
    "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
    "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
    "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
    "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
    "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
    "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
    "\uFA1F\x041\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
    "\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02" +
    "\x02\x02\x03\x13\x03\x02\x02\x02\x05\x16\x03\x02\x02\x02\x07\x18\x03\x02" +
    "\x02\x02\t\x1A\x03\x02\x02\x02\v\x1C\x03\x02\x02\x02\r%\x03\x02\x02\x02" +
    "\x0F\'\x03\x02\x02\x02\x11)\x03\x02\x02\x02\x13\x14\x071\x02\x02\x14\x15" +
    "\x071\x02\x02\x15\x04\x03\x02\x02\x02\x16\x17\x071\x02\x02\x17\x06\x03" +
    "\x02\x02\x02\x18\x19\x07,\x02\x02\x19\b\x03\x02\x02\x02\x1A\x1B\x07#\x02" +
    "\x02\x1B\n\x03\x02\x02\x02\x1C \x05\x0F\b\x02\x1D\x1F\x05\r\x07\x02\x1E" +
    "\x1D\x03\x02\x02\x02\x1F\"\x03\x02\x02\x02 \x1E\x03\x02\x02\x02 !\x03" +
    "\x02\x02\x02!#\x03\x02\x02\x02\" \x03\x02\x02\x02#$\b\x06\x02\x02$\f\x03" +
    "\x02\x02\x02%&\t\x02\x02\x02&\x0E\x03\x02\x02\x02\'(\t\x03\x02\x02(\x10" +
    "\x03\x02\x02\x02)-\x07)\x02\x02*,\v\x02\x02\x02+*\x03\x02\x02\x02,/\x03" +
    "\x02\x02\x02-.\x03\x02\x02\x02-+\x03\x02\x02\x02.0\x03\x02\x02\x02/-\x03" +
    "\x02\x02\x0201\x07)\x02\x021\x12\x03\x02\x02\x02\x05\x02 -\x03\x03\x06" +
    "\x02";
XPathLexer._serializedATN = Utils.join([
    XPathLexer._serializedATNSegment0,
    XPathLexer._serializedATNSegment1,
], "");
exports.XPathLexer = XPathLexer;

},{"../../Lexer":21,"../../VocabularyImpl":39,"../../atn/ATNDeserializer":44,"../../atn/LexerATNSimulator":65,"../../misc/Utils":126}],146:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Decorators");
class XPathLexerErrorListener {
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        // intentionally empty
    }
}
__decorate([
    Decorators_1.Override
], XPathLexerErrorListener.prototype, "syntaxError", null);
exports.XPathLexerErrorListener = XPathLexerErrorListener;

},{"../../Decorators":13}],147:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Decorators");
const Trees_1 = require("../Trees");
const XPathElement_1 = require("./XPathElement");
/**
 * Either `ID` at start of path or `...//ID` in middle of path.
 */
class XPathRuleAnywhereElement extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
        super(ruleName);
        this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
        return Trees_1.Trees.findAllRuleNodes(t, this.ruleIndex);
    }
}
__decorate([
    Decorators_1.Override
], XPathRuleAnywhereElement.prototype, "evaluate", null);
exports.XPathRuleAnywhereElement = XPathRuleAnywhereElement;

},{"../../Decorators":13,"../Trees":133,"./XPathElement":144}],148:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const ParserRuleContext_1 = require("../../ParserRuleContext");
const Decorators_1 = require("../../Decorators");
const Trees_1 = require("../Trees");
const XPathElement_1 = require("./XPathElement");
class XPathRuleElement extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
        super(ruleName);
        this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
        // return all children of t that match nodeName
        let nodes = [];
        for (let c of Trees_1.Trees.getChildren(t)) {
            if (c instanceof ParserRuleContext_1.ParserRuleContext) {
                if ((c.ruleIndex === this.ruleIndex && !this.invert) ||
                    (c.ruleIndex !== this.ruleIndex && this.invert)) {
                    nodes.push(c);
                }
            }
        }
        return nodes;
    }
}
__decorate([
    Decorators_1.Override
], XPathRuleElement.prototype, "evaluate", null);
exports.XPathRuleElement = XPathRuleElement;

},{"../../Decorators":13,"../../ParserRuleContext":28,"../Trees":133,"./XPathElement":144}],149:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
const Trees_1 = require("../Trees");
const XPathElement_1 = require("./XPathElement");
class XPathTokenAnywhereElement extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
        super(tokenName);
        this.tokenType = tokenType;
    }
    evaluate(t) {
        return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);
    }
}
__decorate([
    Decorators_1.Override
], XPathTokenAnywhereElement.prototype, "evaluate", null);
exports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;

},{"../../Decorators":13,"../Trees":133,"./XPathElement":144}],150:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
const TerminalNode_1 = require("../TerminalNode");
const Trees_1 = require("../Trees");
const XPathElement_1 = require("./XPathElement");
class XPathTokenElement extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
        super(tokenName);
        this.tokenType = tokenType;
    }
    evaluate(t) {
        // return all children of t that match nodeName
        let nodes = [];
        for (let c of Trees_1.Trees.getChildren(t)) {
            if (c instanceof TerminalNode_1.TerminalNode) {
                if ((c.symbol.type === this.tokenType && !this.invert) ||
                    (c.symbol.type !== this.tokenType && this.invert)) {
                    nodes.push(c);
                }
            }
        }
        return nodes;
    }
}
__decorate([
    Decorators_1.Override
], XPathTokenElement.prototype, "evaluate", null);
exports.XPathTokenElement = XPathTokenElement;

},{"../../Decorators":13,"../TerminalNode":132,"../Trees":133,"./XPathElement":144}],151:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
const Trees_1 = require("../Trees");
const XPath_1 = require("./XPath");
const XPathElement_1 = require("./XPathElement");
class XPathWildcardAnywhereElement extends XPathElement_1.XPathElement {
    constructor() {
        super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
        if (this.invert) {
            // !* is weird but valid (empty)
            return [];
        }
        return Trees_1.Trees.getDescendants(t);
    }
}
__decorate([
    Decorators_1.Override
], XPathWildcardAnywhereElement.prototype, "evaluate", null);
exports.XPathWildcardAnywhereElement = XPathWildcardAnywhereElement;

},{"../../Decorators":13,"../Trees":133,"./XPath":143,"./XPathElement":144}],152:[function(require,module,exports){
"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = require("../../Decorators");
const Trees_1 = require("../Trees");
const XPath_1 = require("./XPath");
const XPathElement_1 = require("./XPathElement");
class XPathWildcardElement extends XPathElement_1.XPathElement {
    constructor() {
        super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
        let kids = [];
        if (this.invert) {
            // !* is weird but valid (empty)
            return kids;
        }
        for (let c of Trees_1.Trees.getChildren(t)) {
            kids.push(c);
        }
        return kids;
    }
}
__decorate([
    Decorators_1.Override
], XPathWildcardElement.prototype, "evaluate", null);
exports.XPathWildcardElement = XPathWildcardElement;

},{"../../Decorators":13,"../Trees":133,"./XPath":143,"./XPathElement":144}],153:[function(require,module,exports){
(function (global){(function (){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":203,"util/":156}],154:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],155:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],156:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":155,"_process":205,"inherits":154}],157:[function(require,module,exports){
(function (global){(function (){
'use strict';

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof global[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],158:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const tree_1 = require("antlr4ts/tree");
const lodash_1 = require("lodash");
const evaluationTarget_1 = require("./evaluationTarget");
const evaluator_1 = require("./evaluator");
const templateExtensions_1 = require("./templateExtensions");
const analyzerResult_1 = require("./analyzerResult");
/**
 * Analyzer engine. To get the static analyzer results.
 */
class Analyzer extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [Analyzer](xref:botbuilder-lg.Analyzer) class.
     * @param templates Templates.
     * @param opt Options for LG.
     */
    constructor(templates, opt) {
        super();
        this.evalutationTargetStack = [];
        this.templates = templates;
        this.templateMap = lodash_1.keyBy(templates.allTemplates, (t) => t.name);
        // create an evaluator to leverage its customized function look up for checking
        const evaluator = new evaluator_1.Evaluator(this.templates, opt);
        this._expressionParser = evaluator.expressionParser;
    }
    /**
     * Analyze a template to get the static analyzer results.
     * @param templateName Template name.
     * @returns Analyze result including variables and template references.
     */
    analyzeTemplate(templateName) {
        if (!(templateName in this.templateMap) ||
            this.evalutationTargetStack.find((u) => u.templateName === templateName) !==
                undefined) {
            return new analyzerResult_1.AnalyzerResult();
        }
        // Using a stack to track the evalution trace
        this.evalutationTargetStack.push(new evaluationTarget_1.EvaluationTarget(templateName, undefined));
        // we don't exclude paratemters any more
        // because given we don't track down for templates have parameters
        // the only scenario that we are still analyzing an parameterized template is
        // this template is root template to anaylze, in this we also don't have exclude parameters
        const dependencies = this.visit(this.templateMap[templateName].templateBodyParseTree);
        this.evalutationTargetStack.pop();
        return dependencies;
    }
    /**
     * Visit a parse tree produced by the normalBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalBody(ctx) {
        return this.visit(ctx.normalTemplateBody());
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalTemplateBody(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        for (const templateStr of ctx.templateString()) {
            result.union(this.visit(templateStr.normalTemplateString()));
        }
        return result;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredTemplateBody.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitStructuredTemplateBody(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        const bodys = ctx.structuredBodyContentLine();
        for (const body of bodys) {
            const isKVPairBody = body.keyValueStructureLine() !== undefined;
            if (isKVPairBody) {
                result.union(this.visitStructureValue(body.keyValueStructureLine()));
            }
            else {
                result.union(this.analyzeExpression(body.expressionInStructure().text));
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredValue.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitStructureValue(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        const values = ctx.keyValueStructureValue();
        for (const item of values) {
            if (templateExtensions_1.TemplateExtensions.isPureExpression(item)) {
                result.union(this.analyzeExpression(item.expressionInStructure(0).text));
            }
            else {
                const exprs = item.expressionInStructure();
                for (const expr of exprs) {
                    result.union(this.analyzeExpression(expr.text));
                }
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitIfElseBody(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        const ifRules = ctx.ifElseTemplateBody().ifConditionRule();
        for (const ifRule of ifRules) {
            const expressions = ifRule.ifCondition().expression();
            if (expressions !== undefined && expressions.length > 0) {
                result.union(this.analyzeExpression(expressions[0].text));
            }
            if (ifRule.normalTemplateBody() !== undefined) {
                result.union(this.visit(ifRule.normalTemplateBody()));
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitSwitchCaseBody(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        const switchCaseNodes = ctx.switchCaseTemplateBody().switchCaseRule();
        for (const iterNode of switchCaseNodes) {
            const expressions = iterNode.switchCaseStat().expression();
            if (expressions.length > 0) {
                result.union(this.analyzeExpression(expressions[0].text));
            }
            if (iterNode.normalTemplateBody()) {
                result.union(this.visit(iterNode.normalTemplateBody()));
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateString.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalTemplateString(ctx) {
        const result = new analyzerResult_1.AnalyzerResult();
        for (const expression of ctx.expression()) {
            result.union(this.analyzeExpression(expression.text));
        }
        return result;
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns An instance of the AnalyzerResult class.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    defaultResult() {
        return new analyzerResult_1.AnalyzerResult();
    }
    /**
     * @private
     */
    analyzeExpressionDirectly(exp) {
        const result = new analyzerResult_1.AnalyzerResult();
        if (exp.type in this.templateMap) {
            const templateName = exp.type;
            result.union(new analyzerResult_1.AnalyzerResult([], [templateName]));
            if (this.templateMap[templateName].parameters === undefined ||
                this.templateMap[templateName].parameters.length === 0) {
                result.union(this.analyzeTemplate(templateName));
            }
            else if (!result.TemplateReferences.includes(templateName)) {
                // if template has params, just get the templateref without variables.
                result.union(new analyzerResult_1.AnalyzerResult([], this.analyzeTemplate(templateName).TemplateReferences));
            }
        }
        if (exp.children !== undefined) {
            exp.children.forEach((e) => result.union(this.analyzeExpressionDirectly(e)));
        }
        return result;
    }
    /**
     * @private
     */
    analyzeExpression(exp) {
        const result = new analyzerResult_1.AnalyzerResult();
        exp = templateExtensions_1.TemplateExtensions.trimExpression(exp);
        const parsed = this._expressionParser.parse(exp);
        const references = parsed.references();
        result.union(new analyzerResult_1.AnalyzerResult(references.slice(), []));
        result.union(this.analyzeExpressionDirectly(parsed));
        return result;
    }
}
exports.Analyzer = Analyzer;

},{"./analyzerResult":159,"./evaluationTarget":164,"./evaluator":165,"./templateExtensions":183,"antlr4ts/tree":134,"lodash":202}],159:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Analyzer result. Contains variables and template references.
 */
class AnalyzerResult {
    /**
     * Creates a new instance of the [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) class.
     * @param variables Init varibales.
     * @param templateRefNames Init template references.
     */
    constructor(variables = [], templateRefNames = []) {
        this.Variables = Array.from(new Set(variables));
        this.TemplateReferences = Array.from(new Set(templateRefNames));
    }
    /**
     * Combine two analyzer results.
     * @param outputItem Another analyzer result.
     * @returns Combined analyzer result.
     */
    union(outputItem) {
        this.Variables = Array.from(new Set(this.Variables.concat(outputItem.Variables)));
        this.TemplateReferences = Array.from(new Set(this.TemplateReferences.concat(outputItem.TemplateReferences)));
        return this;
    }
}
exports.AnalyzerResult = AnalyzerResult;

},{}],160:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const adaptive_expressions_1 = require("adaptive-expressions");
/**
 * A customized memory designed for LG evaluation, in which
 * we want to make sure the global memory (the first memory passed in) can be
 * accessible at any sub evaluation process.
 */
class CustomizedMemory {
    /**
     * Creates a new instance of the [CustomizedMemory](xref:botbuilder-lg.CustomizedMemory) class.
     * @param scope Optional. Scope.
     * @param localMemory Optional. Local memory.
     */
    constructor(scope, localMemory) {
        this.globalMemory = !scope ? undefined : adaptive_expressions_1.SimpleObjectMemory.wrap(scope);
        this.localMemory = localMemory;
    }
    /**
     *  Try to get the value from a given path. Firstly, get result from global memory,
     *  if global memory does not contain, get from local memory.
     * @param path Memory path.
     * @returns Resolved value.
     */
    getValue(path) {
        if (this.localMemory) {
            const value = this.localMemory.getValue(path);
            if (value !== undefined) {
                return value;
            }
        }
        if (this.globalMemory) {
            return this.globalMemory.getValue(path);
        }
        return undefined;
    }
    /**
     * Set value to a given path. This method is not implemented.
     * @param _path Memory path.
     * @param _value Value to set.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setValue(_path, _value) {
        return;
    }
    /**
     * Used to identify whether a particular memory instance has been updated or not.
     * If version is not changed, the caller may choose to use the cached result instead of recomputing everything.
     * @returns A string indicating the version.
     */
    version() {
        let result = '';
        if (this.globalMemory) {
            const version = this.globalMemory.version();
            if (version) {
                result = result.concat(version);
            }
        }
        if (this.localMemory) {
            const localVersion = this.localMemory.version();
            if (localVersion !== undefined) {
                result = result.concat(localVersion);
            }
        }
        return result;
    }
}
exports.CustomizedMemory = CustomizedMemory;

},{"adaptive-expressions":2}],161:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const templatesParser_1 = require("./templatesParser");
/**
 * DiagnosticSeverity enum
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 0] = "Error";
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 1] = "Warning";
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 2] = "Information";
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 3] = "Hint";
})(DiagnosticSeverity = exports.DiagnosticSeverity || (exports.DiagnosticSeverity = {}));
/**
 * Diagnostic class
 */
class Diagnostic {
    /**
     * Creates a new instance of the [Diagnostic](xref:botbuilder-lg.Diagnostic) class.
     * @param range Range where the error or warning occurred.
     * @param message Error message of the error or warning.
     * @param severity Severity of the error or warning.
     * @param source Source of the error or warning occurred.
     * @param code Code or identifier of the error or warning.
     */
    constructor(range, message, severity = DiagnosticSeverity.Error, source, code) {
        this.message = message;
        this.range = range;
        this.severity = severity;
        this.source = source;
        this.code = code;
    }
    /**
     * Returns a string that represents the current [Diagnostic](xref:botbuilder-lg.Diagnostic) object.
     * @returns A string that represents the current [Diagnostic](xref:botbuilder-lg.Diagnostic).
     */
    toString() {
        // ignore error range if source is "inline content"
        if (this.source === templatesParser_1.TemplatesParser.inlineContentId) {
            return `[${DiagnosticSeverity[this.severity]}] ${this.source} ${this.message.toString()}`;
        }
        else {
            return `[${DiagnosticSeverity[this.severity]}] ${this.source} ${this.range.toString()}: ${this.message.toString()}`;
        }
    }
}
exports.Diagnostic = Diagnostic;

},{"./templatesParser":186}],162:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const diagnostic_1 = require("./diagnostic");
const templateException_1 = require("./templateException");
const position_1 = require("./position");
const range_1 = require("./range");
const templateErrors_1 = require("./templateErrors");
/**
 * LG parser error listener.
 */
class ErrorListener {
    /**
     * Creates a new instance of the [ErrorListener](xref:botbuilder-lg.ErrorListener) class.
     * @param errorSource String value that represents the source of the error.
     * @param lineOffset Offset of the line where the error occurred.
     */
    constructor(errorSource, lineOffset) {
        this.source = errorSource;
        if (lineOffset === undefined) {
            lineOffset = 0;
        }
        this.lineOffset = lineOffset;
    }
    /**
     * Notifies any interested parties upon a syntax error.
     * @param recognizer What parser got the error. From this object, you can access the context as well as the input stream.
     * @param offendingSymbol Offending token in the input token stream, unless recognizer is a lexer (then it's null).
     * @param line Line number in the input where the error occurred.
     * @param charPositionInLine Character position within the line where the error occurred.
     * @param msg Message to emit.
     * @param e Exception.
     */
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    msg, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    e) {
        const startPosition = new position_1.Position(this.lineOffset + line, charPositionInLine);
        const stopPosition = new position_1.Position(this.lineOffset + line, charPositionInLine + offendingSymbol.stopIndex - offendingSymbol.startIndex + 1);
        const range = new range_1.Range(startPosition, stopPosition);
        const diagnostic = new diagnostic_1.Diagnostic(range, templateErrors_1.TemplateErrors.syntaxError(msg), diagnostic_1.DiagnosticSeverity.Error, this.source);
        throw new templateException_1.TemplateException(diagnostic.toString(), [diagnostic]);
    }
}
exports.ErrorListener = ErrorListener;

},{"./diagnostic":161,"./position":176,"./range":177,"./templateErrors":181,"./templateException":182}],163:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var LGLineBreakStyle;
(function (LGLineBreakStyle) {
    LGLineBreakStyle["Default"] = "default";
    LGLineBreakStyle["Markdown"] = "markdown";
})(LGLineBreakStyle = exports.LGLineBreakStyle || (exports.LGLineBreakStyle = {}));
/**
 * LG cache scope options.
 */
var LGCacheScope;
(function (LGCacheScope) {
    /**
     * Global template cache scope.
     */
    LGCacheScope["Global"] = "global";
    /**
     * Only cache result in the same layer of children in template.
     */
    LGCacheScope["Local"] = "local";
    /**
     * Without cache.
     */
    LGCacheScope["None"] = "none";
})(LGCacheScope = exports.LGCacheScope || (exports.LGCacheScope = {}));
/**
 * Options for evaluating LG templates.
 */
class EvaluationOptions {
    /**
     * Creates a new instance of the [EvaluationOptions](xref:botbuilder-lg.EvaluationOptions) class.
     * @param opt Instance to copy initial settings from.
     */
    constructor(opt) {
        this.nullKeyReplaceStrRegex = /\${\s*path\s*}/g;
        this.strictModeKey = '@strict';
        this.replaceNullKey = '@replaceNull';
        this.lineBreakKey = '@lineBreakStyle';
        this.cacheScopeKey = '@cacheScope';
        if (arguments.length === 0) {
            this.strictMode = undefined;
            this.nullSubstitution = undefined;
            this.LineBreakStyle = undefined;
            this.cacheScope = undefined;
        }
        else {
            if (opt instanceof EvaluationOptions) {
                this.strictMode = opt.strictMode;
                this.nullSubstitution = opt.nullSubstitution;
                this.LineBreakStyle = opt.LineBreakStyle;
                this.locale = opt.locale;
                this.cacheScope = opt.cacheScope;
            }
            else {
                if (opt !== undefined && opt.length > 0) {
                    for (const optionStr of opt) {
                        if (optionStr && optionStr.includes('=')) {
                            const index = optionStr.indexOf('=');
                            const key = optionStr.substring(0, index).trim();
                            const value = optionStr.substring(index + 1).trim();
                            if (key.toLowerCase() === this.strictModeKey.toLowerCase()) {
                                if (value.toLowerCase() === 'true') {
                                    this.strictMode = true;
                                }
                            }
                            else if (key.toLowerCase() === this.replaceNullKey.toLowerCase()) {
                                this.nullSubstitution = (path) => 
                                // eslint-disable-next-line security/detect-eval-with-expression
                                eval('`' + value.replace(this.nullKeyReplaceStrRegex, '${path}') + '`');
                            }
                            else if (key.toLowerCase() === this.lineBreakKey.toLowerCase()) {
                                this.LineBreakStyle =
                                    value.toLowerCase() === LGLineBreakStyle.Markdown.toString().toLowerCase()
                                        ? LGLineBreakStyle.Markdown
                                        : LGLineBreakStyle.Default;
                            }
                            else if (key.toLowerCase() === this.cacheScopeKey.toLowerCase()) {
                                for (const scope of Object.values(LGCacheScope)) {
                                    if (value.toLowerCase() === scope.toLowerCase()) {
                                        this.cacheScope = scope;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Merges an incoming option to current option. If a property in incoming option is not null while it is null in current
     * option, then the value of this property will be overwritten.
     * @param opt Incoming option for merging.
     * @returns Result after merging.
     */
    merge(opt) {
        const properties = ['strictMode', 'nullSubstitution', 'LineBreakStyle'];
        for (const property of properties) {
            if (this[property] === undefined && opt[property] !== undefined) {
                this[property] = opt[property];
            }
        }
        return this;
    }
}
exports.EvaluationOptions = EvaluationOptions;

},{}],164:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Runtime template state.
 */
class EvaluationTarget {
    /**
     * Creates a new instance of the [EvaluationTarget](xref:botbuilder-lg.EvaluationTarget) class.
     * @param templateName Template name.
     * @param scope Template scope.
     */
    constructor(templateName, scope) {
        this.templateName = templateName;
        this.scope = scope;
        this.cachedEvaluatedChildren = new Map();
    }
    /**
     * Get current instance id. If two target has the same Id,
     * we can say they have the same template evaluation result.
     * @returns Id.
     */
    getId() {
        const scopeVersion = this.scope ? this.scope.version() : '';
        return this.templateName + scopeVersion;
    }
}
exports.EvaluationTarget = EvaluationTarget;

},{}],165:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const tree_1 = require("antlr4ts/tree");
const adaptive_expressions_1 = require("adaptive-expressions");
const lodash_1 = require("lodash");
const customizedMemory_1 = require("./customizedMemory");
const evaluationTarget_1 = require("./evaluationTarget");
const lp = require("./generated/LGTemplateParser");
const path = require("path");
const fs = require("fs");
const templateExtensions_1 = require("./templateExtensions");
const templateErrors_1 = require("./templateErrors");
const evaluationOptions_1 = require("./evaluationOptions");
const templates_1 = require("./templates");
/**
 * Filr formats.
 */
var FileFormat;
(function (FileFormat) {
    /**
     * Get the evaluated result from the Raw.
     */
    FileFormat["Evaluated"] = "Evaluated";
    /**
     * Get raw text content of the file.
     */
    FileFormat["Raw"] = "Raw";
    /**
     * Get binary result from the file.
     */
    FileFormat["Binary"] = "Binary";
})(FileFormat = exports.FileFormat || (exports.FileFormat = {}));
/**
 * Evaluation runtime engine
 */
class Evaluator extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [Evaluator](xref:botbuilder-lg.Evaluator) class.
     * @param templates Templates.
     * @param opt Options for LG.
     */
    constructor(templates, opt) {
        super();
        this.evaluationTargetStack = [];
        this.cacheResult = new Map();
        // Genearte a new lookup function based on one lookup function
        this.customizedEvaluatorLookup = (baseLookup) => (name) => {
            const standardFunction = baseLookup(name);
            if (standardFunction !== undefined) {
                return standardFunction;
            }
            const pointIndex = name.indexOf('.');
            if (pointIndex > 0) {
                const alias = name.substr(0, pointIndex);
                const realTemplate = this.templates.namedReferences[alias];
                if (realTemplate) {
                    const realTemplateName = name.substr(pointIndex + 1);
                    return new adaptive_expressions_1.ExpressionEvaluator(realTemplateName, adaptive_expressions_1.FunctionUtils.apply(this.evaluateWithTemplates(realTemplateName, realTemplate)), adaptive_expressions_1.ReturnType.Object);
                }
            }
            if (name.startsWith('lg.')) {
                name = name.substring(3);
            }
            const templateName = this.parseTemplateName(name).pureTemplateName;
            if (templateName in this.templateMap) {
                return new adaptive_expressions_1.ExpressionEvaluator(templateName, adaptive_expressions_1.FunctionUtils.apply(this.templateEvaluator(name)), adaptive_expressions_1.ReturnType.Object, this.validTemplateReference);
            }
            if (name === Evaluator.templateFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(Evaluator.templateFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.templateFunction()), adaptive_expressions_1.ReturnType.Object, this.validateTemplateFunction);
            }
            if (name === Evaluator.fromFileFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(Evaluator.fromFileFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.fromFile()), adaptive_expressions_1.ReturnType.Object, (expr) => adaptive_expressions_1.FunctionUtils.validateOrder(expr, [adaptive_expressions_1.ReturnType.String], adaptive_expressions_1.ReturnType.String));
            }
            if (name === Evaluator.activityAttachmentFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(Evaluator.activityAttachmentFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.activityAttachment()), adaptive_expressions_1.ReturnType.Object, (expr) => adaptive_expressions_1.FunctionUtils.validateOrder(expr, undefined, adaptive_expressions_1.ReturnType.Object, adaptive_expressions_1.ReturnType.String));
            }
            if (name === Evaluator.isTemplateFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(Evaluator.isTemplateFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.isTemplate()), adaptive_expressions_1.ReturnType.Boolean, adaptive_expressions_1.FunctionUtils.validateUnaryString);
            }
            if (name === Evaluator.expandTextFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(Evaluator.expandTextFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.expandText()), adaptive_expressions_1.ReturnType.Object, adaptive_expressions_1.FunctionUtils.validateUnaryString);
            }
            return undefined;
        };
        this.isTemplate = () => (args) => {
            const templateName = args[0].toString();
            return templateName in this.templateMap;
        };
        this.fromFile = () => (args) => {
            const filePath = templateExtensions_1.TemplateExtensions.normalizePath(args[0].toString());
            const resourcePath = this.getResourcePath(filePath);
            let format = FileFormat.Evaluated;
            if (args.length > 1) {
                const expected = args[1].toString().toLowerCase();
                const currentFormat = Object.values(FileFormat).find((f) => f.toLowerCase() === expected);
                if (currentFormat != null) {
                    format = currentFormat;
                }
            }
            let result;
            if (format === FileFormat.Binary) {
                result = fs.readFileSync(resourcePath);
            }
            else if (format === FileFormat.Raw) {
                result = fs.readFileSync(resourcePath, 'utf-8');
            }
            else {
                const stringContent = fs.readFileSync(resourcePath, 'utf-8');
                const newScope = this.evaluationTargetStack.length > 0 ? this.currentTarget().scope : undefined;
                const newTemplates = new templates_1.Templates(this.templates.allTemplates, undefined, undefined, undefined, undefined, undefined, this.expressionParser, undefined, [], undefined, this.templates.namedReferences);
                result = newTemplates.evaluateText(stringContent, newScope, this.lgOptions);
            }
            return result;
        };
        this.expandText = () => (args) => {
            const stringContent = args[0].toString();
            const newScope = this.evaluationTargetStack.length > 0 ? this.currentTarget().scope : undefined;
            const newTemplates = new templates_1.Templates(this.templates.allTemplates, undefined, undefined, undefined, undefined, undefined, this.expressionParser, undefined, [], undefined, this.templates.namedReferences);
            return newTemplates.evaluateText(stringContent, newScope, this.lgOptions);
        };
        this.activityAttachment = () => (args) => {
            return {
                [Evaluator.LGType]: 'attachment',
                contenttype: args[1].toString(),
                content: args[0],
            };
        };
        this.evaluateWithTemplates = (templateName, templates) => (args) => {
            const newScope = this.constructScope(templateName, args.slice(0), templates.allTemplates);
            return templates.evaluate(templateName, newScope);
        };
        this.templateFunction = () => (args) => {
            const templateName = args[0].toString();
            const newScope = this.constructScope(templateName, args.slice(1), this.templates.allTemplates);
            return this.evaluateTemplate(templateName, newScope);
        };
        this.validateTemplateFunction = (expression) => {
            adaptive_expressions_1.FunctionUtils.validateAtLeastOne(expression);
            const children0 = expression.children[0];
            // Validate return type
            if ((children0.returnType & adaptive_expressions_1.ReturnType.Object) === 0 && (children0.returnType & adaptive_expressions_1.ReturnType.String) === 0) {
                throw new Error(templateErrors_1.TemplateErrors.invalidTemplateNameType);
            }
            // Validate more if the name is string constant
            if (children0.type === adaptive_expressions_1.ExpressionType.Constant) {
                const templateName = children0.value;
                this.checkTemplateReference(templateName, expression.children.slice(1));
            }
        };
        this.templateEvaluator = (templateName) => (args) => {
            const newScope = this.constructScope(templateName, Array.from(args), this.templates.allTemplates);
            return this.evaluateTemplate(templateName, newScope);
        };
        this.validTemplateReference = (expression) => {
            return this.checkTemplateReference(expression.type, expression.children);
        };
        this.templates = templates;
        this.templateMap = lodash_1.keyBy(templates.allTemplates, (t) => t.name);
        this.lgOptions = opt;
        this.cacheResult.clear();
        // generate a new customzied expression parser by injecting the templates as functions
        this.expressionParser = new adaptive_expressions_1.ExpressionParser(this.customizedEvaluatorLookup(templates.expressionParser.EvaluatorLookup));
    }
    /**
     * Evaluate a template with given name and scope.
     * @param inputTemplateName Template name.
     * @param scope Scope.
     * @returns Evaluate result.
     */
    evaluateTemplate(inputTemplateName, scope) {
        const memory = scope instanceof customizedMemory_1.CustomizedMemory ? scope : new customizedMemory_1.CustomizedMemory(scope);
        const { reExecute, pureTemplateName: templateName } = this.parseTemplateName(inputTemplateName);
        if (!(templateName in this.templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const templateTarget = new evaluationTarget_1.EvaluationTarget(templateName, memory);
        const currentEvulateId = templateTarget.getId();
        if (this.evaluationTargetStack.some((u) => u.getId() === currentEvulateId)) {
            throw new Error(`${templateErrors_1.TemplateErrors.loopDetected} ${this.evaluationTargetStack
                .reverse()
                .map((u) => u.templateName)
                .join(' => ')}`);
        }
        let result;
        let hasResult = false;
        if (!reExecute) {
            if (this.lgOptions.cacheScope === evaluationOptions_1.LGCacheScope.Global) {
                if (this.cacheResult.has(currentEvulateId)) {
                    result = this.cacheResult.get(currentEvulateId);
                    hasResult = true;
                }
            }
            else if (this.lgOptions.cacheScope === undefined || this.lgOptions.cacheScope === evaluationOptions_1.LGCacheScope.Local) {
                let previousEvaluateTarget;
                if (this.evaluationTargetStack.length !== 0) {
                    previousEvaluateTarget = this.evaluationTargetStack[this.evaluationTargetStack.length - 1];
                    if (previousEvaluateTarget.cachedEvaluatedChildren.has(currentEvulateId)) {
                        result = previousEvaluateTarget.cachedEvaluatedChildren.get(currentEvulateId);
                        hasResult = true;
                    }
                }
            }
        }
        if (!hasResult) {
            this.evaluationTargetStack.push(templateTarget);
            result = this.visit(this.templateMap[templateName].templateBodyParseTree);
            this.evaluationTargetStack.pop();
            if (!reExecute) {
                if (this.lgOptions.cacheScope === evaluationOptions_1.LGCacheScope.Global) {
                    this.cacheResult.set(currentEvulateId, result);
                }
                else if (this.lgOptions.cacheScope === undefined ||
                    this.lgOptions.cacheScope === evaluationOptions_1.LGCacheScope.Local) {
                    if (this.evaluationTargetStack.length !== 0) {
                        this.evaluationTargetStack[this.evaluationTargetStack.length - 1].cachedEvaluatedChildren.set(currentEvulateId, result);
                    }
                }
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredTemplateBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the structured template body.
     */
    visitStructuredTemplateBody(ctx) {
        const result = {};
        const typeName = ctx.structuredBodyNameLine().STRUCTURE_NAME().text;
        result[Evaluator.LGType] = typeName;
        const bodys = ctx.structuredBodyContentLine();
        for (const body of bodys) {
            const isKVPairBody = body.keyValueStructureLine() !== undefined;
            if (isKVPairBody) {
                const property = body.keyValueStructureLine().STRUCTURE_IDENTIFIER().text.toLowerCase();
                const value = this.visitStructureValue(body.keyValueStructureLine());
                result[property] = value;
            }
            else {
                const propertyObject = this.evalExpression(body.expressionInStructure().text, body.expressionInStructure(), body.text);
                // Full reference to another structured template is limited to the structured template with same type
                if (propertyObject &&
                    typeof propertyObject === 'object' &&
                    Evaluator.LGType in propertyObject &&
                    propertyObject[Evaluator.LGType].toString() === typeName) {
                    for (const key of Object.keys(propertyObject)) {
                        if (propertyObject.hasOwnProperty(key) && !(key in result)) {
                            result[key] = propertyObject[key];
                        }
                    }
                }
            }
        }
        return result;
    }
    /**
     * @private
     */
    visitStructureValue(ctx) {
        const values = ctx.keyValueStructureValue();
        const result = [];
        for (const item of values) {
            if (templateExtensions_1.TemplateExtensions.isPureExpression(item)) {
                result.push(this.evalExpression(item.expressionInStructure(0).text, item.expressionInStructure(0), ctx.text));
            }
            else {
                let itemStringResult = '';
                for (const child of item.children) {
                    if (child instanceof lp.ExpressionInStructureContext) {
                        const errorPrefix = `Property '` + ctx.STRUCTURE_IDENTIFIER().text + `':`;
                        itemStringResult += this.evalExpression(child.text, child, ctx.text, errorPrefix);
                    }
                    else {
                        const node = child;
                        switch (node.symbol.type) {
                            case lp.LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                itemStringResult += templateExtensions_1.TemplateExtensions.evalEscape(node.text.replace(/\\\|/g, '|'));
                                break;
                            default:
                                itemStringResult += node.text;
                                break;
                        }
                    }
                }
                result.push(itemStringResult.trim());
            }
        }
        return result.length === 1 ? result[0] : result;
    }
    /**
     * Visit a parse tree produced by the normalBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal body.
     */
    visitNormalBody(ctx) {
        return this.visit(ctx.normalTemplateBody());
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal template body.
     */
    visitNormalTemplateBody(ctx) {
        const normalTemplateStrs = ctx.templateString();
        const randomNumber = adaptive_expressions_1.Extensions.randomNext(this.currentTarget().scope, 0, normalTemplateStrs.length);
        return this.visit(normalTemplateStrs[randomNumber].normalTemplateString());
    }
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     */
    visitIfElseBody(ctx) {
        const ifRules = ctx.ifElseTemplateBody().ifConditionRule();
        for (const ifRule of ifRules) {
            if (this.evalCondition(ifRule.ifCondition()) && ifRule.normalTemplateBody() !== undefined) {
                return this.visit(ifRule.normalTemplateBody());
            }
        }
        return undefined;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateString.
     * @param ctx The parse tree.
     * @returns The string result of visiting the normal template string.
     */
    visitNormalTemplateString(ctx) {
        const prefixErrorMsg = templateExtensions_1.TemplateExtensions.getPrefixErrorMessage(ctx);
        const result = [];
        for (const child of ctx.children) {
            if (child instanceof lp.ExpressionContext) {
                result.push(this.evalExpression(child.text, child, ctx.text, prefixErrorMsg));
            }
            else {
                const node = child;
                switch (node.symbol.type) {
                    case lp.LGTemplateParser.MULTILINE_SUFFIX:
                    case lp.LGTemplateParser.MULTILINE_PREFIX:
                    case lp.LGTemplateParser.DASH:
                        break;
                    case lp.LGTemplateParser.ESCAPE_CHARACTER:
                        result.push(templateExtensions_1.TemplateExtensions.evalEscape(node.text));
                        break;
                    default: {
                        result.push(node.text);
                        break;
                    }
                }
            }
        }
        if (result.length === 1 && !(typeof result[0] === 'string')) {
            return result[0];
        }
        return result
            .map((u) => {
            if (typeof u === 'string') {
                return u;
            }
            else {
                return JSON.stringify(u);
            }
        })
            .join('');
    }
    /**
     * Constructs the scope for mapping the values of arguments to the parameters of the template.
     * Throws errors if certain errors detected [TemplateErrors](xref:botbuilder-lg.TemplateErrors).
     * @param inputTemplateName Template name to evaluate.
     * @param args Arguments to map to the template parameters.
     * @param allTemplates All templates.
     * @returns The current scope if the number of arguments is 0, otherwise, returns a [CustomizedMemory](xref:botbuilder-lg.CustomizedMemory)
     * with the mapping of the parameter name to the argument value added to the scope.
     */
    constructScope(inputTemplateName, args, allTemplates) {
        const templateName = this.parseTemplateName(inputTemplateName).pureTemplateName;
        const templateMap = lodash_1.keyBy(allTemplates, (t) => t.name);
        if (!(templateName in templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const parameters = templateMap[templateName].parameters;
        const currentScope = this.currentTarget().scope;
        if (args.length === 0) {
            // no args to construct, inherit from current scope
            return currentScope;
        }
        const newScope = {};
        parameters.map((e, i) => (newScope[e] = args[i]));
        const memory = currentScope;
        if (!memory) {
            throw new Error(templateErrors_1.TemplateErrors.invalidMemory);
        }
        return new customizedMemory_1.CustomizedMemory(memory.globalMemory, adaptive_expressions_1.SimpleObjectMemory.wrap(newScope));
    }
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The string result of visiting the switch case body.
     */
    visitSwitchCaseBody(ctx) {
        const switchcaseNodes = ctx.switchCaseTemplateBody().switchCaseRule();
        const length = switchcaseNodes.length;
        const switchNode = switchcaseNodes[0];
        const switchExprs = switchNode.switchCaseStat().expression();
        const switchErrorPrefix = `Switch '` + switchExprs[0].text + `': `;
        const switchExprResult = this.evalExpression(switchExprs[0].text, switchExprs[0], switchcaseNodes[0].switchCaseStat().text, switchErrorPrefix);
        let idx = 0;
        for (const caseNode of switchcaseNodes) {
            if (idx === 0) {
                idx++;
                continue; //skip the first node which is a switch statement
            }
            if (idx === length - 1 && caseNode.switchCaseStat().DEFAULT() !== undefined) {
                const defaultBody = caseNode.normalTemplateBody();
                if (defaultBody !== undefined) {
                    return this.visit(defaultBody);
                }
                else {
                    return undefined;
                }
            }
            const caseExprs = caseNode.switchCaseStat().expression();
            const caseErrorPrefix = `Case '` + caseExprs[0].text + `': `;
            const caseExprResult = this.evalExpression(caseExprs[0].text, caseExprs[0], caseNode.switchCaseStat().text, caseErrorPrefix);
            if (adaptive_expressions_1.FunctionUtils.commonEquals(switchExprResult, caseExprResult)) {
                return this.visit(caseNode.normalTemplateBody());
            }
            idx++;
        }
        return undefined;
    }
    /**
     * Replaces an expression contained in text.
     * @param exp Expression Text.
     * @param regex Regex to select the text to replace.
     */
    wrappedEvalTextContainsExpression(exp, regex) {
        return exp
            .split('')
            .reverse()
            .join('')
            .replace(regex, (sub) => this.evalExpression(sub.split('').reverse().join('')).toString().split('').reverse().join(''))
            .split('')
            .reverse()
            .join('');
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty string.
     */
    defaultResult() {
        return '';
    }
    /**
     * Concatenates two error messages.
     * @param firstError First error message to concatenate.
     * @param secondError Second error message to concatenate.
     * @returns The concatenated error messages.
     */
    static concatErrorMsg(firstError, secondError) {
        let errorMsg;
        if (!firstError) {
            errorMsg = secondError;
        }
        else if (!secondError) {
            errorMsg = firstError;
        }
        else {
            errorMsg = firstError + ' ' + secondError;
        }
        return errorMsg;
    }
    /**
     * Checks an expression result and throws the corresponding error.
     * @param exp Expression text.
     * @param error Error message.
     * @param result Result.
     * @param templateName Template name.
     * @param inlineContent Optional. In line content.
     * @param errorPrefix Optional. Error prefix.
     */
    static checkExpressionResult(exp, error, result, templateName, inlineContent = '', errorPrefix = '') {
        let errorMsg = '';
        let childErrorMsg = '';
        if (error) {
            childErrorMsg = Evaluator.concatErrorMsg(childErrorMsg, error);
        }
        else if (!result) {
            childErrorMsg = Evaluator.concatErrorMsg(childErrorMsg, templateErrors_1.TemplateErrors.nullExpression(exp));
        }
        if (inlineContent && inlineContent.trim() !== '') {
            errorMsg = Evaluator.concatErrorMsg(errorMsg, templateErrors_1.TemplateErrors.errorExpression(inlineContent, templateName, errorPrefix));
        }
        throw new Error(Evaluator.concatErrorMsg(childErrorMsg, errorMsg));
    }
    /**
     * @private
     */
    currentTarget() {
        // just don't want to write evaluationTargetStack.Peek() everywhere
        return this.evaluationTargetStack[this.evaluationTargetStack.length - 1];
    }
    /**
     * @private
     */
    evalCondition(condition) {
        const expression = condition.expression()[0]; // Here ts is diff with C#, C# use condition.EXPRESSION(0) == null
        // to judge ELSE condition. But in ts lib this action would throw
        // Error
        if (!expression) {
            return true; // no expression means it's else
        }
        if (this.evalExpressionInCondition(expression, condition.text, `Condition '` + expression.text + `':`)) {
            return true;
        }
        return false;
    }
    /**
     * @private
     */
    evalExpressionInCondition(expressionContext, contentLine, errorPrefix = '') {
        const exp = templateExtensions_1.TemplateExtensions.trimExpression(expressionContext.text);
        const { value: result, error: error } = this.evalByAdaptiveExpression(exp, this.currentTarget().scope);
        if (this.lgOptions.strictMode && (error || !result)) {
            const templateName = this.currentTarget().templateName;
            if (this.evaluationTargetStack.length > 0) {
                this.evaluationTargetStack.pop();
            }
            Evaluator.checkExpressionResult(exp, error, result, templateName, contentLine, errorPrefix);
        }
        else if (error || !result) {
            return false;
        }
        return true;
    }
    /**
     * @private
     */
    evalExpression(exp, expressionContext, inlineContent = '', errorPrefix = '') {
        exp = templateExtensions_1.TemplateExtensions.trimExpression(exp);
        const { value: result, error: error } = this.evalByAdaptiveExpression(exp, this.currentTarget().scope);
        if (error || (result === undefined && this.lgOptions.strictMode)) {
            const templateName = this.currentTarget().templateName;
            if (this.evaluationTargetStack.length > 0) {
                this.evaluationTargetStack.pop();
            }
            Evaluator.checkExpressionResult(exp, error, result, templateName, inlineContent, errorPrefix);
        }
        return result;
    }
    /**
     * @private
     */
    evalByAdaptiveExpression(exp, scope) {
        const parse = this.expressionParser.parse(exp);
        const opt = new adaptive_expressions_1.Options();
        opt.nullSubstitution = this.lgOptions.nullSubstitution;
        opt.locale = this.lgOptions.locale;
        return parse.tryEvaluate(scope, opt);
    }
    /**
     * @private
     */
    getResourcePath(filePath) {
        let resourcePath;
        if (path.isAbsolute(filePath)) {
            resourcePath = filePath;
        }
        else {
            // relative path is not support in broswer environment
            const inBrowser = typeof window !== 'undefined';
            if (inBrowser) {
                throw new Error('relative path is not support in browser.');
            }
            const template = this.templateMap[this.currentTarget().templateName];
            const sourcePath = templateExtensions_1.TemplateExtensions.normalizePath(template.sourceRange.source);
            let baseFolder = __dirname;
            if (path.isAbsolute(sourcePath)) {
                baseFolder = path.dirname(sourcePath);
            }
            resourcePath = path.join(baseFolder, filePath);
        }
        return resourcePath;
    }
    /**
     * @private
     */
    checkTemplateReference(templateName, children) {
        if (!(templateName in this.templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const expectedArgsCount = this.templateMap[templateName].parameters.length;
        const actualArgsCount = children.length;
        if (actualArgsCount !== 0 && expectedArgsCount !== actualArgsCount) {
            throw new Error(templateErrors_1.TemplateErrors.argumentMismatch(templateName, expectedArgsCount, actualArgsCount));
        }
    }
    /**
     * @private
     */
    parseTemplateName(templateName) {
        if (!templateName) {
            throw new Error('template name is empty.');
        }
        if (templateName.endsWith(Evaluator.ReExecuteSuffix)) {
            return {
                reExecute: true,
                pureTemplateName: templateName.substr(0, templateName.length - Evaluator.ReExecuteSuffix.length),
            };
        }
        else {
            return { reExecute: false, pureTemplateName: templateName };
        }
    }
}
Evaluator.LGType = 'lgType';
Evaluator.activityAttachmentFunctionName = 'ActivityAttachment';
Evaluator.fromFileFunctionName = 'fromFile';
Evaluator.templateFunctionName = 'template';
Evaluator.isTemplateFunctionName = 'isTemplate';
Evaluator.expandTextFunctionName = 'expandText';
Evaluator.ReExecuteSuffix = '!';
exports.Evaluator = Evaluator;

}).call(this)}).call(this,"/node_modules/botbuilder-lg/lib")
},{"./customizedMemory":160,"./evaluationOptions":163,"./evaluationTarget":164,"./generated/LGTemplateParser":171,"./templateErrors":181,"./templateExtensions":183,"./templates":185,"adaptive-expressions":2,"antlr4ts/tree":134,"fs":187,"lodash":202,"path":204}],166:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const tree_1 = require("antlr4ts/tree");
const adaptive_expressions_1 = require("adaptive-expressions");
const lodash_1 = require("lodash");
const evaluationTarget_1 = require("./evaluationTarget");
const evaluator_1 = require("./evaluator");
const path = require("path");
const fs = require("fs");
const lp = require("./generated/LGTemplateParser");
const templateExtensions_1 = require("./templateExtensions");
const customizedMemory_1 = require("./customizedMemory");
const templateErrors_1 = require("./templateErrors");
const templates_1 = require("./templates");
/**
 * LG template expander.
 */
class Expander extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the Expander class.
     * @param templates Template list.
     * @param expressionParser Given expression parser.
     * @param opt Options for LG.
     */
    constructor(templates, opt) {
        super();
        this.evaluationTargetStack = [];
        this.customizedEvaluatorLookup = (baseLookup, isExpander) => (name) => {
            const standardFunction = baseLookup(name);
            if (standardFunction !== undefined) {
                return standardFunction;
            }
            const pointIndex = name.indexOf('.');
            if (pointIndex > 0) {
                const alias = name.substr(0, pointIndex);
                const realTemplate = this.templates.namedReferences[alias];
                if (realTemplate) {
                    const realTemplateName = name.substr(pointIndex + 1);
                    return new adaptive_expressions_1.ExpressionEvaluator(realTemplateName, adaptive_expressions_1.FunctionUtils.apply(this.evaluateWithTemplates(realTemplateName, realTemplate)), adaptive_expressions_1.ReturnType.Object);
                }
            }
            if (name.startsWith('lg.')) {
                name = name.substring(3);
            }
            const templateName = this.parseTemplateName(name).pureTemplateName;
            if (templateName in this.templateMap) {
                if (isExpander) {
                    return new adaptive_expressions_1.ExpressionEvaluator(templateName, adaptive_expressions_1.FunctionUtils.apply(this.templateExpander(name)), adaptive_expressions_1.ReturnType.Object, this.validTemplateReference);
                }
                else {
                    return new adaptive_expressions_1.ExpressionEvaluator(templateName, adaptive_expressions_1.FunctionUtils.apply(this.templateEvaluator(name)), adaptive_expressions_1.ReturnType.Object, this.validTemplateReference);
                }
            }
            if (name === evaluator_1.Evaluator.templateFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(evaluator_1.Evaluator.templateFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.templateFunction()), adaptive_expressions_1.ReturnType.Object, this.validateTemplateFunction);
            }
            if (name === evaluator_1.Evaluator.fromFileFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(evaluator_1.Evaluator.fromFileFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.fromFile()), adaptive_expressions_1.ReturnType.Object, (expr) => adaptive_expressions_1.FunctionUtils.validateOrder(expr, [adaptive_expressions_1.ReturnType.String], adaptive_expressions_1.ReturnType.String));
            }
            if (name === evaluator_1.Evaluator.activityAttachmentFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(evaluator_1.Evaluator.activityAttachmentFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.activityAttachment()), adaptive_expressions_1.ReturnType.Object, (expr) => adaptive_expressions_1.FunctionUtils.validateOrder(expr, undefined, adaptive_expressions_1.ReturnType.Object, adaptive_expressions_1.ReturnType.String));
            }
            if (name === evaluator_1.Evaluator.isTemplateFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(evaluator_1.Evaluator.isTemplateFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.isTemplate()), adaptive_expressions_1.ReturnType.Boolean, adaptive_expressions_1.FunctionUtils.validateUnaryString);
            }
            if (name === evaluator_1.Evaluator.expandTextFunctionName) {
                return new adaptive_expressions_1.ExpressionEvaluator(evaluator_1.Evaluator.expandTextFunctionName, adaptive_expressions_1.FunctionUtils.apply(this.expandText()), adaptive_expressions_1.ReturnType.Object, adaptive_expressions_1.FunctionUtils.validateUnaryString);
            }
            return undefined;
        };
        this.evaluateWithTemplates = (templateName, templates) => (args) => {
            const newScope = this.constructScope(templateName, args.slice(0), templates.allTemplates);
            return templates.evaluate(templateName, newScope);
        };
        this.templateEvaluator = (templateName) => (args) => {
            const newScope = this.constructScope(templateName, Array.from(args), this.templates.allTemplates);
            const value = this.expandTemplate(templateName, newScope);
            const randomNumber = adaptive_expressions_1.Extensions.randomNext(this.currentTarget().scope, 0, value.length);
            return value[randomNumber];
        };
        this.templateExpander = (templateName) => (args) => {
            const newScope = this.constructScope(templateName, Array.from(args), this.templates.allTemplates);
            return this.expandTemplate(templateName, newScope);
        };
        this.isTemplate = () => (args) => {
            const templateName = args[0].toString();
            return templateName in this.templateMap;
        };
        this.fromFile = () => (args) => {
            const filePath = templateExtensions_1.TemplateExtensions.normalizePath(args[0].toString());
            const resourcePath = this.getResourcePath(filePath);
            let format = evaluator_1.FileFormat.Evaluated;
            if (args.length > 1) {
                const expected = args[1].toString().toLowerCase();
                const currentFormat = Object.values(evaluator_1.FileFormat).find((f) => f.toLowerCase() === expected);
                if (currentFormat != null) {
                    format = currentFormat;
                }
            }
            let result;
            if (format === evaluator_1.FileFormat.Binary) {
                result = fs.readFileSync(resourcePath);
            }
            else if (format === evaluator_1.FileFormat.Raw) {
                result = fs.readFileSync(resourcePath, 'utf-8');
            }
            else {
                const stringContent = fs.readFileSync(resourcePath, 'utf-8');
                const newScope = this.evaluationTargetStack.length > 0 ? this.currentTarget().scope : undefined;
                const newTemplates = new templates_1.Templates(this.templates.allTemplates, undefined, undefined, undefined, undefined, undefined, this.templates.expressionParser, undefined, [], undefined, this.templates.namedReferences);
                result = newTemplates.evaluateText(stringContent, newScope, this.lgOptions);
            }
            return result;
        };
        this.expandText = () => (args) => {
            const stringContent = args[0].toString();
            const newScope = this.evaluationTargetStack.length > 0 ? this.currentTarget().scope : undefined;
            const newTemplates = new templates_1.Templates(this.templates.allTemplates, undefined, undefined, undefined, undefined, undefined, this.templates.expressionParser, undefined, [], undefined, this.templates.namedReferences);
            return newTemplates.evaluateText(stringContent, newScope, this.lgOptions);
        };
        this.activityAttachment = () => (args) => {
            return {
                [evaluator_1.Evaluator.LGType]: 'attachment',
                contenttype: args[1].toString(),
                content: args[0],
            };
        };
        this.templateFunction = () => (args) => {
            const templateName = args[0].toString();
            const newScope = this.constructScope(templateName, args.slice(1), this.templates.allTemplates);
            const value = this.expandTemplate(templateName, newScope);
            return value;
        };
        this.validateTemplateFunction = (expression) => {
            adaptive_expressions_1.FunctionUtils.validateAtLeastOne(expression);
            const children0 = expression.children[0];
            // Validate return type
            if ((children0.returnType & adaptive_expressions_1.ReturnType.Object) === 0 && (children0.returnType & adaptive_expressions_1.ReturnType.String) === 0) {
                throw new Error(templateErrors_1.TemplateErrors.invalidTemplateNameType);
            }
            // Validate more if the name is string constant
            if (children0.type === adaptive_expressions_1.ExpressionType.Constant) {
                const templateName = children0.value;
                this.checkTemplateReference(templateName, expression.children.slice(1));
            }
        };
        this.validTemplateReference = (expression) => {
            return this.checkTemplateReference(expression.type, expression.children);
        };
        this.templates = templates;
        this.templateMap = lodash_1.keyBy(templates.allTemplates, (t) => t.name);
        this.lgOptions = opt;
        // generate a new customzied expression parser by injecting the template as functions
        this.expanderExpressionParser = new adaptive_expressions_1.ExpressionParser(this.customizedEvaluatorLookup(templates.expressionParser.EvaluatorLookup, true));
        this.evaluatorExpressionParser = new adaptive_expressions_1.ExpressionParser(this.customizedEvaluatorLookup(templates.expressionParser.EvaluatorLookup, false));
    }
    /**
     * Expand the results of a template with given name and scope.
     * @param templateName Given template name.
     * @param scope Given scope.
     * @returns All possiable results.
     */
    expandTemplate(templateName, scope) {
        const memory = scope instanceof customizedMemory_1.CustomizedMemory ? scope : new customizedMemory_1.CustomizedMemory(scope);
        if (!(templateName in this.templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const templateTarget = new evaluationTarget_1.EvaluationTarget(templateName, memory);
        const currentEvulateId = templateTarget.getId();
        if (this.evaluationTargetStack.find((u) => u.getId() === currentEvulateId)) {
            throw new Error(`${templateErrors_1.TemplateErrors.loopDetected} ${this.evaluationTargetStack
                .reverse()
                .map((u) => u.templateName)
                .join(' => ')}`);
        }
        // Using a stack to track the evalution trace
        this.evaluationTargetStack.push(templateTarget);
        const result = this.visit(this.templateMap[templateName].templateBodyParseTree);
        this.evaluationTargetStack.pop();
        return result;
    }
    /**
     * Visit a parse tree produced by the normalBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal body.
     */
    visitNormalBody(ctx) {
        return this.visit(ctx.normalTemplateBody());
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal template body.
     */
    visitNormalTemplateBody(ctx) {
        const normalTemplateStrs = ctx.templateString();
        let result = [];
        for (const normalTemplateStr of normalTemplateStrs) {
            result = result.concat(this.visit(normalTemplateStr.normalTemplateString()));
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     */
    visitIfElseBody(ctx) {
        const ifRules = ctx.ifElseTemplateBody().ifConditionRule();
        for (const ifRule of ifRules) {
            if (this.evalCondition(ifRule.ifCondition()) && ifRule.normalTemplateBody() !== undefined) {
                return this.visit(ifRule.normalTemplateBody());
            }
        }
        return undefined;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the structured body.
     */
    visitStructuredBody(ctx) {
        const templateRefValues = new Map();
        const stb = ctx.structuredTemplateBody();
        const result = {};
        const typeName = stb.structuredBodyNameLine().STRUCTURE_NAME().text.trim();
        result.lgType = typeName;
        let expandedResult = [result];
        const bodys = stb.structuredBodyContentLine();
        for (const body of bodys) {
            const isKVPairBody = body.keyValueStructureLine() !== undefined;
            if (isKVPairBody) {
                const property = body.keyValueStructureLine().STRUCTURE_IDENTIFIER().text.toLowerCase();
                const value = this.visitStructureValue(body.keyValueStructureLine());
                if (value && value.length > 0) {
                    if (value.length > 1) {
                        const valueList = [];
                        for (const item of value) {
                            const id = templateExtensions_1.TemplateExtensions.newGuid();
                            if (item.length > 0) {
                                valueList.push(id);
                                templateRefValues.set(id, item);
                            }
                            else {
                                valueList.push([]);
                            }
                        }
                        expandedResult.forEach((x) => (x[property] = valueList));
                    }
                    else {
                        const id = templateExtensions_1.TemplateExtensions.newGuid();
                        if (value[0].length > 0) {
                            expandedResult.forEach((x) => (x[property] = id));
                            templateRefValues.set(id, value[0]);
                        }
                        else {
                            expandedResult.forEach((x) => (x[property] = []));
                        }
                    }
                }
            }
            else {
                const propertyObjects = [];
                this.evalExpression(body.expressionInStructure().text, body.expressionInStructure(), body.text).forEach((x) => {
                    if (x !== undefined && x !== null) {
                        propertyObjects.push(x);
                    }
                });
                const tempResult = [];
                for (const res of expandedResult) {
                    for (const propertyObject of propertyObjects) {
                        const tempRes = JSON.parse(JSON.stringify(res));
                        // Full reference to another structured template is limited to the structured template with same type
                        if (typeof propertyObject === 'object' &&
                            evaluator_1.Evaluator.LGType in propertyObject &&
                            propertyObject[evaluator_1.Evaluator.LGType].toString() === typeName) {
                            for (const key of Object.keys(propertyObject)) {
                                if (propertyObject.hasOwnProperty(key) && !(key in tempRes)) {
                                    tempRes[key] = propertyObject[key];
                                }
                            }
                        }
                        tempResult.push(tempRes);
                    }
                }
                expandedResult = tempResult;
            }
        }
        const exps = expandedResult;
        let finalResult = exps;
        for (const templateRefValueKey of templateRefValues.keys()) {
            const tempRes = [];
            for (const res of finalResult) {
                for (const refValue of templateRefValues.get(templateRefValueKey)) {
                    tempRes.push(JSON.parse(JSON.stringify(res).replace(templateRefValueKey, refValue.toString().replace(/"/g, '\\"'))));
                }
            }
            finalResult = tempRes;
        }
        return finalResult;
    }
    /**
     * @private
     */
    visitStructureValue(ctx) {
        const values = ctx.keyValueStructureValue();
        const result = [];
        for (const item of values) {
            if (templateExtensions_1.TemplateExtensions.isPureExpression(item)) {
                result.push(this.evalExpression(item.expressionInStructure(0).text, item.expressionInStructure(0), ctx.text));
            }
            else {
                let itemStringResult = [''];
                for (const child of item.children) {
                    if (child instanceof lp.ExpressionInStructureContext) {
                        const errorPrefix = `Property '${ctx.STRUCTURE_IDENTIFIER().text}':`;
                        itemStringResult = this.stringArrayConcat(itemStringResult, this.evalExpression(child.text, child, ctx.text, errorPrefix));
                    }
                    else {
                        const node = child;
                        switch (node.symbol.type) {
                            case lp.LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                itemStringResult = this.stringArrayConcat(itemStringResult, [
                                    templateExtensions_1.TemplateExtensions.evalEscape(node.text.replace(/\\\|/g, '|')),
                                ]);
                                break;
                            default:
                                itemStringResult = this.stringArrayConcat(itemStringResult, [node.text]);
                                break;
                        }
                    }
                }
                result.push(itemStringResult);
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The result of visiting the switch case body.
     */
    visitSwitchCaseBody(ctx) {
        const switchcaseNodes = ctx.switchCaseTemplateBody().switchCaseRule();
        const length = switchcaseNodes.length;
        const switchNode = switchcaseNodes[0];
        const switchExprs = switchNode.switchCaseStat().expression();
        const switchErrorPrefix = `Switch '${switchExprs[0].text}': `;
        const switchExprResult = this.evalExpression(switchExprs[0].text, switchExprs[0], switchcaseNodes[0].switchCaseStat().text, switchErrorPrefix);
        let idx = 0;
        for (const caseNode of switchcaseNodes) {
            if (idx === 0) {
                idx++;
                continue; //skip the first node which is a switch statement
            }
            if (idx === length - 1 && caseNode.switchCaseStat().DEFAULT()) {
                const defaultBody = caseNode.normalTemplateBody();
                if (defaultBody) {
                    return this.visit(defaultBody);
                }
                else {
                    return undefined;
                }
            }
            const caseExprs = caseNode.switchCaseStat().expression();
            const caseErrorPrefix = `Case '${caseExprs[0].text}': `;
            const caseExprResult = this.evalExpression(caseExprs[0].text, caseExprs[0], caseNode.switchCaseStat().text, caseErrorPrefix);
            if (adaptive_expressions_1.FunctionUtils.commonEquals(switchExprResult[0], caseExprResult[0])) {
                return this.visit(caseNode.normalTemplateBody());
            }
            idx++;
        }
        return undefined;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateString.
     * @param ctx The parse tree.
     */
    visitNormalTemplateString(ctx) {
        const prefixErrorMsg = templateExtensions_1.TemplateExtensions.getPrefixErrorMessage(ctx);
        let result = [undefined];
        for (const child of ctx.children) {
            if (child instanceof lp.ExpressionContext) {
                result = this.stringArrayConcat(result, this.evalExpression(child.text, child, ctx.text, prefixErrorMsg));
            }
            else {
                const node = child;
                switch (node.symbol.type) {
                    case lp.LGTemplateParser.MULTILINE_PREFIX:
                    case lp.LGTemplateParser.MULTILINE_SUFFIX:
                    case lp.LGTemplateParser.DASH:
                        break;
                    case lp.LGTemplateParser.ESCAPE_CHARACTER:
                        result = this.stringArrayConcat(result, [templateExtensions_1.TemplateExtensions.evalEscape(node.text)]);
                        break;
                    default: {
                        result = this.stringArrayConcat(result, [node.text]);
                        break;
                    }
                }
            }
        }
        return result;
    }
    /**
     * Constructs the scope for mapping the values of arguments to the parameters of the template.
     * @param templateName The template name to evaluate.
     * @param args Arguments to map to the template parameters.
     * @param allTemplates All templates.
     * @returns The current scope if the number of arguments is 0, otherwise, returns a CustomizedMemory
     * with the mapping of the parameter name to the argument value added to the scope.
     */
    constructScope(inputTemplateName, args, allTemplates) {
        const templateName = this.parseTemplateName(inputTemplateName).pureTemplateName;
        const templateMap = lodash_1.keyBy(allTemplates, (t) => t.name);
        if (!(templateName in templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const parameters = templateMap[templateName].parameters;
        const currentScope = this.currentTarget().scope;
        if (args.length === 0) {
            // no args to construct, inherit from current scope
            return currentScope;
        }
        const newScope = {};
        parameters.map((e, i) => (newScope[e] = args[i]));
        const memory = currentScope;
        if (!memory) {
            throw new Error(templateErrors_1.TemplateErrors.invalidMemory);
        }
        return new customizedMemory_1.CustomizedMemory(memory.globalMemory, adaptive_expressions_1.SimpleObjectMemory.wrap(newScope));
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty string array.
     */
    defaultResult() {
        return [];
    }
    /**
     * @private
     */
    currentTarget() {
        return this.evaluationTargetStack[this.evaluationTargetStack.length - 1];
    }
    /**
     * @private
     */
    evalCondition(condition) {
        const expression = condition.expression()[0];
        if (!expression) {
            return true; // no expression means it's else
        }
        if (this.evalExpressionInCondition(expression, condition.text, `Condition '` + expression.text + `':`)) {
            return true;
        }
        return false;
    }
    /**
     * @private
     */
    evalExpressionInCondition(expressionContext, contentLine, errorPrefix = '') {
        const exp = templateExtensions_1.TemplateExtensions.trimExpression(expressionContext.text);
        const { value: result, error: error } = this.evalByAdaptiveExpression(exp, this.currentTarget().scope);
        if (this.lgOptions.strictMode && (error || !result)) {
            const templateName = this.currentTarget().templateName;
            if (this.evaluationTargetStack.length > 0) {
                this.evaluationTargetStack.pop();
            }
            evaluator_1.Evaluator.checkExpressionResult(exp, error, result, templateName, contentLine, errorPrefix);
        }
        else if (error || !result) {
            return false;
        }
        return true;
    }
    /**
     * @private
     */
    evalExpression(exp, context, inlineContent = '', errorPrefix = '') {
        exp = templateExtensions_1.TemplateExtensions.trimExpression(exp);
        const { value: result, error: error } = this.evalByAdaptiveExpression(exp, this.currentTarget().scope);
        if (error || (result === undefined && this.lgOptions.strictMode)) {
            const templateName = this.currentTarget().templateName;
            if (this.evaluationTargetStack.length > 0) {
                this.evaluationTargetStack.pop();
            }
            evaluator_1.Evaluator.checkExpressionResult(exp, error, result, templateName, inlineContent, errorPrefix);
        }
        if (Array.isArray(result)) {
            return result;
        }
        return [result];
    }
    /**
     * @private
     */
    evalByAdaptiveExpression(exp, scope) {
        const expanderExpression = this.expanderExpressionParser.parse(exp);
        const evaluatorExpression = this.evaluatorExpressionParser.parse(exp);
        const parse = this.reconstructExpression(expanderExpression, evaluatorExpression, false);
        const opt = new adaptive_expressions_1.Options();
        opt.nullSubstitution = this.lgOptions.nullSubstitution;
        opt.locale = this.lgOptions.locale;
        return parse.tryEvaluate(scope, opt);
    }
    /**
     * @private
     */
    stringArrayConcat(array1, array2) {
        const result = [];
        for (const item1 of array1) {
            for (const item2 of array2) {
                if (item1 === undefined && item2 === undefined) {
                    result.push(undefined);
                }
                else {
                    result.push(this.stringConcat(item1, item2));
                }
            }
        }
        return result;
    }
    stringConcat(str1, str2) {
        if (!str1) {
            str1 = '';
        }
        if (!str2) {
            str2 = '';
        }
        return str1.toString() + str2.toString();
    }
    /**
     * @private
     */
    reconstructExpression(expanderExpression, evaluatorExpression, foundPrebuiltFunction) {
        if (this.templateMap[expanderExpression.type]) {
            if (foundPrebuiltFunction) {
                return evaluatorExpression;
            }
        }
        else {
            foundPrebuiltFunction = true;
        }
        for (let i = 0; i < expanderExpression.children.length; i++) {
            expanderExpression.children[i] = this.reconstructExpression(expanderExpression.children[i], evaluatorExpression.children[i], foundPrebuiltFunction);
        }
        return expanderExpression;
    }
    /**
     * @private
     */
    getResourcePath(filePath) {
        let resourcePath;
        if (path.isAbsolute(filePath)) {
            resourcePath = filePath;
        }
        else {
            // relative path is not support in broswer environment
            const inBrowser = typeof window !== 'undefined';
            if (inBrowser) {
                throw new Error('relative path is not support in browser.');
            }
            const template = this.templateMap[this.currentTarget().templateName];
            const sourcePath = templateExtensions_1.TemplateExtensions.normalizePath(template.sourceRange.source);
            let baseFolder = __dirname;
            if (path.isAbsolute(sourcePath)) {
                baseFolder = path.dirname(sourcePath);
            }
            resourcePath = path.join(baseFolder, filePath);
        }
        return resourcePath;
    }
    /**
     * @private
     */
    checkTemplateReference(templateName, children) {
        if (!(templateName in this.templateMap)) {
            throw new Error(templateErrors_1.TemplateErrors.templateNotExist(templateName));
        }
        const expectedArgsCount = this.templateMap[templateName].parameters.length;
        const actualArgsCount = children.length;
        if (actualArgsCount !== 0 && expectedArgsCount !== actualArgsCount) {
            throw new Error(templateErrors_1.TemplateErrors.argumentMismatch(templateName, expectedArgsCount, actualArgsCount));
        }
    }
    /**
     * @private
     */
    parseTemplateName(templateName) {
        if (!templateName) {
            throw new Error('template name is empty.');
        }
        if (templateName.endsWith(evaluator_1.Evaluator.ReExecuteSuffix)) {
            return {
                reExecute: true,
                pureTemplateName: templateName.substr(0, templateName.length - evaluator_1.Evaluator.ReExecuteSuffix.length),
            };
        }
        else {
            return { reExecute: false, pureTemplateName: templateName };
        }
    }
}
exports.Expander = Expander;

}).call(this)}).call(this,"/node_modules/botbuilder-lg/lib")
},{"./customizedMemory":160,"./evaluationTarget":164,"./evaluator":165,"./generated/LGTemplateParser":171,"./templateErrors":181,"./templateExtensions":183,"./templates":185,"adaptive-expressions":2,"antlr4ts/tree":134,"fs":187,"lodash":202,"path":204}],167:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const tree_1 = require("antlr4ts/tree");
const lodash_1 = require("lodash");
/**
 * Lg template extracter.
 */
class Extractor extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [Extractor](xref:botbuilder-lg.Extractor) class.
     * @param templates Template list.
     */
    constructor(templates) {
        super();
        this.templates = templates;
        this.templateMap = lodash_1.keyBy(templates, (t) => t.name);
    }
    /**
     * Extracts the templates and returns a map with their names and bodies.
     * @returns Map object with template names and bodies.
     */
    extract() {
        const result = [];
        this.templates.forEach((template) => {
            const templateResult = new Map();
            const templateName = template.name;
            const templateBodies = this.visit(template.templateBodyParseTree);
            let isNormalTemplate = true;
            templateBodies.forEach((templateBody) => (isNormalTemplate = isNormalTemplate && templateBody === undefined));
            if (isNormalTemplate) {
                const templates = [];
                for (const templateBody of templateBodies) {
                    templates.push(templateBody[0]);
                }
                templateResult.set(templateName, templates);
            }
            else {
                templateResult.set(templateName, templateBodies);
            }
            result.push(templateResult);
        });
        return result;
    }
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param context The parse tree.
     * @returns The result of visiting the normal template body.
     */
    visitNormalTemplateBody(context) {
        const result = new Map();
        for (const templateStr of context.templateString()) {
            result.set(templateStr.normalTemplateString().text, undefined);
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the structuredBody labeled alternative in LGTemplateParser.body.
     * @param context The parse tree.
     * @returns The result of visiting the structured body.
     */
    visitStructuredBody(context) {
        const result = new Map();
        const lineStart = '    ';
        const structName = context.structuredTemplateBody().structuredBodyNameLine().text;
        let fullStr = structName + '\n';
        context
            .structuredTemplateBody()
            .structuredBodyContentLine()
            .forEach((line) => (fullStr += lineStart + line.text + '\n'));
        fullStr += context.structuredTemplateBody().structuredBodyEndLine().text;
        result.set(fullStr, undefined);
        return result;
    }
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param context The parse tree.
     * @returns The result of visiting the if else body.
     */
    visitIfElseBody(context) {
        const result = new Map();
        const ifRules = context.ifElseTemplateBody().ifConditionRule();
        for (const ifRule of ifRules) {
            const expressions = ifRule.ifCondition().expression();
            const conditionNode = ifRule.ifCondition();
            const ifExpr = conditionNode.IF() !== undefined;
            const elseIfExpr = conditionNode.ELSEIF() !== undefined;
            const node = ifExpr
                ? conditionNode.IF()
                : elseIfExpr
                    ? conditionNode.ELSEIF()
                    : conditionNode.ELSE();
            const conditionLabel = node.text.toLowerCase();
            const childTemplateBodyResult = [];
            const templateBodies = this.visit(ifRule.normalTemplateBody());
            for (const templateBody of templateBodies) {
                childTemplateBodyResult.push(templateBody[0]);
            }
            if (expressions !== undefined && expressions.length > 0) {
                if (expressions[0].text !== undefined) {
                    result.set(conditionLabel.toUpperCase().concat(' ') + expressions[0].text, childTemplateBodyResult);
                }
            }
            else {
                result.set('ELSE:', childTemplateBodyResult);
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param context The parse tree.
     * @returns The result of visiting the switch case body.
     */
    visitSwitchCaseBody(context) {
        const result = new Map();
        const switchCaseNodes = context.switchCaseTemplateBody().switchCaseRule();
        for (const iterNode of switchCaseNodes) {
            const expressions = iterNode.switchCaseStat().expression();
            const switchCaseStat = iterNode.switchCaseStat();
            const switchExpr = switchCaseStat.SWITCH() !== undefined;
            const caseExpr = switchCaseStat.CASE() !== undefined;
            const node = switchExpr
                ? switchCaseStat.SWITCH()
                : caseExpr
                    ? switchCaseStat.CASE()
                    : switchCaseStat.DEFAULT();
            if (switchExpr) {
                continue;
            }
            const conditionLabel = node.text.toLowerCase();
            const childTemplateBodyResult = [];
            const templateBodies = this.visit(iterNode.normalTemplateBody());
            for (const templateBody of templateBodies) {
                childTemplateBodyResult.push(templateBody[0]);
            }
            if (caseExpr) {
                result.set(conditionLabel.toUpperCase().concat(' ') + expressions[0].text, childTemplateBodyResult);
            }
            else {
                result.set('DEFALUT:', childTemplateBodyResult);
            }
        }
        return result;
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty Map<string,  string[]>.
     */
    defaultResult() {
        return new Map();
    }
}
exports.Extractor = Extractor;

},{"antlr4ts/tree":134,"lodash":202}],168:[function(require,module,exports){
"use strict";
// Generated from src/LGFileLexer.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGFileLexer extends Lexer_1.Lexer {
    constructor(input) {
        super(input);
        // tslint:enable:no-trailing-whitespace
        this.startTemplate = false;
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(LGFileLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGFileLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "LGFileLexer.g4"; }
    // @Override
    get ruleNames() { return LGFileLexer.ruleNames; }
    // @Override
    get serializedATN() { return LGFileLexer._serializedATN; }
    // @Override
    get channelNames() { return LGFileLexer.channelNames; }
    // @Override
    get modeNames() { return LGFileLexer.modeNames; }
    // @Override
    action(_localctx, ruleIndex, actionIndex) {
        switch (ruleIndex) {
            case 5:
                this.TEMPLATE_NAME_LINE_action(_localctx, actionIndex);
                break;
        }
    }
    TEMPLATE_NAME_LINE_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 0:
                this.startTemplate = true;
                break;
        }
    }
    // @Override
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 2:
                return this.OPTION_sempred(_localctx, predIndex);
            case 3:
                return this.COMMENT_sempred(_localctx, predIndex);
            case 4:
                return this.IMPORT_sempred(_localctx, predIndex);
            case 5:
                return this.TEMPLATE_NAME_LINE_sempred(_localctx, predIndex);
            case 6:
                return this.INLINE_MULTILINE_sempred(_localctx, predIndex);
            case 7:
                return this.MULTILINE_PREFIX_sempred(_localctx, predIndex);
            case 8:
                return this.TEMPLATE_BODY_sempred(_localctx, predIndex);
            case 9:
                return this.INVALID_LINE_sempred(_localctx, predIndex);
        }
        return true;
    }
    OPTION_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return !this.startTemplate;
        }
        return true;
    }
    COMMENT_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return !this.startTemplate;
        }
        return true;
    }
    IMPORT_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 2:
                return !this.startTemplate;
        }
        return true;
    }
    TEMPLATE_NAME_LINE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return this._tokenStartCharPositionInLine == 0;
        }
        return true;
    }
    INLINE_MULTILINE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.startTemplate && this._tokenStartCharPositionInLine == 0;
        }
        return true;
    }
    MULTILINE_PREFIX_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 5:
                return this.startTemplate && this._tokenStartCharPositionInLine == 0;
        }
        return true;
    }
    TEMPLATE_BODY_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return this.startTemplate;
        }
        return true;
    }
    INVALID_LINE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 7:
                return !this.startTemplate;
        }
        return true;
    }
    static get _ATN() {
        if (!LGFileLexer.__ATN) {
            LGFileLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
        }
        return LGFileLexer.__ATN;
    }
}
LGFileLexer.NEWLINE = 1;
LGFileLexer.OPTION = 2;
LGFileLexer.COMMENT = 3;
LGFileLexer.IMPORT = 4;
LGFileLexer.TEMPLATE_NAME_LINE = 5;
LGFileLexer.INLINE_MULTILINE = 6;
LGFileLexer.MULTILINE_PREFIX = 7;
LGFileLexer.TEMPLATE_BODY = 8;
LGFileLexer.INVALID_LINE = 9;
LGFileLexer.MULTILINE_SUFFIX = 10;
LGFileLexer.ESCAPE_CHARACTER = 11;
LGFileLexer.MULTILINE_TEXT = 12;
LGFileLexer.MULTILINE_MODE = 1;
// tslint:disable:no-trailing-whitespace
LGFileLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
LGFileLexer.modeNames = [
    "DEFAULT_MODE", "MULTILINE_MODE",
];
LGFileLexer.ruleNames = [
    "WHITESPACE", "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE",
    "INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE",
    "MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT",
];
LGFileLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'```'",
];
LGFileLexer._SYMBOLIC_NAMES = [
    undefined, "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE",
    "INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE",
    "MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT",
];
LGFileLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);
LGFileLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0E\xD6\b\x01" +
    "\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
    "\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
    "\x04\r\t\r\x04\x0E\t\x0E\x03\x02\x03\x02\x03\x03\x05\x03\"\n\x03\x03\x03" +
    "\x03\x03\x03\x04\x07\x04\'\n\x04\f\x04\x0E\x04*\v\x04\x03\x04\x03\x04" +
    "\x07\x04.\n\x04\f\x04\x0E\x041\v\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06" +
    "\x047\n\x04\r\x04\x0E\x048\x03\x04\x03\x04\x03\x05\x07\x05>\n\x05\f\x05" +
    "\x0E\x05A\v\x05\x03\x05\x03\x05\x07\x05E\n\x05\f\x05\x0E\x05H\v\x05\x03" +
    "\x05\x03\x05\x03\x06\x07\x06M\n\x06\f\x06\x0E\x06P\v\x06\x03\x06\x03\x06" +
    "\x07\x06T\n\x06\f\x06\x0E\x06W\v\x06\x03\x06\x03\x06\x03\x06\x07\x06\\" +
    "\n\x06\f\x06\x0E\x06_\v\x06\x03\x06\x03\x06\x07\x06c\n\x06\f\x06\x0E\x06" +
    "f\v\x06\x03\x06\x03\x06\x03\x07\x07\x07k\n\x07\f\x07\x0E\x07n\v\x07\x03" +
    "\x07\x03\x07\x07\x07r\n\x07\f\x07\x0E\x07u\v\x07\x03\x07\x03\x07\x03\x07" +
    "\x03\b\x07\b{\n\b\f\b\x0E\b~\v\b\x03\b\x03\b\x07\b\x82\n\b\f\b\x0E\b\x85" +
    "\v\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b\x8C\n\b\f\b\x0E\b\x8F\v\b\x03" +
    "\b\x03\b\x03\b\x03\b\x03\b\x07\b\x96\n\b\f\b\x0E\b\x99\v\b\x03\b\x03\b" +
    "\x03\t\x07\t\x9E\n\t\f\t\x0E\t\xA1\v\t\x03\t\x03\t\x07\t\xA5\n\t\f\t\x0E" +
    "\t\xA8\v\t\x03\t\x03\t\x03\t\x03\t\x03\t\x07\t\xAF\n\t\f\t\x0E\t\xB2\v" +
    "\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x07\n\xBB\n\n\f\n\x0E\n\xBE" +
    "\v\n\x03\v\x03\v\x03\v\x07\v\xC3\n\v\f\v\x0E\v\xC6\v\v\x03\f\x03\f\x03" +
    "\f\x03\f\x03\f\x03\f\x03\r\x03\r\x05\r\xD0\n\r\x03\x0E\x06\x0E\xD3\n\x0E" +
    "\r\x0E\x0E\x0E\xD4\x05U]\xD4\x02\x02\x0F\x04\x02\x02\x06\x02\x03\b\x02" +
    "\x04\n\x02\x05\f\x02\x06\x0E\x02\x07\x10\x02\b\x12\x02\t\x14\x02\n\x16" +
    "\x02\v\x18\x02\f\x1A\x02\r\x1C\x02\x0E\x04\x02\x03\x06\x06\x02\v\v\"\"" +
    "\xA2\xA2\uFF01\uFF01\x04\x02\f\f\x0F\x0F\x06\x02\f\f\x0F\x0F]]__\x05\x02" +
    "\f\f\x0F\x0F*+\x02\xEA\x02\x06\x03\x02\x02\x02\x02\b\x03\x02\x02\x02\x02" +
    "\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10" +
    "\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16" +
    "\x03\x02\x02\x02\x03\x18\x03\x02\x02\x02\x03\x1A\x03\x02\x02\x02\x03\x1C" +
    "\x03\x02\x02\x02\x04\x1E\x03\x02\x02\x02\x06!\x03\x02\x02\x02\b(\x03\x02" +
    "\x02\x02\n?\x03\x02\x02\x02\fN\x03\x02\x02\x02\x0El\x03\x02\x02\x02\x10" +
    "|\x03\x02\x02\x02\x12\x9F\x03\x02\x02\x02\x14\xB7\x03\x02\x02\x02\x16" +
    "\xBF\x03\x02\x02\x02\x18\xC7\x03\x02\x02\x02\x1A\xCD\x03\x02\x02\x02\x1C" +
    "\xD2\x03\x02\x02\x02\x1E\x1F\t\x02\x02\x02\x1F\x05\x03\x02\x02\x02 \"" +
    "\x07\x0F\x02\x02! \x03\x02\x02\x02!\"\x03\x02\x02\x02\"#\x03\x02\x02\x02" +
    "#$\x07\f\x02\x02$\x07\x03\x02\x02\x02%\'\x05\x04\x02\x02&%\x03\x02\x02" +
    "\x02\'*\x03\x02\x02\x02(&\x03\x02\x02\x02()\x03\x02\x02\x02)+\x03\x02" +
    "\x02\x02*(\x03\x02\x02\x02+/\x07@\x02\x02,.\x05\x04\x02\x02-,\x03\x02" +
    "\x02\x02.1\x03\x02\x02\x02/-\x03\x02\x02\x02/0\x03\x02\x02\x0202\x03\x02" +
    "\x02\x021/\x03\x02\x02\x0223\x07#\x02\x0234\x07%\x02\x0246\x03\x02\x02" +
    "\x0257\n\x03\x02\x0265\x03\x02\x02\x0278\x03\x02\x02\x0286\x03\x02\x02" +
    "\x0289\x03\x02\x02\x029:\x03\x02\x02\x02:;\x06\x04\x02\x02;\t\x03\x02" +
    "\x02\x02<>\x05\x04\x02\x02=<\x03\x02\x02\x02>A\x03\x02\x02\x02?=\x03\x02" +
    "\x02\x02?@\x03\x02\x02\x02@B\x03\x02\x02\x02A?\x03\x02\x02\x02BF\x07@" +
    "\x02\x02CE\n\x03\x02\x02DC\x03\x02\x02\x02EH\x03\x02\x02\x02FD\x03\x02" +
    "\x02\x02FG\x03\x02\x02\x02GI\x03\x02\x02\x02HF\x03\x02\x02\x02IJ\x06\x05" +
    "\x03\x02J\v\x03\x02\x02\x02KM\x05\x04\x02\x02LK\x03\x02\x02\x02MP\x03" +
    "\x02\x02\x02NL\x03\x02\x02\x02NO\x03\x02\x02\x02OQ\x03\x02\x02\x02PN\x03" +
    "\x02\x02\x02QU\x07]\x02\x02RT\n\x04\x02\x02SR\x03\x02\x02\x02TW\x03\x02" +
    "\x02\x02UV\x03\x02\x02\x02US\x03\x02\x02\x02VX\x03\x02\x02\x02WU\x03\x02" +
    "\x02\x02XY\x07_\x02\x02Y]\x07*\x02\x02Z\\\n\x05\x02\x02[Z\x03\x02\x02" +
    "\x02\\_\x03\x02\x02\x02]^\x03\x02\x02\x02][\x03\x02\x02\x02^`\x03\x02" +
    "\x02\x02_]\x03\x02\x02\x02`d\x07+\x02\x02ac\n\x03\x02\x02ba\x03\x02\x02" +
    "\x02cf\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02\x02eg\x03\x02\x02" +
    "\x02fd\x03\x02\x02\x02gh\x06\x06\x04\x02h\r\x03\x02\x02\x02ik\x05\x04" +
    "\x02\x02ji\x03\x02\x02\x02kn\x03\x02\x02\x02lj\x03\x02\x02\x02lm\x03\x02" +
    "\x02\x02mo\x03\x02\x02\x02nl\x03\x02\x02\x02os\x07%\x02\x02pr\n\x03\x02" +
    "\x02qp\x03\x02\x02\x02ru\x03\x02\x02\x02sq\x03\x02\x02\x02st\x03\x02\x02" +
    "\x02tv\x03\x02\x02\x02us\x03\x02\x02\x02vw\x06\x07\x05\x02wx\b\x07\x02" +
    "\x02x\x0F\x03\x02\x02\x02y{\x05\x04\x02\x02zy\x03\x02\x02\x02{~\x03\x02" +
    "\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02\x02}\x7F\x03\x02\x02\x02~|\x03" +
    "\x02\x02\x02\x7F\x83\x07/\x02\x02\x80\x82\x05\x04\x02\x02\x81\x80\x03" +
    "\x02\x02\x02\x82\x85\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84\x03" +
    "\x02\x02\x02\x84\x86\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x86\x87\x07" +
    "b\x02\x02\x87\x88\x07b\x02\x02\x88\x89\x07b\x02\x02\x89\x8D\x03\x02\x02" +
    "\x02\x8A\x8C\n\x03\x02\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8F\x03\x02\x02" +
    "\x02\x8D\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x90\x03\x02\x02" +
    "\x02\x8F\x8D\x03\x02\x02\x02\x90\x91\x07b\x02\x02\x91\x92\x07b\x02\x02" +
    "\x92\x93\x07b\x02\x02\x93\x97\x03\x02\x02\x02\x94\x96\x05\x04\x02\x02" +
    "\x95\x94\x03\x02\x02\x02\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02" +
    "\x97\x98\x03\x02\x02\x02\x98\x9A\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02" +
    "\x9A\x9B\x06\b\x06\x02\x9B\x11\x03\x02\x02\x02\x9C\x9E\x05\x04\x02\x02" +
    "\x9D\x9C\x03\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02" +
    "\x9F\xA0\x03\x02\x02\x02\xA0\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02" +
    "\xA2\xA6\x07/\x02\x02\xA3\xA5\x05\x04\x02\x02\xA4\xA3\x03\x02\x02\x02" +
    "\xA5\xA8\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02" +
    "\xA7\xA9\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA9\xAA\x07b\x02\x02" +
    "\xAA\xAB\x07b\x02\x02\xAB\xAC\x07b\x02\x02\xAC\xB0\x03\x02\x02\x02\xAD" +
    "\xAF\n\x03\x02\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB2\x03\x02\x02\x02\xB0" +
    "\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB3\x03\x02\x02\x02\xB2" +
    "\xB0\x03\x02\x02\x02\xB3\xB4\x06\t\x07\x02\xB4\xB5\x03\x02\x02\x02\xB5" +
    "\xB6\b\t\x03\x02\xB6\x13\x03\x02\x02\x02\xB7\xB8\n\x03\x02\x02\xB8\xBC" +
    "\x06\n\b\x02\xB9\xBB\n\x03\x02\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBE\x03" +
    "\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\x15\x03" +
    "\x02\x02\x02\xBE\xBC\x03\x02\x02\x02\xBF\xC0\n\x03\x02\x02\xC0\xC4\x06" +
    "\v\t\x02\xC1\xC3\n\x03\x02\x02\xC2\xC1\x03\x02\x02\x02\xC3\xC6\x03\x02" +
    "\x02\x02\xC4\xC2\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\x17\x03\x02" +
    "\x02\x02\xC6\xC4\x03\x02\x02\x02\xC7\xC8\x07b\x02\x02\xC8\xC9\x07b\x02" +
    "\x02\xC9\xCA\x07b\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xCC\b\f\x04\x02" +
    "\xCC\x19\x03\x02\x02\x02\xCD\xCF\x07^\x02\x02\xCE\xD0\n\x03\x02\x02\xCF" +
    "\xCE\x03\x02\x02\x02\xCF\xD0\x03\x02\x02\x02\xD0\x1B\x03\x02\x02\x02\xD1" +
    "\xD3\v\x02\x02\x02\xD2\xD1\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4" +
    "\xD5\x03\x02\x02\x02\xD4\xD2\x03\x02\x02\x02\xD5\x1D\x03\x02\x02\x02\x1B" +
    "\x02\x03!(/8?FNU]dls|\x83\x8D\x97\x9F\xA6\xB0\xBC\xC4\xCF\xD4\x05\x03" +
    "\x07\x02\x07\x03\x02\x06\x02\x02";
exports.LGFileLexer = LGFileLexer;

},{"antlr4ts/Lexer":21,"antlr4ts/VocabularyImpl":39,"antlr4ts/atn/ATNDeserializer":44,"antlr4ts/atn/LexerATNSimulator":65,"antlr4ts/misc/Utils":126}],169:[function(require,module,exports){
"use strict";
// Generated from src/LGFileParser.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGFileParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(LGFileParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGFileParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "LGFileParser.g4"; }
    // @Override
    get ruleNames() { return LGFileParser.ruleNames; }
    // @Override
    get serializedATN() { return LGFileParser._serializedATN; }
    // @RuleVersion(0)
    file() {
        let _localctx = new FileContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, LGFileParser.RULE_file);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 21;
                this._errHandler.sync(this);
                _alt = 1 + 1;
                do {
                    switch (_alt) {
                        case 1 + 1:
                            {
                                {
                                    this.state = 20;
                                    this.paragraph();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 23;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
                } while (_alt !== 1 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                this.state = 25;
                this.match(LGFileParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    paragraph() {
        let _localctx = new ParagraphContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, LGFileParser.RULE_paragraph);
        try {
            this.state = 34;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGFileParser.TEMPLATE_NAME_LINE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 27;
                        this.templateDefinition();
                    }
                    break;
                case LGFileParser.IMPORT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 28;
                        this.importDefinition();
                    }
                    break;
                case LGFileParser.OPTION:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 29;
                        this.optionDefinition();
                    }
                    break;
                case LGFileParser.INVALID_LINE:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 30;
                        this.errorDefinition();
                    }
                    break;
                case LGFileParser.COMMENT:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 31;
                        this.commentDefinition();
                    }
                    break;
                case LGFileParser.NEWLINE:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 32;
                        this.match(LGFileParser.NEWLINE);
                    }
                    break;
                case LGFileParser.EOF:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 33;
                        this.match(LGFileParser.EOF);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    commentDefinition() {
        let _localctx = new CommentDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, LGFileParser.RULE_commentDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 36;
                this.match(LGFileParser.COMMENT);
                this.state = 38;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                    case 1:
                        {
                            this.state = 37;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    importDefinition() {
        let _localctx = new ImportDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, LGFileParser.RULE_importDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 40;
                this.match(LGFileParser.IMPORT);
                this.state = 42;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                    case 1:
                        {
                            this.state = 41;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    optionDefinition() {
        let _localctx = new OptionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, LGFileParser.RULE_optionDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 44;
                this.match(LGFileParser.OPTION);
                this.state = 46;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                    case 1:
                        {
                            this.state = 45;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorDefinition() {
        let _localctx = new ErrorDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, LGFileParser.RULE_errorDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 48;
                this.match(LGFileParser.INVALID_LINE);
                this.state = 50;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {
                    case 1:
                        {
                            this.state = 49;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateDefinition() {
        let _localctx = new TemplateDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, LGFileParser.RULE_templateDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 52;
                this.templateNameLine();
                this.state = 53;
                this.templateBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateNameLine() {
        let _localctx = new TemplateNameLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, LGFileParser.RULE_templateNameLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 55;
                this.match(LGFileParser.TEMPLATE_NAME_LINE);
                this.state = 57;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 56;
                            this.match(LGFileParser.NEWLINE);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateBody() {
        let _localctx = new TemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, LGFileParser.RULE_templateBody);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 62;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 59;
                                this.templateBodyLine();
                            }
                        }
                    }
                    this.state = 64;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 7, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateBodyLine() {
        let _localctx = new TemplateBodyLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, LGFileParser.RULE_templateBodyLine);
        let _la;
        try {
            this.state = 83;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGFileParser.INLINE_MULTILINE:
                case LGFileParser.MULTILINE_PREFIX:
                case LGFileParser.TEMPLATE_BODY:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 77;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case LGFileParser.TEMPLATE_BODY:
                                    {
                                        this.state = 65;
                                        this.match(LGFileParser.TEMPLATE_BODY);
                                    }
                                    break;
                                case LGFileParser.INLINE_MULTILINE:
                                    {
                                        this.state = 66;
                                        this.match(LGFileParser.INLINE_MULTILINE);
                                    }
                                    break;
                                case LGFileParser.MULTILINE_PREFIX:
                                    {
                                        {
                                            this.state = 67;
                                            this.match(LGFileParser.MULTILINE_PREFIX);
                                            this.state = 71;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === LGFileParser.ESCAPE_CHARACTER || _la === LGFileParser.MULTILINE_TEXT) {
                                                {
                                                    {
                                                        this.state = 68;
                                                        _la = this._input.LA(1);
                                                        if (!(_la === LGFileParser.ESCAPE_CHARACTER || _la === LGFileParser.MULTILINE_TEXT)) {
                                                            this._errHandler.recoverInline(this);
                                                        }
                                                        else {
                                                            if (this._input.LA(1) === Token_1.Token.EOF) {
                                                                this.matchedEOF = true;
                                                            }
                                                            this._errHandler.reportMatch(this);
                                                            this.consume();
                                                        }
                                                    }
                                                }
                                                this.state = 73;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 75;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === LGFileParser.MULTILINE_SUFFIX) {
                                                {
                                                    this.state = 74;
                                                    this.match(LGFileParser.MULTILINE_SUFFIX);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 80;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 79;
                                        this.match(LGFileParser.NEWLINE);
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case LGFileParser.NEWLINE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 82;
                        this.match(LGFileParser.NEWLINE);
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!LGFileParser.__ATN) {
            LGFileParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGFileParser._serializedATN));
        }
        return LGFileParser.__ATN;
    }
}
LGFileParser.NEWLINE = 1;
LGFileParser.OPTION = 2;
LGFileParser.COMMENT = 3;
LGFileParser.IMPORT = 4;
LGFileParser.TEMPLATE_NAME_LINE = 5;
LGFileParser.INLINE_MULTILINE = 6;
LGFileParser.MULTILINE_PREFIX = 7;
LGFileParser.TEMPLATE_BODY = 8;
LGFileParser.INVALID_LINE = 9;
LGFileParser.MULTILINE_SUFFIX = 10;
LGFileParser.ESCAPE_CHARACTER = 11;
LGFileParser.MULTILINE_TEXT = 12;
LGFileParser.RULE_file = 0;
LGFileParser.RULE_paragraph = 1;
LGFileParser.RULE_commentDefinition = 2;
LGFileParser.RULE_importDefinition = 3;
LGFileParser.RULE_optionDefinition = 4;
LGFileParser.RULE_errorDefinition = 5;
LGFileParser.RULE_templateDefinition = 6;
LGFileParser.RULE_templateNameLine = 7;
LGFileParser.RULE_templateBody = 8;
LGFileParser.RULE_templateBodyLine = 9;
// tslint:disable:no-trailing-whitespace
LGFileParser.ruleNames = [
    "file", "paragraph", "commentDefinition", "importDefinition", "optionDefinition",
    "errorDefinition", "templateDefinition", "templateNameLine", "templateBody",
    "templateBodyLine",
];
LGFileParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, "'```'",
];
LGFileParser._SYMBOLIC_NAMES = [
    undefined, "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE",
    "INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE",
    "MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT",
];
LGFileParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGFileParser._LITERAL_NAMES, LGFileParser._SYMBOLIC_NAMES, []);
LGFileParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\x0EX\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x06\x02\x18\n\x02" +
    "\r\x02\x0E\x02\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
    "\x03\x03\x03\x03\x03\x05\x03%\n\x03\x03\x04\x03\x04\x05\x04)\n\x04\x03" +
    "\x05\x03\x05\x05\x05-\n\x05\x03\x06\x03\x06\x05\x061\n\x06\x03\x07\x03" +
    "\x07\x05\x075\n\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x05\t<\n\t\x03\n\x07" +
    "\n?\n\n\f\n\x0E\nB\v\n\x03\v\x03\v\x03\v\x03\v\x07\vH\n\v\f\v\x0E\vK\v" +
    "\v\x03\v\x05\vN\n\v\x05\vP\n\v\x03\v\x05\vS\n\v\x03\v\x05\vV\n\v\x03\v" +
    "\x03\x19\x02\x02\f\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10" +
    "\x02\x12\x02\x14\x02\x02\x03\x03\x02\r\x0E\x02`\x02\x17\x03\x02\x02\x02" +
    "\x04$\x03\x02\x02\x02\x06&\x03\x02\x02\x02\b*\x03\x02\x02\x02\n.\x03\x02" +
    "\x02\x02\f2\x03\x02\x02\x02\x0E6\x03\x02\x02\x02\x109\x03\x02\x02\x02" +
    "\x12@\x03\x02\x02\x02\x14U\x03\x02\x02\x02\x16\x18\x05\x04\x03\x02\x17" +
    "\x16\x03\x02\x02\x02\x18\x19\x03\x02\x02\x02\x19\x1A\x03\x02\x02\x02\x19" +
    "\x17\x03\x02\x02\x02\x1A\x1B\x03\x02\x02\x02\x1B\x1C\x07\x02\x02\x03\x1C" +
    "\x03\x03\x02\x02\x02\x1D%\x05\x0E\b\x02\x1E%\x05\b\x05\x02\x1F%\x05\n" +
    "\x06\x02 %\x05\f\x07\x02!%\x05\x06\x04\x02\"%\x07\x03\x02\x02#%\x07\x02" +
    "\x02\x03$\x1D\x03\x02\x02\x02$\x1E\x03\x02\x02\x02$\x1F\x03\x02\x02\x02" +
    "$ \x03\x02\x02\x02$!\x03\x02\x02\x02$\"\x03\x02\x02\x02$#\x03\x02\x02" +
    "\x02%\x05\x03\x02\x02\x02&(\x07\x05\x02\x02\')\x07\x03\x02\x02(\'\x03" +
    "\x02\x02\x02()\x03\x02\x02\x02)\x07\x03\x02\x02\x02*,\x07\x06\x02\x02" +
    "+-\x07\x03\x02\x02,+\x03\x02\x02\x02,-\x03\x02\x02\x02-\t\x03\x02\x02" +
    "\x02.0\x07\x04\x02\x02/1\x07\x03\x02\x020/\x03\x02\x02\x0201\x03\x02\x02" +
    "\x021\v\x03\x02\x02\x0224\x07\v\x02\x0235\x07\x03\x02\x0243\x03\x02\x02" +
    "\x0245\x03\x02\x02\x025\r\x03\x02\x02\x0267\x05\x10\t\x0278\x05\x12\n" +
    "\x028\x0F\x03\x02\x02\x029;\x07\x07\x02\x02:<\x07\x03\x02\x02;:\x03\x02" +
    "\x02\x02;<\x03\x02\x02\x02<\x11\x03\x02\x02\x02=?\x05\x14\v\x02>=\x03" +
    "\x02\x02\x02?B\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02A\x13" +
    "\x03\x02\x02\x02B@\x03\x02\x02\x02CP\x07\n\x02\x02DP\x07\b\x02\x02EI\x07" +
    "\t\x02\x02FH\t\x02\x02\x02GF\x03\x02\x02\x02HK\x03\x02\x02\x02IG\x03\x02" +
    "\x02\x02IJ\x03\x02\x02\x02JM\x03\x02\x02\x02KI\x03\x02\x02\x02LN\x07\f" +
    "\x02\x02ML\x03\x02\x02\x02MN\x03\x02\x02\x02NP\x03\x02\x02\x02OC\x03\x02" +
    "\x02\x02OD\x03\x02\x02\x02OE\x03\x02\x02\x02PR\x03\x02\x02\x02QS\x07\x03" +
    "\x02\x02RQ\x03\x02\x02\x02RS\x03\x02\x02\x02SV\x03\x02\x02\x02TV\x07\x03" +
    "\x02\x02UO\x03\x02\x02\x02UT\x03\x02\x02\x02V\x15\x03\x02\x02\x02\x0F" +
    "\x19$(,04;@IMORU";
exports.LGFileParser = LGFileParser;
class FileContext extends ParserRuleContext_1.ParserRuleContext {
    EOF() { return this.getToken(LGFileParser.EOF, 0); }
    paragraph(i) {
        if (i === undefined) {
            return this.getRuleContexts(ParagraphContext);
        }
        else {
            return this.getRuleContext(i, ParagraphContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_file; }
    // @Override
    enterRule(listener) {
        if (listener.enterFile) {
            listener.enterFile(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFile) {
            listener.exitFile(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFile) {
            return visitor.visitFile(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.FileContext = FileContext;
class ParagraphContext extends ParserRuleContext_1.ParserRuleContext {
    templateDefinition() {
        return this.tryGetRuleContext(0, TemplateDefinitionContext);
    }
    importDefinition() {
        return this.tryGetRuleContext(0, ImportDefinitionContext);
    }
    optionDefinition() {
        return this.tryGetRuleContext(0, OptionDefinitionContext);
    }
    errorDefinition() {
        return this.tryGetRuleContext(0, ErrorDefinitionContext);
    }
    commentDefinition() {
        return this.tryGetRuleContext(0, CommentDefinitionContext);
    }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    EOF() { return this.tryGetToken(LGFileParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_paragraph; }
    // @Override
    enterRule(listener) {
        if (listener.enterParagraph) {
            listener.enterParagraph(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParagraph) {
            listener.exitParagraph(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParagraph) {
            return visitor.visitParagraph(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ParagraphContext = ParagraphContext;
class CommentDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    COMMENT() { return this.getToken(LGFileParser.COMMENT, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_commentDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterCommentDefinition) {
            listener.enterCommentDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCommentDefinition) {
            listener.exitCommentDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCommentDefinition) {
            return visitor.visitCommentDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.CommentDefinitionContext = CommentDefinitionContext;
class ImportDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    IMPORT() { return this.getToken(LGFileParser.IMPORT, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_importDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterImportDefinition) {
            listener.enterImportDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImportDefinition) {
            listener.exitImportDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitImportDefinition) {
            return visitor.visitImportDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ImportDefinitionContext = ImportDefinitionContext;
class OptionDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    OPTION() { return this.getToken(LGFileParser.OPTION, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_optionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterOptionDefinition) {
            listener.enterOptionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOptionDefinition) {
            listener.exitOptionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOptionDefinition) {
            return visitor.visitOptionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.OptionDefinitionContext = OptionDefinitionContext;
class ErrorDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    INVALID_LINE() { return this.getToken(LGFileParser.INVALID_LINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_errorDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorDefinition) {
            listener.enterErrorDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorDefinition) {
            listener.exitErrorDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorDefinition) {
            return visitor.visitErrorDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorDefinitionContext = ErrorDefinitionContext;
class TemplateDefinitionContext extends ParserRuleContext_1.ParserRuleContext {
    templateNameLine() {
        return this.getRuleContext(0, TemplateNameLineContext);
    }
    templateBody() {
        return this.getRuleContext(0, TemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateDefinition) {
            listener.enterTemplateDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateDefinition) {
            listener.exitTemplateDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateDefinition) {
            return visitor.visitTemplateDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateDefinitionContext = TemplateDefinitionContext;
class TemplateNameLineContext extends ParserRuleContext_1.ParserRuleContext {
    TEMPLATE_NAME_LINE() { return this.getToken(LGFileParser.TEMPLATE_NAME_LINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateNameLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateNameLine) {
            listener.enterTemplateNameLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateNameLine) {
            listener.exitTemplateNameLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateNameLine) {
            return visitor.visitTemplateNameLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateNameLineContext = TemplateNameLineContext;
class TemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    templateBodyLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(TemplateBodyLineContext);
        }
        else {
            return this.getRuleContext(i, TemplateBodyLineContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateBody) {
            listener.enterTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateBody) {
            listener.exitTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateBody) {
            return visitor.visitTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateBodyContext = TemplateBodyContext;
class TemplateBodyLineContext extends ParserRuleContext_1.ParserRuleContext {
    TEMPLATE_BODY() { return this.tryGetToken(LGFileParser.TEMPLATE_BODY, 0); }
    INLINE_MULTILINE() { return this.tryGetToken(LGFileParser.INLINE_MULTILINE, 0); }
    NEWLINE() { return this.tryGetToken(LGFileParser.NEWLINE, 0); }
    MULTILINE_PREFIX() { return this.tryGetToken(LGFileParser.MULTILINE_PREFIX, 0); }
    MULTILINE_SUFFIX() { return this.tryGetToken(LGFileParser.MULTILINE_SUFFIX, 0); }
    MULTILINE_TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGFileParser.MULTILINE_TEXT);
        }
        else {
            return this.getToken(LGFileParser.MULTILINE_TEXT, i);
        }
    }
    ESCAPE_CHARACTER(i) {
        if (i === undefined) {
            return this.getTokens(LGFileParser.ESCAPE_CHARACTER);
        }
        else {
            return this.getToken(LGFileParser.ESCAPE_CHARACTER, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGFileParser.RULE_templateBodyLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateBodyLine) {
            listener.enterTemplateBodyLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateBodyLine) {
            listener.exitTemplateBodyLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateBodyLine) {
            return visitor.visitTemplateBodyLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateBodyLineContext = TemplateBodyLineContext;

},{"antlr4ts/NoViableAltException":25,"antlr4ts/Parser":26,"antlr4ts/ParserRuleContext":28,"antlr4ts/RecognitionException":31,"antlr4ts/Token":37,"antlr4ts/VocabularyImpl":39,"antlr4ts/atn/ATN":40,"antlr4ts/atn/ATNDeserializer":44,"antlr4ts/atn/ParserATNSimulator":81,"antlr4ts/misc/Utils":126}],170:[function(require,module,exports){
"use strict";
// Generated from src/LGTemplateLexer.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGTemplateLexer extends Lexer_1.Lexer {
    constructor(input) {
        super(input);
        // tslint:enable:no-trailing-whitespace
        this.ignoreWS = true; // usually we ignore whitespace, but inside template, whitespace is significant
        this.beginOfTemplateBody = true; // whether we are at the begining of template body
        this.inMultiline = false; // whether we are in multiline
        this.beginOfTemplateLine = false; // weather we are at the begining of template string
        this.inStructuredValue = false; // weather we are in the structure value
        this.beginOfStructureProperty = false; // weather we are at the begining of structure property
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(LGTemplateLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGTemplateLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "LGTemplateLexer.g4"; }
    // @Override
    get ruleNames() { return LGTemplateLexer.ruleNames; }
    // @Override
    get serializedATN() { return LGTemplateLexer._serializedATN; }
    // @Override
    get channelNames() { return LGTemplateLexer.channelNames; }
    // @Override
    get modeNames() { return LGTemplateLexer.modeNames; }
    // @Override
    action(_localctx, ruleIndex, actionIndex) {
        switch (ruleIndex) {
            case 25:
                this.DASH_action(_localctx, actionIndex);
                break;
            case 26:
                this.LEFT_SQUARE_BRACKET_action(_localctx, actionIndex);
                break;
            case 27:
                this.INVALID_TOKEN_action(_localctx, actionIndex);
                break;
            case 29:
                this.MULTILINE_PREFIX_action(_localctx, actionIndex);
                break;
            case 30:
                this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
                break;
            case 31:
                this.IF_action(_localctx, actionIndex);
                break;
            case 32:
                this.ELSEIF_action(_localctx, actionIndex);
                break;
            case 33:
                this.ELSE_action(_localctx, actionIndex);
                break;
            case 34:
                this.SWITCH_action(_localctx, actionIndex);
                break;
            case 35:
                this.CASE_action(_localctx, actionIndex);
                break;
            case 36:
                this.DEFAULT_action(_localctx, actionIndex);
                break;
            case 37:
                this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
                break;
            case 38:
                this.EXPRESSION_action(_localctx, actionIndex);
                break;
            case 39:
                this.TEXT_action(_localctx, actionIndex);
                break;
            case 40:
                this.MULTILINE_SUFFIX_action(_localctx, actionIndex);
                break;
            case 45:
                this.NEWLINE_IN_STRUCTURE_NAME_action(_localctx, actionIndex);
                break;
            case 50:
                this.STRUCTURED_NEWLINE_action(_localctx, actionIndex);
                break;
            case 52:
                this.STRUCTURE_IDENTIFIER_action(_localctx, actionIndex);
                break;
            case 53:
                this.STRUCTURE_EQUALS_action(_localctx, actionIndex);
                break;
            case 54:
                this.STRUCTURE_OR_MARK_action(_localctx, actionIndex);
                break;
            case 55:
                this.ESCAPE_CHARACTER_IN_STRUCTURE_BODY_action(_localctx, actionIndex);
                break;
            case 56:
                this.EXPRESSION_IN_STRUCTURE_BODY_action(_localctx, actionIndex);
                break;
            case 57:
                this.TEXT_IN_STRUCTURE_BODY_action(_localctx, actionIndex);
                break;
        }
    }
    DASH_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 0:
                this.beginOfTemplateLine = true;
                this.beginOfTemplateBody = false;
                break;
        }
    }
    LEFT_SQUARE_BRACKET_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 1:
                this.beginOfTemplateBody = false;
                break;
        }
    }
    INVALID_TOKEN_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 2:
                this.beginOfTemplateBody = false;
                break;
        }
    }
    MULTILINE_PREFIX_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 3:
                this.inMultiline = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    NEWLINE_IN_BODY_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 4:
                this.ignoreWS = true;
                break;
        }
    }
    IF_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 5:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    ELSEIF_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 6:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    ELSE_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 7:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    SWITCH_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 8:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    CASE_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 9:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    DEFAULT_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 10:
                this.ignoreWS = true;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    ESCAPE_CHARACTER_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 11:
                this.ignoreWS = false;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    EXPRESSION_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 12:
                this.ignoreWS = false;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    TEXT_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 13:
                this.ignoreWS = false;
                this.beginOfTemplateLine = false;
                break;
        }
    }
    MULTILINE_SUFFIX_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 14:
                this.inMultiline = false;
                break;
        }
    }
    NEWLINE_IN_STRUCTURE_NAME_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 15:
                this.ignoreWS = true;
                break;
            case 16:
                this.beginOfStructureProperty = true;
                break;
        }
    }
    STRUCTURED_NEWLINE_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 17:
                this.ignoreWS = true;
                this.inStructuredValue = false;
                this.beginOfStructureProperty = true;
                break;
        }
    }
    STRUCTURE_IDENTIFIER_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 18:
                this.beginOfStructureProperty = false;
                break;
        }
    }
    STRUCTURE_EQUALS_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 19:
                this.inStructuredValue = true;
                break;
        }
    }
    STRUCTURE_OR_MARK_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 20:
                this.ignoreWS = true;
                break;
        }
    }
    ESCAPE_CHARACTER_IN_STRUCTURE_BODY_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 21:
                this.ignoreWS = false;
                break;
        }
    }
    EXPRESSION_IN_STRUCTURE_BODY_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 22:
                this.ignoreWS = false;
                break;
        }
    }
    TEXT_IN_STRUCTURE_BODY_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 23:
                this.ignoreWS = false;
                this.beginOfStructureProperty = false;
                break;
        }
    }
    // @Override
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 26:
                return this.LEFT_SQUARE_BRACKET_sempred(_localctx, predIndex);
            case 28:
                return this.WS_IN_BODY_sempred(_localctx, predIndex);
            case 29:
                return this.MULTILINE_PREFIX_sempred(_localctx, predIndex);
            case 31:
                return this.IF_sempred(_localctx, predIndex);
            case 32:
                return this.ELSEIF_sempred(_localctx, predIndex);
            case 33:
                return this.ELSE_sempred(_localctx, predIndex);
            case 34:
                return this.SWITCH_sempred(_localctx, predIndex);
            case 35:
                return this.CASE_sempred(_localctx, predIndex);
            case 36:
                return this.DEFAULT_sempred(_localctx, predIndex);
            case 48:
                return this.STRUCTURED_COMMENTS_sempred(_localctx, predIndex);
            case 49:
                return this.WS_IN_STRUCTURE_BODY_sempred(_localctx, predIndex);
            case 51:
                return this.STRUCTURED_BODY_END_sempred(_localctx, predIndex);
            case 52:
                return this.STRUCTURE_IDENTIFIER_sempred(_localctx, predIndex);
            case 53:
                return this.STRUCTURE_EQUALS_sempred(_localctx, predIndex);
        }
        return true;
    }
    LEFT_SQUARE_BRACKET_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.beginOfTemplateBody;
        }
        return true;
    }
    WS_IN_BODY_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.ignoreWS;
        }
        return true;
    }
    MULTILINE_PREFIX_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 2:
                return !this.inMultiline && this.beginOfTemplateLine;
        }
        return true;
    }
    IF_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    ELSEIF_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 4:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    ELSE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 5:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    SWITCH_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    CASE_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 7:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    DEFAULT_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 8:
                return this.beginOfTemplateLine;
        }
        return true;
    }
    STRUCTURED_COMMENTS_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 9:
                return !this.inStructuredValue && this.beginOfStructureProperty;
        }
        return true;
    }
    WS_IN_STRUCTURE_BODY_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 10:
                return this.ignoreWS;
        }
        return true;
    }
    STRUCTURED_BODY_END_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 11:
                return !this.inStructuredValue;
        }
        return true;
    }
    STRUCTURE_IDENTIFIER_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 12:
                return !this.inStructuredValue && this.beginOfStructureProperty;
        }
        return true;
    }
    STRUCTURE_EQUALS_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 13:
                return !this.inStructuredValue;
        }
        return true;
    }
    static get _ATN() {
        if (!LGTemplateLexer.__ATN) {
            LGTemplateLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGTemplateLexer._serializedATN));
        }
        return LGTemplateLexer.__ATN;
    }
}
LGTemplateLexer.WS = 1;
LGTemplateLexer.NEWLINE = 2;
LGTemplateLexer.COMMENTS = 3;
LGTemplateLexer.DASH = 4;
LGTemplateLexer.LEFT_SQUARE_BRACKET = 5;
LGTemplateLexer.INVALID_TOKEN = 6;
LGTemplateLexer.WS_IN_BODY = 7;
LGTemplateLexer.MULTILINE_PREFIX = 8;
LGTemplateLexer.NEWLINE_IN_BODY = 9;
LGTemplateLexer.IF = 10;
LGTemplateLexer.ELSEIF = 11;
LGTemplateLexer.ELSE = 12;
LGTemplateLexer.SWITCH = 13;
LGTemplateLexer.CASE = 14;
LGTemplateLexer.DEFAULT = 15;
LGTemplateLexer.ESCAPE_CHARACTER = 16;
LGTemplateLexer.EXPRESSION = 17;
LGTemplateLexer.TEXT = 18;
LGTemplateLexer.MULTILINE_SUFFIX = 19;
LGTemplateLexer.WS_IN_STRUCTURE_NAME = 20;
LGTemplateLexer.NEWLINE_IN_STRUCTURE_NAME = 21;
LGTemplateLexer.STRUCTURE_NAME = 22;
LGTemplateLexer.TEXT_IN_STRUCTURE_NAME = 23;
LGTemplateLexer.STRUCTURED_COMMENTS = 24;
LGTemplateLexer.WS_IN_STRUCTURE_BODY = 25;
LGTemplateLexer.STRUCTURED_NEWLINE = 26;
LGTemplateLexer.STRUCTURED_BODY_END = 27;
LGTemplateLexer.STRUCTURE_IDENTIFIER = 28;
LGTemplateLexer.STRUCTURE_EQUALS = 29;
LGTemplateLexer.STRUCTURE_OR_MARK = 30;
LGTemplateLexer.ESCAPE_CHARACTER_IN_STRUCTURE_BODY = 31;
LGTemplateLexer.EXPRESSION_IN_STRUCTURE_BODY = 32;
LGTemplateLexer.TEXT_IN_STRUCTURE_BODY = 33;
LGTemplateLexer.NORMAL_TEMPLATE_BODY_MODE = 1;
LGTemplateLexer.MULTILINE_MODE = 2;
LGTemplateLexer.STRUCTURE_NAME_MODE = 3;
LGTemplateLexer.STRUCTURE_BODY_MODE = 4;
// tslint:disable:no-trailing-whitespace
LGTemplateLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
LGTemplateLexer.modeNames = [
    "DEFAULT_MODE", "NORMAL_TEMPLATE_BODY_MODE", "MULTILINE_MODE", "STRUCTURE_NAME_MODE",
    "STRUCTURE_BODY_MODE",
];
LGTemplateLexer.ruleNames = [
    "A", "C", "D", "E", "F", "H", "I", "L", "S", "T", "U", "W", "LETTER",
    "NUMBER", "WHITESPACE", "STRING_LITERAL", "STRING_INTERPOLATION", "ESCAPE_CHARACTER_FRAGMENT",
    "IDENTIFIER", "OBJECT_DEFINITION", "EXPRESSION_FRAGMENT", "NEWLINE_FRAGMENT",
    "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET", "INVALID_TOKEN",
    "WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE",
    "SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", "TEXT",
    "MULTILINE_SUFFIX", "MULTILINE_ESCAPE_CHARACTER", "MULTILINE_EXPRESSION",
    "MULTILINE_TEXT", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME",
    "STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY",
    "STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS",
    "STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY",
    "TEXT_IN_STRUCTURE_BODY",
];
LGTemplateLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'|'",
];
LGTemplateLexer._SYMBOLIC_NAMES = [
    undefined, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET",
    "INVALID_TOKEN", "WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY",
    "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER",
    "EXPRESSION", "TEXT", "MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME",
    "STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY",
    "STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS",
    "STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY",
    "TEXT_IN_STRUCTURE_BODY",
];
LGTemplateLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGTemplateLexer._LITERAL_NAMES, LGTemplateLexer._SYMBOLIC_NAMES, []);
LGTemplateLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02#\u020B\b\x01" +
    "\b\x01\b\x01\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04" +
    "\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04" +
    "\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04" +
    "\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04" +
    "\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04" +
    "\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04" +
    " \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(" +
    "\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04" +
    "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04" +
    ":\t:\x04;\t;\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
    "\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
    "\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
    "\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\x9E\n\x11\f\x11" +
    "\x0E\x11\xA1\v\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\xA8" +
    "\n\x11\f\x11\x0E\x11\xAB\v\x11\x03\x11\x05\x11\xAE\n\x11\x03\x12\x03\x12" +
    "\x03\x12\x03\x12\x07\x12\xB4\n\x12\f\x12\x0E\x12\xB7\v\x12\x03\x12\x03" +
    "\x12\x03\x13\x03\x13\x05\x13\xBD\n\x13\x03\x14\x03\x14\x03\x14\x05\x14" +
    "\xC2\n\x14\x03\x14\x03\x14\x03\x14\x07\x14\xC7\n\x14\f\x14\x0E\x14\xCA" +
    "\v\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\xD1\n\x15\f\x15" +
    "\x0E\x15\xD4\v\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
    "\x16\x03\x16\x06\x16\xDE\n\x16\r\x16\x0E\x16\xDF\x03\x16\x05\x16\xE3\n" +
    "\x16\x03\x17\x05\x17\xE6\n\x17\x03\x17\x03\x17\x03\x18\x06\x18\xEB\n\x18" +
    "\r\x18\x0E\x18\xEC\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
    "\x1A\x03\x1A\x07\x1A\xF7\n\x1A\f\x1A\x0E\x1A\xFA\v\x1A\x03\x1A\x03\x1A" +
    "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
    "\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x07\x1E" +
    "\u010F\n\x1E\f\x1E\x0E\x1E\u0112\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
    "\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03" +
    " \x03 \x03 \x03 \x03!\x03!\x03!\x07!\u0128\n!\f!\x0E!\u012B\v!\x03!\x03" +
    "!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x07\"\u0136\n\"\f\"\x0E\"\u0139" +
    "\v\"\x03\"\x03\"\x03\"\x07\"\u013E\n\"\f\"\x0E\"\u0141\v\"\x03\"\x03\"" +
    "\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x07#\u014C\n#\f#\x0E#\u014F\v#\x03" +
    "#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x07$\u015C\n$\f$\x0E" +
    "$\u015F\v$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x07%\u016A\n%" +
    "\f%\x0E%\u016D\v%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
    "&\x03&\x07&\u017B\n&\f&\x0E&\u017E\v&\x03&\x03&\x03&\x03&\x03\'\x03\'" +
    "\x03\'\x03(\x03(\x03(\x03)\x06)\u018B\n)\r)\x0E)\u018C\x03)\x03)\x03*" +
    "\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03,\x03,\x03" +
    ",\x03,\x03-\x03-\x06-\u01A3\n-\r-\x0E-\u01A4\x03-\x03-\x03.\x06.\u01AA" +
    "\n.\r.\x0E.\u01AB\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x030\x03" +
    "0\x030\x050\u01BA\n0\x030\x030\x030\x070\u01BF\n0\f0\x0E0\u01C2\v0\x03" +
    "1\x061\u01C5\n1\r1\x0E1\u01C6\x032\x032\x072\u01CB\n2\f2\x0E2\u01CE\v" +
    "2\x032\x032\x032\x032\x032\x033\x033\x033\x073\u01D8\n3\f3\x0E3\u01DB" +
    "\v3\x033\x033\x034\x034\x034\x035\x035\x035\x035\x035\x035\x036\x036\x03" +
    "6\x056\u01EB\n6\x036\x036\x036\x076\u01F0\n6\f6\x0E6\u01F3\v6\x036\x03" +
    "6\x036\x037\x037\x037\x037\x038\x038\x038\x039\x039\x039\x03:\x03:\x03" +
    ":\x03;\x06;\u0206\n;\r;\x0E;\u0207\x03;\x03;\t\x9F\xA9\xB5\u018C\u01A4" +
    "\u01C6\u0207\x02\x02<\x07\x02\x02\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02" +
    "\x02\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02\x02\x1B\x02" +
    "\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02" +
    "\x02+\x02\x02-\x02\x02/\x02\x021\x02\x023\x02\x035\x02\x047\x02\x059\x02" +
    "\x06;\x02\x07=\x02\b?\x02\tA\x02\nC\x02\vE\x02\fG\x02\rI\x02\x0EK\x02" +
    "\x0FM\x02\x10O\x02\x11Q\x02\x12S\x02\x13U\x02\x14W\x02\x15Y\x02\x02[\x02" +
    "\x02]\x02\x02_\x02\x16a\x02\x17c\x02\x18e\x02\x19g\x02\x1Ai\x02\x1Bk\x02" +
    "\x1Cm\x02\x1Do\x02\x1Eq\x02\x1Fs\x02 u\x02!w\x02\"y\x02#\x07\x02\x03\x04" +
    "\x05\x06\x19\x04\x02CCcc\x04\x02EEee\x04\x02FFff\x04\x02GGgg\x04\x02H" +
    "Hhh\x04\x02JJjj\x04\x02KKkk\x04\x02NNnn\x04\x02UUuu\x04\x02VVvv\x04\x02" +
    "WWww\x04\x02YYyy\x04\x02C\\c|\x06\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x04" +
    "\x02))^^\x03\x02))\x04\x02$$^^\x03\x02$$\x04\x02^^bb\x03\x02bb\x04\x02" +
    "\f\f\x0F\x0F\x06\x02$$))bb\x7F\x7F\x04\x02/0aa\x02\u0223\x023\x03\x02" +
    "\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
    "\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x03?\x03\x02\x02\x02\x03A\x03" +
    "\x02\x02\x02\x03C\x03\x02\x02\x02\x03E\x03\x02\x02\x02\x03G\x03\x02\x02" +
    "\x02\x03I\x03\x02\x02\x02\x03K\x03\x02\x02\x02\x03M\x03\x02\x02\x02\x03" +
    "O\x03\x02\x02\x02\x03Q\x03\x02\x02\x02\x03S\x03\x02\x02\x02\x03U\x03\x02" +
    "\x02\x02\x04W\x03\x02\x02\x02\x04Y\x03\x02\x02\x02\x04[\x03\x02\x02\x02" +
    "\x04]\x03\x02\x02\x02\x05_\x03\x02\x02\x02\x05a\x03\x02\x02\x02\x05c\x03" +
    "\x02\x02\x02\x05e\x03\x02\x02\x02\x06g\x03\x02\x02\x02\x06i\x03\x02\x02" +
    "\x02\x06k\x03\x02\x02\x02\x06m\x03\x02\x02\x02\x06o\x03\x02\x02\x02\x06" +
    "q\x03\x02\x02\x02\x06s\x03\x02\x02\x02\x06u\x03\x02\x02\x02\x06w\x03\x02" +
    "\x02\x02\x06y\x03\x02\x02\x02\x07{\x03\x02\x02\x02\t}\x03\x02\x02\x02" +
    "\v\x7F\x03\x02\x02\x02\r\x81\x03\x02\x02\x02\x0F\x83\x03\x02\x02\x02\x11" +
    "\x85\x03\x02\x02\x02\x13\x87\x03\x02\x02\x02\x15\x89\x03\x02\x02\x02\x17" +
    "\x8B\x03\x02\x02\x02\x19\x8D\x03\x02\x02\x02\x1B\x8F\x03\x02\x02\x02\x1D" +
    "\x91\x03\x02\x02\x02\x1F\x93\x03\x02\x02\x02!\x95\x03\x02\x02\x02#\x97" +
    "\x03\x02\x02\x02%\xAD\x03\x02\x02\x02\'\xAF\x03\x02\x02\x02)\xBA\x03\x02" +
    "\x02\x02+\xC1\x03\x02\x02\x02-\xCB\x03\x02\x02\x02/\xD7\x03\x02\x02\x02" +
    "1\xE5\x03\x02\x02\x023\xEA\x03\x02\x02\x025\xF0\x03\x02\x02\x027\xF4\x03" +
    "\x02\x02\x029\xFD\x03\x02\x02\x02;\u0102\x03\x02\x02\x02=\u0108\x03\x02" +
    "\x02\x02?\u010B\x03\x02\x02\x02A\u0115\x03\x02\x02\x02C\u011E\x03\x02" +
    "\x02\x02E\u0124\x03\x02\x02\x02G\u0130\x03\x02\x02\x02I\u0146\x03\x02" +
    "\x02\x02K\u0154\x03\x02\x02\x02M\u0164\x03\x02\x02\x02O\u0172\x03\x02" +
    "\x02\x02Q\u0183\x03\x02\x02\x02S\u0186\x03\x02\x02\x02U\u018A\x03\x02" +
    "\x02\x02W\u0190\x03\x02\x02\x02Y\u0198\x03\x02\x02\x02[\u019C\x03\x02" +
    "\x02\x02]\u01A2\x03\x02\x02\x02_\u01A9\x03\x02\x02\x02a\u01AF\x03\x02" +
    "\x02\x02c\u01B9\x03\x02\x02\x02e\u01C4\x03\x02\x02\x02g\u01C8\x03\x02" +
    "\x02\x02i\u01D4\x03\x02\x02\x02k\u01DE\x03\x02\x02\x02m\u01E1\x03\x02" +
    "\x02\x02o\u01EA\x03\x02\x02\x02q\u01F7\x03\x02\x02\x02s\u01FB\x03\x02" +
    "\x02\x02u\u01FE\x03\x02\x02\x02w\u0201\x03\x02\x02\x02y\u0205\x03\x02" +
    "\x02\x02{|\t\x02\x02\x02|\b\x03\x02\x02\x02}~\t\x03\x02\x02~\n\x03\x02" +
    "\x02\x02\x7F\x80\t\x04\x02\x02\x80\f\x03\x02\x02\x02\x81\x82\t\x05\x02" +
    "\x02\x82\x0E\x03\x02\x02\x02\x83\x84\t\x06\x02\x02\x84\x10\x03\x02\x02" +
    "\x02\x85\x86\t\x07\x02\x02\x86\x12\x03\x02\x02\x02\x87\x88\t\b\x02\x02" +
    "\x88\x14\x03\x02\x02\x02\x89\x8A\t\t\x02\x02\x8A\x16\x03\x02\x02\x02\x8B" +
    "\x8C\t\n\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x8E\t\v\x02\x02\x8E\x1A\x03" +
    "\x02\x02\x02\x8F\x90\t\f\x02\x02\x90\x1C\x03\x02\x02\x02\x91\x92\t\r\x02" +
    "\x02\x92\x1E\x03\x02\x02\x02\x93\x94\t\x0E\x02\x02\x94 \x03\x02\x02\x02" +
    "\x95\x96\x042;\x02\x96\"\x03\x02\x02\x02\x97\x98\t\x0F\x02\x02\x98$\x03" +
    "\x02\x02\x02\x99\x9F\x07)\x02\x02\x9A\x9B\x07^\x02\x02\x9B\x9E\t\x10\x02" +
    "\x02\x9C\x9E\n\x11\x02\x02\x9D\x9A\x03\x02\x02\x02\x9D\x9C\x03\x02\x02" +
    "\x02\x9E\xA1\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\x9F\x9D\x03\x02\x02" +
    "\x02\xA0\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xAE\x07)\x02" +
    "\x02\xA3\xA9\x07$\x02\x02\xA4\xA5\x07^\x02\x02\xA5\xA8\t\x12\x02\x02\xA6" +
    "\xA8\n\x13\x02\x02\xA7\xA4\x03\x02\x02\x02\xA7\xA6\x03\x02\x02\x02\xA8" +
    "\xAB\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xAA" +
    "\xAC\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xAE\x07$\x02\x02\xAD" +
    "\x99\x03\x02\x02\x02\xAD\xA3\x03\x02\x02\x02\xAE&\x03\x02\x02\x02\xAF" +
    "\xB5\x07b\x02\x02\xB0\xB1\x07^\x02\x02\xB1\xB4\t\x14\x02\x02\xB2\xB4\n" +
    "\x15\x02\x02\xB3\xB0\x03\x02\x02\x02\xB3\xB2\x03\x02\x02\x02\xB4\xB7\x03" +
    "\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB6\xB8\x03" +
    "\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB8\xB9\x07b\x02\x02\xB9(\x03\x02" +
    "\x02\x02\xBA\xBC\x07^\x02\x02\xBB\xBD\n\x16\x02\x02\xBC\xBB\x03\x02\x02" +
    "\x02\xBC\xBD\x03\x02\x02\x02\xBD*\x03\x02\x02\x02\xBE\xC2\x05\x1F\x0E" +
    "\x02\xBF\xC2\x05!\x0F\x02\xC0\xC2\x07a\x02\x02\xC1\xBE\x03\x02\x02\x02" +
    "\xC1\xBF\x03\x02\x02\x02\xC1\xC0\x03\x02\x02\x02\xC2\xC8\x03\x02\x02\x02" +
    "\xC3\xC7\x05\x1F\x0E\x02\xC4\xC7\x05!\x0F\x02\xC5\xC7\x07a\x02\x02\xC6" +
    "\xC3\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC6\xC5\x03\x02\x02\x02\xC7" +
    "\xCA\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9" +
    ",\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCB\xD2\x07}\x02\x02\xCC\xD1" +
    "\x05-\x15\x02\xCD\xD1\x05%\x11\x02\xCE\xD1\x05\'\x12\x02\xCF\xD1\n\x17" +
    "\x02\x02\xD0\xCC\x03\x02\x02\x02\xD0\xCD\x03\x02\x02\x02\xD0\xCE\x03\x02" +
    "\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD4\x03\x02\x02\x02\xD2\xD0\x03\x02" +
    "\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD5\x03\x02\x02\x02\xD4\xD2\x03\x02" +
    "\x02\x02\xD5\xD6\x07\x7F\x02\x02\xD6.\x03\x02\x02\x02\xD7\xD8\x07&\x02" +
    "\x02\xD8\xDD\x07}\x02\x02\xD9\xDE\x05%\x11\x02\xDA\xDE\x05\'\x12\x02\xDB" +
    "\xDE\x05-\x15\x02\xDC\xDE\n\x17\x02\x02\xDD\xD9\x03\x02\x02\x02\xDD\xDA" +
    "\x03\x02\x02\x02\xDD\xDB\x03\x02\x02\x02\xDD\xDC\x03\x02\x02\x02\xDE\xDF" +
    "\x03\x02\x02\x02\xDF\xDD\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE2" +
    "\x03\x02\x02\x02\xE1\xE3\x07\x7F\x02\x02\xE2\xE1\x03\x02\x02\x02\xE2\xE3" +
    "\x03\x02\x02\x02\xE30\x03\x02\x02\x02\xE4\xE6\x07\x0F\x02\x02\xE5\xE4" +
    "\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7\xE8" +
    "\x07\f\x02\x02\xE82\x03\x02\x02\x02\xE9\xEB\x05#\x10\x02\xEA\xE9\x03\x02" +
    "\x02\x02\xEB\xEC\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xEC\xED\x03\x02" +
    "\x02\x02\xED\xEE\x03\x02\x02\x02\xEE\xEF\b\x18\x02\x02\xEF4\x03\x02\x02" +
    "\x02\xF0\xF1\x051\x17\x02\xF1\xF2\x03\x02\x02\x02\xF2\xF3\b\x19\x02\x02" +
    "\xF36\x03\x02\x02\x02\xF4\xF8\x07@\x02\x02\xF5\xF7\n\x16\x02\x02\xF6\xF5" +
    "\x03\x02\x02\x02\xF7\xFA\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9" +
    "\x03\x02\x02\x02\xF9\xFB\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFB\xFC" +
    "\b\x1A\x02\x02\xFC8\x03\x02\x02\x02\xFD\xFE\x07/\x02\x02\xFE\xFF\b\x1B" +
    "\x03\x02\xFF\u0100\x03\x02\x02\x02\u0100\u0101\b\x1B\x04\x02\u0101:\x03" +
    "\x02\x02\x02\u0102\u0103\x07]\x02\x02\u0103\u0104\x06\x1C\x02\x02\u0104" +
    "\u0105\b\x1C\x05\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0107\b\x1C\x06" +
    "\x02\u0107<\x03\x02\x02\x02\u0108\u0109\v\x02\x02\x02\u0109\u010A\b\x1D" +
    "\x07\x02\u010A>\x03\x02\x02\x02\u010B\u010C\x05#\x10\x02\u010C\u0110\x06" +
    "\x1E\x03\x02\u010D\u010F\x05#\x10\x02\u010E\u010D\x03\x02\x02\x02\u010F" +
    "\u0112\x03\x02\x02\x02\u0110\u010E\x03\x02\x02\x02\u0110\u0111\x03\x02" +
    "\x02\x02\u0111\u0113\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0113" +
    "\u0114\b\x1E\x02\x02\u0114@\x03\x02\x02\x02\u0115\u0116\x07b\x02\x02\u0116" +
    "\u0117\x07b\x02\x02\u0117\u0118\x07b\x02\x02\u0118\u0119\x03\x02\x02\x02" +
    "\u0119\u011A\x06\x1F\x04\x02\u011A\u011B\b\x1F\b\x02\u011B\u011C\x03\x02" +
    "\x02\x02\u011C\u011D\b\x1F\t\x02\u011DB\x03\x02\x02\x02\u011E\u011F\x05" +
    "1\x17\x02\u011F\u0120\b \n\x02\u0120\u0121\x03\x02\x02\x02\u0121\u0122" +
    "\b \x02\x02\u0122\u0123\b \v\x02\u0123D\x03\x02\x02\x02\u0124\u0125\x05" +
    "\x13\b\x02\u0125\u0129\x05\x0F\x06\x02\u0126\u0128\x05#\x10\x02\u0127" +
    "\u0126\x03\x02\x02\x02\u0128\u012B\x03\x02\x02\x02\u0129\u0127\x03\x02" +
    "\x02\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012C\x03\x02\x02\x02\u012B" +
    "\u0129\x03\x02\x02\x02\u012C\u012D\x07<\x02\x02\u012D\u012E\x06!\x05\x02" +
    "\u012E\u012F\b!\f\x02\u012FF\x03\x02\x02\x02\u0130\u0131\x05\r\x05\x02" +
    "\u0131\u0132\x05\x15\t\x02\u0132\u0133\x05\x17\n\x02\u0133\u0137\x05\r" +
    "\x05\x02\u0134\u0136\x05#\x10\x02\u0135\u0134\x03\x02\x02\x02\u0136\u0139" +
    "\x03\x02\x02\x02\u0137\u0135\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02" +
    "\u0138\u013A\x03\x02\x02\x02\u0139\u0137\x03\x02\x02\x02\u013A\u013B\x05" +
    "\x13\b\x02\u013B\u013F\x05\x0F\x06\x02\u013C\u013E\x05#\x10\x02\u013D" +
    "\u013C\x03\x02\x02\x02\u013E\u0141\x03\x02\x02\x02\u013F\u013D\x03\x02" +
    "\x02\x02\u013F\u0140\x03\x02\x02\x02\u0140\u0142\x03\x02\x02\x02\u0141" +
    "\u013F\x03\x02\x02\x02\u0142\u0143\x07<\x02\x02\u0143\u0144\x06\"\x06" +
    "\x02\u0144\u0145\b\"\r\x02\u0145H\x03\x02\x02\x02\u0146\u0147\x05\r\x05" +
    "\x02\u0147\u0148\x05\x15\t\x02\u0148\u0149\x05\x17\n\x02\u0149\u014D\x05" +
    "\r\x05\x02\u014A\u014C\x05#\x10\x02\u014B\u014A\x03\x02\x02\x02\u014C" +
    "\u014F\x03\x02\x02\x02\u014D\u014B\x03\x02\x02\x02\u014D\u014E\x03\x02" +
    "\x02\x02\u014E\u0150\x03\x02\x02\x02\u014F\u014D\x03\x02\x02\x02\u0150" +
    "\u0151\x07<\x02\x02\u0151\u0152\x06#\x07\x02\u0152\u0153\b#\x0E\x02\u0153" +
    "J\x03\x02\x02\x02\u0154\u0155\x05\x17\n\x02\u0155\u0156\x05\x1D\r\x02" +
    "\u0156\u0157\x05\x13\b\x02\u0157\u0158\x05\x19\v\x02\u0158\u0159\x05\t" +
    "\x03\x02\u0159\u015D\x05\x11\x07\x02\u015A\u015C\x05#\x10\x02\u015B\u015A" +
    "\x03\x02\x02\x02\u015C\u015F\x03\x02\x02\x02\u015D\u015B\x03\x02\x02\x02" +
    "\u015D\u015E\x03\x02\x02\x02\u015E\u0160\x03\x02\x02\x02\u015F\u015D\x03" +
    "\x02\x02\x02\u0160\u0161\x07<\x02\x02\u0161\u0162\x06$\b\x02\u0162\u0163" +
    "\b$\x0F\x02\u0163L\x03\x02\x02\x02\u0164\u0165\x05\t\x03\x02\u0165\u0166" +
    "\x05\x07\x02\x02\u0166\u0167\x05\x17\n\x02\u0167\u016B\x05\r\x05\x02\u0168" +
    "\u016A\x05#\x10\x02\u0169\u0168\x03\x02\x02\x02\u016A\u016D\x03\x02\x02" +
    "\x02\u016B\u0169\x03\x02\x02\x02\u016B\u016C\x03\x02\x02\x02\u016C\u016E" +
    "\x03\x02\x02\x02\u016D\u016B\x03\x02\x02\x02\u016E\u016F\x07<\x02\x02" +
    "\u016F\u0170\x06%\t\x02\u0170\u0171\b%\x10\x02\u0171N\x03\x02\x02\x02" +
    "\u0172\u0173\x05\v\x04\x02\u0173\u0174\x05\r\x05\x02\u0174\u0175\x05\x0F" +
    "\x06\x02\u0175\u0176\x05\x07\x02\x02\u0176\u0177\x05\x1B\f\x02\u0177\u0178" +
    "\x05\x15\t\x02\u0178\u017C\x05\x19\v\x02\u0179\u017B\x05#\x10\x02\u017A" +
    "\u0179\x03\x02\x02\x02\u017B\u017E\x03\x02\x02\x02\u017C\u017A\x03\x02" +
    "\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017F\x03\x02\x02\x02\u017E" +
    "\u017C\x03\x02\x02\x02\u017F\u0180\x07<\x02\x02\u0180\u0181\x06&\n\x02" +
    "\u0181\u0182\b&\x11\x02\u0182P\x03\x02\x02\x02\u0183\u0184\x05)\x13\x02" +
    "\u0184\u0185\b\'\x12\x02\u0185R\x03\x02\x02\x02\u0186\u0187\x05/\x16\x02" +
    "\u0187\u0188\b(\x13\x02\u0188T\x03\x02\x02\x02\u0189\u018B\n\x16\x02\x02" +
    "\u018A\u0189\x03\x02\x02\x02\u018B\u018C\x03\x02\x02\x02\u018C\u018D\x03" +
    "\x02\x02\x02\u018C\u018A\x03\x02\x02\x02\u018D\u018E\x03\x02\x02\x02\u018E" +
    "\u018F\b)\x14\x02\u018FV\x03\x02\x02\x02\u0190\u0191\x07b\x02\x02\u0191" +
    "\u0192\x07b\x02\x02\u0192\u0193\x07b\x02\x02\u0193\u0194\x03\x02\x02\x02" +
    "\u0194\u0195\b*\x15\x02\u0195\u0196\x03\x02\x02\x02\u0196\u0197\b*\v\x02" +
    "\u0197X\x03\x02\x02\x02\u0198\u0199\x05)\x13\x02\u0199\u019A\x03\x02\x02" +
    "\x02\u019A\u019B\b+\x16\x02\u019BZ\x03\x02\x02\x02\u019C\u019D\x05/\x16" +
    "\x02\u019D\u019E\x03\x02\x02\x02\u019E\u019F\b,\x17\x02\u019F\\\x03\x02" +
    "\x02\x02\u01A0\u01A3\x051\x17\x02\u01A1\u01A3\n\x16\x02\x02\u01A2\u01A0" +
    "\x03\x02\x02\x02\u01A2\u01A1\x03\x02\x02\x02\u01A3\u01A4\x03\x02\x02\x02" +
    "\u01A4\u01A5\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02\u01A5\u01A6\x03" +
    "\x02\x02\x02\u01A6\u01A7\b-\x18\x02\u01A7^\x03\x02\x02\x02\u01A8\u01AA" +
    "\x05#\x10\x02\u01A9\u01A8\x03\x02\x02\x02\u01AA\u01AB\x03\x02\x02\x02" +
    "\u01AB\u01A9\x03\x02\x02\x02\u01AB\u01AC\x03\x02\x02\x02\u01AC\u01AD\x03" +
    "\x02\x02\x02\u01AD\u01AE\b.\x02\x02\u01AE`\x03\x02\x02\x02\u01AF\u01B0" +
    "\x051\x17\x02\u01B0\u01B1\b/\x19\x02\u01B1\u01B2\b/\x1A\x02\u01B2\u01B3" +
    "\x03\x02\x02\x02\u01B3\u01B4\b/\x02\x02\u01B4\u01B5\b/\x1B\x02\u01B5b" +
    "\x03\x02\x02\x02\u01B6\u01BA\x05\x1F\x0E\x02\u01B7\u01BA\x05!\x0F\x02" +
    "\u01B8\u01BA\x07a\x02\x02\u01B9\u01B6\x03\x02\x02\x02\u01B9\u01B7\x03" +
    "\x02\x02\x02\u01B9\u01B8\x03\x02\x02\x02\u01BA\u01C0\x03\x02\x02\x02\u01BB" +
    "\u01BF\x05\x1F\x0E\x02\u01BC\u01BF\x05!\x0F\x02\u01BD\u01BF\t\x18\x02" +
    "\x02\u01BE\u01BB\x03\x02\x02\x02\u01BE\u01BC\x03\x02\x02\x02\u01BE\u01BD" +
    "\x03\x02\x02\x02\u01BF\u01C2\x03\x02\x02\x02\u01C0\u01BE\x03\x02\x02\x02" +
    "\u01C0\u01C1\x03\x02\x02\x02\u01C1d\x03\x02\x02\x02\u01C2\u01C0\x03\x02" +
    "\x02\x02\u01C3\u01C5\n\x16\x02\x02\u01C4\u01C3\x03\x02\x02\x02\u01C5\u01C6" +
    "\x03\x02\x02\x02\u01C6\u01C7\x03\x02\x02\x02\u01C6\u01C4\x03\x02\x02\x02" +
    "\u01C7f\x03\x02\x02\x02\u01C8\u01CC\x07@\x02\x02\u01C9\u01CB\n\x16\x02" +
    "\x02\u01CA\u01C9\x03\x02\x02\x02\u01CB\u01CE\x03\x02\x02\x02\u01CC\u01CA" +
    "\x03\x02\x02\x02\u01CC\u01CD\x03\x02\x02\x02\u01CD\u01CF\x03\x02\x02\x02" +
    "\u01CE\u01CC\x03\x02\x02\x02\u01CF\u01D0\x051\x17\x02\u01D0\u01D1\x06" +
    "2\v\x02\u01D1\u01D2\x03\x02\x02\x02\u01D2\u01D3\b2\x02\x02\u01D3h\x03" +
    "\x02\x02\x02\u01D4\u01D5\x05#\x10\x02\u01D5\u01D9\x063\f\x02\u01D6\u01D8" +
    "\x05#\x10\x02\u01D7\u01D6\x03\x02\x02\x02\u01D8\u01DB\x03\x02\x02\x02" +
    "\u01D9\u01D7\x03\x02\x02\x02\u01D9\u01DA\x03\x02\x02\x02\u01DA\u01DC\x03" +
    "\x02\x02\x02\u01DB\u01D9\x03\x02\x02\x02\u01DC\u01DD\b3\x02\x02\u01DD" +
    "j\x03\x02\x02\x02\u01DE\u01DF\x051\x17\x02\u01DF\u01E0\b4\x1C\x02\u01E0" +
    "l\x03\x02\x02\x02\u01E1\u01E2\x07_\x02\x02\u01E2\u01E3\x065\r\x02\u01E3" +
    "\u01E4\x03\x02\x02\x02\u01E4\u01E5\b5\v\x02\u01E5\u01E6\b5\v\x02\u01E6" +
    "n\x03\x02\x02\x02\u01E7\u01EB\x05\x1F\x0E\x02\u01E8\u01EB\x05!\x0F\x02" +
    "\u01E9\u01EB\x07a\x02\x02\u01EA\u01E7\x03\x02\x02\x02\u01EA\u01E8\x03" +
    "\x02\x02\x02\u01EA\u01E9\x03\x02\x02\x02\u01EB\u01F1\x03\x02\x02\x02\u01EC" +
    "\u01F0\x05\x1F\x0E\x02\u01ED\u01F0\x05!\x0F\x02\u01EE\u01F0\t\x18\x02" +
    "\x02\u01EF\u01EC\x03\x02\x02\x02\u01EF\u01ED\x03\x02\x02\x02\u01EF\u01EE" +
    "\x03\x02\x02\x02\u01F0\u01F3\x03\x02\x02\x02\u01F1\u01EF\x03\x02\x02\x02" +
    "\u01F1\u01F2\x03\x02\x02\x02\u01F2\u01F4\x03\x02\x02\x02\u01F3\u01F1\x03" +
    "\x02\x02\x02\u01F4\u01F5\x066\x0E\x02\u01F5\u01F6\b6\x1D\x02\u01F6p\x03" +
    "\x02\x02\x02\u01F7\u01F8\x07?\x02\x02\u01F8\u01F9\x067\x0F\x02\u01F9\u01FA" +
    "\b7\x1E\x02\u01FAr\x03\x02\x02\x02\u01FB\u01FC\x07~\x02\x02\u01FC\u01FD" +
    "\b8\x1F\x02\u01FDt\x03\x02\x02\x02\u01FE\u01FF\x05)\x13\x02\u01FF\u0200" +
    "\b9 \x02\u0200v\x03\x02\x02\x02\u0201\u0202\x05/\x16\x02\u0202\u0203\b" +
    ":!\x02\u0203x\x03\x02\x02\x02\u0204\u0206\n\x16\x02\x02\u0205\u0204\x03" +
    "\x02\x02\x02\u0206\u0207\x03\x02\x02\x02\u0207\u0208\x03\x02\x02\x02\u0207" +
    "\u0205\x03\x02\x02\x02\u0208\u0209\x03\x02\x02\x02\u0209\u020A\b;\"\x02" +
    "\u020Az\x03\x02\x02\x020\x02\x03\x04\x05\x06\x9D\x9F\xA7\xA9\xAD\xB3\xB5" +
    "\xBC\xC1\xC6\xC8\xD0\xD2\xDD\xDF\xE2\xE5\xEC\xF8\u0110\u0129\u0137\u013F" +
    "\u014D\u015D\u016B\u017C\u018C\u01A2\u01A4\u01AB\u01B9\u01BE\u01C0\u01C6" +
    "\u01CC\u01D9\u01EA\u01EF\u01F1\u0207#\b\x02\x02\x03\x1B\x02\x07\x03\x02" +
    "\x03\x1C\x03\x07\x05\x02\x03\x1D\x04\x03\x1F\x05\x07\x04\x02\x03 \x06" +
    "\x06\x02\x02\x03!\x07\x03\"\b\x03#\t\x03$\n\x03%\v\x03&\f\x03\'\r\x03" +
    "(\x0E\x03)\x0F\x03*\x10\t\x12\x02\t\x13\x02\t\x14\x02\x03/\x11\x03/\x12" +
    "\x07\x06\x02\x034\x13\x036\x14\x037\x15\x038\x16\x039\x17\x03:\x18\x03" +
    ";\x19";
exports.LGTemplateLexer = LGTemplateLexer;

},{"antlr4ts/Lexer":21,"antlr4ts/VocabularyImpl":39,"antlr4ts/atn/ATNDeserializer":44,"antlr4ts/atn/LexerATNSimulator":65,"antlr4ts/misc/Utils":126}],171:[function(require,module,exports){
"use strict";
// Generated from src/LGTemplateParser.g4 by ANTLR 4.7.3-SNAPSHOT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const ATN_1 = require("antlr4ts/atn/ATN");
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
const Parser_1 = require("antlr4ts/Parser");
const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
const RecognitionException_1 = require("antlr4ts/RecognitionException");
const Token_1 = require("antlr4ts/Token");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = require("antlr4ts/misc/Utils");
class LGTemplateParser extends Parser_1.Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator_1.ParserATNSimulator(LGTemplateParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return LGTemplateParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "LGTemplateParser.g4"; }
    // @Override
    get ruleNames() { return LGTemplateParser.ruleNames; }
    // @Override
    get serializedATN() { return LGTemplateParser._serializedATN; }
    // @RuleVersion(0)
    template() {
        let _localctx = new TemplateContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, LGTemplateParser.RULE_template);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 44;
                this.body();
                this.state = 45;
                this.match(LGTemplateParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    body() {
        let _localctx = new BodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, LGTemplateParser.RULE_body);
        try {
            this.state = 51;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                case 1:
                    _localctx = new NormalBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 47;
                        this.normalTemplateBody();
                    }
                    break;
                case 2:
                    _localctx = new IfElseBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 48;
                        this.ifElseTemplateBody();
                    }
                    break;
                case 3:
                    _localctx = new SwitchCaseBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 49;
                        this.switchCaseTemplateBody();
                    }
                    break;
                case 4:
                    _localctx = new StructuredBodyContext(_localctx);
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 50;
                        this.structuredTemplateBody();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredTemplateBody() {
        let _localctx = new StructuredTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, LGTemplateParser.RULE_structuredTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 53;
                this.structuredBodyNameLine();
                this.state = 63;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (LGTemplateParser.STRUCTURED_NEWLINE - 26)) | (1 << (LGTemplateParser.STRUCTURE_IDENTIFIER - 26)) | (1 << (LGTemplateParser.STRUCTURE_EQUALS - 26)) | (1 << (LGTemplateParser.STRUCTURE_OR_MARK - 26)) | (1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 26)))) !== 0)) {
                    {
                        this.state = 59;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                this.state = 59;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                                    case 1:
                                        {
                                            {
                                                this.state = 55;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                if (_la === LGTemplateParser.STRUCTURE_IDENTIFIER || _la === LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY) {
                                                    {
                                                        this.state = 54;
                                                        this.structuredBodyContentLine();
                                                    }
                                                }
                                                this.state = 57;
                                                this.match(LGTemplateParser.STRUCTURED_NEWLINE);
                                            }
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.state = 58;
                                            this.errorStructureLine();
                                        }
                                        break;
                                }
                            }
                            this.state = 61;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (LGTemplateParser.STRUCTURED_NEWLINE - 26)) | (1 << (LGTemplateParser.STRUCTURE_IDENTIFIER - 26)) | (1 << (LGTemplateParser.STRUCTURE_EQUALS - 26)) | (1 << (LGTemplateParser.STRUCTURE_OR_MARK - 26)) | (1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 26)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 26)))) !== 0));
                    }
                }
                this.state = 66;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.STRUCTURED_BODY_END) {
                    {
                        this.state = 65;
                        this.structuredBodyEndLine();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyNameLine() {
        let _localctx = new StructuredBodyNameLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, LGTemplateParser.RULE_structuredBodyNameLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 68;
                this.match(LGTemplateParser.LEFT_SQUARE_BRACKET);
                this.state = 71;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {
                    case 1:
                        {
                            this.state = 69;
                            this.match(LGTemplateParser.STRUCTURE_NAME);
                        }
                        break;
                    case 2:
                        {
                            this.state = 70;
                            this.errorStructuredName();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorStructuredName() {
        let _localctx = new ErrorStructuredNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, LGTemplateParser.RULE_errorStructuredName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 76;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === LGTemplateParser.STRUCTURE_NAME || _la === LGTemplateParser.TEXT_IN_STRUCTURE_NAME) {
                    {
                        {
                            this.state = 73;
                            _la = this._input.LA(1);
                            if (!(_la === LGTemplateParser.STRUCTURE_NAME || _la === LGTemplateParser.TEXT_IN_STRUCTURE_NAME)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    this.state = 78;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyContentLine() {
        let _localctx = new StructuredBodyContentLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, LGTemplateParser.RULE_structuredBodyContentLine);
        try {
            this.state = 81;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGTemplateParser.STRUCTURE_IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 79;
                        this.keyValueStructureLine();
                    }
                    break;
                case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 80;
                        this.expressionInStructure();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorStructureLine() {
        let _localctx = new ErrorStructureLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, LGTemplateParser.RULE_errorStructureLine);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 89;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.state = 89;
                                this._errHandler.sync(this);
                                switch (this._input.LA(1)) {
                                    case LGTemplateParser.STRUCTURE_IDENTIFIER:
                                        {
                                            this.state = 83;
                                            this.match(LGTemplateParser.STRUCTURE_IDENTIFIER);
                                        }
                                        break;
                                    case LGTemplateParser.STRUCTURE_EQUALS:
                                        {
                                            this.state = 84;
                                            this.match(LGTemplateParser.STRUCTURE_EQUALS);
                                        }
                                        break;
                                    case LGTemplateParser.STRUCTURE_OR_MARK:
                                        {
                                            this.state = 85;
                                            this.match(LGTemplateParser.STRUCTURE_OR_MARK);
                                        }
                                        break;
                                    case LGTemplateParser.TEXT_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 86;
                                            this.match(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
                                        }
                                        break;
                                    case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 87;
                                            this.expressionInStructure();
                                        }
                                        break;
                                    case LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                        {
                                            this.state = 88;
                                            this.match(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 91;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyValueStructureLine() {
        let _localctx = new KeyValueStructureLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, LGTemplateParser.RULE_keyValueStructureLine);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 93;
                this.match(LGTemplateParser.STRUCTURE_IDENTIFIER);
                this.state = 94;
                this.match(LGTemplateParser.STRUCTURE_EQUALS);
                this.state = 95;
                this.keyValueStructureValue();
                this.state = 100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === LGTemplateParser.STRUCTURE_OR_MARK) {
                    {
                        {
                            this.state = 96;
                            this.match(LGTemplateParser.STRUCTURE_OR_MARK);
                            this.state = 97;
                            this.keyValueStructureValue();
                        }
                    }
                    this.state = 102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyValueStructureValue() {
        let _localctx = new KeyValueStructureValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, LGTemplateParser.RULE_keyValueStructureValue);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 106;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        this.state = 106;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.TEXT_IN_STRUCTURE_BODY:
                                {
                                    this.state = 103;
                                    this.match(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY:
                                {
                                    this.state = 104;
                                    this.expressionInStructure();
                                }
                                break;
                            case LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
                                {
                                    this.state = 105;
                                    this.match(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 108;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 31)) & ~0x1F) === 0 && ((1 << (_la - 31)) & ((1 << (LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY - 31)) | (1 << (LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY - 31)) | (1 << (LGTemplateParser.TEXT_IN_STRUCTURE_BODY - 31)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    structuredBodyEndLine() {
        let _localctx = new StructuredBodyEndLineContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, LGTemplateParser.RULE_structuredBodyEndLine);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 110;
                this.match(LGTemplateParser.STRUCTURED_BODY_END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    normalTemplateBody() {
        let _localctx = new NormalTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, LGTemplateParser.RULE_normalTemplateBody);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 113;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 112;
                                    this.templateString();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 115;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    templateString() {
        let _localctx = new TemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, LGTemplateParser.RULE_templateString);
        try {
            this.state = 119;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case LGTemplateParser.DASH:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 117;
                        this.normalTemplateString();
                    }
                    break;
                case LGTemplateParser.INVALID_TOKEN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 118;
                        this.errorTemplateString();
                    }
                    break;
                default:
                    throw new NoViableAltException_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    normalTemplateString() {
        let _localctx = new NormalTemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, LGTemplateParser.RULE_normalTemplateString);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 121;
                this.match(LGTemplateParser.DASH);
                this.state = 123;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.MULTILINE_PREFIX) {
                    {
                        this.state = 122;
                        this.match(LGTemplateParser.MULTILINE_PREFIX);
                    }
                }
                this.state = 130;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.ESCAPE_CHARACTER) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 128;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 125;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 126;
                                    this.expression();
                                }
                                break;
                            case LGTemplateParser.ESCAPE_CHARACTER:
                                {
                                    this.state = 127;
                                    this.match(LGTemplateParser.ESCAPE_CHARACTER);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 132;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 134;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === LGTemplateParser.MULTILINE_SUFFIX) {
                    {
                        this.state = 133;
                        this.match(LGTemplateParser.MULTILINE_SUFFIX);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorTemplateString() {
        let _localctx = new ErrorTemplateStringContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, LGTemplateParser.RULE_errorTemplateString);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 137;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 136;
                                    this.match(LGTemplateParser.INVALID_TOKEN);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                    }
                    this.state = 139;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 20, this._ctx);
                } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifElseTemplateBody() {
        let _localctx = new IfElseTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, LGTemplateParser.RULE_ifElseTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 141;
                            this.ifConditionRule();
                        }
                    }
                    this.state = 144;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === LGTemplateParser.DASH);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifConditionRule() {
        let _localctx = new IfConditionRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, LGTemplateParser.RULE_ifConditionRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 146;
                this.ifCondition();
                this.state = 148;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                    case 1:
                        {
                            this.state = 147;
                            this.normalTemplateBody();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifCondition() {
        let _localctx = new IfConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, LGTemplateParser.RULE_ifCondition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 150;
                this.match(LGTemplateParser.DASH);
                this.state = 151;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.IF) | (1 << LGTemplateParser.ELSEIF) | (1 << LGTemplateParser.ELSE))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 157;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.WS) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 155;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.WS:
                                {
                                    this.state = 152;
                                    this.match(LGTemplateParser.WS);
                                }
                                break;
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 153;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 154;
                                    this.expression();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 159;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseTemplateBody() {
        let _localctx = new SwitchCaseTemplateBodyContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, LGTemplateParser.RULE_switchCaseTemplateBody);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 161;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 160;
                            this.switchCaseRule();
                        }
                    }
                    this.state = 163;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === LGTemplateParser.DASH);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseRule() {
        let _localctx = new SwitchCaseRuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, LGTemplateParser.RULE_switchCaseRule);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 165;
                this.switchCaseStat();
                this.state = 167;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 26, this._ctx)) {
                    case 1:
                        {
                            this.state = 166;
                            this.normalTemplateBody();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    switchCaseStat() {
        let _localctx = new SwitchCaseStatContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, LGTemplateParser.RULE_switchCaseStat);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 169;
                this.match(LGTemplateParser.DASH);
                this.state = 170;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.SWITCH) | (1 << LGTemplateParser.CASE) | (1 << LGTemplateParser.DEFAULT))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token_1.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 176;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << LGTemplateParser.WS) | (1 << LGTemplateParser.EXPRESSION) | (1 << LGTemplateParser.TEXT))) !== 0)) {
                    {
                        this.state = 174;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case LGTemplateParser.WS:
                                {
                                    this.state = 171;
                                    this.match(LGTemplateParser.WS);
                                }
                                break;
                            case LGTemplateParser.TEXT:
                                {
                                    this.state = 172;
                                    this.match(LGTemplateParser.TEXT);
                                }
                                break;
                            case LGTemplateParser.EXPRESSION:
                                {
                                    this.state = 173;
                                    this.expression();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    this.state = 178;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression() {
        let _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, LGTemplateParser.RULE_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 179;
                this.match(LGTemplateParser.EXPRESSION);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expressionInStructure() {
        let _localctx = new ExpressionInStructureContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, LGTemplateParser.RULE_expressionInStructure);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 181;
                this.match(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException_1.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    static get _ATN() {
        if (!LGTemplateParser.__ATN) {
            LGTemplateParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(LGTemplateParser._serializedATN));
        }
        return LGTemplateParser.__ATN;
    }
}
LGTemplateParser.WS = 1;
LGTemplateParser.NEWLINE = 2;
LGTemplateParser.COMMENTS = 3;
LGTemplateParser.DASH = 4;
LGTemplateParser.LEFT_SQUARE_BRACKET = 5;
LGTemplateParser.INVALID_TOKEN = 6;
LGTemplateParser.WS_IN_BODY = 7;
LGTemplateParser.MULTILINE_PREFIX = 8;
LGTemplateParser.NEWLINE_IN_BODY = 9;
LGTemplateParser.IF = 10;
LGTemplateParser.ELSEIF = 11;
LGTemplateParser.ELSE = 12;
LGTemplateParser.SWITCH = 13;
LGTemplateParser.CASE = 14;
LGTemplateParser.DEFAULT = 15;
LGTemplateParser.ESCAPE_CHARACTER = 16;
LGTemplateParser.EXPRESSION = 17;
LGTemplateParser.TEXT = 18;
LGTemplateParser.MULTILINE_SUFFIX = 19;
LGTemplateParser.WS_IN_STRUCTURE_NAME = 20;
LGTemplateParser.NEWLINE_IN_STRUCTURE_NAME = 21;
LGTemplateParser.STRUCTURE_NAME = 22;
LGTemplateParser.TEXT_IN_STRUCTURE_NAME = 23;
LGTemplateParser.STRUCTURED_COMMENTS = 24;
LGTemplateParser.WS_IN_STRUCTURE_BODY = 25;
LGTemplateParser.STRUCTURED_NEWLINE = 26;
LGTemplateParser.STRUCTURED_BODY_END = 27;
LGTemplateParser.STRUCTURE_IDENTIFIER = 28;
LGTemplateParser.STRUCTURE_EQUALS = 29;
LGTemplateParser.STRUCTURE_OR_MARK = 30;
LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY = 31;
LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY = 32;
LGTemplateParser.TEXT_IN_STRUCTURE_BODY = 33;
LGTemplateParser.RULE_template = 0;
LGTemplateParser.RULE_body = 1;
LGTemplateParser.RULE_structuredTemplateBody = 2;
LGTemplateParser.RULE_structuredBodyNameLine = 3;
LGTemplateParser.RULE_errorStructuredName = 4;
LGTemplateParser.RULE_structuredBodyContentLine = 5;
LGTemplateParser.RULE_errorStructureLine = 6;
LGTemplateParser.RULE_keyValueStructureLine = 7;
LGTemplateParser.RULE_keyValueStructureValue = 8;
LGTemplateParser.RULE_structuredBodyEndLine = 9;
LGTemplateParser.RULE_normalTemplateBody = 10;
LGTemplateParser.RULE_templateString = 11;
LGTemplateParser.RULE_normalTemplateString = 12;
LGTemplateParser.RULE_errorTemplateString = 13;
LGTemplateParser.RULE_ifElseTemplateBody = 14;
LGTemplateParser.RULE_ifConditionRule = 15;
LGTemplateParser.RULE_ifCondition = 16;
LGTemplateParser.RULE_switchCaseTemplateBody = 17;
LGTemplateParser.RULE_switchCaseRule = 18;
LGTemplateParser.RULE_switchCaseStat = 19;
LGTemplateParser.RULE_expression = 20;
LGTemplateParser.RULE_expressionInStructure = 21;
// tslint:disable:no-trailing-whitespace
LGTemplateParser.ruleNames = [
    "template", "body", "structuredTemplateBody", "structuredBodyNameLine",
    "errorStructuredName", "structuredBodyContentLine", "errorStructureLine",
    "keyValueStructureLine", "keyValueStructureValue", "structuredBodyEndLine",
    "normalTemplateBody", "templateString", "normalTemplateString", "errorTemplateString",
    "ifElseTemplateBody", "ifConditionRule", "ifCondition", "switchCaseTemplateBody",
    "switchCaseRule", "switchCaseStat", "expression", "expressionInStructure",
];
LGTemplateParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, "'|'",
];
LGTemplateParser._SYMBOLIC_NAMES = [
    undefined, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET",
    "INVALID_TOKEN", "WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY",
    "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER",
    "EXPRESSION", "TEXT", "MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME",
    "STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY",
    "STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS",
    "STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY",
    "TEXT_IN_STRUCTURE_BODY",
];
LGTemplateParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(LGTemplateParser._LITERAL_NAMES, LGTemplateParser._SYMBOLIC_NAMES, []);
LGTemplateParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03#\xBA\x04\x02" +
    "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
    "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
    "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
    "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x03" +
    "\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x036\n\x03\x03" +
    "\x04\x03\x04\x05\x04:\n\x04\x03\x04\x03\x04\x06\x04>\n\x04\r\x04\x0E\x04" +
    "?\x05\x04B\n\x04\x03\x04\x05\x04E\n\x04\x03\x05\x03\x05\x03\x05\x05\x05" +
    "J\n\x05\x03\x06\x07\x06M\n\x06\f\x06\x0E\x06P\v\x06\x03\x07\x03\x07\x05" +
    "\x07T\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x06\b\\\n\b\r\b\x0E\b" +
    "]\x03\t\x03\t\x03\t\x03\t\x03\t\x07\te\n\t\f\t\x0E\th\v\t\x03\n\x03\n" +
    "\x03\n\x06\nm\n\n\r\n\x0E\nn\x03\v\x03\v\x03\f\x06\ft\n\f\r\f\x0E\fu\x03" +
    "\r\x03\r\x05\rz\n\r\x03\x0E\x03\x0E\x05\x0E~\n\x0E\x03\x0E\x03\x0E\x03" +
    "\x0E\x07\x0E\x83\n\x0E\f\x0E\x0E\x0E\x86\v\x0E\x03\x0E\x05\x0E\x89\n\x0E" +
    "\x03\x0F\x06\x0F\x8C\n\x0F\r\x0F\x0E\x0F\x8D\x03\x10\x06\x10\x91\n\x10" +
    "\r\x10\x0E\x10\x92\x03\x11\x03\x11\x05\x11\x97\n\x11\x03\x12\x03\x12\x03" +
    "\x12\x03\x12\x03\x12\x07\x12\x9E\n\x12\f\x12\x0E\x12\xA1\v\x12\x03\x13" +
    "\x06\x13\xA4\n\x13\r\x13\x0E\x13\xA5\x03\x14\x03\x14\x05\x14\xAA\n\x14" +
    "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x07\x15\xB1\n\x15\f\x15\x0E\x15" +
    "\xB4\v\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x02\x02\x02\x18\x02" +
    "\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
    "\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
    ",\x02\x02\x05\x03\x02\x18\x19\x03\x02\f\x0E\x03\x02\x0F\x11\x02\xCA\x02" +
    ".\x03\x02\x02\x02\x045\x03\x02\x02\x02\x067\x03\x02\x02\x02\bF\x03\x02" +
    "\x02\x02\nN\x03\x02\x02\x02\fS\x03\x02\x02\x02\x0E[\x03\x02\x02\x02\x10" +
    "_\x03\x02\x02\x02\x12l\x03\x02\x02\x02\x14p\x03\x02\x02\x02\x16s\x03\x02" +
    "\x02\x02\x18y\x03\x02\x02\x02\x1A{\x03\x02\x02\x02\x1C\x8B\x03\x02\x02" +
    "\x02\x1E\x90\x03\x02\x02\x02 \x94\x03\x02\x02\x02\"\x98\x03\x02\x02\x02" +
    "$\xA3\x03\x02\x02\x02&\xA7\x03\x02\x02\x02(\xAB\x03\x02\x02\x02*\xB5\x03" +
    "\x02\x02\x02,\xB7\x03\x02\x02\x02./\x05\x04\x03\x02/0\x07\x02\x02\x03" +
    "0\x03\x03\x02\x02\x0216\x05\x16\f\x0226\x05\x1E\x10\x0236\x05$\x13\x02" +
    "46\x05\x06\x04\x0251\x03\x02\x02\x0252\x03\x02\x02\x0253\x03\x02\x02\x02" +
    "54\x03\x02\x02\x026\x05\x03\x02\x02\x027A\x05\b\x05\x028:\x05\f\x07\x02" +
    "98\x03\x02\x02\x029:\x03\x02\x02\x02:;\x03\x02\x02\x02;>\x07\x1C\x02\x02" +
    "<>\x05\x0E\b\x02=9\x03\x02\x02\x02=<\x03\x02\x02\x02>?\x03\x02\x02\x02" +
    "?=\x03\x02\x02\x02?@\x03\x02\x02\x02@B\x03\x02\x02\x02A=\x03\x02\x02\x02" +
    "AB\x03\x02\x02\x02BD\x03\x02\x02\x02CE\x05\x14\v\x02DC\x03\x02\x02\x02" +
    "DE\x03\x02\x02\x02E\x07\x03\x02\x02\x02FI\x07\x07\x02\x02GJ\x07\x18\x02" +
    "\x02HJ\x05\n\x06\x02IG\x03\x02\x02\x02IH\x03\x02\x02\x02J\t\x03\x02\x02" +
    "\x02KM\t\x02\x02\x02LK\x03\x02\x02\x02MP\x03\x02\x02\x02NL\x03\x02\x02" +
    "\x02NO\x03\x02\x02\x02O\v\x03\x02\x02\x02PN\x03\x02\x02\x02QT\x05\x10" +
    "\t\x02RT\x05,\x17\x02SQ\x03\x02\x02\x02SR\x03\x02\x02\x02T\r\x03\x02\x02" +
    "\x02U\\\x07\x1E\x02\x02V\\\x07\x1F\x02\x02W\\\x07 \x02\x02X\\\x07#\x02" +
    "\x02Y\\\x05,\x17\x02Z\\\x07!\x02\x02[U\x03\x02\x02\x02[V\x03\x02\x02\x02" +
    "[W\x03\x02\x02\x02[X\x03\x02\x02\x02[Y\x03\x02\x02\x02[Z\x03\x02\x02\x02" +
    "\\]\x03\x02\x02\x02][\x03\x02\x02\x02]^\x03\x02\x02\x02^\x0F\x03\x02\x02" +
    "\x02_`\x07\x1E\x02\x02`a\x07\x1F\x02\x02af\x05\x12\n\x02bc\x07 \x02\x02" +
    "ce\x05\x12\n\x02db\x03\x02\x02\x02eh\x03\x02\x02\x02fd\x03\x02\x02\x02" +
    "fg\x03\x02\x02\x02g\x11\x03\x02\x02\x02hf\x03\x02\x02\x02im\x07#\x02\x02" +
    "jm\x05,\x17\x02km\x07!\x02\x02li\x03\x02\x02\x02lj\x03\x02\x02\x02lk\x03" +
    "\x02\x02\x02mn\x03\x02\x02\x02nl\x03\x02\x02\x02no\x03\x02\x02\x02o\x13" +
    "\x03\x02\x02\x02pq\x07\x1D\x02\x02q\x15\x03\x02\x02\x02rt\x05\x18\r\x02" +
    "sr\x03\x02\x02\x02tu\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03\x02\x02\x02" +
    "v\x17\x03\x02\x02\x02wz\x05\x1A\x0E\x02xz\x05\x1C\x0F\x02yw\x03\x02\x02" +
    "\x02yx\x03\x02\x02\x02z\x19\x03\x02\x02\x02{}\x07\x06\x02\x02|~\x07\n" +
    "\x02\x02}|\x03\x02\x02\x02}~\x03\x02\x02\x02~\x84\x03\x02\x02\x02\x7F" +
    "\x83\x07\x14\x02\x02\x80\x83\x05*\x16\x02\x81\x83\x07\x12\x02\x02\x82" +
    "\x7F\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83" +
    "\x86\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85" +
    "\x88\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x87\x89\x07\x15\x02\x02\x88" +
    "\x87\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x1B\x03\x02\x02\x02\x8A" +
    "\x8C\x07\b\x02\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D" +
    "\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x1D\x03\x02\x02\x02\x8F" +
    "\x91\x05 \x11\x02\x90\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92" +
    "\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x1F\x03\x02\x02\x02\x94" +
    "\x96\x05\"\x12\x02\x95\x97\x05\x16\f\x02\x96\x95\x03\x02\x02\x02\x96\x97" +
    "\x03\x02\x02\x02\x97!\x03\x02\x02\x02\x98\x99\x07\x06\x02\x02\x99\x9F" +
    "\t\x03\x02\x02\x9A\x9E\x07\x03\x02\x02\x9B\x9E\x07\x14\x02\x02\x9C\x9E" +
    "\x05*\x16\x02\x9D\x9A\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9C" +
    "\x03\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0" +
    "\x03\x02\x02\x02\xA0#\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4" +
    "\x05&\x14\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA3" +
    "\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6%\x03\x02\x02\x02\xA7\xA9" +
    "\x05(\x15\x02\xA8\xAA\x05\x16\f\x02\xA9\xA8\x03\x02\x02\x02\xA9\xAA\x03" +
    "\x02\x02\x02\xAA\'\x03\x02\x02\x02\xAB\xAC\x07\x06\x02\x02\xAC\xB2\t\x04" +
    "\x02\x02\xAD\xB1\x07\x03\x02\x02\xAE\xB1\x07\x14\x02\x02\xAF\xB1\x05*" +
    "\x16\x02\xB0\xAD\x03\x02\x02\x02\xB0\xAE\x03\x02\x02\x02\xB0\xAF\x03\x02" +
    "\x02\x02\xB1\xB4\x03\x02\x02\x02\xB2\xB0\x03\x02\x02\x02\xB2\xB3\x03\x02" +
    "\x02\x02\xB3)\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB5\xB6\x07\x13" +
    "\x02\x02\xB6+\x03\x02\x02\x02\xB7\xB8\x07\"\x02\x02\xB8-\x03\x02\x02\x02" +
    "\x1F59=?ADINS[]flnuy}\x82\x84\x88\x8D\x92\x96\x9D\x9F\xA5\xA9\xB0\xB2";
exports.LGTemplateParser = LGTemplateParser;
class TemplateContext extends ParserRuleContext_1.ParserRuleContext {
    body() {
        return this.getRuleContext(0, BodyContext);
    }
    EOF() { return this.getToken(LGTemplateParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_template; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplate) {
            listener.enterTemplate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplate) {
            listener.exitTemplate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplate) {
            return visitor.visitTemplate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateContext = TemplateContext;
class BodyContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_body; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
exports.BodyContext = BodyContext;
class NormalBodyContext extends BodyContext {
    normalTemplateBody() {
        return this.getRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalBody) {
            listener.enterNormalBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalBody) {
            listener.exitNormalBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalBody) {
            return visitor.visitNormalBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalBodyContext = NormalBodyContext;
class IfElseBodyContext extends BodyContext {
    ifElseTemplateBody() {
        return this.getRuleContext(0, IfElseTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIfElseBody) {
            listener.enterIfElseBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfElseBody) {
            listener.exitIfElseBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfElseBody) {
            return visitor.visitIfElseBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfElseBodyContext = IfElseBodyContext;
class SwitchCaseBodyContext extends BodyContext {
    switchCaseTemplateBody() {
        return this.getRuleContext(0, SwitchCaseTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseBody) {
            listener.enterSwitchCaseBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseBody) {
            listener.exitSwitchCaseBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseBody) {
            return visitor.visitSwitchCaseBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseBodyContext = SwitchCaseBodyContext;
class StructuredBodyContext extends BodyContext {
    structuredTemplateBody() {
        return this.getRuleContext(0, StructuredTemplateBodyContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBody) {
            listener.enterStructuredBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBody) {
            listener.exitStructuredBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBody) {
            return visitor.visitStructuredBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyContext = StructuredBodyContext;
class StructuredTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    structuredBodyNameLine() {
        return this.getRuleContext(0, StructuredBodyNameLineContext);
    }
    structuredBodyEndLine() {
        return this.tryGetRuleContext(0, StructuredBodyEndLineContext);
    }
    errorStructureLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(ErrorStructureLineContext);
        }
        else {
            return this.getRuleContext(i, ErrorStructureLineContext);
        }
    }
    STRUCTURED_NEWLINE(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURED_NEWLINE);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURED_NEWLINE, i);
        }
    }
    structuredBodyContentLine(i) {
        if (i === undefined) {
            return this.getRuleContexts(StructuredBodyContentLineContext);
        }
        else {
            return this.getRuleContext(i, StructuredBodyContentLineContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredTemplateBody) {
            listener.enterStructuredTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredTemplateBody) {
            listener.exitStructuredTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredTemplateBody) {
            return visitor.visitStructuredTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredTemplateBodyContext = StructuredTemplateBodyContext;
class StructuredBodyNameLineContext extends ParserRuleContext_1.ParserRuleContext {
    LEFT_SQUARE_BRACKET() { return this.getToken(LGTemplateParser.LEFT_SQUARE_BRACKET, 0); }
    STRUCTURE_NAME() { return this.tryGetToken(LGTemplateParser.STRUCTURE_NAME, 0); }
    errorStructuredName() {
        return this.tryGetRuleContext(0, ErrorStructuredNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyNameLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyNameLine) {
            listener.enterStructuredBodyNameLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyNameLine) {
            listener.exitStructuredBodyNameLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyNameLine) {
            return visitor.visitStructuredBodyNameLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyNameLineContext = StructuredBodyNameLineContext;
class ErrorStructuredNameContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_NAME(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_NAME);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_NAME, i);
        }
    }
    TEXT_IN_STRUCTURE_NAME(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_NAME);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_NAME, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorStructuredName; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorStructuredName) {
            listener.enterErrorStructuredName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorStructuredName) {
            listener.exitErrorStructuredName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorStructuredName) {
            return visitor.visitErrorStructuredName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorStructuredNameContext = ErrorStructuredNameContext;
class StructuredBodyContentLineContext extends ParserRuleContext_1.ParserRuleContext {
    keyValueStructureLine() {
        return this.tryGetRuleContext(0, KeyValueStructureLineContext);
    }
    expressionInStructure() {
        return this.tryGetRuleContext(0, ExpressionInStructureContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyContentLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyContentLine) {
            listener.enterStructuredBodyContentLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyContentLine) {
            listener.exitStructuredBodyContentLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyContentLine) {
            return visitor.visitStructuredBodyContentLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyContentLineContext = StructuredBodyContentLineContext;
class ErrorStructureLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_IDENTIFIER(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_IDENTIFIER);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_IDENTIFIER, i);
        }
    }
    STRUCTURE_EQUALS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_EQUALS);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_EQUALS, i);
        }
    }
    STRUCTURE_OR_MARK(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_OR_MARK);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
        }
    }
    TEXT_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
        }
    }
    expressionInStructure(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionInStructureContext);
        }
        else {
            return this.getRuleContext(i, ExpressionInStructureContext);
        }
    }
    ESCAPE_CHARACTER_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorStructureLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorStructureLine) {
            listener.enterErrorStructureLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorStructureLine) {
            listener.exitErrorStructureLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorStructureLine) {
            return visitor.visitErrorStructureLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorStructureLineContext = ErrorStructureLineContext;
class KeyValueStructureLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURE_IDENTIFIER() { return this.getToken(LGTemplateParser.STRUCTURE_IDENTIFIER, 0); }
    STRUCTURE_EQUALS() { return this.getToken(LGTemplateParser.STRUCTURE_EQUALS, 0); }
    keyValueStructureValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(KeyValueStructureValueContext);
        }
        else {
            return this.getRuleContext(i, KeyValueStructureValueContext);
        }
    }
    STRUCTURE_OR_MARK(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.STRUCTURE_OR_MARK);
        }
        else {
            return this.getToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_keyValueStructureLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValueStructureLine) {
            listener.enterKeyValueStructureLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValueStructureLine) {
            listener.exitKeyValueStructureLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValueStructureLine) {
            return visitor.visitKeyValueStructureLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValueStructureLineContext = KeyValueStructureLineContext;
class KeyValueStructureValueContext extends ParserRuleContext_1.ParserRuleContext {
    TEXT_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
        }
    }
    expressionInStructure(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionInStructureContext);
        }
        else {
            return this.getRuleContext(i, ExpressionInStructureContext);
        }
    }
    ESCAPE_CHARACTER_IN_STRUCTURE_BODY(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_keyValueStructureValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyValueStructureValue) {
            listener.enterKeyValueStructureValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyValueStructureValue) {
            listener.exitKeyValueStructureValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyValueStructureValue) {
            return visitor.visitKeyValueStructureValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.KeyValueStructureValueContext = KeyValueStructureValueContext;
class StructuredBodyEndLineContext extends ParserRuleContext_1.ParserRuleContext {
    STRUCTURED_BODY_END() { return this.getToken(LGTemplateParser.STRUCTURED_BODY_END, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_structuredBodyEndLine; }
    // @Override
    enterRule(listener) {
        if (listener.enterStructuredBodyEndLine) {
            listener.enterStructuredBodyEndLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStructuredBodyEndLine) {
            listener.exitStructuredBodyEndLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStructuredBodyEndLine) {
            return visitor.visitStructuredBodyEndLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.StructuredBodyEndLineContext = StructuredBodyEndLineContext;
class NormalTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    templateString(i) {
        if (i === undefined) {
            return this.getRuleContexts(TemplateStringContext);
        }
        else {
            return this.getRuleContext(i, TemplateStringContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_normalTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalTemplateBody) {
            listener.enterNormalTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalTemplateBody) {
            listener.exitNormalTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalTemplateBody) {
            return visitor.visitNormalTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalTemplateBodyContext = NormalTemplateBodyContext;
class TemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    normalTemplateString() {
        return this.tryGetRuleContext(0, NormalTemplateStringContext);
    }
    errorTemplateString() {
        return this.tryGetRuleContext(0, ErrorTemplateStringContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_templateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterTemplateString) {
            listener.enterTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTemplateString) {
            listener.exitTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTemplateString) {
            return visitor.visitTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.TemplateStringContext = TemplateStringContext;
class NormalTemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    MULTILINE_PREFIX() { return this.tryGetToken(LGTemplateParser.MULTILINE_PREFIX, 0); }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    ESCAPE_CHARACTER(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.ESCAPE_CHARACTER);
        }
        else {
            return this.getToken(LGTemplateParser.ESCAPE_CHARACTER, i);
        }
    }
    MULTILINE_SUFFIX() { return this.tryGetToken(LGTemplateParser.MULTILINE_SUFFIX, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_normalTemplateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterNormalTemplateString) {
            listener.enterNormalTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNormalTemplateString) {
            listener.exitNormalTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNormalTemplateString) {
            return visitor.visitNormalTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.NormalTemplateStringContext = NormalTemplateStringContext;
class ErrorTemplateStringContext extends ParserRuleContext_1.ParserRuleContext {
    INVALID_TOKEN(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.INVALID_TOKEN);
        }
        else {
            return this.getToken(LGTemplateParser.INVALID_TOKEN, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_errorTemplateString; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorTemplateString) {
            listener.enterErrorTemplateString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorTemplateString) {
            listener.exitErrorTemplateString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorTemplateString) {
            return visitor.visitErrorTemplateString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ErrorTemplateStringContext = ErrorTemplateStringContext;
class IfElseTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    ifConditionRule(i) {
        if (i === undefined) {
            return this.getRuleContexts(IfConditionRuleContext);
        }
        else {
            return this.getRuleContext(i, IfConditionRuleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifElseTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfElseTemplateBody) {
            listener.enterIfElseTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfElseTemplateBody) {
            listener.exitIfElseTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfElseTemplateBody) {
            return visitor.visitIfElseTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfElseTemplateBodyContext = IfElseTemplateBodyContext;
class IfConditionRuleContext extends ParserRuleContext_1.ParserRuleContext {
    ifCondition() {
        return this.getRuleContext(0, IfConditionContext);
    }
    normalTemplateBody() {
        return this.tryGetRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifConditionRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfConditionRule) {
            listener.enterIfConditionRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfConditionRule) {
            listener.exitIfConditionRule(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfConditionRule) {
            return visitor.visitIfConditionRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfConditionRuleContext = IfConditionRuleContext;
class IfConditionContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    IF() { return this.tryGetToken(LGTemplateParser.IF, 0); }
    ELSE() { return this.tryGetToken(LGTemplateParser.ELSE, 0); }
    ELSEIF() { return this.tryGetToken(LGTemplateParser.ELSEIF, 0); }
    WS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.WS);
        }
        else {
            return this.getToken(LGTemplateParser.WS, i);
        }
    }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_ifCondition; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfCondition) {
            listener.enterIfCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfCondition) {
            listener.exitIfCondition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfCondition) {
            return visitor.visitIfCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.IfConditionContext = IfConditionContext;
class SwitchCaseTemplateBodyContext extends ParserRuleContext_1.ParserRuleContext {
    switchCaseRule(i) {
        if (i === undefined) {
            return this.getRuleContexts(SwitchCaseRuleContext);
        }
        else {
            return this.getRuleContext(i, SwitchCaseRuleContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseTemplateBody; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseTemplateBody) {
            listener.enterSwitchCaseTemplateBody(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseTemplateBody) {
            listener.exitSwitchCaseTemplateBody(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseTemplateBody) {
            return visitor.visitSwitchCaseTemplateBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseTemplateBodyContext = SwitchCaseTemplateBodyContext;
class SwitchCaseRuleContext extends ParserRuleContext_1.ParserRuleContext {
    switchCaseStat() {
        return this.getRuleContext(0, SwitchCaseStatContext);
    }
    normalTemplateBody() {
        return this.tryGetRuleContext(0, NormalTemplateBodyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseRule; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseRule) {
            listener.enterSwitchCaseRule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseRule) {
            listener.exitSwitchCaseRule(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseRule) {
            return visitor.visitSwitchCaseRule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseRuleContext = SwitchCaseRuleContext;
class SwitchCaseStatContext extends ParserRuleContext_1.ParserRuleContext {
    DASH() { return this.getToken(LGTemplateParser.DASH, 0); }
    SWITCH() { return this.tryGetToken(LGTemplateParser.SWITCH, 0); }
    CASE() { return this.tryGetToken(LGTemplateParser.CASE, 0); }
    DEFAULT() { return this.tryGetToken(LGTemplateParser.DEFAULT, 0); }
    WS(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.WS);
        }
        else {
            return this.getToken(LGTemplateParser.WS, i);
        }
    }
    TEXT(i) {
        if (i === undefined) {
            return this.getTokens(LGTemplateParser.TEXT);
        }
        else {
            return this.getToken(LGTemplateParser.TEXT, i);
        }
    }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_switchCaseStat; }
    // @Override
    enterRule(listener) {
        if (listener.enterSwitchCaseStat) {
            listener.enterSwitchCaseStat(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSwitchCaseStat) {
            listener.exitSwitchCaseStat(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSwitchCaseStat) {
            return visitor.visitSwitchCaseStat(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.SwitchCaseStatContext = SwitchCaseStatContext;
class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
    EXPRESSION() { return this.getToken(LGTemplateParser.EXPRESSION, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_expression; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionContext = ExpressionContext;
class ExpressionInStructureContext extends ParserRuleContext_1.ParserRuleContext {
    EXPRESSION_IN_STRUCTURE_BODY() { return this.getToken(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return LGTemplateParser.RULE_expressionInStructure; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpressionInStructure) {
            listener.enterExpressionInStructure(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpressionInStructure) {
            listener.exitExpressionInStructure(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpressionInStructure) {
            return visitor.visitExpressionInStructure(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
exports.ExpressionInStructureContext = ExpressionInStructureContext;

},{"antlr4ts/NoViableAltException":25,"antlr4ts/Parser":26,"antlr4ts/ParserRuleContext":28,"antlr4ts/RecognitionException":31,"antlr4ts/Token":37,"antlr4ts/VocabularyImpl":39,"antlr4ts/atn/ATN":40,"antlr4ts/atn/ATNDeserializer":44,"antlr4ts/atn/ParserATNSimulator":81,"antlr4ts/misc/Utils":126}],172:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
__export(require("./LGFileLexer"));
__export(require("./LGFileParser"));
__export(require("./LGTemplateLexer"));
__export(require("./LGTemplateParser"));

},{"./LGFileLexer":168,"./LGFileParser":169,"./LGTemplateLexer":170,"./LGTemplateParser":171}],173:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
__export(require("./templates"));
__export(require("./evaluator"));
__export(require("./templatesParser"));
__export(require("./generated"));
__export(require("./staticChecker"));
__export(require("./analyzer"));
__export(require("./template"));
__export(require("./diagnostic"));
__export(require("./templateException"));
__export(require("./extractor"));
__export(require("./templateImport"));
__export(require("./range"));
__export(require("./position"));
__export(require("./evaluationTarget"));
__export(require("./templateExtensions"));
__export(require("./analyzerResult"));
__export(require("./templateErrors"));
__export(require("./evaluator"));
__export(require("./errorListener"));
__export(require("./customizedMemory"));
__export(require("./expander"));
__export(require("./multiLanguageLG"));
__export(require("./evaluationOptions"));
__export(require("./lgResource"));

},{"./analyzer":158,"./analyzerResult":159,"./customizedMemory":160,"./diagnostic":161,"./errorListener":162,"./evaluationOptions":163,"./evaluationTarget":164,"./evaluator":165,"./expander":166,"./extractor":167,"./generated":172,"./lgResource":174,"./multiLanguageLG":175,"./position":176,"./range":177,"./staticChecker":179,"./template":180,"./templateErrors":181,"./templateException":182,"./templateExtensions":183,"./templateImport":184,"./templates":185,"./templatesParser":186}],174:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * LG resource entity, contains some core data structure.
 */
class LGResource {
    /**
     * Source of this template
     */
    /**
     * Creates a new instance of the [LGResource](xref:botbuilder-lg.LGResource) class.
     * @param id Resource id.
     * @param fullName The full path to the resource on disk.
     * @param content Resource content.
     */
    constructor(id, fullName, content) {
        this.id = id || '';
        this.fullName = fullName || '';
        this.content = content;
    }
}
exports.LGResource = LGResource;

},{}],175:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const templates_1 = require("./templates");
/**
 * Multi locale Template Manager for language generation. This template manager will enumerate multi-locale LG files and will select
 * the appropriate template using the current culture to perform template evaluation.
 */
class MultiLanguageLG {
    /**
     * Initializes a new instance of the MultiLanguageLG class.
     * @param templatesPerLocale A map of LG file templates per locale.
     * @param filePerLocale A map of locale and LG file.
     * @param defaultLanguage Default language.
     */
    constructor(templatesPerLocale, filePerLocale, defaultLanguage) {
        this.locales = [
            '',
            'aa',
            'aa-dj',
            'aa-er',
            'aa-et',
            'af',
            'af-na',
            'af-za',
            'agq',
            'agq-cm',
            'ak',
            'ak-gh',
            'am',
            'am-et',
            'ar',
            'ar-001',
            'ar-ae',
            'ar-bh',
            'ar-dj',
            'ar-dz',
            'ar-eg',
            'ar-er',
            'ar-il',
            'ar-iq',
            'ar-jo',
            'ar-km',
            'ar-kw',
            'ar-lb',
            'ar-ly',
            'ar-ma',
            'ar-mr',
            'ar-om',
            'ar-ps',
            'ar-qa',
            'ar-sa',
            'ar-sd',
            'ar-so',
            'ar-ss',
            'ar-sy',
            'ar-td',
            'ar-tn',
            'ar-ye',
            'arn',
            'arn-cl',
            'as',
            'as-in',
            'asa',
            'asa-tz',
            'ast',
            'ast-es',
            'az',
            'az-cyrl',
            'az-cyrl-az',
            'az-latn',
            'az-latn-az',
            'ba',
            'ba-ru',
            'bas',
            'bas-cm',
            'be',
            'be-by',
            'bem',
            'bem-zm',
            'bez',
            'bez-tz',
            'bg',
            'bg-bg',
            'bin',
            'bin-ng',
            'bm',
            'bm-latn',
            'bm-latn-ml',
            'bn',
            'bn-bd',
            'bn-in',
            'bo',
            'bo-cn',
            'bo-in',
            'br',
            'br-fr',
            'brx',
            'brx-in',
            'bs',
            'bs-cyrl',
            'bs-cyrl-ba',
            'bs-latn',
            'bs-latn-ba',
            'byn',
            'byn-er',
            'ca',
            'ca-ad',
            'ca-es',
            'ca-es-valencia',
            'ca-fr',
            'ca-it',
            'ce',
            'ce-ru',
            'cgg',
            'cgg-ug',
            'chr',
            'chr-cher',
            'chr-cher-us',
            'co',
            'co-fr',
            'cs',
            'cs-cz',
            'cu',
            'cu-ru',
            'cy',
            'cy-gb',
            'da',
            'da-dk',
            'da-gl',
            'dav',
            'dav-ke',
            'de',
            'de-at',
            'de-be',
            'de-ch',
            'de-de',
            'de-it',
            'de-li',
            'de-lu',
            'dje',
            'dje-ne',
            'dsb',
            'dsb-de',
            'dua',
            'dua-cm',
            'dv',
            'dv-mv',
            'dyo',
            'dyo-sn',
            'dz',
            'dz-bt',
            'ebu',
            'ebu-ke',
            'ee',
            'ee-gh',
            'ee-tg',
            'el',
            'el-cy',
            'el-gr',
            'en',
            'en-001',
            'en-029',
            'en-150',
            'en-ag',
            'en-ai',
            'en-as',
            'en-at',
            'en-au',
            'en-bb',
            'en-be',
            'en-bi',
            'en-bm',
            'en-bs',
            'en-bw',
            'en-bz',
            'en-ca',
            'en-cc',
            'en-ch',
            'en-ck',
            'en-cm',
            'en-cx',
            'en-cy',
            'en-de',
            'en-dk',
            'en-dm',
            'en-er',
            'en-fi',
            'en-fj',
            'en-fk',
            'en-fm',
            'en-gb',
            'en-gd',
            'en-gg',
            'en-gh',
            'en-gi',
            'en-gm',
            'en-gu',
            'en-gy',
            'en-hk',
            'en-id',
            'en-ie',
            'en-il',
            'en-im',
            'en-in',
            'en-io',
            'en-je',
            'en-jm',
            'en-ke',
            'en-ki',
            'en-kn',
            'en-ky',
            'en-lc',
            'en-lr',
            'en-ls',
            'en-mg',
            'en-mh',
            'en-mo',
            'en-mp',
            'en-ms',
            'en-mt',
            'en-mu',
            'en-mw',
            'en-my',
            'en-na',
            'en-nf',
            'en-ng',
            'en-nl',
            'en-nr',
            'en-nu',
            'en-nz',
            'en-pg',
            'en-ph',
            'en-pk',
            'en-pn',
            'en-pr',
            'en-pw',
            'en-rw',
            'en-sb',
            'en-sc',
            'en-sd',
            'en-se',
            'en-sg',
            'en-sh',
            'en-si',
            'en-sl',
            'en-ss',
            'en-sx',
            'en-sz',
            'en-tc',
            'en-tk',
            'en-to',
            'en-tt',
            'en-tv',
            'en-tz',
            'en-ug',
            'en-um',
            'en-us',
            'en-vc',
            'en-vg',
            'en-vi',
            'en-vu',
            'en-ws',
            'en-za',
            'en-zm',
            'en-zw',
            'eo',
            'eo-001',
            'es',
            'es-419',
            'es-ar',
            'es-bo',
            'es-br',
            'es-bz',
            'es-cl',
            'es-co',
            'es-cr',
            'es-cu',
            'es-do',
            'es-ec',
            'es-es',
            'es-gq',
            'es-gt',
            'es-hn',
            'es-mx',
            'es-ni',
            'es-pa',
            'es-pe',
            'es-ph',
            'es-pr',
            'es-py',
            'es-sv',
            'es-us',
            'es-uy',
            'es-ve',
            'et',
            'et-ee',
            'eu',
            'eu-es',
            'ewo',
            'ewo-cm',
            'fa',
            'fa-ir',
            'ff',
            'ff-latn',
            'ff-latn-bf',
            'ff-latn-cm',
            'ff-latn-gh',
            'ff-latn-gm',
            'ff-latn-gn',
            'ff-latn-gw',
            'ff-latn-lr',
            'ff-latn-mr',
            'ff-latn-ne',
            'ff-latn-ng',
            'ff-latn-sl',
            'ff-latn-sn',
            'fi',
            'fi-fi',
            'fil',
            'fil-ph',
            'fo',
            'fo-dk',
            'fo-fo',
            'fr',
            'fr-029',
            'fr-be',
            'fr-bf',
            'fr-bi',
            'fr-bj',
            'fr-bl',
            'fr-ca',
            'fr-cd',
            'fr-cf',
            'fr-cg',
            'fr-ch',
            'fr-ci',
            'fr-cm',
            'fr-dj',
            'fr-dz',
            'fr-fr',
            'fr-ga',
            'fr-gf',
            'fr-gn',
            'fr-gp',
            'fr-gq',
            'fr-ht',
            'fr-km',
            'fr-lu',
            'fr-ma',
            'fr-mc',
            'fr-mf',
            'fr-mg',
            'fr-ml',
            'fr-mq',
            'fr-mr',
            'fr-mu',
            'fr-nc',
            'fr-ne',
            'fr-pf',
            'fr-pm',
            'fr-re',
            'fr-rw',
            'fr-sc',
            'fr-sn',
            'fr-sy',
            'fr-td',
            'fr-tg',
            'fr-tn',
            'fr-vu',
            'fr-wf',
            'fr-yt',
            'fur',
            'fur-it',
            'fy',
            'fy-nl',
            'ga',
            'ga-ie',
            'gd',
            'gd-gb',
            'gl',
            'gl-es',
            'gn',
            'gn-py',
            'gsw',
            'gsw-ch',
            'gsw-fr',
            'gsw-li',
            'gu',
            'gu-in',
            'guz',
            'guz-ke',
            'gv',
            'gv-im',
            'ha',
            'ha-latn',
            'ha-latn-gh',
            'ha-latn-ne',
            'ha-latn-ng',
            'haw',
            'haw-us',
            'he',
            'he-il',
            'hi',
            'hi-in',
            'hr',
            'hr-ba',
            'hr-hr',
            'hsb',
            'hsb-de',
            'hu',
            'hu-hu',
            'hy',
            'hy-am',
            'ia',
            'ia-001',
            'ibb',
            'ibb-ng',
            'id',
            'id-id',
            'ig',
            'ig-ng',
            'ii',
            'ii-cn',
            'is',
            'is-is',
            'it',
            'it-ch',
            'it-it',
            'it-sm',
            'it-va',
            'iu',
            'iu-cans',
            'iu-cans-ca',
            'iu-latn',
            'iu-latn-ca',
            'ja',
            'ja-jp',
            'jgo',
            'jgo-cm',
            'jmc',
            'jmc-tz',
            'jv',
            'jv-java',
            'jv-java-id',
            'jv-latn',
            'jv-latn-id',
            'ka',
            'ka-ge',
            'kab',
            'kab-dz',
            'kam',
            'kam-ke',
            'kde',
            'kde-tz',
            'kea',
            'kea-cv',
            'khq',
            'khq-ml',
            'ki',
            'ki-ke',
            'kk',
            'kk-kz',
            'kkj',
            'kkj-cm',
            'kl',
            'kl-gl',
            'kln',
            'kln-ke',
            'km',
            'km-kh',
            'kn',
            'kn-in',
            'ko',
            'ko-kp',
            'ko-kr',
            'kok',
            'kok-in',
            'kr',
            'kr-latn',
            'kr-latn-ng',
            'ks',
            'ks-arab',
            'ks-arab-in',
            'ks-deva',
            'ks-deva-in',
            'ksb',
            'ksb-tz',
            'ksf',
            'ksf-cm',
            'ksh',
            'ksh-de',
            'ku',
            'ku-arab',
            'ku-arab-iq',
            'ku-arab-ir',
            'kw',
            'kw-gb',
            'ky',
            'ky-kg',
            'la',
            'la-001',
            'lag',
            'lag-tz',
            'lb',
            'lb-lu',
            'lg',
            'lg-ug',
            'lkt',
            'lkt-us',
            'ln',
            'ln-ao',
            'ln-cd',
            'ln-cf',
            'ln-cg',
            'lo',
            'lo-la',
            'lrc',
            'lrc-iq',
            'lrc-ir',
            'lt',
            'lt-lt',
            'lu',
            'lu-cd',
            'luo',
            'luo-ke',
            'luy',
            'luy-ke',
            'lv',
            'lv-lv',
            'mas',
            'mas-ke',
            'mas-tz',
            'mer',
            'mer-ke',
            'mfe',
            'mfe-mu',
            'mg',
            'mg-mg',
            'mgh',
            'mgh-mz',
            'mgo',
            'mgo-cm',
            'mi',
            'mi-nz',
            'mk',
            'mk-mk',
            'ml',
            'ml-in',
            'mn',
            'mn-cyrl',
            'mn-mn',
            'mn-mong',
            'mn-mong-cn',
            'mn-mong-mn',
            'mni',
            'mni-in',
            'moh',
            'moh-ca',
            'mr',
            'mr-in',
            'ms',
            'ms-bn',
            'ms-my',
            'ms-sg',
            'mt',
            'mt-mt',
            'mua',
            'mua-cm',
            'my',
            'my-mm',
            'mzn',
            'mzn-ir',
            'naq',
            'naq-na',
            'nb',
            'nb-no',
            'nb-sj',
            'nd',
            'nd-zw',
            'nds',
            'nds-de',
            'nds-nl',
            'ne',
            'ne-in',
            'ne-np',
            'nl',
            'nl-aw',
            'nl-be',
            'nl-bq',
            'nl-cw',
            'nl-nl',
            'nl-sr',
            'nl-sx',
            'nmg',
            'nmg-cm',
            'nn',
            'nn-no',
            'nnh',
            'nnh-cm',
            'no',
            'nqo',
            'nqo-gn',
            'nr',
            'nr-za',
            'nso',
            'nso-za',
            'nus',
            'nus-ss',
            'nyn',
            'nyn-ug',
            'oc',
            'oc-fr',
            'om',
            'om-et',
            'om-ke',
            'or',
            'or-in',
            'os',
            'os-ge',
            'os-ru',
            'pa',
            'pa-arab',
            'pa-arab-pk',
            'pa-guru',
            'pa-in',
            'pap',
            'pap-029',
            'pl',
            'pl-pl',
            'prg',
            'prg-001',
            'prs',
            'prs-af',
            'ps',
            'ps-af',
            'pt',
            'pt-ao',
            'pt-br',
            'pt-ch',
            'pt-cv',
            'pt-gq',
            'pt-gw',
            'pt-lu',
            'pt-mo',
            'pt-mz',
            'pt-pt',
            'pt-st',
            'pt-tl',
            'quc',
            'quc-latn',
            'quc-latn-gt',
            'quz',
            'quz-bo',
            'quz-ec',
            'quz-pe',
            'rm',
            'rm-ch',
            'rn',
            'rn-bi',
            'ro',
            'ro-md',
            'ro-ro',
            'rof',
            'rof-tz',
            'ru',
            'ru-by',
            'ru-kg',
            'ru-kz',
            'ru-md',
            'ru-ru',
            'ru-ua',
            'rw',
            'rw-rw',
            'rwk',
            'rwk-tz',
            'sa',
            'sa-in',
            'sah',
            'sah-ru',
            'saq',
            'saq-ke',
            'sbp',
            'sbp-tz',
            'sd',
            'sd-arab',
            'sd-arab-pk',
            'sd-deva',
            'sd-deva-in',
            'se',
            'se-fi',
            'se-no',
            'se-se',
            'seh',
            'seh-mz',
            'ses',
            'ses-ml',
            'sg',
            'sg-cf',
            'shi',
            'shi-latn',
            'shi-latn-ma',
            'shi-tfng',
            'shi-tfng-ma',
            'si',
            'si-lk',
            'sk',
            'sk-sk',
            'sl',
            'sl-si',
            'sma',
            'sma-no',
            'sma-se',
            'smj',
            'smj-no',
            'smj-se',
            'smn',
            'smn-fi',
            'sms',
            'sms-fi',
            'sn',
            'sn-latn',
            'sn-latn-zw',
            'so',
            'so-dj',
            'so-et',
            'so-ke',
            'so-so',
            'sq',
            'sq-al',
            'sq-mk',
            'sq-xk',
            'sr',
            'sr-cyrl',
            'sr-cyrl-ba',
            'sr-cyrl-me',
            'sr-cyrl-rs',
            'sr-cyrl-xk',
            'sr-latn',
            'sr-latn-ba',
            'sr-latn-me',
            'sr-latn-rs',
            'sr-latn-xk',
            'ss',
            'ss-sz',
            'ss-za',
            'ssy',
            'ssy-er',
            'st',
            'st-ls',
            'st-za',
            'sv',
            'sv-ax',
            'sv-fi',
            'sv-se',
            'sw',
            'sw-cd',
            'sw-ke',
            'sw-tz',
            'sw-ug',
            'syr',
            'syr-sy',
            'ta',
            'ta-in',
            'ta-lk',
            'ta-my',
            'ta-sg',
            'te',
            'te-in',
            'teo',
            'teo-ke',
            'teo-ug',
            'tg',
            'tg-cyrl',
            'tg-cyrl-tj',
            'th',
            'th-th',
            'ti',
            'ti-er',
            'ti-et',
            'tig',
            'tig-er',
            'tk',
            'tk-tm',
            'tn',
            'tn-bw',
            'tn-za',
            'to',
            'to-to',
            'tr',
            'tr-cy',
            'tr-tr',
            'ts',
            'ts-za',
            'tt',
            'tt-ru',
            'twq',
            'twq-ne',
            'tzm',
            'tzm-arab',
            'tzm-arab-ma',
            'tzm-latn',
            'tzm-latn-dz',
            'tzm-latn-ma',
            'tzm-tfng',
            'tzm-tfng-ma',
            'ug',
            'ug-cn',
            'uk',
            'uk-ua',
            'ur',
            'ur-in',
            'ur-pk',
            'uz',
            'uz-arab',
            'uz-arab-af',
            'uz-cyrl',
            'uz-cyrl-uz',
            'uz-latn',
            'uz-latn-uz',
            'vai',
            'vai-latn',
            'vai-latn-lr',
            'vai-vaii',
            'vai-vaii-lr',
            've',
            've-za',
            'vi',
            'vi-vn',
            'vo',
            'vo-001',
            'vun',
            'vun-tz',
            'wae',
            'wae-ch',
            'wal',
            'wal-et',
            'wo',
            'wo-sn',
            'xh',
            'xh-za',
            'xog',
            'xog-ug',
            'yav',
            'yav-cm',
            'yi',
            'yi-001',
            'yo',
            'yo-bj',
            'yo-ng',
            'zgh',
            'zgh-tfng',
            'zgh-tfng-ma',
            'zh',
            'zh-cn',
            'zh-hans',
            'zh-hans-hk',
            'zh-hans-mo',
            'zh-hant',
            'zh-hk',
            'zh-mo',
            'zh-sg',
            'zh-tw',
            'zu',
            'zu-za',
        ];
        if (templatesPerLocale !== undefined) {
            this.lgPerLocale = templatesPerLocale;
        }
        else if (filePerLocale === undefined) {
            throw new Error(`input is empty`);
        }
        else {
            this.lgPerLocale = new Map();
            for (const item of filePerLocale.entries()) {
                this.lgPerLocale.set(item[0], templates_1.Templates.parseFile(item[1]));
            }
        }
        const defaultLanguageArray = defaultLanguage === undefined ? [''] : [defaultLanguage];
        this.languagePolicy = this.getDefaultPolicy(defaultLanguageArray);
    }
    /**
     * Generate template evaluate result.
     * @param template Template name.
     * @param data Scope data.
     * @param locale Locale info.
     */
    generate(template, data, locale) {
        if (!template) {
            throw new Error('template is empty');
        }
        if (!locale) {
            locale = '';
        }
        if (this.lgPerLocale.has(locale)) {
            return this.lgPerLocale.get(locale).evaluate(template, data);
        }
        const fallbackLocales = [];
        if (this.languagePolicy.has(locale)) {
            fallbackLocales.push(...this.languagePolicy.get(locale));
        }
        if (locale !== '' && this.languagePolicy.has('')) {
            fallbackLocales.push(...this.languagePolicy.get(''));
        }
        if (fallbackLocales.length === 0) {
            throw new Error(`No supported language found for ${locale}`);
        }
        for (const fallBackLocale of fallbackLocales) {
            if (this.lgPerLocale.has(fallBackLocale)) {
                return this.lgPerLocale.get(fallBackLocale).evaluate(template, data);
            }
        }
        throw new Error(`No LG responses found for locale: ${locale}`);
    }
    /**
     * @private
     */
    getDefaultPolicy(defaultLanguages) {
        if (defaultLanguages === undefined) {
            defaultLanguages = [''];
        }
        const result = new Map();
        for (const locale of this.locales) {
            let lang = locale.toLowerCase();
            const fallback = [];
            while (lang) {
                fallback.push(lang);
                const i = lang.lastIndexOf('-');
                if (i > 0) {
                    lang = lang.substr(0, i);
                }
                else {
                    break;
                }
            }
            if (locale === '') {
                // here we set the default
                fallback.push(...defaultLanguages);
            }
            result.set(locale, fallback);
        }
        return result;
    }
}
exports.MultiLanguageLG = MultiLanguageLG;

},{"./templates":185}],176:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Position class
 */
class Position {
    /**
     * Creates a new instance of the [Position](xref:botbuilder-lg.Position) class.
     * @param line Line number of the current position.
     * @param character Character number of the current line.
     */
    constructor(line, character) {
        this.toString = () => `line ${this.line}:${this.character}`;
        this.line = line;
        this.character = character;
    }
}
exports.Position = Position;

},{}],177:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const position_1 = require("./position");
/**
 * Range class
 */
class Range {
    /**
     * Creates a new instance of the [Range](xref:botbuilder-lg.Range) class.
     * @param x Starting line number in a file or [Position](xref:botbuilder-lg.Position).
     * @param y Starting character number in a file or [Position](xref:botbuilder-lg.Position).
     * @param endLine Optional. Ending line number in a file.
     * @param endChar Optional. Ending character number in the end line.
     */
    constructor(x, y, endLine, endChar) {
        this.toString = () => {
            let result = this.start.toString();
            if (this.start.line <= this.end.line && this.start.character < this.end.character) {
                result += ` - ${this.end.toString()}`;
            }
            return result;
        };
        if (typeof x === 'number' && typeof y === 'number') {
            this.start = new position_1.Position(x, y);
            this.end = new position_1.Position(endLine, endChar);
        }
        else if (x instanceof position_1.Position && y instanceof position_1.Position) {
            this.start = x;
            this.end = y;
        }
    }
}
Range.DefaultRange = new Range(1, 0, 1, 0);
exports.Range = Range;

},{"./position":176}],178:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const range_1 = require("./range");
const antlr4ts_1 = require("antlr4ts");
const templateExtensions_1 = require("./templateExtensions");
/**
 * Position class
 */
class SourceRange {
    /**
     * Creates a new instance of the [SourceRange](xref:botbuilder-lg.SourceRange) class.
     * @param x [Range](xref:botbuilder-lg.Range) of block or `ParserRuleContext`, rule invocation record for parsing.
     * @param source Optional. Source, used as the lg file path.
     * @param offset Optional. Offset in the parse tree.
     */
    constructor(x, source, offset) {
        this.source = source || '';
        if (x instanceof range_1.Range) {
            this.range = x;
        }
        else if (x instanceof antlr4ts_1.ParserRuleContext) {
            if (!offset) {
                offset = 0;
            }
            this.range = templateExtensions_1.TemplateExtensions.convertToRange(x, offset);
        }
    }
}
exports.SourceRange = SourceRange;

},{"./range":177,"./templateExtensions":183,"antlr4ts":109}],179:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tree_1 = require("antlr4ts/tree");
const diagnostic_1 = require("./diagnostic");
const evaluator_1 = require("./evaluator");
const templates_1 = require("./templates");
const templateErrors_1 = require("./templateErrors");
const range_1 = require("./range");
const templateExtensions_1 = require("./templateExtensions");
/**
 * LG managed code checker.
 */
class StaticChecker extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [StaticChecker](xref:botbuilder-lg.StaticChecker) class.
     * @param templates [Templates](xref:botbuilder-lg.Templates) to be checked.
     */
    constructor(templates) {
        super();
        this.templates = templates;
    }
    /**
     * @private
     * Creates a property because we want this to be lazy loaded.
     */
    get expressionParser() {
        if (this._expressionParser === undefined) {
            // create an evaluator to leverage it's customized function look up for checking
            const evaluator = new evaluator_1.Evaluator(this.templates, this.templates.lgOptions);
            this._expressionParser = evaluator.expressionParser;
        }
        return this._expressionParser;
    }
    /**
     * Return error messages list.
     * @returns Report result.
     */
    check() {
        const result = [];
        if (this.templates.allTemplates.length === 0) {
            const diagnostic = new diagnostic_1.Diagnostic(range_1.Range.DefaultRange, templateErrors_1.TemplateErrors.noTemplate, diagnostic_1.DiagnosticSeverity.Warning, this.templates.source);
            result.push(diagnostic);
            return result;
        }
        for (const template of this.templates) {
            this.currentTemplate = template;
            const templateDiagnostics = [];
            for (const reference of this.templates.references) {
                const sameTemplates = reference.toArray().filter((u) => u.name === template.name);
                for (const sameTemplate of sameTemplates) {
                    const startLine = template.sourceRange.range.start.line;
                    const range = new range_1.Range(startLine, 0, startLine, template.name.length + 1);
                    const diagnostic = new diagnostic_1.Diagnostic(range, templateErrors_1.TemplateErrors.duplicatedTemplateInDiffTemplate(sameTemplate.name, sameTemplate.sourceRange.source), diagnostic_1.DiagnosticSeverity.Error, this.templates.source);
                    templateDiagnostics.push(diagnostic);
                }
            }
            if (templateDiagnostics.length === 0 && template.templateBodyParseTree !== undefined) {
                templateDiagnostics.push(...this.visit(template.templateBodyParseTree));
            }
            result.push(...templateDiagnostics);
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateBody`.
     * @param context The parse tree.
     */
    visitNormalTemplateBody(context) {
        let result = [];
        for (const templateStr of context.templateString()) {
            const errorTemplateStr = templateStr.errorTemplateString();
            if (errorTemplateStr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidTemplateBody, undefined, errorTemplateStr));
            }
            else {
                result = result.concat(this.visit(templateStr));
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.structuredTemplateBody`.
     * @param context The parse tree.
     */
    visitStructuredTemplateBody(context) {
        let result = [];
        const errorName = context.structuredBodyNameLine().errorStructuredName();
        if (errorName !== undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStrucName(errorName.text), undefined, context.structuredBodyNameLine()));
        }
        if (context.structuredBodyEndLine() === undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingStrucEnd, undefined, context));
        }
        const errors = context.errorStructureLine();
        if (errors && errors.length > 0) {
            for (const error of errors) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStrucBody(error.text), undefined, error));
            }
        }
        else {
            const bodys = context.structuredBodyContentLine();
            if (!bodys || bodys.length === 0) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.emptyStrucContent, undefined, context));
            }
            else {
                for (const body of bodys) {
                    if (body.expressionInStructure() !== undefined) {
                        result = result.concat(this.checkExpression(body.expressionInStructure()));
                    }
                    else {
                        const structureValues = body.keyValueStructureLine().keyValueStructureValue();
                        const errorPrefix = `Property  '` + body.keyValueStructureLine().text + `':`;
                        for (const structureValue of structureValues) {
                            for (const expr of structureValue.expressionInStructure()) {
                                result = result.concat(this.checkExpression(expr, errorPrefix));
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the `ifElseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitIfElseBody(context) {
        let result = [];
        const ifRules = context.ifElseTemplateBody().ifConditionRule();
        let idx = 0;
        for (const ifRule of ifRules) {
            const conditionNode = ifRule.ifCondition();
            const ifExpr = conditionNode.IF() !== undefined;
            const elseIfExpr = conditionNode.ELSEIF() !== undefined;
            const elseExpr = conditionNode.ELSE() !== undefined;
            const node = ifExpr
                ? conditionNode.IF()
                : elseIfExpr
                    ? conditionNode.ELSEIF()
                    : conditionNode.ELSE();
            if (node.text.split(' ').length - 1 > 1) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidWhitespaceInCondition, undefined, conditionNode));
            }
            if (idx === 0 && !ifExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notStartWithIfInCondition, diagnostic_1.DiagnosticSeverity.Warning, conditionNode));
            }
            if (idx > 0 && ifExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.multipleIfInCondition, undefined, conditionNode));
            }
            if (idx === ifRules.length - 1 && !elseExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notEndWithElseInCondition, diagnostic_1.DiagnosticSeverity.Warning, conditionNode));
            }
            if (idx > 0 && idx < ifRules.length - 1 && !elseIfExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidMiddleInCondition, undefined, conditionNode));
            }
            if (!elseExpr) {
                if (ifRule.ifCondition().expression().length !== 1) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidExpressionInCondition, undefined, conditionNode));
                }
                else {
                    const errorPrefix = `Condition '` + conditionNode.expression(0).text + `': `;
                    result = result.concat(this.checkExpression(conditionNode.expression(0), errorPrefix));
                }
            }
            else {
                if (ifRule.ifCondition().expression().length !== 0) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.extraExpressionInCondition, undefined, conditionNode));
                }
            }
            if (ifRule.normalTemplateBody() !== undefined) {
                result = result.concat(this.visit(ifRule.normalTemplateBody()));
            }
            else {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingTemplateBodyInCondition, undefined, conditionNode));
            }
            idx = idx + 1;
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the `switchCaseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitSwitchCaseBody(context) {
        let result = [];
        const switchCaseNodes = context.switchCaseTemplateBody().switchCaseRule();
        let idx = 0;
        const length = switchCaseNodes.length;
        for (const iterNode of switchCaseNodes) {
            const switchCaseStat = iterNode.switchCaseStat();
            const switchExpr = switchCaseStat.SWITCH() !== undefined;
            const caseExpr = switchCaseStat.CASE() !== undefined;
            const defaultExpr = switchCaseStat.DEFAULT() !== undefined;
            const node = switchExpr
                ? switchCaseStat.SWITCH()
                : caseExpr
                    ? switchCaseStat.CASE()
                    : switchCaseStat.DEFAULT();
            if (node.text.split(' ').length - 1 > 1) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidWhitespaceInSwitchCase, undefined, switchCaseStat));
            }
            if (idx === 0 && !switchExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notStartWithSwitchInSwitchCase, undefined, switchCaseStat));
            }
            if (idx > 0 && switchExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.multipleSwithStatementInSwitchCase, undefined, switchCaseStat));
            }
            if (idx > 0 && idx < length - 1 && !caseExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStatementInMiddlerOfSwitchCase, undefined, switchCaseStat));
            }
            if (idx === length - 1 && (caseExpr || defaultExpr)) {
                if (caseExpr) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notEndWithDefaultInSwitchCase, diagnostic_1.DiagnosticSeverity.Warning, switchCaseStat));
                }
                else {
                    if (length === 2) {
                        result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingCaseInSwitchCase, diagnostic_1.DiagnosticSeverity.Warning, switchCaseStat));
                    }
                }
            }
            if (switchExpr || caseExpr) {
                if (switchCaseStat.expression().length !== 1) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidExpressionInSwiathCase, undefined, switchCaseStat));
                }
                else {
                    let errorPrefix = switchExpr ? 'Switch' : 'Case';
                    errorPrefix += ` '${switchCaseStat.expression(0).text}': `;
                    result = result.concat(this.checkExpression(switchCaseStat.expression(0), errorPrefix));
                }
            }
            else {
                if (switchCaseStat.expression().length !== 0 || switchCaseStat.TEXT().length !== 0) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.extraExpressionInSwitchCase, undefined, switchCaseStat));
                }
            }
            if (caseExpr || defaultExpr) {
                if (iterNode.normalTemplateBody()) {
                    result = result.concat(this.visit(iterNode.normalTemplateBody()));
                }
                else {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingTemplateBodyInSwitchCase, undefined, switchCaseStat));
                }
            }
            idx = idx + 1;
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateString`.
     * @param context The parse tree.
     */
    visitNormalTemplateString(context) {
        const prefixErrorMsg = templateExtensions_1.TemplateExtensions.getPrefixErrorMessage(context);
        let result = [];
        for (const expression of context.expression()) {
            result = result.concat(this.checkExpression(expression, prefixErrorMsg));
        }
        const multiLinePrefix = context.MULTILINE_PREFIX();
        const multiLineSuffix = context.MULTILINE_SUFFIX();
        if (multiLinePrefix !== undefined && multiLineSuffix === undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.noEndingInMultiline, undefined, context));
        }
        return result;
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty [Diagnostic](xref:botbuilder-lg.Diagnostic) array.
     */
    defaultResult() {
        return [];
    }
    /**
     * @private
     */
    checkExpression(expressionContext, prefix = '') {
        const result = [];
        let exp = expressionContext.text;
        if (!exp.endsWith('}')) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.noCloseBracket, undefined, expressionContext));
        }
        else {
            exp = templateExtensions_1.TemplateExtensions.trimExpression(exp);
            try {
                this.expressionParser.parse(exp);
            }
            catch (e) {
                const suffixErrorMsg = evaluator_1.Evaluator.concatErrorMsg(templateErrors_1.TemplateErrors.expressionParseError(exp), e.message);
                const errorMsg = evaluator_1.Evaluator.concatErrorMsg(prefix, suffixErrorMsg);
                result.push(this.buildLGDiagnostic(errorMsg, undefined, expressionContext));
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     */
    buildLGDiagnostic(message, severity = undefined, context = undefined) {
        const lineOffset = this.currentTemplate !== undefined ? this.currentTemplate.sourceRange.range.start.line : 0;
        let templateNameInfo = '';
        if (this.currentTemplate !== undefined &&
            this.currentTemplate.name.startsWith(templates_1.Templates.inlineTemplateIdPrefix)) {
            templateNameInfo = `[${this.currentTemplate.name}]`;
        }
        const range = context === undefined
            ? new range_1.Range(lineOffset + 1, 0, lineOffset + 1, 0)
            : templateExtensions_1.TemplateExtensions.convertToRange(context, lineOffset);
        return new diagnostic_1.Diagnostic(range, templateNameInfo + message, severity, this.templates.source);
    }
}
exports.StaticChecker = StaticChecker;

},{"./diagnostic":161,"./evaluator":165,"./range":177,"./templateErrors":181,"./templateExtensions":183,"./templates":185,"antlr4ts/tree":134}],180:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Here is a data model that can easily understanded and used as the context or all kinds of visitors
 * wether it's evalator, static checker, anayler.. etc
 */
class Template {
    /**
     * Creates a new instance of the [Template](xref:botbuilder-lg.Template) class.
     * @param templatename Template name without parameters.
     * @param parameters Parameter list.
     * @param templatebody Template content.
     * @param sourceRange [SourceRange](xref:botbuilder-lg.SourceRange) of template.
     */
    constructor(templatename, parameters, templatebody, sourceRange) {
        this.name = templatename || '';
        this.parameters = parameters || [];
        this.sourceRange = sourceRange;
        this.body = templatebody || '';
    }
    /**
     * Returns a string representing the current [Template](xref:botbuilder-lg.Template) object.
     * @returns A string representing the [Template](xref:botbuilder-lg.Template).
     */
    toString() {
        return `[${this.name}(${this.parameters.join(', ')})]"${this.body}"`;
    }
}
exports.Template = Template;

},{}],181:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Centralized LG errors.
 */
class TemplateErrors {
}
TemplateErrors.noTemplate = `LG file must have at least one template definition.`;
TemplateErrors.invalidTemplateBody = `Invalid template body. Expecting '-' prefix.`;
TemplateErrors.missingStrucEnd = `Invalid structure body. Expecting ']' at the end of the body.`;
TemplateErrors.emptyStrucContent = `Invalid structure body. Body cannot be empty.`;
TemplateErrors.invalidWhitespaceInCondition = `Invalid condition: At most 1 whitespace allowed between 'IF/ELSEIF/ELSE' and ':'.`;
TemplateErrors.notStartWithIfInCondition = `Invalid condition: Conditions must start with 'IF/ELSEIF/ELSE' prefix.`;
TemplateErrors.multipleIfInCondition = `Invalid template body. There cannot be more than one 'IF' condition. Expecting 'IFELSE' or 'ELSE' statement.`;
TemplateErrors.notEndWithElseInCondition = `Conditional response template does not end with 'ELSE' condition.`;
TemplateErrors.invalidMiddleInCondition = `Invalid template body. Expecting 'ELSEIF'.`;
TemplateErrors.invalidExpressionInCondition = `Invalid condition. 'IF', 'ELSEIF' definitions must include a valid expression.`;
TemplateErrors.extraExpressionInCondition = `Invalid condition. 'ELSE' definition cannot include an expression.`;
TemplateErrors.missingTemplateBodyInCondition = `Invalid condition body. Conditions must include a valid body.`;
TemplateErrors.invalidWhitespaceInSwitchCase = `Invalid condition: At most 1 whitespace allowed between 'SWITCH/CASE/DEFAULT' and ':'.`;
TemplateErrors.notStartWithSwitchInSwitchCase = `Invalid conditional response template. Expecting a 'SWITCH' statement?`;
TemplateErrors.multipleSwithStatementInSwitchCase = `Invalid template body. There cannot be more than one 'SWITCH' statement. Expecting 'CASE' or 'DEFAULT' statement.`;
TemplateErrors.invalidStatementInMiddlerOfSwitchCase = `Invalid template body. Expecting a 'CASE' statement.`;
TemplateErrors.notEndWithDefaultInSwitchCase = `Conditional response template does not end with 'DEFAULT' condition.`;
TemplateErrors.missingCaseInSwitchCase = `Invalid template body. Expecting at least one 'CASE' statement.`;
TemplateErrors.invalidExpressionInSwiathCase = `Invalid condition. 'SWITCH' and 'CASE' statements must include a valid expression.`;
TemplateErrors.extraExpressionInSwitchCase = `Invalid condition. 'DEFAULT' statement cannot include an expression.`;
TemplateErrors.missingTemplateBodyInSwitchCase = `Invalid condition body. Expecing valid body inside a 'CASE' or 'DEFAULT' block.`;
TemplateErrors.noEndingInMultiline = 'Expecting "```" to close the multi-line block.';
TemplateErrors.noCloseBracket = `Close } is missing in Expression.`;
TemplateErrors.loopDetected = `Loop detected:`;
TemplateErrors.invalidMemory = `Scope is not a LG customized memory.`;
TemplateErrors.staticFailure = `Static failure with the following error.`;
TemplateErrors.invalidTemplateNameType = 'Expected string type for the parameter of template function.';
TemplateErrors.importFormatError = `Import format should follow '[x](y)' or '[x](y) as z'.`;
TemplateErrors.invalidStrucBody = (invalidBody) => `Invalid structure body: '${invalidBody}'. Body can include <PropertyName> = <Value> pairs or \${reference()} template reference.`;
TemplateErrors.invalidStrucName = (invalidName) => `Invalid structure name: '${invalidName}'. name should start with letter/number/_ and can only contains letter/number/./_.`;
TemplateErrors.syntaxError = (unexpectedContent) => `${unexpectedContent}. Expecting a comment, template definition, import statement or option definition.`;
TemplateErrors.invalidTemplateName = (invalidTemplateName) => `Invalid template name: '${invalidTemplateName}'. Template names can only contain letter, underscore '_' or number. Any part of a template name (split by '.') cannot start with a number.`;
TemplateErrors.invalidParameter = (invalidParameter) => `Invalid parameter name: '${invalidParameter}'. Parameter names can only contain letter, underscore '_' or number.`;
TemplateErrors.duplicatedTemplateInSameTemplate = (templateName) => `Duplicated definitions found for template: '${templateName}'.`;
TemplateErrors.duplicatedTemplateInDiffTemplate = (templateName, source) => `Duplicated definitions found for template: '${templateName}' in '${source}'.`;
TemplateErrors.noTemplateBody = (templateName) => `Missing template body in template '${templateName}'.`;
TemplateErrors.templateNotExist = (templateName) => `No such template '${templateName}'.`;
TemplateErrors.errorExpression = (refFullText, templateName, prefixText) => `[${templateName}] ${prefixText} Error occurred when evaluating '${refFullText}'.`;
TemplateErrors.nullExpression = (expression) => `'${expression}' evaluated to null.`;
TemplateErrors.argumentMismatch = (templateName, expectedCount, actualCount) => `arguments mismatch for template '` +
    `${templateName}` +
    `'. Expecting '` +
    `${expectedCount}` +
    `' arguments, actual '` +
    `${actualCount}` +
    `'.`;
TemplateErrors.templateExist = (templateName) => `template '${templateName}' already exists.`;
TemplateErrors.expressionParseError = (exp) => `Error occurred when parsing expression '${exp}'.`;
exports.TemplateErrors = TemplateErrors;

},{}],182:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * LG Exception that contains diagnostics.
 */
class TemplateException extends Error {
    /**
     * Creates a new instance of the [TemplateException](xref:botbuilder-lg.TemplateException) class.
     * @param m Error message.
     * @param diagnostics List of [Diagnostic](xref:botbuilder-lg.Diagnostic) to throw.
     */
    constructor(m, diagnostics) {
        super(m);
        this.diagnostics = diagnostics;
        Object.setPrototypeOf(this, TemplateException.prototype);
    }
    /**
     * Diagnostics.
     */
    getDiagnostic() {
        return this.diagnostics;
    }
}
exports.TemplateException = TemplateException;

},{}],183:[function(require,module,exports){
(function (process){(function (){
"use strict";
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const uuid_1 = require("uuid");
const lp = require("./generated/LGTemplateParser");
const range_1 = require("./range");
const position_1 = require("./position");
/**
 * Extension methods for LG.
 */
class TemplateExtensions {
    /**
     * Trim expression. ${abc} => abc,  ${a == {}} => a == {}.
     * @param expression Input expression string.
     * @returns Pure expression string.
     */
    static trimExpression(expression) {
        let result = expression.trim();
        if (result.startsWith('$')) {
            result = result.substr(1);
        }
        result = result.trim();
        if (result.startsWith('{') && result.endsWith('}')) {
            result = result.substr(1, result.length - 2);
        }
        return result.trim();
    }
    /**
     * Normalize authored path to os path.
     * path is from authored content which doesn't know what OS it is running on.
     * This method treats / and \ both as seperators regardless of OS, for windows that means / -> \ and for linux/mac \ -> /.
     * This allows author to use ../foo.lg or ..\foo.lg as equivelents for importing.
     * @param ambiguousPath AuthoredPath.
     * @returns Path expressed as OS path.
     */
    static normalizePath(ambiguousPath) {
        if (process.platform === 'win32') {
            // map linux/mac sep -> windows
            return path.normalize(ambiguousPath.replace(/\//g, '\\'));
        }
        else {
            // map windows sep -> linux/mac
            return path.normalize(ambiguousPath.replace(/\\/g, '/'));
        }
    }
    /**
     * Get prefix error message from normal template sting context.
     * @param context Normal template sting context.
     * @returns Prefix error message.
     */
    static getPrefixErrorMessage(context) {
        let errorPrefix = '';
        if (context.parent && context.parent.parent && context.parent.parent.parent) {
            if (context.parent.parent.parent instanceof lp.IfConditionRuleContext) {
                const conditionContext = context.parent.parent.parent;
                let tempMsg = '';
                if (conditionContext.ifCondition() && conditionContext.ifCondition().expression().length > 0) {
                    tempMsg = conditionContext.ifCondition().expression(0).text;
                    errorPrefix = `Condition '` + tempMsg + `': `;
                }
            }
            else {
                if (context.parent.parent.parent instanceof lp.SwitchCaseRuleContext) {
                    const switchCaseContext = context.parent.parent.parent;
                    const state = switchCaseContext.switchCaseStat();
                    if (state && state.DEFAULT()) {
                        errorPrefix = `Case 'Default':`;
                    }
                    else if (state && state.SWITCH()) {
                        let tempMsg = '';
                        if (state.expression(0)) {
                            tempMsg = state.expression(0).text;
                        }
                        errorPrefix = `Switch '${tempMsg} ':`;
                    }
                    else if (state && state.CASE()) {
                        let tempMsg = '';
                        if (state.expression(0)) {
                            tempMsg = state.expression(0).text;
                        }
                        errorPrefix = `Case '${tempMsg}':`;
                    }
                }
            }
        }
        return errorPrefix;
    }
    /**
     * If a value is pure Expression.
     * @param ctx Key value structure value context.
     */
    static isPureExpression(ctx) {
        if (ctx.expressionInStructure() === undefined || ctx.expressionInStructure().length != 1) {
            return false;
        }
        return ctx.expressionInStructure(0).text.trim() === ctx.text.trim();
    }
    /**
     * Escape \ from text.
     * @param exp Input text.
     * @returns Escaped text.
     */
    static evalEscape(exp) {
        const validCharactersDict = {
            '\\r': '\r',
            '\\n': '\n',
            '\\t': '\t',
            '\\\\': '\\',
        };
        return exp.replace(/\\[^\r\n]?/g, (sub) => {
            if (sub in validCharactersDict) {
                return validCharactersDict[sub];
            }
            else if (sub === '\\$') {
                return sub.substr(1);
            }
            else if (sub === '\\`') {
                return sub.substr(1);
            }
            else {
                return sub;
            }
        });
    }
    /**
     * Generate new guid string.
     */
    static newGuid() {
        return uuid_1.v4();
    }
    /**
     * read line from text.
     * @param input Text content.
     */
    static readLine(input) {
        if (!input) {
            return [];
        }
        return input.replace(/\r\n/g, '\n').split('\n');
    }
    /**
     * Convert antlr parser into Range.
     * @param context Antlr parse context.
     * @param [lineOffset] Line offset.
     * @returns Range object.
     */
    static convertToRange(context, lineOffset) {
        if (!lineOffset) {
            lineOffset = 0;
        }
        if (!context) {
            return range_1.Range.DefaultRange;
        }
        const startPosition = new position_1.Position(lineOffset + context.start.line, context.start.charPositionInLine);
        const stopPosition = new position_1.Position(lineOffset + context.stop.line, context.stop.charPositionInLine + context.stop.text.length);
        return new range_1.Range(startPosition, stopPosition);
    }
}
exports.TemplateExtensions = TemplateExtensions;

}).call(this)}).call(this,require('_process'))
},{"./generated/LGTemplateParser":171,"./position":176,"./range":177,"_process":205,"path":204,"uuid":209}],184:[function(require,module,exports){
"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Here is a data model that can help users understand and use the LG import definition in LG files easily.
 */
class TemplateImport {
    /**
     * Creates a new instance of the [TemplateImport](xref:botbuilder-lg.TemplateImport) class.
     * @param description Import description, which is in [].
     * @param id Import id, which is a path, in ().
     * @param sourceRange [SourceRange](xref:botbuilder-lg.SourceRange) of template.
     * @param alias Imports alias.
     */
    constructor(description, id, sourceRange, alias) {
        this.toString = () => {
            let importStr = `[${this.description}](${this.id})`;
            if (this.alias) {
                importStr += ` as ${this.alias}`;
            }
            return importStr;
        };
        this.description = description;
        this.sourceRange = sourceRange;
        this.id = id;
        this.alias = alias;
    }
}
exports.TemplateImport = TemplateImport;

},{}],185:[function(require,module,exports){
"use strict";
/* eslint-disable security/detect-object-injection */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const diagnostic_1 = require("./diagnostic");
const adaptive_expressions_1 = require("adaptive-expressions");
const templatesParser_1 = require("./templatesParser");
const evaluator_1 = require("./evaluator");
const expander_1 = require("./expander");
const analyzer_1 = require("./analyzer");
const templatesParser_2 = require("./templatesParser");
const templateErrors_1 = require("./templateErrors");
const templateExtensions_1 = require("./templateExtensions");
const evaluationOptions_1 = require("./evaluationOptions");
const path_1 = require("path");
const staticChecker_1 = require("./staticChecker");
const lgResource_1 = require("./lgResource");
const customizedMemory_1 = require("./customizedMemory");
/**
 * LG entrance, including properties that LG file has, and evaluate functions.
 */
class Templates {
    /**
     * Creates a new instance of the [Templates](xref:botbuilder-lg.Templates) class.
     * @param items Optional. List of [Template](xref:botbuilder-lg.Template) instances.
     * @param imports Optional. List of [TemplateImport](xref:botbuilder-lg.TemplateImport) instances.
     * @param diagnostics Optional. List of [Diagnostic](xref:botbuilder-lg.Diagnostic) instances.
     * @param references Optional. List of [Templates](xref:botbuilder-lg.Templates) instances.
     * @param content Optional. Content of the current Templates instance.
     * @param id Optional. Id of the current Templates instance.
     * @param expressionParser Optional. [ExpressionParser](xref:adaptive-expressions.ExpressionParser) to parse the expressions in the content.
     * @param importResolverDelegate Optional. Resolver to resolve LG import id to template text.
     * @param options Optional. List of strings representing the options during evaluation of the templates.
     * @param source Optional. Templates source.
     * @param namedReferences Optional. eferences that imported with the "as" syntax，for example: [import](path.lg) as myAlias.
     */
    constructor(items, imports, diagnostics, references, content, id, expressionParser, importResolverDelegate, options, source, namedReferences) {
        this.newLineRegex = /(\r?\n)/g;
        this.newLine = '\r\n';
        this.namespaceKey = '@namespace';
        this.exportsKey = '@exports';
        this.items = items || [];
        this.imports = imports || [];
        this.diagnostics = diagnostics || [];
        this.references = references || [];
        this.content = content || '';
        this.id = id || '';
        this.expressionParser = expressionParser || new adaptive_expressions_1.ExpressionParser();
        this.importResolver = importResolverDelegate;
        this.options = options || [];
        this.source = source;
        this.namedReferences = namedReferences || {};
        this.injectToExpressionFunction();
    }
    /**
     * Returns a new iterator for the template collection.
     */
    [Symbol.iterator]() {
        let index = 0;
        return {
            next: () => {
                if (index < this.items.length) {
                    return { done: false, value: this.items[index++] };
                }
                else {
                    return { done: true, value: undefined };
                }
            },
        };
    }
    /**
     * Returns a reference to the internal list of collection templates.
     */
    toArray() {
        return this.items;
    }
    /**
     * Appends 1 or more templates to the collection.
     * @param args List of templates to add.
     */
    push(...args) {
        args.forEach((t) => this.items.push(t));
    }
    /**
     * A value indicating whether the options when evaluation LG templates.
     */
    get lgOptions() {
        return new evaluationOptions_1.EvaluationOptions(this.options);
    }
    /**
     * A string value represents the namespace to register for current LG file.
     */
    get namespace() {
        return this.extractNamespace(this.options);
    }
    /**
     * All templates from current lg file and reference lg files.
     */
    get allTemplates() {
        let result = this.items;
        this.references.forEach((ref) => (result = result.concat(ref.items)));
        return Array.from(new Set(result));
    }
    /**
     * All diagnostics from current lg file and reference lg files.
     */
    get allDiagnostics() {
        let result = this.diagnostics;
        this.references.forEach((ref) => (result = result.concat(ref.diagnostics)));
        return Array.from(new Set(result));
    }
    /**
     * parse a file and return LG file.
     * @param filePath LG absolute file path..
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns New lg file.
     */
    static parseFile(filePath, importResolver, expressionParser) {
        return templatesParser_2.TemplatesParser.parseFile(filePath, importResolver, expressionParser).injectToExpressionFunction();
    }
    /**
     * Parser to turn lg content into a Templates.
     * @deprecated This method will soon be deprecated. Use ParseResource instead.
     * @param content Text content contains lg templates.
     * @param id Id is the identifier of content. If importResolver is undefined, id must be a full path string.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns Entity.
     */
    static parseText(content, id = '', importResolver, expressionParser) {
        return templatesParser_2.TemplatesParser.parseText(content, id, importResolver, expressionParser).injectToExpressionFunction();
    }
    /**
     * Parser to turn lg content into a Templates.
     * @param aresource LG resource.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns Entity.
     */
    static parseResource(resource, importResolver, expressionParser) {
        return templatesParser_2.TemplatesParser.parseResource(resource, importResolver, expressionParser).injectToExpressionFunction();
    }
    /**
     * Evaluate a template with given name and scope.
     * @param templateName Template name to be evaluated.
     * @param scope The state visible in the evaluation.
     * @returns Evaluate result.
     */
    evaluate(templateName, scope, opt = undefined) {
        this.checkErrors();
        const evalOpt = opt !== undefined ? opt.merge(this.lgOptions) : this.lgOptions;
        const evaluator = new evaluator_1.Evaluator(this, evalOpt);
        let result = evaluator.evaluateTemplate(templateName, scope);
        if (evalOpt.LineBreakStyle === evaluationOptions_1.LGLineBreakStyle.Markdown && typeof result === 'string') {
            result = result.replace(this.newLineRegex, '$1$1');
        }
        return result;
    }
    /**
     * Expand a template with given name and scope.
     * Return all possible responses instead of random one.
     * @param templateName Template name to be evaluated.
     * @param scope The state visible in the evaluation.
     * @returns Expand result.
     */
    expandTemplate(templateName, scope, opt = undefined) {
        this.checkErrors();
        const evalOpt = opt !== undefined ? opt.merge(this.lgOptions) : this.lgOptions;
        const expander = new expander_1.Expander(this, evalOpt);
        return expander.expandTemplate(templateName, scope);
    }
    /**
     * Analyze a template to get the static analyzer results including variables and template references.
     * @param templateName Template name to be evaluated.
     * @returns Analyzer result.
     */
    analyzeTemplate(templateName) {
        this.checkErrors();
        const analyzer = new analyzer_1.Analyzer(this);
        return analyzer.analyzeTemplate(templateName);
    }
    /**
     * Use to evaluate an inline template str.
     * @param inlineStr Inline string which will be evaluated.
     * @param scope Scope object or JToken.
     */
    evaluateText(inlineStr, scope, opt = undefined) {
        if (inlineStr === undefined) {
            throw Error('inline string is empty');
        }
        this.checkErrors();
        const inlineTemplateId = `${Templates.inlineTemplateIdPrefix}${this.getRandomTemplateId()}`;
        // wrap inline string with "# name and -" to align the evaluation process
        const multiLineMark = '```';
        inlineStr =
            !inlineStr.trim().startsWith(multiLineMark) && inlineStr.includes('\n')
                ? `${multiLineMark}${inlineStr}${multiLineMark}`
                : inlineStr;
        const newContent = `#${inlineTemplateId} ${this.newLine} - ${inlineStr}`;
        const newTemplates = templatesParser_2.TemplatesParser.parseTextWithRef(newContent, this);
        const evalOpt = opt !== undefined ? opt.merge(this.lgOptions) : this.lgOptions;
        return newTemplates.evaluate(inlineTemplateId, scope, evalOpt);
    }
    /**
     * Update a template and return LG file.
     * @param templateName Orignial template name.
     * @param newTemplateName New template name.
     * @param parameters New params.
     * @param templateBody New template body.
     * @returns New lg file.
     */
    updateTemplate(templateName, newTemplateName, parameters, templateBody) {
        const template = this.items.find((u) => u.name === templateName);
        if (template) {
            this.clearDiagnostic();
            const templateNameLine = this.buildTemplateNameLine(newTemplateName, parameters);
            const newTemplateBody = this.convertTemplateBody(templateBody);
            const content = `${templateNameLine}${this.newLine}${newTemplateBody}`;
            // update content
            this.content = this.replaceRangeContent(this.content, template.sourceRange.range.start.line - 1, template.sourceRange.range.end.line - 1, content);
            let updatedTemplates = new Templates();
            updatedTemplates.id = this.id;
            updatedTemplates.expressionParser = this.expressionParser;
            updatedTemplates.importResolver = this.importResolver;
            updatedTemplates.namedReferences = this.namedReferences;
            const resource = new lgResource_1.LGResource(this.id, this.id, content);
            updatedTemplates = new templatesParser_1.TemplatesTransformer(updatedTemplates).transform(templatesParser_2.TemplatesParser.antlrParseTemplates(resource));
            const originalStartLine = template.sourceRange.range.start.line - 1;
            this.appendDiagnosticWithOffset(updatedTemplates.diagnostics, originalStartLine);
            if (updatedTemplates.toArray().length > 0) {
                const newTemplate = this.recomputeSourceRange(updatedTemplates.toArray()[0], content);
                this.adjustRangeForUpdateTemplate(template, newTemplate);
                new staticChecker_1.StaticChecker(this).check().forEach((u) => this.diagnostics.push(u));
            }
        }
        return this;
    }
    /**
     * Add a new template and return LG file.
     * @param templateName New template name.
     * @param parameters New params.
     * @param templateBody New  template body.
     * @returns New lg file.
     */
    addTemplate(templateName, parameters, templateBody) {
        const template = this.items.find((u) => u.name === templateName);
        if (template) {
            throw new Error(templateErrors_1.TemplateErrors.templateExist(templateName));
        }
        this.clearDiagnostic();
        const templateNameLine = this.buildTemplateNameLine(templateName, parameters);
        const newTemplateBody = this.convertTemplateBody(templateBody);
        const content = `${templateNameLine}${this.newLine}${newTemplateBody}`;
        const originalStartLine = templateExtensions_1.TemplateExtensions.readLine(this.content).length;
        // update content
        this.content = `${this.content}${this.newLine}${templateNameLine}${this.newLine}${newTemplateBody}`;
        let updatedTemplates = new Templates();
        updatedTemplates.id = this.id;
        updatedTemplates.expressionParser = this.expressionParser;
        updatedTemplates.importResolver = this.importResolver;
        updatedTemplates.namedReferences = this.namedReferences;
        const resource = new lgResource_1.LGResource(this.id, this.id, content);
        updatedTemplates = new templatesParser_1.TemplatesTransformer(updatedTemplates).transform(templatesParser_2.TemplatesParser.antlrParseTemplates(resource));
        this.appendDiagnosticWithOffset(updatedTemplates.diagnostics, originalStartLine);
        if (updatedTemplates.toArray().length > 0) {
            const newTemplate = this.recomputeSourceRange(updatedTemplates.toArray()[0], content);
            this.adjustRangeForAddTemplate(newTemplate, originalStartLine);
            // adjust the last template's range when adding the template
            if (this.items.length > 0) {
                this.items[this.items.length - 1].sourceRange.range.end.line =
                    newTemplate.sourceRange.range.start.line - 1;
            }
            this.items.push(newTemplate);
            new staticChecker_1.StaticChecker(this).check().forEach((u) => this.diagnostics.push(u));
        }
        return this;
    }
    /**
     * Delete an exist template.
     * @param templateName Which template should delete.
     * @returns Return the new lg file.
     */
    deleteTemplate(templateName) {
        const templateIndex = this.items.findIndex((u) => u.name === templateName);
        if (templateIndex >= 0) {
            const template = this.items[templateIndex];
            this.clearDiagnostic();
            const startLine = template.sourceRange.range.start.line - 1;
            const stopLine = template.sourceRange.range.end.line - 1;
            this.content = this.replaceRangeContent(this.content, startLine, stopLine, undefined);
            this.adjustRangeForDeleteTemplate(template);
            this.items.splice(templateIndex, 1);
            new staticChecker_1.StaticChecker(this).check().forEach((u) => this.diagnostics.push(u));
        }
        return this;
    }
    /**
     * Returns a string representation of a [Templates](xref:botbuilder-lg.Templates) content.
     * @returns A string representation of a [Templates](xref:botbuilder-lg.Templates) content.
     */
    toString() {
        return this.content;
    }
    /**
     * @private
     */
    getRandomTemplateId() {
        return uuid_1.v4().split('-').join('');
    }
    /**
     * @private
     */
    appendDiagnosticWithOffset(diagnostics, offset) {
        if (diagnostics) {
            diagnostics.forEach((u) => {
                u.range.start.line += offset;
                u.range.end.line += offset;
                this.diagnostics.push(u);
            });
        }
    }
    /**
     * @private
     */
    adjustRangeForUpdateTemplate(oldTemplate, newTemplate) {
        const newRange = newTemplate.sourceRange.range.end.line - newTemplate.sourceRange.range.start.line;
        const oldRange = oldTemplate.sourceRange.range.end.line - oldTemplate.sourceRange.range.start.line;
        const lineOffset = newRange - oldRange;
        let hasFound = false;
        for (let i = 0; i < this.items.length; i++) {
            if (hasFound) {
                this.items[i].sourceRange.range.start.line += lineOffset;
                this.items[i].sourceRange.range.end.line += lineOffset;
            }
            else if (this.items[i].name === oldTemplate.name) {
                hasFound = true;
                newTemplate.sourceRange.range.start.line = oldTemplate.sourceRange.range.start.line;
                newTemplate.sourceRange.range.end.line = oldTemplate.sourceRange.range.end.line + lineOffset;
                this.items[i] = newTemplate;
            }
        }
    }
    /**
     * @private
     */
    adjustRangeForAddTemplate(newTemplate, lineOffset) {
        const lineLength = newTemplate.sourceRange.range.end.line - newTemplate.sourceRange.range.start.line;
        newTemplate.sourceRange.range.start.line = lineOffset + 1;
        newTemplate.sourceRange.range.end.line = lineOffset + lineLength + 1;
    }
    /**
     * @private
     */
    adjustRangeForDeleteTemplate(oldTemplate) {
        const lineOffset = oldTemplate.sourceRange.range.end.line - oldTemplate.sourceRange.range.start.line + 1;
        let hasFound = false;
        for (let i = 0; i < this.items.length; i++) {
            if (hasFound) {
                this.items[i].sourceRange.range.start.line -= lineOffset;
                this.items[i].sourceRange.range.end.line -= lineOffset;
            }
            else if (this.items[i].name == oldTemplate.name) {
                hasFound = true;
            }
        }
    }
    /**
     * @private
     */
    clearDiagnostic() {
        this.diagnostics = [];
    }
    /**
     * @private
     */
    replaceRangeContent(originString, startLine, stopLine, replaceString) {
        const originList = templateExtensions_1.TemplateExtensions.readLine(originString);
        if (startLine < 0 || startLine > stopLine || stopLine >= originList.length) {
            throw new Error('index out of range.');
        }
        const destList = [];
        destList.push(...originList.slice(0, startLine));
        if (replaceString !== undefined && replaceString !== null) {
            destList.push(replaceString);
        }
        destList.push(...originList.slice(stopLine + 1));
        return destList.join(this.newLine);
    }
    /**
     * @private
     */
    convertTemplateBody(templateBody) {
        if (!templateBody) {
            return '';
        }
        const replaceList = templateExtensions_1.TemplateExtensions.readLine(templateBody);
        const destList = replaceList.map((u) => {
            return u.trimLeft().startsWith('#') ? `- ${u.trimLeft()}` : u;
        });
        return destList.join(this.newLine);
    }
    /**
     * @private
     * Compute LG SourceRange based on content instead of parsed token.
     * */
    recomputeSourceRange(template, content) {
        if (content != null) {
            const contentList = templateExtensions_1.TemplateExtensions.readLine(content);
            template.sourceRange.range.start.line = 1;
            template.sourceRange.range.end.line = contentList.length;
        }
        return template;
    }
    /**
     * @private
     */
    buildTemplateNameLine(templateName, parameters) {
        // if parameters is null or undefined, ignore ()
        if (parameters === undefined || parameters === undefined) {
            return `# ${templateName}`;
        }
        else {
            return `# ${templateName}(${parameters.join(', ')})`;
        }
    }
    /**
     * @private
     */
    checkErrors() {
        if (this.allDiagnostics) {
            const errors = this.allDiagnostics.filter((u) => u.severity === diagnostic_1.DiagnosticSeverity.Error);
            if (errors.length !== 0) {
                throw Error(errors.join(this.newLine));
            }
        }
    }
    /**
     * @private
     */
    injectToExpressionFunction() {
        const totalTemplates = [this].concat(this.references);
        for (const curTemplates of totalTemplates) {
            const globalFuncs = curTemplates.getGlobalFunctionTable(curTemplates.options);
            for (const templateName of globalFuncs) {
                if (curTemplates.items.find((u) => u.name === templateName) !== undefined) {
                    const prefix = !curTemplates.namespace || !curTemplates.namespace.trim() ? '' : curTemplates.namespace + '.';
                    const newGlobalName = prefix + templateName;
                    adaptive_expressions_1.Expression.functions.add(newGlobalName, new adaptive_expressions_1.ExpressionEvaluator(newGlobalName, (expr, state, options) => {
                        let value;
                        let error;
                        let args;
                        const evaluator = new evaluator_1.Evaluator(this, this.lgOptions);
                        // eslint-disable-next-line prefer-const
                        ({ args, error } = adaptive_expressions_1.FunctionUtils.evaluateChildren(expr, state, options));
                        if (!error) {
                            const parameters = evaluator.templateMap[templateName].parameters;
                            const newScope = {};
                            parameters.map((e, i) => (newScope[e] = args[i]));
                            const scope = new customizedMemory_1.CustomizedMemory(state, new adaptive_expressions_1.SimpleObjectMemory(newScope));
                            try {
                                value = evaluator.evaluateTemplate(templateName, scope);
                            }
                            catch (e) {
                                error = e.message;
                            }
                        }
                        return { value, error };
                    }, adaptive_expressions_1.ReturnType.Object));
                }
            }
        }
        return this;
    }
    /**
     * @private
     */
    extractOptionByKey(nameOfKey, options) {
        let result = undefined;
        for (const option of options) {
            if (nameOfKey && option.includes('=')) {
                const index = option.indexOf('=');
                const key = option.substring(0, index).trim().toLowerCase();
                const value = option.substring(index + 1).trim();
                if (key === nameOfKey) {
                    result = value;
                }
            }
        }
        return result;
    }
    /**
     * @private
     */
    extractNamespace(options) {
        let result = this.extractOptionByKey(this.namespaceKey, options);
        if (!result) {
            result = path_1.basename(this.id || '').split('.')[0];
        }
        return result;
    }
    /**
     * @private
     */
    getGlobalFunctionTable(options) {
        const result = [];
        const value = this.extractOptionByKey(this.exportsKey, options);
        if (value) {
            const templateList = value.split(',');
            templateList.forEach((u) => {
                result.push(u.trim());
            });
        }
        return result;
    }
}
/**
 * Temp Template ID for inline content.
 */
Templates.inlineTemplateIdPrefix = '__temp__';
exports.Templates = Templates;

},{"./analyzer":158,"./customizedMemory":160,"./diagnostic":161,"./evaluationOptions":163,"./evaluator":165,"./expander":166,"./lgResource":174,"./staticChecker":179,"./templateErrors":181,"./templateExtensions":183,"./templatesParser":186,"adaptive-expressions":2,"path":204,"uuid":209}],186:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable security/detect-non-literal-fs-filename */
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const ANTLRInputStream_1 = require("antlr4ts/ANTLRInputStream");
const CommonTokenStream_1 = require("antlr4ts/CommonTokenStream");
const errorListener_1 = require("./errorListener");
const LGFileLexer_1 = require("./generated/LGFileLexer");
const LGFileParser_1 = require("./generated/LGFileParser");
const templateImport_1 = require("./templateImport");
const template_1 = require("./template");
const templates_1 = require("./templates");
const staticChecker_1 = require("./staticChecker");
const templateExtensions_1 = require("./templateExtensions");
const templateException_1 = require("./templateException");
const path = require("path");
const fs = require("fs");
const diagnostic_1 = require("./diagnostic");
const tree_1 = require("antlr4ts/tree");
const templateErrors_1 = require("./templateErrors");
const sourceRange_1 = require("./sourceRange");
const LGTemplateLexer_1 = require("./generated/LGTemplateLexer");
const LGTemplateParser_1 = require("./generated/LGTemplateParser");
const lgResource_1 = require("./lgResource");
/**
 * LG Parser
 */
class TemplatesParser {
    /**
     * parse a file and return LG file.
     * @param filePath LG absolute file path..
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns New lg file.
     */
    static parseFile(filePath, importResolver, expressionParser) {
        const fullPath = templateExtensions_1.TemplateExtensions.normalizePath(filePath);
        const content = fs.readFileSync(fullPath, 'utf-8');
        const resource = new lgResource_1.LGResource(fullPath, fullPath, content);
        return TemplatesParser.parseResource(resource, importResolver, expressionParser);
    }
    /**
     * Parser to turn lg content into a Templates.
     * @deprecated This method will soon be deprecated. Use ParseResource instead.
     * @param content Text content contains lg templates.
     * @param id Id is the identifier of content. If importResolver is undefined, id must be a full path string.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns Entity.
     */
    static parseText(content, id = '', importResolver, expressionParser) {
        const resource = new lgResource_1.LGResource(id, id, content);
        return TemplatesParser.parseResource(resource, importResolver, expressionParser);
    }
    /**
     * Parser to turn lg content into a Templates.
     * @param resource LG resource.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @param cachedTemplates Give the file path and templates to avoid parsing and to improve performance.
     * @returns Entity.
     */
    static parseResource(resource, importResolver, expressionParser) {
        return TemplatesParser.innerParseResource(resource, importResolver, expressionParser);
    }
    /**
     * Parser to turn lg content into a Templates based on the original Templates.
     * @param content Text content contains lg templates.
     * @param originalTemplates Original templates
     */
    static parseTextWithRef(content, originalTemplates) {
        if (!originalTemplates) {
            throw Error(`templates is empty`);
        }
        const id = TemplatesParser.inlineContentId;
        let newTemplates = new templates_1.Templates();
        newTemplates.content = content;
        newTemplates.id = id;
        newTemplates.source = id;
        newTemplates.importResolver = originalTemplates.importResolver;
        newTemplates.options = originalTemplates.options;
        newTemplates.namedReferences = originalTemplates.namedReferences;
        try {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            const resource = new lgResource_1.LGResource(id, id, content);
            newTemplates = new TemplatesTransformer(newTemplates).transform(this.antlrParseTemplates(resource));
            newTemplates.references = this.getReferences(newTemplates)
                .concat(originalTemplates.references)
                .concat([originalTemplates]);
            const semanticErrors = new staticChecker_1.StaticChecker(newTemplates).check();
            newTemplates.diagnostics.push(...semanticErrors);
        }
        catch (err) {
            if (err instanceof templateException_1.TemplateException) {
                newTemplates.diagnostics.push(...err.getDiagnostic());
            }
            else {
                throw err;
            }
        }
        return newTemplates;
    }
    /**
     * Default import resolver, using relative/absolute file path to access the file content.
     * @param resource Original Resource.
     * @param resourceId Import path.
     */
    static defaultFileResolver(resource, resourceId) {
        // If the import id contains "#", we would cut it to use the left path.
        // for example: [import](a.b.c#d.lg), after convertion, id would be d.lg
        const hashIndex = resourceId.indexOf('#');
        if (hashIndex > 0) {
            resourceId = resourceId.substr(hashIndex + 1);
        }
        let importPath = templateExtensions_1.TemplateExtensions.normalizePath(resourceId);
        if (!path.isAbsolute(importPath)) {
            // get full path for importPath relative to path which is doing the import.
            importPath = templateExtensions_1.TemplateExtensions.normalizePath(path.join(path.dirname(resource.fullName), importPath));
        }
        if (!fs.existsSync(importPath) || !fs.statSync(importPath).isFile()) {
            throw Error(`Could not find file: ${importPath}`);
        }
        const content = fs.readFileSync(importPath, 'utf-8');
        return new lgResource_1.LGResource(importPath, importPath, content);
    }
    /**
     * Parser to turn lg content into a Templates.
     * @param resource LG resource.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @param cachedTemplates Give the file path and templates to avoid parsing and to improve performance.
     * @param parentTemplates Parent visited Templates.
     * @returns Entity.
     */
    static innerParseResource(resource, importResolver, expressionParser, cachedTemplates = new Map(), parentTemplates = []) {
        if (!resource) {
            throw new Error('lg resource is empty.');
        }
        if (cachedTemplates.has(resource.id)) {
            return cachedTemplates.get(resource.id);
        }
        importResolver = importResolver || TemplatesParser.defaultFileResolver;
        let templates = new templates_1.Templates();
        templates.content = resource.content;
        templates.id = resource.id;
        templates.source = resource.fullName;
        templates.importResolver = importResolver;
        if (expressionParser) {
            templates.expressionParser = expressionParser;
        }
        try {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            templates = new TemplatesTransformer(templates).transform(this.antlrParseTemplates(resource));
            templates.references = this.getReferences(templates, cachedTemplates, parentTemplates);
            const semanticErrors = new staticChecker_1.StaticChecker(templates).check();
            templates.diagnostics.push(...semanticErrors);
        }
        catch (err) {
            if (err instanceof templateException_1.TemplateException) {
                templates.diagnostics.push(...err.getDiagnostic());
            }
            else {
                throw err;
            }
        }
        return templates;
    }
    /**
     * Parse LG content and return the AST.
     * @param resource LG resource.
     * @returns The abstract syntax tree of lg file.
     */
    static antlrParseTemplates(resource) {
        if (!resource.content || resource.content.trim() === '') {
            return undefined;
        }
        const input = new ANTLRInputStream_1.ANTLRInputStream(resource.content);
        const lexer = new LGFileLexer_1.LGFileLexer(input);
        const tokens = new CommonTokenStream_1.CommonTokenStream(lexer);
        const parser = new LGFileParser_1.LGFileParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(new errorListener_1.ErrorListener(resource.fullName));
        parser.buildParseTree = true;
        return parser.file();
    }
    /**
     * @private
     */
    static getReferences(file, cachedTemplates = new Map(), parentTemplates = []) {
        const resourcesFound = new Set();
        this.resolveImportResources(file, resourcesFound, cachedTemplates, parentTemplates);
        resourcesFound.delete(file);
        return Array.from(resourcesFound);
    }
    /**
     * @private
     */
    static resolveImportResources(start, resourcesFound, cachedTemplates, parentTemplates) {
        resourcesFound.add(start);
        parentTemplates.push(start);
        for (const importItem of start.imports) {
            let resource;
            try {
                const originalResource = new lgResource_1.LGResource(start.id, start.source, start.content);
                resource = start.importResolver(originalResource, importItem.id);
            }
            catch (error) {
                const diagnostic = new diagnostic_1.Diagnostic(importItem.sourceRange.range, error.message, diagnostic_1.DiagnosticSeverity.Error, start.source);
                throw new templateException_1.TemplateException(error.message, [diagnostic]);
            }
            // Cycle reference would throw exception to avoid infinite Loop.
            // Import self is allowed, and would ignore it.
            const parentTemplate = parentTemplates[parentTemplates.length - 1];
            if (parentTemplate.id !== resource.id && parentTemplates.some((u) => u.id === resource.id)) {
                const errorMsg = `${templateErrors_1.TemplateErrors.loopDetected} ${resource.id} => ${start.id}`;
                const diagnostic = new diagnostic_1.Diagnostic(importItem.sourceRange.range, errorMsg, diagnostic_1.DiagnosticSeverity.Error, start.source);
                throw new templateException_1.TemplateException(errorMsg, [diagnostic]);
            }
            if (importItem.alias) {
                // Import as alias
                // Append import templates into namedReferences property
                const childResource = this.innerParseResource(resource, start.importResolver, start.expressionParser, cachedTemplates, parentTemplates);
                start.namedReferences[importItem.alias] = childResource;
                continue;
            }
            // normal import
            if (Array.from(resourcesFound).every((u) => u.id !== resource.id)) {
                let childResource;
                if (cachedTemplates.has(resource.id)) {
                    childResource = cachedTemplates.get(resource.id);
                }
                else {
                    childResource = TemplatesParser.innerParseResource(resource, start.importResolver, start.expressionParser, cachedTemplates, parentTemplates);
                    cachedTemplates.set(resource.id, childResource);
                }
                this.resolveImportResources(childResource, resourcesFound, cachedTemplates, parentTemplates);
            }
        }
        parentTemplates.pop();
    }
}
/**
 * Inline text id.
 */
TemplatesParser.inlineContentId = 'inline content';
/**
 * option regex.
 */
TemplatesParser.optionRegex = new RegExp(/>\s*!#(.*)$/);
/**
 * Import regex.
 */
TemplatesParser.importRegex = new RegExp(/\[([^\]]*)\]\(([^)]*)\)([\w\s]*)/);
exports.TemplatesParser = TemplatesParser;
/**
 * Templates transformer. Add more details and body context into the templates object.
 */
class TemplatesTransformer extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [TemplatesTransformer](xref:botbuilder-lg.TemplatesTransformer) class.
     * @param templates Templates.
     */
    constructor(templates) {
        super();
        this.identifierRegex = new RegExp(/^[0-9a-zA-Z_]+$/);
        this.templateNamePartRegex = new RegExp(/^[a-zA-Z_][0-9a-zA-Z_]*$/);
        this.templates = templates;
    }
    /**
     * Transform the parse tree into templates.
     * @param parseTree Input abstract syntax tree.
     */
    transform(parseTree) {
        if (parseTree) {
            this.visit(parseTree);
        }
        const templateCount = this.templates.toArray().length;
        let currentIndex = 0;
        for (const template of this.templates) {
            currentIndex++;
            if (currentIndex < templateCount) {
                template.body = this.removeTrailingNewline(template.body);
            }
        }
        return this.templates;
    }
    /**
     * Gets the default value returned by visitor methods.
     * Method not implemented.
     */
    defaultResult() {
        return;
    }
    /**
     * Visit a parse tree produced by `LGFileParser.errorDefinition`.
     * @param context The parse tree.
     */
    visitErrorDefinition(context) {
        const lineContent = context.INVALID_LINE().text;
        if (lineContent === undefined || lineContent.trim() === '') {
            this.templates.diagnostics.push(this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.syntaxError(`Unexpected content: '${lineContent}'`), context));
        }
    }
    /**
     * Visit a parse tree produced by `LGFileParser.importDefinition`.
     * @param context The parse tree.
     */
    visitImportDefinition(context) {
        const importStr = context.IMPORT().text;
        const groups = importStr.match(TemplatesParser.importRegex);
        if (!groups || (groups.length !== 3 && groups.length !== 4)) {
            this.templates.diagnostics.push(this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.importFormatError, context));
            return;
        }
        const description = groups[1].trim();
        const id = groups[2].trim();
        const sourceRange = new sourceRange_1.SourceRange(context, this.templates.source);
        const templateImport = new templateImport_1.TemplateImport(description, id, sourceRange);
        if (groups.length === 4) {
            const asAlias = groups[3].trim();
            if (asAlias) {
                const asAliasArray = asAlias.split(/\s+/);
                if (asAliasArray.length !== 2 || asAliasArray[0] !== 'as') {
                    this.templates.diagnostics.push(this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.importFormatError, context));
                    return;
                }
                else {
                    templateImport.alias = asAliasArray[1].trim();
                }
            }
        }
        this.templates.imports.push(templateImport);
    }
    /**
     * Visit a parse tree produced by `LGFileParser.optionDefinition`.
     * @param context The parse tree.
     */
    visitOptionDefinition(context) {
        const optionStr = context.OPTION().text;
        let result = '';
        if (optionStr != undefined && optionStr.trim() !== '') {
            const groups = optionStr.match(TemplatesParser.optionRegex);
            if (groups && groups.length === 2) {
                result = groups[1].trim();
            }
        }
        if (result.trim() !== '') {
            this.templates.options.push(result);
        }
    }
    /**
     * Visit a parse tree produced by `LGFileParser.templateDefinition`.
     * @param context The parse tree.
     */
    visitTemplateDefinition(context) {
        const startLine = context.start.line;
        const templateNameLine = context.templateNameLine().TEMPLATE_NAME_LINE().text;
        const { templateName, parameters } = this.extractTemplateNameLine(templateNameLine);
        if (this.templates.toArray().some((u) => u.name === templateName)) {
            const diagnostic = this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.duplicatedTemplateInSameTemplate(templateName), context.templateNameLine());
            this.templates.diagnostics.push(diagnostic);
        }
        else {
            const templateBody = context.templateBody().text;
            const sourceRange = new sourceRange_1.SourceRange(context, this.templates.source);
            const template = new template_1.Template(templateName, parameters, templateBody, sourceRange);
            this.checkTemplateName(templateName, context.templateNameLine());
            this.checkTemplateParameters(parameters, context.templateNameLine());
            this.checkTemplateBody(template, context.templateBody(), startLine);
            this.templates.push(template);
        }
    }
    /**
     * @private
     */
    checkTemplateName(templateName, context) {
        const functionNameSplitDot = templateName.split('.');
        for (const id of functionNameSplitDot) {
            if (!this.templateNamePartRegex.test(id)) {
                const diagnostic = this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.invalidTemplateName(templateName), context);
                this.templates.diagnostics.push(diagnostic);
                break;
            }
        }
    }
    /**
     * @private
     */
    checkTemplateParameters(parameters, context) {
        for (const parameter of parameters) {
            if (!this.identifierRegex.test(parameter)) {
                const diagnostic = this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.invalidParameter(parameter), context);
                this.templates.diagnostics.push(diagnostic);
            }
        }
    }
    /**
     * @private
     */
    checkTemplateBody(template, context, startLine) {
        if (template.body === undefined || template.body.trim() === '') {
            const diagnostic = this.buildTemplatesDiagnostic(templateErrors_1.TemplateErrors.noTemplateBody(template.name), context, diagnostic_1.DiagnosticSeverity.Warning);
            this.templates.diagnostics.push(diagnostic);
        }
        else {
            try {
                const templateBodyContext = this.antlrParseTemplate(template.body, startLine);
                if (templateBodyContext) {
                    template.templateBodyParseTree = templateBodyContext;
                    template = new TemplateBodyTransformer(template).transform();
                }
            }
            catch (error) {
                if (error instanceof templateException_1.TemplateException) {
                    this.templates.diagnostics.push(...error.getDiagnostic());
                }
                else {
                    throw error;
                }
            }
        }
        return undefined;
    }
    /**
     * @private
     */
    antlrParseTemplate(templateBody, startLine) {
        const input = new ANTLRInputStream_1.ANTLRInputStream(templateBody);
        const lexer = new LGTemplateLexer_1.LGTemplateLexer(input);
        lexer.removeErrorListeners();
        const tokens = new CommonTokenStream_1.CommonTokenStream(lexer);
        const parser = new LGTemplateParser_1.LGTemplateParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(new errorListener_1.ErrorListener(this.templates.source, startLine));
        parser.buildParseTree = true;
        return parser.template().body();
    }
    /**
     * @private
     */
    removeTrailingNewline(templateBody) {
        // remove the end newline of middle template.
        let result = templateBody;
        if (result.endsWith('\n')) {
            result = result.substr(0, result.length - 1);
            if (result.endsWith('\r')) {
                result = result.substr(0, result.length - 1);
            }
        }
        return result;
    }
    /**
     * @private
     */
    extractTemplateNameLine(templateNameLine) {
        const hashIndex = templateNameLine.indexOf('#');
        templateNameLine = templateNameLine.substr(hashIndex + 1).trim();
        let templateName = templateNameLine;
        let parameters = [];
        const leftBracketIndex = templateNameLine.indexOf('(');
        if (leftBracketIndex >= 0 && templateNameLine.endsWith(')')) {
            templateName = templateNameLine.substr(0, leftBracketIndex).trim();
            const paramStr = templateNameLine.substr(leftBracketIndex + 1, templateNameLine.length - leftBracketIndex - 2);
            if (paramStr !== undefined && paramStr.trim() !== '') {
                parameters = paramStr.split(',').map((u) => u.trim());
            }
        }
        return { templateName, parameters };
    }
    /**
     * @private
     */
    buildTemplatesDiagnostic(errorMessage, context, severity = diagnostic_1.DiagnosticSeverity.Error) {
        return new diagnostic_1.Diagnostic(templateExtensions_1.TemplateExtensions.convertToRange(context), errorMessage, severity, this.templates.source);
    }
}
exports.TemplatesTransformer = TemplatesTransformer;
class TemplateBodyTransformer extends tree_1.AbstractParseTreeVisitor {
    constructor(template) {
        super();
        this._template = template;
    }
    defaultResult() {
    }
    transform() {
        this.visit(this._template.templateBodyParseTree);
        return this._template;
    }
    visitStructuredTemplateBody(context) {
        if (!context.structuredBodyNameLine().errorStructuredName()
            && context.structuredBodyEndLine()
            && (!context.errorStructureLine() || context.errorStructureLine().length === 0)
            && (context.structuredBodyContentLine() && context.structuredBodyContentLine().length > 0)) {
            const bodys = context.structuredBodyContentLine();
            for (const body of bodys) {
                if (body.keyValueStructureLine()) {
                    const structureKey = body.keyValueStructureLine().STRUCTURE_IDENTIFIER();
                    const structureValues = body.keyValueStructureLine().keyValueStructureValue();
                    const typeName = context.structuredBodyNameLine().STRUCTURE_NAME().text.trim();
                    this.fillInProperties(structureKey.text.trim(), structureValues, typeName);
                }
            }
        }
    }
    fillInProperties(key, structureValues, name) {
        if (!this._template.properties) {
            this._template.properties = {};
        }
        this._template.properties['$type'] = name;
        if (structureValues.length === 1) {
            this._template.properties[key] = structureValues[0].text;
        }
        else if (structureValues.length > 1) {
            this._template.properties[key] = structureValues.map(u => u.text);
        }
    }
}

},{"./diagnostic":161,"./errorListener":162,"./generated/LGFileLexer":168,"./generated/LGFileParser":169,"./generated/LGTemplateLexer":170,"./generated/LGTemplateParser":171,"./lgResource":174,"./sourceRange":178,"./staticChecker":179,"./template":180,"./templateErrors":181,"./templateException":182,"./templateExtensions":183,"./templateImport":184,"./templates":185,"antlr4ts/ANTLRInputStream":3,"antlr4ts/CommonTokenStream":11,"antlr4ts/tree":134,"fs":187,"path":204}],187:[function(require,module,exports){

},{}],188:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":189,"get-intrinsic":194}],189:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":193,"get-intrinsic":194}],190:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":194}],191:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],192:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],193:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":192}],194:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":193,"has":197,"has-symbols":195}],195:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":196}],196:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],197:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":193}],198:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],199:[function(require,module,exports){
'use strict';

var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"call-bind/callBound":188}],200:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

},{}],201:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasSymbols = require('has-symbols')();
var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';

var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new global[typedArray]();
		if (!(Symbol.toStringTag in arr)) {
			throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
		}
		var proto = getPrototypeOf(arr);
		var descriptor = gOPD(proto, Symbol.toStringTag);
		if (!descriptor) {
			var superProto = getPrototypeOf(proto);
			descriptor = gOPD(superProto, Symbol.toStringTag);
		}
		toStrTags[typedArray] = descriptor.get;
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":157,"call-bind/callBound":188,"es-abstract/helpers/getOwnPropertyDescriptor":190,"foreach":191,"has-symbols":195}],202:[function(require,module,exports){
(function (global){(function (){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],203:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],204:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":205}],205:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],206:[function(require,module,exports){
arguments[4][155][0].apply(exports,arguments)
},{"dup":155}],207:[function(require,module,exports){
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

'use strict';

var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});

},{"is-arguments":199,"is-generator-function":200,"is-typed-array":201,"which-typed-array":224}],208:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

}).call(this)}).call(this,require('_process'))
},{"./support/isBuffer":206,"./support/types":207,"_process":205,"inherits":198}],209:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nil.js":211,"./parse.js":212,"./stringify.js":216,"./v1.js":217,"./v3.js":218,"./v4.js":220,"./v5.js":221,"./validate.js":222,"./version.js":223}],210:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = '0123456789abcdef';

  for (let i = 0; i < length32; i += 8) {
    const x = input[i >> 5] >>> i % 32 & 0xff;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;

  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));

  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  const lsw = (x & 0xffff) + (y & 0xffff);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],211:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],212:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":222}],213:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],214:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],215:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],216:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":222}],217:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":214,"./stringify.js":216}],218:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./md5.js":210,"./v35.js":219}],219:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./parse.js":212,"./stringify.js":216}],220:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./rng.js":214,"./stringify.js":216}],221:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./sha1.js":215,"./v35.js":219}],222:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":213}],223:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":222}],224:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasSymbols = require('has-symbols')();
var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';

var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof global[typedArray] === 'function') {
			var arr = new global[typedArray]();
			if (!(Symbol.toStringTag in arr)) {
				throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
			}
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = require('is-typed-array');

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":157,"call-bind/callBound":188,"es-abstract/helpers/getOwnPropertyDescriptor":190,"foreach":191,"has-symbols":195,"is-typed-array":201}]},{},[1]);
